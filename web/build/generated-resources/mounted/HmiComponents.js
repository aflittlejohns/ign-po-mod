!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("PerspectiveClient"),require("React")):"function"==typeof define&&define.amd?define("HmiComponents",["PerspectiveClient","React"],t):"object"==typeof exports?exports.HmiComponents=t(require("PerspectiveClient"),require("React")):e.HmiComponents=t(e.PerspectiveClient,e.React)}(self,((e,t)=>(()=>{var n={11:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.unsafeStringify=void 0;const r=n(746),o=[];for(let e=0;e<256;++e)o.push((e+256).toString(16).slice(1));function a(e,t=0){return(o[e[t+0]]+o[e[t+1]]+o[e[t+2]]+o[e[t+3]]+"-"+o[e[t+4]]+o[e[t+5]]+"-"+o[e[t+6]]+o[e[t+7]]+"-"+o[e[t+8]]+o[e[t+9]]+"-"+o[e[t+10]]+o[e[t+11]]+o[e[t+12]]+o[e[t+13]]+o[e[t+14]]+o[e[t+15]]).toLowerCase()}t.unsafeStringify=a,t.default=function(e,t=0){const n=a(e,t);if(!(0,r.default)(n))throw TypeError("Stringified UUID is invalid");return n}},124:e=>{"use strict";var t,n=Object.defineProperty,r=Object.getOwnPropertyDescriptor,o=Object.getOwnPropertyNames,a=Object.prototype.hasOwnProperty,i={};((e,t)=>{for(var r in t)n(e,r,{get:t[r],enumerable:!0})})(i,{Immer:()=>H,applyPatches:()=>ie,castDraft:()=>ue,castImmutable:()=>ce,createDraft:()=>le,current:()=>J,enableMapSet:()=>ee,enablePatches:()=>Z,finishDraft:()=>se,freeze:()=>w,immerable:()=>s,isDraft:()=>p,isDraftable:()=>d,nothing:()=>l,original:()=>b,produce:()=>ne,produceWithPatches:()=>re,setAutoFreeze:()=>oe,setUseStrictShallowCopy:()=>ae}),e.exports=(t=i,((e,t,i,l)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let i of o(t))!a.call(e,i)&&undefined!==i&&n(e,i,{get:()=>t[i],enumerable:!(l=r(t,i))||l.enumerable});return e})(n({},"__esModule",{value:!0}),t));var l=Symbol.for("immer-nothing"),s=Symbol.for("immer-draftable"),u=Symbol.for("immer-state");function c(e,...t){throw new Error(`[Immer] minified error nr: ${e}. Full error at: https://bit.ly/3cXEKWf`)}var f=Object.getPrototypeOf;function p(e){return!!e&&!!e[u]}function d(e){return!!e&&(m(e)||Array.isArray(e)||!!e[s]||!!e.constructor?.[s]||O(e)||_(e))}var v=Object.prototype.constructor.toString();function m(e){if(!e||"object"!=typeof e)return!1;let t=f(e);if(null===t)return!0;let n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return n===Object||"function"==typeof n&&Function.toString.call(n)===v}function b(e){return p(e)||c(15),e[u].t}function h(e,t){0===y(e)?Reflect.ownKeys(e).forEach((n=>{t(n,e[n],e)})):e.forEach(((n,r)=>t(r,n,e)))}function y(e){let t=e[u];return t?t.o:Array.isArray(e)?1:O(e)?2:_(e)?3:0}function g(e,t){return 2===y(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function P(e,t){return 2===y(e)?e.get(t):e[t]}function A(e,t,n){let r=y(e);2===r?e.set(t,n):3===r?e.add(n):e[t]=n}function O(e){return e instanceof Map}function _(e){return e instanceof Set}function M(e){return e.e||e.t}function E(e,t){if(O(e))return new Map(e);if(_(e))return new Set(e);if(Array.isArray(e))return Array.prototype.slice.call(e);let n=m(e);if(!0===t||"class_only"===t&&!n){let t=Object.getOwnPropertyDescriptors(e);delete t[u];let n=Reflect.ownKeys(t);for(let r=0;r<n.length;r++){let o=n[r],a=t[o];!1===a.writable&&(a.writable=!0,a.configurable=!0),(a.get||a.set)&&(t[o]={configurable:!0,writable:!0,enumerable:a.enumerable,value:e[o]})}return Object.create(f(e),t)}{let t=f(e);if(null!==t&&n)return{...e};let r=Object.create(t);return Object.assign(r,e)}}function w(e,t=!1){return S(e)||p(e)||!d(e)||(y(e)>1&&(e.set=e.add=e.clear=e.delete=N),Object.freeze(e),t&&Object.entries(e).forEach((([e,t])=>w(t,!0)))),e}function N(){c(2)}function S(e){return Object.isFrozen(e)}var C,j={};function V(e){let t=j[e];return t||c(0),t}function U(e,t){j[e]||(j[e]=t)}function I(){return C}function D(e,t){t&&(V("Patches"),e.f=[],e.h=[],e.b=t)}function T(e){x(e),e.a.forEach(B),e.a=null}function x(e){e===C&&(C=e.i)}function L(e){return C=function(e,t){return{a:[],i:e,p:t,P:!0,d:0}}(C,e)}function B(e){let t=e[u];0===t.o||1===t.o?t.x():t.m=!0}function k(e,t){t.d=t.a.length;let n=t.a[0];return void 0!==e&&e!==n?(n[u].s&&(T(t),c(4)),d(e)&&(e=R(t,e),t.i||z(t,e)),t.f&&V("Patches").T(n[u].t,e,t.f,t.h)):e=R(t,n,[]),T(t),t.f&&t.b(t.f,t.h),e!==l?e:void 0}function R(e,t,n){if(S(t))return t;let r=t[u];if(!r)return h(t,((o,a)=>F(e,r,t,o,a,n))),t;if(r.n!==e)return t;if(!r.s)return z(e,r.t,!0),r.t;if(!r.c){r.c=!0,r.n.d--;let t=r.e,o=t,a=!1;3===r.o&&(o=new Set(t),t.clear(),a=!0),h(o,((o,i)=>F(e,r,t,o,i,n,a))),z(e,t,!1),n&&e.f&&V("Patches").g(r,n,e.f,e.h)}return r.e}function F(e,t,n,r,o,a,i){if(p(o)){let i=R(e,o,a&&t&&3!==t.o&&!g(t.r,r)?a.concat(r):void 0);if(A(n,r,i),!p(i))return;e.P=!1}else i&&n.add(o);if(d(o)&&!S(o)){if(!e.p.y&&e.d<1)return;R(e,o),(!t||!t.n.i)&&"symbol"!=typeof r&&Object.prototype.propertyIsEnumerable.call(n,r)&&z(e,o)}}function z(e,t,n=!1){!e.i&&e.p.y&&e.P&&w(t,n)}var $={get(e,t){if(t===u)return e;let n=M(e);if(!g(n,t))return function(e,t,n){let r=G(t,n);return r?"value"in r?r.value:r.get?.call(e.u):void 0}(e,n,t);let r=n[t];return e.c||!d(r)?r:r===Y(e.t,t)?(X(e),e.e[t]=W(r,e)):r},has:(e,t)=>t in M(e),ownKeys:e=>Reflect.ownKeys(M(e)),set(e,t,n){let r=G(M(e),t);if(r?.set)return r.set.call(e.u,n),!0;if(!e.s){let r=Y(M(e),t),o=r?.[u];if(o&&o.t===n)return e.e[t]=n,e.r[t]=!1,!0;if(function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}(n,r)&&(void 0!==n||g(e.t,t)))return!0;X(e),K(e)}return e.e[t]===n&&(void 0!==n||t in e.e)||Number.isNaN(n)&&Number.isNaN(e.e[t])||(e.e[t]=n,e.r[t]=!0),!0},deleteProperty:(e,t)=>(void 0!==Y(e.t,t)||t in e.t?(e.r[t]=!1,X(e),K(e)):delete e.r[t],e.e&&delete e.e[t],!0),getOwnPropertyDescriptor(e,t){let n=M(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r&&{writable:!0,configurable:1!==e.o||"length"!==t,enumerable:r.enumerable,value:n[t]}},defineProperty(){c(11)},getPrototypeOf:e=>f(e.t),setPrototypeOf(){c(12)}},q={};function Y(e,t){let n=e[u];return(n?M(n):e)[t]}function G(e,t){if(!(t in e))return;let n=f(e);for(;n;){let e=Object.getOwnPropertyDescriptor(n,t);if(e)return e;n=f(n)}}function K(e){e.s||(e.s=!0,e.i&&K(e.i))}function X(e){e.e||(e.e=E(e.t,e.n.p.S))}h($,((e,t)=>{q[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),q.deleteProperty=function(e,t){return q.set.call(this,e,t,void 0)},q.set=function(e,t,n){return $.set.call(this,e[0],t,n,e[0])};var H=class{constructor(e){this.y=!0,this.S=!1,this.produce=(e,t,n)=>{if("function"==typeof e&&"function"!=typeof t){let n=t;t=e;let r=this;return function(e=n,...o){return r.produce(e,(e=>t.call(this,e,...o)))}}let r;if("function"!=typeof t&&c(6),void 0!==n&&"function"!=typeof n&&c(7),d(e)){let o=L(this),a=W(e,void 0),i=!0;try{r=t(a),i=!1}finally{i?T(o):x(o)}return D(o,n),k(r,o)}if(!e||"object"!=typeof e){if(r=t(e),void 0===r&&(r=e),r===l&&(r=void 0),this.y&&w(r,!0),n){let t=[],o=[];V("Patches").T(e,r,t,o),n(t,o)}return r}c(1)},this.produceWithPatches=(e,t)=>{if("function"==typeof e)return(t,...n)=>this.produceWithPatches(t,(t=>e(t,...n)));let n,r;return[this.produce(e,t,((e,t)=>{n=e,r=t})),n,r]},"boolean"==typeof e?.autoFreeze&&this.setAutoFreeze(e.autoFreeze),"boolean"==typeof e?.useStrictShallowCopy&&this.setUseStrictShallowCopy(e.useStrictShallowCopy)}createDraft(e){d(e)||c(8),p(e)&&(e=J(e));let t=L(this),n=W(e,void 0);return n[u].l=!0,x(t),n}finishDraft(e,t){let n=e&&e[u];(!n||!n.l)&&c(9);let{n:r}=n;return D(r,t),k(void 0,r)}setAutoFreeze(e){this.y=e}setUseStrictShallowCopy(e){this.S=e}applyPatches(e,t){let n;for(n=t.length-1;n>=0;n--){let r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}n>-1&&(t=t.slice(n+1));let r=V("Patches").A;return p(e)?r(e,t):this.produce(e,(e=>r(e,t)))}};function W(e,t){let n=O(e)?V("MapSet").I(e,t):_(e)?V("MapSet").D(e,t):function(e,t){let n=Array.isArray(e),r={o:n?1:0,n:t?t.n:I(),s:!1,c:!1,r:{},i:t,t:e,u:null,e:null,x:null,l:!1},o=r,a=$;n&&(o=[r],a=q);let{revoke:i,proxy:l}=Proxy.revocable(o,a);return r.u=l,r.x=i,l}(e,t);return(t?t.n:I()).a.push(n),n}function J(e){return p(e)||c(10),Q(e)}function Q(e){if(!d(e)||S(e))return e;let t,n=e[u];if(n){if(!n.s)return n.t;n.c=!0,t=E(e,n.n.p.S)}else t=E(e,!0);return h(t,((e,n)=>{A(t,e,Q(n))})),n&&(n.c=!1),t}function Z(){let e="replace",t="add",n="remove";function r(e){if(!d(e))return e;if(Array.isArray(e))return e.map(r);if(O(e))return new Map(Array.from(e.entries()).map((([e,t])=>[e,r(t)])));if(_(e))return new Set(Array.from(e).map(r));let t=Object.create(f(e));for(let n in e)t[n]=r(e[n]);return g(e,s)&&(t[s]=e[s]),t}function o(e){return p(e)?r(e):e}U("Patches",{A:function(o,a){return a.forEach((a=>{let{path:i,op:l}=a,s=o;for(let e=0;e<i.length-1;e++){let t=y(s),n=i[e];"string"!=typeof n&&"number"!=typeof n&&(n=""+n),(0===t||1===t)&&("__proto__"===n||"constructor"===n)&&c(19),"function"==typeof s&&"prototype"===n&&c(19),s=P(s,n),"object"!=typeof s&&c(18,i.join("/"))}let u=y(s),f=r(a.value),p=i[i.length-1];switch(l){case e:switch(u){case 2:return s.set(p,f);case 3:c(16);default:return s[p]=f}case t:switch(u){case 1:return"-"===p?s.push(f):s.splice(p,0,f);case 2:return s.set(p,f);case 3:return s.add(f);default:return s[p]=f}case n:switch(u){case 1:return s.splice(p,1);case 2:return s.delete(p);case 3:return s.delete(a.value);default:return delete s[p]}default:c(17)}})),o},g:function(r,a,i,l){switch(r.o){case 0:case 2:return function(r,a,i,l){let{t:s,e:u}=r;h(r.r,((r,c)=>{let f=P(s,r),p=P(u,r),d=c?g(s,r)?e:t:n;if(f===p&&d===e)return;let v=a.concat(r);i.push(d===n?{op:d,path:v}:{op:d,path:v,value:p}),l.push(d===t?{op:n,path:v}:d===n?{op:t,path:v,value:o(f)}:{op:e,path:v,value:o(f)})}))}(r,a,i,l);case 1:return function(r,a,i,l){let{t:s,r:u}=r,c=r.e;c.length<s.length&&([s,c]=[c,s],[i,l]=[l,i]);for(let t=0;t<s.length;t++)if(u[t]&&c[t]!==s[t]){let n=a.concat([t]);i.push({op:e,path:n,value:o(c[t])}),l.push({op:e,path:n,value:o(s[t])})}for(let e=s.length;e<c.length;e++){let n=a.concat([e]);i.push({op:t,path:n,value:o(c[e])})}for(let e=c.length-1;s.length<=e;--e){let t=a.concat([e]);l.push({op:n,path:t})}}(r,a,i,l);case 3:return function(e,r,o,a){let{t:i,e:l}=e,s=0;i.forEach((e=>{if(!l.has(e)){let i=r.concat([s]);o.push({op:n,path:i,value:e}),a.unshift({op:t,path:i,value:e})}s++})),s=0,l.forEach((e=>{if(!i.has(e)){let i=r.concat([s]);o.push({op:t,path:i,value:e}),a.unshift({op:n,path:i,value:e})}s++}))}(r,a,i,l)}},T:function(t,n,r,o){r.push({op:e,path:[],value:n===l?void 0:n}),o.push({op:e,path:[],value:t})}})}function ee(){class e extends Map{constructor(e,t){super(),this[u]={o:2,i:t,n:t?t.n:I(),s:!1,c:!1,e:void 0,r:void 0,t:e,u:this,l:!1,m:!1}}get size(){return M(this[u]).size}has(e){return M(this[u]).has(e)}set(e,n){let r=this[u];return o(r),(!M(r).has(e)||M(r).get(e)!==n)&&(t(r),K(r),r.r.set(e,!0),r.e.set(e,n),r.r.set(e,!0)),this}delete(e){if(!this.has(e))return!1;let n=this[u];return o(n),t(n),K(n),n.t.has(e)?n.r.set(e,!1):n.r.delete(e),n.e.delete(e),!0}clear(){let e=this[u];o(e),M(e).size&&(t(e),K(e),e.r=new Map,h(e.t,(t=>{e.r.set(t,!1)})),e.e.clear())}forEach(e,t){M(this[u]).forEach(((n,r,o)=>{e.call(t,this.get(r),r,this)}))}get(e){let n=this[u];o(n);let r=M(n).get(e);if(n.c||!d(r)||r!==n.t.get(e))return r;let a=W(r,n);return t(n),n.e.set(e,a),a}keys(){return M(this[u]).keys()}values(){let e=this.keys();return{[Symbol.iterator]:()=>this.values(),next:()=>{let t=e.next();return t.done?t:{done:!1,value:this.get(t.value)}}}}entries(){let e=this.keys();return{[Symbol.iterator]:()=>this.entries(),next:()=>{let t=e.next();if(t.done)return t;let n=this.get(t.value);return{done:!1,value:[t.value,n]}}}}[Symbol.iterator](){return this.entries()}}function t(e){e.e||(e.r=new Map,e.e=new Map(e.t))}class n extends Set{constructor(e,t){super(),this[u]={o:3,i:t,n:t?t.n:I(),s:!1,c:!1,e:void 0,t:e,u:this,a:new Map,m:!1,l:!1}}get size(){return M(this[u]).size}has(e){let t=this[u];return o(t),t.e?!!(t.e.has(e)||t.a.has(e)&&t.e.has(t.a.get(e))):t.t.has(e)}add(e){let t=this[u];return o(t),this.has(e)||(r(t),K(t),t.e.add(e)),this}delete(e){if(!this.has(e))return!1;let t=this[u];return o(t),r(t),K(t),t.e.delete(e)||!!t.a.has(e)&&t.e.delete(t.a.get(e))}clear(){let e=this[u];o(e),M(e).size&&(r(e),K(e),e.e.clear())}values(){let e=this[u];return o(e),r(e),e.e.values()}entries(){let e=this[u];return o(e),r(e),e.e.entries()}keys(){return this.values()}[Symbol.iterator](){return this.values()}forEach(e,t){let n=this.values(),r=n.next();for(;!r.done;)e.call(t,r.value,r.value,this),r=n.next()}}function r(e){e.e||(e.e=new Set,e.t.forEach((t=>{if(d(t)){let n=W(t,e);e.a.set(t,n),e.e.add(n)}else e.e.add(t)})))}function o(e){e.m&&c(3,JSON.stringify(M(e)))}U("MapSet",{I:function(t,n){return new e(t,n)},D:function(e,t){return new n(e,t)}})}var te=new H,ne=te.produce,re=te.produceWithPatches.bind(te),oe=te.setAutoFreeze.bind(te),ae=te.setUseStrictShallowCopy.bind(te),ie=te.applyPatches.bind(te),le=te.createDraft.bind(te),se=te.finishDraft.bind(te);function ue(e){return e}function ce(e){return e}},152:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(883),o=({itemClassName:e,handleClick:t})=>r.createElement("div",{className:e,onClick:t});o.displayName="Item",t.default=o},182:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.version=t.validate=t.v7=t.v6ToV1=t.v6=t.v5=t.v4=t.v3=t.v1ToV6=t.v1=t.stringify=t.parse=t.NIL=t.MAX=void 0;var r=n(196);Object.defineProperty(t,"MAX",{enumerable:!0,get:function(){return r.default}});var o=n(465);Object.defineProperty(t,"NIL",{enumerable:!0,get:function(){return o.default}});var a=n(797);Object.defineProperty(t,"parse",{enumerable:!0,get:function(){return a.default}});var i=n(11);Object.defineProperty(t,"stringify",{enumerable:!0,get:function(){return i.default}});var l=n(425);Object.defineProperty(t,"v1",{enumerable:!0,get:function(){return l.default}});var s=n(568);Object.defineProperty(t,"v1ToV6",{enumerable:!0,get:function(){return s.default}});var u=n(591);Object.defineProperty(t,"v3",{enumerable:!0,get:function(){return u.default}});var c=n(286);Object.defineProperty(t,"v4",{enumerable:!0,get:function(){return c.default}});var f=n(557);Object.defineProperty(t,"v5",{enumerable:!0,get:function(){return f.default}});var p=n(356);Object.defineProperty(t,"v6",{enumerable:!0,get:function(){return p.default}});var d=n(268);Object.defineProperty(t,"v6ToV1",{enumerable:!0,get:function(){return d.default}});var v=n(299);Object.defineProperty(t,"v7",{enumerable:!0,get:function(){return v.default}});var m=n(746);Object.defineProperty(t,"validate",{enumerable:!0,get:function(){return m.default}});var b=n(770);Object.defineProperty(t,"version",{enumerable:!0,get:function(){return b.default}})},196:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="ffffffff-ffff-ffff-ffff-ffffffffffff"},268:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(797),o=n(11);t.default=function(e){const t=(n="string"==typeof e?(0,r.default)(e):e,Uint8Array.of((15&n[3])<<4|n[4]>>4&15,(15&n[4])<<4|(240&n[5])>>4,(15&n[5])<<4|15&n[6],n[7],(15&n[1])<<4|(240&n[2])>>4,(15&n[2])<<4|(240&n[3])>>4,16|(240&n[0])>>4,(15&n[0])<<4|(240&n[1])>>4,n[8],n[9],n[10],n[11],n[12],n[13],n[14],n[15]));var n;return"string"==typeof e?(0,o.unsafeStringify)(t):t}},286:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(779),o=n(291),a=n(11);t.default=function(e,t,n){if(r.default.randomUUID&&!t&&!e)return r.default.randomUUID();const i=(e=e||{}).random??e.rng?.()??(0,o.default)();if(i.length<16)throw new Error("Random bytes length must be >= 16");if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,t){if((n=n||0)<0||n+16>t.length)throw new RangeError(`UUID byte range ${n}:${n+15} is out of buffer bounds`);for(let e=0;e<16;++e)t[n+e]=i[e];return t}return(0,a.unsafeStringify)(i)}},291:(e,t)=>{"use strict";let n;Object.defineProperty(t,"__esModule",{value:!0});const r=new Uint8Array(16);t.default=function(){if(!n){if("undefined"==typeof crypto||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");n=crypto.getRandomValues.bind(crypto)}return n(r)}},299:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateV7State=void 0;const r=n(291),o=n(11),a={};function i(e,t,n){return e.msecs??=-1/0,e.seq??=0,t>e.msecs?(e.seq=n[6]<<23|n[7]<<16|n[8]<<8|n[9],e.msecs=t):(e.seq=e.seq+1|0,0===e.seq&&e.msecs++),e}function l(e,t,n,r,o=0){if(e.length<16)throw new Error("Random bytes length must be >= 16");if(r){if(o<0||o+16>r.length)throw new RangeError(`UUID byte range ${o}:${o+15} is out of buffer bounds`)}else r=new Uint8Array(16),o=0;return t??=Date.now(),n??=127*e[6]<<24|e[7]<<16|e[8]<<8|e[9],r[o++]=t/1099511627776&255,r[o++]=t/4294967296&255,r[o++]=t/16777216&255,r[o++]=t/65536&255,r[o++]=t/256&255,r[o++]=255&t,r[o++]=112|n>>>28&15,r[o++]=n>>>20&255,r[o++]=128|n>>>14&63,r[o++]=n>>>6&255,r[o++]=n<<2&255|3&e[10],r[o++]=e[11],r[o++]=e[12],r[o++]=e[13],r[o++]=e[14],r[o++]=e[15],r}t.updateV7State=i,t.default=function(e,t,n){let s;if(e)s=l(e.random??e.rng?.()??(0,r.default)(),e.msecs,e.seq,t,n);else{const e=Date.now(),o=(0,r.default)();i(a,e,o),s=l(o,a.msecs,a.seq,t,n)}return t??(0,o.unsafeStringify)(s)}},338:(e,t)=>{"use strict";function n(e){return 14+(e+64>>>9<<4)+1}function r(e,t){const n=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(n>>16)<<16|65535&n}function o(e,t,n,o,a,i){return r((l=r(r(t,e),r(o,i)))<<(s=a)|l>>>32-s,n);var l,s}function a(e,t,n,r,a,i,l){return o(t&n|~t&r,e,t,a,i,l)}function i(e,t,n,r,a,i,l){return o(t&r|n&~r,e,t,a,i,l)}function l(e,t,n,r,a,i,l){return o(t^n^r,e,t,a,i,l)}function s(e,t,n,r,a,i,l){return o(n^(t|~r),e,t,a,i,l)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return function(e){const t=new Uint8Array(4*e.length);for(let n=0;n<4*e.length;n++)t[n]=e[n>>2]>>>n%4*8&255;return t}(function(e,t){const o=new Uint32Array(n(t)).fill(0);o.set(e),o[t>>5]|=128<<t%32,o[o.length-1]=t,e=o;let u=1732584193,c=-271733879,f=-1732584194,p=271733878;for(let t=0;t<e.length;t+=16){const n=u,o=c,d=f,v=p;u=a(u,c,f,p,e[t],7,-680876936),p=a(p,u,c,f,e[t+1],12,-389564586),f=a(f,p,u,c,e[t+2],17,606105819),c=a(c,f,p,u,e[t+3],22,-1044525330),u=a(u,c,f,p,e[t+4],7,-176418897),p=a(p,u,c,f,e[t+5],12,1200080426),f=a(f,p,u,c,e[t+6],17,-1473231341),c=a(c,f,p,u,e[t+7],22,-45705983),u=a(u,c,f,p,e[t+8],7,1770035416),p=a(p,u,c,f,e[t+9],12,-1958414417),f=a(f,p,u,c,e[t+10],17,-42063),c=a(c,f,p,u,e[t+11],22,-1990404162),u=a(u,c,f,p,e[t+12],7,1804603682),p=a(p,u,c,f,e[t+13],12,-40341101),f=a(f,p,u,c,e[t+14],17,-1502002290),c=a(c,f,p,u,e[t+15],22,1236535329),u=i(u,c,f,p,e[t+1],5,-165796510),p=i(p,u,c,f,e[t+6],9,-1069501632),f=i(f,p,u,c,e[t+11],14,643717713),c=i(c,f,p,u,e[t],20,-373897302),u=i(u,c,f,p,e[t+5],5,-701558691),p=i(p,u,c,f,e[t+10],9,38016083),f=i(f,p,u,c,e[t+15],14,-660478335),c=i(c,f,p,u,e[t+4],20,-405537848),u=i(u,c,f,p,e[t+9],5,568446438),p=i(p,u,c,f,e[t+14],9,-1019803690),f=i(f,p,u,c,e[t+3],14,-187363961),c=i(c,f,p,u,e[t+8],20,1163531501),u=i(u,c,f,p,e[t+13],5,-1444681467),p=i(p,u,c,f,e[t+2],9,-51403784),f=i(f,p,u,c,e[t+7],14,1735328473),c=i(c,f,p,u,e[t+12],20,-1926607734),u=l(u,c,f,p,e[t+5],4,-378558),p=l(p,u,c,f,e[t+8],11,-2022574463),f=l(f,p,u,c,e[t+11],16,1839030562),c=l(c,f,p,u,e[t+14],23,-35309556),u=l(u,c,f,p,e[t+1],4,-1530992060),p=l(p,u,c,f,e[t+4],11,1272893353),f=l(f,p,u,c,e[t+7],16,-155497632),c=l(c,f,p,u,e[t+10],23,-1094730640),u=l(u,c,f,p,e[t+13],4,681279174),p=l(p,u,c,f,e[t],11,-358537222),f=l(f,p,u,c,e[t+3],16,-722521979),c=l(c,f,p,u,e[t+6],23,76029189),u=l(u,c,f,p,e[t+9],4,-640364487),p=l(p,u,c,f,e[t+12],11,-421815835),f=l(f,p,u,c,e[t+15],16,530742520),c=l(c,f,p,u,e[t+2],23,-995338651),u=s(u,c,f,p,e[t],6,-198630844),p=s(p,u,c,f,e[t+7],10,1126891415),f=s(f,p,u,c,e[t+14],15,-1416354905),c=s(c,f,p,u,e[t+5],21,-57434055),u=s(u,c,f,p,e[t+12],6,1700485571),p=s(p,u,c,f,e[t+3],10,-1894986606),f=s(f,p,u,c,e[t+10],15,-1051523),c=s(c,f,p,u,e[t+1],21,-2054922799),u=s(u,c,f,p,e[t+8],6,1873313359),p=s(p,u,c,f,e[t+15],10,-30611744),f=s(f,p,u,c,e[t+6],15,-1560198380),c=s(c,f,p,u,e[t+13],21,1309151649),u=s(u,c,f,p,e[t+4],6,-145523070),p=s(p,u,c,f,e[t+11],10,-1120210379),f=s(f,p,u,c,e[t+2],15,718787259),c=s(c,f,p,u,e[t+9],21,-343485551),u=r(u,n),c=r(c,o),f=r(f,d),p=r(p,v)}return Uint32Array.of(u,c,f,p)}(function(e){if(0===e.length)return new Uint32Array;const t=new Uint32Array(n(8*e.length)).fill(0);for(let n=0;n<e.length;n++)t[n>>2]|=(255&e[n])<<n%4*8;return t}(e),8*e.length))}},348:(e,t,n)=>{var r=n(407),o=n(883);t.useImmer=function(e){var t=o.useState((function(){return r.freeze("function"==typeof e?e():e,!0)})),n=t[1];return[t[0],o.useCallback((function(e){n("function"==typeof e?r.produce(e):r.freeze(e))}),[])]},t.useImmerReducer=function(e,t,n){var a=o.useMemo((function(){return r.produce(e)}),[e]);return o.useReducer(a,t,n)}},356:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(11),o=n(425),a=n(568);t.default=function(e,t,n){e??={},n??=0;let i=(0,o.default)({...e,_v6:!0},new Uint8Array(16));if(i=(0,a.default)(i),t){for(let e=0;e<16;e++)t[n+e]=i[e];return t}return(0,r.unsafeStringify)(i)}},377:t=>{"use strict";t.exports=e},390:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.initialControlState=t.initialOffOnState=t.initialAutoManState=t.parameterInitialState=t.valveProps=t.processObjectProps=t.valveStatus=void 0,t.valveStatus={alarm:!1,actFB:!1,deActFB:!0,activatedConfig:7,deactivatedConfig:5,itemName:"VXXX",manual:!1,masked:!1,changing:!1,locate:!1},t.processObjectProps={status:t.valveStatus},t.valveProps={processObject:t.processObjectProps,handleClick:()=>{console.log("Valve clicked")},labelPosition:"left",showLabel:!1},t.parameterInitialState=[{label:{text:"label",className:"",tooltipText:"",tooltipPosition:"",tooltipClassName:"",tooltipId:""},input:{type:"text",inputmode:"numeric",placeholder:"Enter a number",editable:!0,pattern:"^[0-9]*[.,]?[0-9]*$",min:0,max:100,decimalPlaces:2,eu:"µC",value:0}}],t.initialAutoManState={auto:!0,manual:!1},t.initialOffOnState={off:!1,on:!1},t.initialControlState={main:Object.assign(Object.assign(Object.assign({},t.initialAutoManState),t.initialOffOnState),{label:"Main"}),upperSeat:Object.assign(Object.assign({},t.initialOffOnState),{label:"Upper Seat"}),lowerSeat:Object.assign(Object.assign({},t.initialOffOnState),{label:"Lower Seat"})}},407:(e,t,n)=>{"use strict";e.exports=n(124)},425:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateV1State=void 0;const r=n(291),o=n(11),a={};function i(e,t,n){return e.msecs??=-1/0,e.nsecs??=0,t===e.msecs?(e.nsecs++,e.nsecs>=1e4&&(e.node=void 0,e.nsecs=0)):t>e.msecs?e.nsecs=0:t<e.msecs&&(e.node=void 0),e.node||(e.node=n.slice(10,16),e.node[0]|=1,e.clockseq=16383&(n[8]<<8|n[9])),e.msecs=t,e}function l(e,t,n,r,o,a,i=0){if(e.length<16)throw new Error("Random bytes length must be >= 16");if(a){if(i<0||i+16>a.length)throw new RangeError(`UUID byte range ${i}:${i+15} is out of buffer bounds`)}else a=new Uint8Array(16),i=0;t??=Date.now(),n??=0,r??=16383&(e[8]<<8|e[9]),o??=e.slice(10,16);const l=(1e4*(268435455&(t+=122192928e5))+n)%4294967296;a[i++]=l>>>24&255,a[i++]=l>>>16&255,a[i++]=l>>>8&255,a[i++]=255&l;const s=t/4294967296*1e4&268435455;a[i++]=s>>>8&255,a[i++]=255&s,a[i++]=s>>>24&15|16,a[i++]=s>>>16&255,a[i++]=r>>>8|128,a[i++]=255&r;for(let e=0;e<6;++e)a[i++]=o[e];return a}t.updateV1State=i,t.default=function(e,t,n){let s;const u=e?._v6??!1;if(e){const t=Object.keys(e);1===t.length&&"_v6"===t[0]&&(e=void 0)}if(e)s=l(e.random??e.rng?.()??(0,r.default)(),e.msecs,e.nsecs,e.clockseq,e.node,t,n);else{const e=Date.now(),o=(0,r.default)();i(a,e,o),s=l(o,a.msecs,a.nsecs,u?void 0:a.clockseq,u?void 0:a.node,t,n)}return t??(0,o.unsafeStringify)(s)}},429:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getBoolAtIndex=void 0,t.getBoolAtIndex=(e,t)=>Boolean(e>>t&1)},465:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="00000000-0000-0000-0000-000000000000"},506:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getItemIdPositionClassName=t.valveMpItemNames=t.itemNames=t.getValveMpItemClassName=t.getItemClassName=void 0;const r=n(429),o=n(542),a=n(182);t.getItemClassName=(e,t)=>{var n,o;let a="";const i=null!==(n=null==t?void 0:t.activatedConfig)&&void 0!==n?n:0,l=null!==(o=null==t?void 0:t.deactivatedConfig)&&void 0!==o?o:0;return a=e<12?(0,r.getBoolAtIndex)(i,e)&&(null==t?void 0:t.actFB)||(0,r.getBoolAtIndex)(l,e)&&(null==t?void 0:t.deActFB)?"show item":"hide item":14===e?"show":12===e||13===e?(0,r.getBoolAtIndex)(i,e)||(0,r.getBoolAtIndex)(l,e)?"show":"hide":15===e||16===e?(0,r.getBoolAtIndex)(i,12)||(0,r.getBoolAtIndex)(l,12)?"show":"hide":17===e?(0,r.getBoolAtIndex)(i,13)||(0,r.getBoolAtIndex)(l,13)?"show":"hide":18===e&&((0,r.getBoolAtIndex)(i,13)||(0,r.getBoolAtIndex)(l,13))?"show":"hide",a.includes("show")&&!a.includes("item")&&((null==t?void 0:t.alarm)&&(a=a.replace("AlarmState","")+" AlarmState"),(null==t?void 0:t.changing)&&(a=a.replace("Changing","")+" Changing"),(null==t?void 0:t.manual)&&(a=a.replace("Manual","")+" Manual"),(null==t?void 0:t.masked)&&!t.alarm&&(a=a.replace("NoAlarmMask","")+" NoAlarmMask"),(null==t?void 0:t.masked)&&(a=a.replace("Masked","")+" Masked"),(null==t?void 0:t.actFB)&&(a=a.replace("Activated","")+" Activated"),(null==t?void 0:t.deActFB)&&(a=a.replace("Deactivated","")+" Deactivated"),(null==t?void 0:t.locate)&&(a=a.replace("circle","")+" circle")),a},t.getValveMpItemClassName=(e,t)=>{var n,o;let a="";const i=null!==(n=null==t?void 0:t.activatedConfig)&&void 0!==n?n:0,l=null!==(o=null==t?void 0:t.deactivatedConfig)&&void 0!==o?o:0;return e<8?a=(0,r.getBoolAtIndex)(i,e)&&(null==t?void 0:t.actFB)||(0,r.getBoolAtIndex)(l,e)&&(null==t?void 0:t.deActFB)?"show item":"hide item":9===e?a="show":8===e?a=(0,r.getBoolAtIndex)(i,e)||(0,r.getBoolAtIndex)(l,e)?"show":"hide":10===e?(0,r.getBoolAtIndex)(i,10)||(0,r.getBoolAtIndex)(l,10)?(a="show item",a=(null==t?void 0:t.usl)?a.replace("Activated","")+" Activated":a.replace("Deactivated","")+" Deactivated"):a="hide item":11===e?(0,r.getBoolAtIndex)(i,11)||(0,r.getBoolAtIndex)(l,11)?(a="show item",a=(null==t?void 0:t.lsl)?a.replace("Activated","")+" Activated":a.replace("Deactivated","")+" Deactivated"):a="hide item":12===e&&((null==t?void 0:t.locate)?(a=a.replace("show item","")+" show item",((0,r.getBoolAtIndex)(i,8)||(0,r.getBoolAtIndex)(l,8))&&(a=a.replace("show large item","")+" show large item")):a=a.replace("hide item","")+" hide item"),a.includes("show")&&!a.includes("item")&&((null==t?void 0:t.alarm)&&(a=a.replace("AlarmState","")+" AlarmState"),(null==t?void 0:t.changing)&&(a=a.replace("Changing","")+" Changing"),(null==t?void 0:t.manual)&&(a=a.replace("Manual","")+" Manual"),(null==t?void 0:t.masked)&&!t.alarm&&(a=a.replace("NoAlarmMask","")+" NoAlarmMask"),(null==t?void 0:t.masked)&&(a=a.replace("Masked","")+" Masked"),(null==t?void 0:t.actFB)&&(a=a.replace("Activated","")+" Activated"),(null==t?void 0:t.deActFB)&&(a=a.replace("Deactivated","")+" Deactivated")),a},t.itemNames=Object.entries(o.ItemNameEnum).map(((e,t)=>({key:(0,a.v4)(),name:e,value:e[1],index:t}))),t.valveMpItemNames=Object.entries(o.valveMpItemNameEnum).map(((e,t)=>({key:(0,a.v4)(),name:e,value:e[1],index:t}))),t.getItemIdPositionClassName=(e,t)=>{if(!e.includes("itemId popover"))return console.warn("Function getItemIdPositionClassName called when 'itemId popover' not in given className"),e;switch(e="itemId popover",t){case"left":e=e.replace("position-left","")+" position-left";break;case"right":e=e.replace("position-right","")+" position-right";break;case"top-left":e=e.replace("position-top-left","")+" position-top-left";break;case"top-right":e=e.replace("position-top-right","")+" position-top-right";break;case"bottom-left":e=e.replace("position-bottom-left","")+" position-bottom-left";break;case"bottom-right":e=e.replace("position-bottom-right","")+" position-bottom-right"}return e}},511:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.useValveReducer=function(){const[e,t]=(0,r.useImmerReducer)(a,o.valveStatus);return{state:e,reducer:{updateActConfig:function(e){t({type:"UPDATE_ACT_CONFIG",value:e})},updateDeActConfig:function(e){t({type:"UPDATE_DEACT_CONFIG",value:e})},updateAlarm:function(){t({type:"UPDATE_ALARM"})},updateActFB:function(){t({type:"UPDATE_ACT_FB"})},updateDeActFB:function(){t({type:"UPDATE_DE_ACT_FB"})},updateUsl:function(){t({type:"UPDATE_USL"})},updateLsl:function(){t({type:"UPDATE_LSL"})},updateManual:function(){t({type:"UPDATE_MANUAL"})},updateMasked:function(){t({type:"UPDATE_MASKED"})},updateChanging:function(){t({type:"UPDATE_CHANGING"})},updateLocate:function(){t({type:"UPDATE_LOCATE"})}}}},t.ParameterReducer=i,t.paramItemsReducer=function(){const[e,t]=(0,r.useImmerReducer)(i,o.parameterInitialState);return{state:e,reducer:{updateValue:function(e,n){t({type:"UPDATE_VALUE",index:e,value:n})}}}},t.useValveMpCommandReducer=function(){const[e,t]=(0,r.useImmerReducer)(l,o.initialControlState);return{state:e,reducer:{updateAutoManSelection:function(){t({type:"UPDATE_AUTO_MANUAL"})},updateMainManualOn:function(){t({type:"UPDATE_MAIN_MAN_ON"})},updateMainManualOff:function(){t({type:"UPDATE_MAIN_MAN_OFF"})},updateUslManualOn:function(){t({type:"UPDATE_USL_MAN_ON"})},updateUslManualOff:function(){t({type:"UPDATE_USL_MAN_OFF"})},updateLslManualOn:function(){t({type:"UPDATE_LSL_MAN_ON"})},updateLslManualOff:function(){t({type:"UPDATE_LSL_MAN_OFF"})}}}};const r=n(348),o=n(390);function a(e,t){switch(t.type){case"UPDATE_ACT_CONFIG":return e.activatedConfig=t.value,e;case"UPDATE_DEACT_CONFIG":return e.deactivatedConfig=t.value,e;case"UPDATE_ACT_FB":return e.actFB=!e.actFB,e;case"UPDATE_DE_ACT_FB":return e.deActFB=!e.deActFB,e;case"UPDATE_USL":return e.usl=!e.usl,e;case"UPDATE_LSL":return e.lsl=!e.lsl,e;case"UPDATE_MANUAL":return e.manual=!e.manual,e;case"UPDATE_ALARM":return e.alarm=!e.alarm,e;case"UPDATE_MASKED":return e.masked=!e.masked,e;case"UPDATE_CHANGING":return e.changing=!e.changing,e;case"UPDATE_LOCATE":return e.locate=!e.locate,e;default:return e}}function i(e,t){return"UPDATE_VALUE"===t.type?(e[t.index].input.value=t.value,e):e}function l(e,t){switch(t.type){case"UPDATE_AUTO_MANUAL":return e.main&&(e.main.auto=!e.main.auto,e.main.manual=!e.main.manual),e;case"UPDATE_MAIN_MAN_ON":return e.main&&(e.main.on=!e.main.on),e;case"UPDATE_MAIN_MAN_OFF":return e.main&&(e.main.off=!e.main.off),e;case"UPDATE_USL_MAN_ON":return e.upperSeat&&(e.upperSeat.on=!e.upperSeat.on),e;case"UPDATE_USL_MAN_OFF":return e.upperSeat&&(e.upperSeat.off=!e.upperSeat.off),e;case"UPDATE_LSL_MAN_ON":return e.lowerSeat&&(e.lowerSeat.on=!e.lowerSeat.on),e;case"UPDATE_LSL_MAN_OFF":return e.lowerSeat&&(e.lowerSeat.off=!e.lowerSeat.off),e;default:return e}}},535:function(e,t,n){"use strict";var r=this&&this.__rest||function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n};Object.defineProperty(t,"__esModule",{value:!0}),t.useCreateContext=function(e,t){const n=o.createContext(t),a=e=>{const{children:t}=e,a=r(e,["children"]),i=o.useMemo((()=>a),Object.values(a));return o.createElement(n.Provider,{value:i},t)};return a.displayName=e+"Provider",[a,function(r){const a=o.useContext(n);if(a)return a;if(void 0!==t)return t;throw new Error(`\`${r}\` must be used within \`${e}\``)}]};const o=n(883)},542:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ItemPositionEnum=t.valveMpItemClickableNameEnum=t.ItemClickableNameEnum=t.valveMpItemNameEnum=t.ItemNameEnum=t.ValveClassNameEnum=t.VALVE_COMPONENT_TYPE=void 0,t.VALVE_COMPONENT_TYPE="hmi.process_objects.Valve",t.ValveClassNameEnum={AlarmState:"AlarmState",Activated:"Activated",Deactivated:"Deactivated",Manual:"Manual",Masked:"Masked",Changing:"Changing",NoAlarmMask:"NoAlarmMask",Locate:"Locate"},t.ItemNameEnum={V1b1:"v1b1",V1b2:"v1b2",V1b3:"v1b3",V1b4:"v1b4",V2b1:"v2b1",V2b2:"v2b2",V2b3:"v2b3",V2b4:"v2b4",V3b1:"v3b1",V3b2:"v3b2",V3b3:"v3b3",V3b4:"v3b4",V2:"v2",V3:"v3",V1:"v1",V2f1:"v2f1",V2f2:"v2f2",V3f1:"v3f1",V3f2:"v3f2"},t.valveMpItemNameEnum={V1b1:"v1b1",V1b2:"v1b2",V1b3:"v1b3",V1b4:"v1b4",V2b1:"v2b1",V2b2:"v2b2",V2b3:"v2b3",V2b4:"v2b4",V2:"v2",V1:"v1",usl:"usl",lsl:"lsl",locate:"locate"},t.ItemClickableNameEnum={V1b1:"v1b1",V1b2:"v1b2",V1b3:"v1b3",V1b4:"v1b4",V2b1:"v2b1",V2b2:"v2b2",V2b3:"v2b3",V2b4:"v2b4",V3b1:"v3b1",V3b2:"v3b2",V3b3:"v3b3",V3b4:"v3b4",V2:"v2",V3:"v3",V1:"v1"},t.valveMpItemClickableNameEnum={V1b1:"v1b1",V1b2:"v1b2",V1b3:"v1b3",V1b4:"v1b4",V2b1:"v2b1",V2b2:"v2b2",V2b3:"v2b3",V2b4:"v2b4",V2:"v2",V1:"v1"},t.ItemPositionEnum={v1b1:"v1b1",v1b2:"v1b2",v1b3:"v1b3",v1b4:"v1b4",v2b1:"v2b1",V2b2:"v2b2",v2b3:"v2b3",v2b4:"v2b4",v3b1:"v3b1",v3b2:"v3b2",v3b3:"v3b3",v3b4:"v3b4",v2:"v2",v3:"v3"}},557:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=void 0;const r=n(829),o=n(988);var a=n(988);function i(e,t,n,a){return(0,o.default)(80,r.default,e,t,n,a)}Object.defineProperty(t,"DNS",{enumerable:!0,get:function(){return a.DNS}}),Object.defineProperty(t,"URL",{enumerable:!0,get:function(){return a.URL}}),i.DNS=o.DNS,i.URL=o.URL,t.default=i},568:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(797),o=n(11);t.default=function(e){const t=(n="string"==typeof e?(0,r.default)(e):e,Uint8Array.of((15&n[6])<<4|n[7]>>4&15,(15&n[7])<<4|(240&n[4])>>4,(15&n[4])<<4|(240&n[5])>>4,(15&n[5])<<4|(240&n[0])>>4,(15&n[0])<<4|(240&n[1])>>4,(15&n[1])<<4|(240&n[2])>>4,96|15&n[2],n[3],n[8],n[9],n[10],n[11],n[12],n[13],n[14],n[15]));var n;return"string"==typeof e?(0,o.unsafeStringify)(t):t}},591:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=void 0;const r=n(338),o=n(988);var a=n(988);function i(e,t,n,a){return(0,o.default)(48,r.default,e,t,n,a)}Object.defineProperty(t,"DNS",{enumerable:!0,get:function(){return a.DNS}}),Object.defineProperty(t,"URL",{enumerable:!0,get:function(){return a.URL}}),i.DNS=o.DNS,i.URL=o.URL,t.default=i},697:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i},702:(e,t,n)=>{"use strict";n.r(t)},740:(e,t,n)=>{"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),t.ValveMpCompound=t.useValveContext=t.ValveContextProvider=void 0;const o=n(883),a=n(511),i=n(506),l=n(152),s=n(535),u=n(542),c=n(390),f=u.VALVE_COMPONENT_TYPE;r=(0,s.useCreateContext)("ValveMpCompound"),t.ValveContextProvider=r[0],t.useValveContext=r[1],t.ValveMpCompound={Root:({componentProps:e,valveProps:n,onActionPerformed:r,children:i})=>o.createElement(t.ValveContextProvider,{valveProps:n,componentProps:e,onActionPerformed:r,useValveReducer:a.useValveReducer},i),valve:()=>{var e;const{valveProps:n,onActionPerformed:r,componentProps:a}=(0,t.useValveContext)("Valve"),s=o.useRef(null),{position:u,emit:p}=a,{processObject:d}=n,{status:v}=d||c.processObjectProps,m=null!==(e=null==u?void 0:u.x)&&void 0!==e&&e;let b=i.valveMpItemNames;return(null==v?void 0:v.locate)||(b=b.slice(0,-1)),m?o.createElement("div",Object.assign({ref:s},p({classes:["hmi-component hmi-component-valve__mp "]}),{"data-component":f,onClick:r}),b.map((({value:e,index:t,key:n})=>o.createElement(l.default,{itemClassName:e+" "+(0,i.getValveMpItemClassName)(t,v),key:n})))):o.createElement("div",Object.assign({ref:s},p({classes:["hmi-component hmi-component__column "]}),{"data-component":f,onClick:r}),o.createElement("div",{className:"hmi-component__row"},o.createElement("div",{className:"hmi-component-valve__mp"},b.map((({value:e,index:t,key:n})=>o.createElement(l.default,{itemClassName:e+" "+(0,i.getValveMpItemClassName)(t,v),key:n}))))))},popover:({anchorEl:e})=>{const{valveProps:n,componentProps:r}=(0,t.useValveContext)("Popover"),{showLabel:a,labelPosition:l,processObject:s}=n,{status:u}=s||c.processObjectProps;if(!a)return null;const{position:f}=r;let p="itemId popover position-left";return l&&(p=(0,i.getItemIdPositionClassName)(p,l)),o.createElement("div",{className:p,style:{top:f.y,left:f.x}},o.createElement("div",{style:{padding:8}},null==u?void 0:u.itemName))}}},746:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(697);t.default=function(e){return"string"==typeof e&&r.default.test(e)}},770:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(746);t.default=function(e){if(!(0,r.default)(e))throw TypeError("Invalid UUID");return parseInt(e.slice(14,15),16)}},779:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n="undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto);t.default={randomUUID:n}},797:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(746);t.default=function(e){if(!(0,r.default)(e))throw TypeError("Invalid UUID");let t;return Uint8Array.of((t=parseInt(e.slice(0,8),16))>>>24,t>>>16&255,t>>>8&255,255&t,(t=parseInt(e.slice(9,13),16))>>>8,255&t,(t=parseInt(e.slice(14,18),16))>>>8,255&t,(t=parseInt(e.slice(19,23),16))>>>8,255&t,(t=parseInt(e.slice(24,36),16))/1099511627776&255,t/4294967296&255,t>>>24&255,t>>>16&255,t>>>8&255,255&t)}},829:(e,t)=>{"use strict";function n(e,t,n,r){switch(e){case 0:return t&n^~t&r;case 1:case 3:return t^n^r;case 2:return t&n^t&r^n&r}}function r(e,t){return e<<t|e>>>32-t}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){const t=[1518500249,1859775393,2400959708,3395469782],o=[1732584193,4023233417,2562383102,271733878,3285377520],a=new Uint8Array(e.length+1);a.set(e),a[e.length]=128;const i=(e=a).length/4+2,l=Math.ceil(i/16),s=new Array(l);for(let t=0;t<l;++t){const n=new Uint32Array(16);for(let r=0;r<16;++r)n[r]=e[64*t+4*r]<<24|e[64*t+4*r+1]<<16|e[64*t+4*r+2]<<8|e[64*t+4*r+3];s[t]=n}s[l-1][14]=8*(e.length-1)/Math.pow(2,32),s[l-1][14]=Math.floor(s[l-1][14]),s[l-1][15]=8*(e.length-1)&4294967295;for(let e=0;e<l;++e){const a=new Uint32Array(80);for(let t=0;t<16;++t)a[t]=s[e][t];for(let e=16;e<80;++e)a[e]=r(a[e-3]^a[e-8]^a[e-14]^a[e-16],1);let i=o[0],l=o[1],u=o[2],c=o[3],f=o[4];for(let e=0;e<80;++e){const o=Math.floor(e/20),s=r(i,5)+n(o,l,u,c)+f+t[o]+a[e]>>>0;f=c,c=u,u=r(l,30)>>>0,l=i,i=s}o[0]=o[0]+i>>>0,o[1]=o[1]+l>>>0,o[2]=o[2]+u>>>0,o[3]=o[3]+c>>>0,o[4]=o[4]+f>>>0}return Uint8Array.of(o[0]>>24,o[0]>>16,o[0]>>8,o[0],o[1]>>24,o[1]>>16,o[1]>>8,o[1],o[2]>>24,o[2]>>16,o[2]>>8,o[2],o[3]>>24,o[3]>>16,o[3]>>8,o[3],o[4]>>24,o[4]>>16,o[4]>>8,o[4])}},838:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ParameterListComponentMeta=t.ParameterListComponent=t.COMPONENT_TYPE=void 0;const r=n(883),o=n(390),a=[{label:{text:"text"},input:{value:null,placeholder:"Enter a Number"}}];t.COMPONENT_TYPE="hmi.input.ParameterList",t.ParameterListComponent=e=>{const t=r.useMemo((()=>{const{parameters:t}=e.props||a;return t}),[e.props.parameters]);return console.log(`transformedProps: label ${t[0].label.text}`),r.createElement("div",{className:"display-flex-column"},t.map(((t,n)=>{const{label:o,input:a}=t;return console.log(a.value),r.createElement("label",{key:`${o.text}-parameter${n}`,className:"field small"},r.createElement("span",{className:"label"},o.text),r.createElement("span",{className:"eu"},a.eu),r.createElement("input",{type:"text",id:`${o.text}-parameter${n}`,inputMode:a.inputmode,pattern:a.pattern||"[0-9]*",placeholder:a.placeholder,disabled:!a.editable,value:a.value,onChange:t=>{e.store.props.write(`parameters[${n}].input.value`,t.currentTarget.value)}}))})))},t.ParameterListComponentMeta=class{getComponentType(){return t.COMPONENT_TYPE}getDefaultSize(){return{width:120,height:240}}getPropsReducer(e){return{parameters:e.read("parameters",o.parameterInitialState)}}getViewComponent(){return t.ParameterListComponent}}},883:e=>{"use strict";e.exports=t},973:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ValveMeta=t.Valve=t.COMPONENT_TYPE=void 0;const r=n(883),o=n(377),a=n(740),i=n(390);t.COMPONENT_TYPE="hmi.process_objects.Valve_mp";class l extends o.Component{constructor(e){super(e),this.processObject=this.props.props.processObject||i.processObjectProps,this.status=this.processObject.status,this.showLabel=this.props.props.showLabel||!1,this.labelPosition=this.props.props.labelPosition||"left",this.onActionPerformed=()=>{this.props.eventsEnabled?(console.log("Valve clicked!"),this.props.componentEvents.fireComponentEvent("onActionPerformed",{})):console.log("Valve is disabled in the design-scope")},this.valveRef=r.createRef()}componentDidMount(){}render(){return r.createElement(a.ValveMpCompound.Root,{componentProps:this.props,valveProps:this.props.props,onActionPerformed:this.onActionPerformed},r.createElement(a.ValveMpCompound.valve,null),r.createElement(a.ValveMpCompound.popover,{anchorEl:this.valveRef.current}))}}t.Valve=l,t.ValveMeta=class{getComponentType(){return t.COMPONENT_TYPE}getViewComponent(){return l}getDefaultSize(){return{width:24,height:48}}getPropsReducer(e){return console.log(`itemName: ${e.readString("processObject.status.itemName")} showLabel ${e.readBoolean("showLabel")}`),{processObject:{status:{alarm:e.readBoolean("processObject.status.alarm",!1),actFB:e.readBoolean("processObject.status.actFB",!1),deActFB:e.readBoolean("processObject.status.deActFB",!1),activatedConfig:e.readNumber("processObject.status.activatedConfig",511),deactivatedConfig:e.readNumber("processObject.status.deactivatedConfig",4095),itemName:e.readString("processObject.status.itemName",""),manual:e.readBoolean("processObject.status.manual",!1),masked:e.readBoolean("processObject.status.masked",!1),changing:e.readBoolean("processObject.status.changing",!1),locate:e.readBoolean("processObject.status.locate",!1),usl:e.readBoolean("processObject.status.usl",!1),lsl:e.readBoolean("processObject.status.lsl",!1)}},showLabel:e.readBoolean("showLabel",!1),labelPosition:e.readString("labelPosition","top-left")}}}},988:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=t.stringToBytes=void 0;const r=n(797),o=n(11);function a(e){e=unescape(encodeURIComponent(e));const t=new Uint8Array(e.length);for(let n=0;n<e.length;++n)t[n]=e.charCodeAt(n);return t}t.stringToBytes=a,t.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",t.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",t.default=function(e,t,n,i,l,s){const u="string"==typeof n?a(n):n,c="string"==typeof i?(0,r.default)(i):i;if("string"==typeof i&&(i=(0,r.default)(i)),16!==i?.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");let f=new Uint8Array(16+u.length);if(f.set(c),f.set(u,c.length),f=t(f),f[6]=15&f[6]|e,f[8]=63&f[8]|128,l){s=s||0;for(let e=0;e<16;++e)l[s+e]=f[e];return l}return(0,o.unsafeStringify)(f)}}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var a=r[e]={exports:{}};return n[e].call(a.exports,a,a.exports,o),a.exports}o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var a={};return(()=>{"use strict";var e=a;Object.defineProperty(e,"__esModule",{value:!0}),e.ParameterListComponent=e.Valve=void 0;const t=o(377),n=o(973);Object.defineProperty(e,"Valve",{enumerable:!0,get:function(){return n.Valve}});const r=o(838);Object.defineProperty(e,"ParameterListComponent",{enumerable:!0,get:function(){return r.ParameterListComponent}}),o(702),[new n.ValveMeta,new r.ParameterListComponentMeta].forEach((e=>t.ComponentRegistry.register(e)))})(),a})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,