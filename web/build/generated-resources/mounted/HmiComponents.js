!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("PerspectiveClient"),require("React")):"function"==typeof define&&define.amd?define("HmiComponents",["PerspectiveClient","React"],t):"object"==typeof exports?exports.HmiComponents=t(require("PerspectiveClient"),require("React")):e.HmiComponents=t(e.PerspectiveClient,e.React)}(self,((e,t)=>(()=>{var n={11:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.unsafeStringify=void 0;const a=n(746),o=[];for(let e=0;e<256;++e)o.push((e+256).toString(16).slice(1));function r(e,t=0){return(o[e[t+0]]+o[e[t+1]]+o[e[t+2]]+o[e[t+3]]+"-"+o[e[t+4]]+o[e[t+5]]+"-"+o[e[t+6]]+o[e[t+7]]+"-"+o[e[t+8]]+o[e[t+9]]+"-"+o[e[t+10]]+o[e[t+11]]+o[e[t+12]]+o[e[t+13]]+o[e[t+14]]+o[e[t+15]]).toLowerCase()}t.unsafeStringify=r,t.default=function(e,t=0){const n=r(e,t);if(!(0,a.default)(n))throw TypeError("Stringified UUID is invalid");return n}},124:e=>{"use strict";var t,n=Object.defineProperty,a=Object.getOwnPropertyDescriptor,o=Object.getOwnPropertyNames,r=Object.prototype.hasOwnProperty,l={};((e,t)=>{for(var a in t)n(e,a,{get:t[a],enumerable:!0})})(l,{Immer:()=>H,applyPatches:()=>le,castDraft:()=>ue,castImmutable:()=>ce,createDraft:()=>ie,current:()=>J,enableMapSet:()=>ee,enablePatches:()=>Z,finishDraft:()=>se,freeze:()=>_,immerable:()=>s,isDraft:()=>p,isDraftable:()=>m,nothing:()=>i,original:()=>b,produce:()=>ne,produceWithPatches:()=>ae,setAutoFreeze:()=>oe,setUseStrictShallowCopy:()=>re}),e.exports=(t=l,((e,t,l,i)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let l of o(t))!r.call(e,l)&&undefined!==l&&n(e,l,{get:()=>t[l],enumerable:!(i=a(t,l))||i.enumerable});return e})(n({},"__esModule",{value:!0}),t));var i=Symbol.for("immer-nothing"),s=Symbol.for("immer-draftable"),u=Symbol.for("immer-state");function c(e,...t){throw new Error(`[Immer] minified error nr: ${e}. Full error at: https://bit.ly/3cXEKWf`)}var d=Object.getPrototypeOf;function p(e){return!!e&&!!e[u]}function m(e){return!!e&&(v(e)||Array.isArray(e)||!!e[s]||!!e.constructor?.[s]||O(e)||A(e))}var f=Object.prototype.constructor.toString();function v(e){if(!e||"object"!=typeof e)return!1;let t=d(e);if(null===t)return!0;let n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return n===Object||"function"==typeof n&&Function.toString.call(n)===f}function b(e){return p(e)||c(15),e[u].t}function h(e,t){0===g(e)?Reflect.ownKeys(e).forEach((n=>{t(n,e[n],e)})):e.forEach(((n,a)=>t(a,n,e)))}function g(e){let t=e[u];return t?t.o:Array.isArray(e)?1:O(e)?2:A(e)?3:0}function P(e,t){return 2===g(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function y(e,t){return 2===g(e)?e.get(t):e[t]}function M(e,t,n){let a=g(e);2===a?e.set(t,n):3===a?e.add(n):e[t]=n}function O(e){return e instanceof Map}function A(e){return e instanceof Set}function N(e){return e.e||e.t}function E(e,t){if(O(e))return new Map(e);if(A(e))return new Set(e);if(Array.isArray(e))return Array.prototype.slice.call(e);let n=v(e);if(!0===t||"class_only"===t&&!n){let t=Object.getOwnPropertyDescriptors(e);delete t[u];let n=Reflect.ownKeys(t);for(let a=0;a<n.length;a++){let o=n[a],r=t[o];!1===r.writable&&(r.writable=!0,r.configurable=!0),(r.get||r.set)&&(t[o]={configurable:!0,writable:!0,enumerable:r.enumerable,value:e[o]})}return Object.create(d(e),t)}{let t=d(e);if(null!==t&&n)return{...e};let a=Object.create(t);return Object.assign(a,e)}}function _(e,t=!1){return S(e)||p(e)||!m(e)||(g(e)>1&&(e.set=e.add=e.clear=e.delete=C),Object.freeze(e),t&&Object.entries(e).forEach((([e,t])=>_(t,!0)))),e}function C(){c(2)}function S(e){return Object.isFrozen(e)}var w,j={};function V(e){let t=j[e];return t||c(0),t}function I(e,t){j[e]||(j[e]=t)}function T(){return w}function U(e,t){t&&(V("Patches"),e.f=[],e.h=[],e.b=t)}function D(e){x(e),e.a.forEach(B),e.a=null}function x(e){e===w&&(w=e.i)}function k(e){return w=function(e,t){return{a:[],i:e,p:t,P:!0,d:0}}(w,e)}function B(e){let t=e[u];0===t.o||1===t.o?t.x():t.m=!0}function L(e,t){t.d=t.a.length;let n=t.a[0];return void 0!==e&&e!==n?(n[u].s&&(D(t),c(4)),m(e)&&(e=R(t,e),t.i||$(t,e)),t.f&&V("Patches").T(n[u].t,e,t.f,t.h)):e=R(t,n,[]),D(t),t.f&&t.b(t.f,t.h),e!==i?e:void 0}function R(e,t,n){if(S(t))return t;let a=t[u];if(!a)return h(t,((o,r)=>F(e,a,t,o,r,n))),t;if(a.n!==e)return t;if(!a.s)return $(e,a.t,!0),a.t;if(!a.c){a.c=!0,a.n.d--;let t=a.e,o=t,r=!1;3===a.o&&(o=new Set(t),t.clear(),r=!0),h(o,((o,l)=>F(e,a,t,o,l,n,r))),$(e,t,!1),n&&e.f&&V("Patches").g(a,n,e.f,e.h)}return a.e}function F(e,t,n,a,o,r,l){if(p(o)){let l=R(e,o,r&&t&&3!==t.o&&!P(t.r,a)?r.concat(a):void 0);if(M(n,a,l),!p(l))return;e.P=!1}else l&&n.add(o);if(m(o)&&!S(o)){if(!e.p.y&&e.d<1)return;R(e,o),(!t||!t.n.i)&&"symbol"!=typeof a&&Object.prototype.propertyIsEnumerable.call(n,a)&&$(e,o)}}function $(e,t,n=!1){!e.i&&e.p.y&&e.P&&_(t,n)}var Y={get(e,t){if(t===u)return e;let n=N(e);if(!P(n,t))return function(e,t,n){let a=G(t,n);return a?"value"in a?a.value:a.get?.call(e.u):void 0}(e,n,t);let a=n[t];return e.c||!m(a)?a:a===q(e.t,t)?(X(e),e.e[t]=W(a,e)):a},has:(e,t)=>t in N(e),ownKeys:e=>Reflect.ownKeys(N(e)),set(e,t,n){let a=G(N(e),t);if(a?.set)return a.set.call(e.u,n),!0;if(!e.s){let a=q(N(e),t),o=a?.[u];if(o&&o.t===n)return e.e[t]=n,e.r[t]=!1,!0;if(function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}(n,a)&&(void 0!==n||P(e.t,t)))return!0;X(e),K(e)}return e.e[t]===n&&(void 0!==n||t in e.e)||Number.isNaN(n)&&Number.isNaN(e.e[t])||(e.e[t]=n,e.r[t]=!0),!0},deleteProperty:(e,t)=>(void 0!==q(e.t,t)||t in e.t?(e.r[t]=!1,X(e),K(e)):delete e.r[t],e.e&&delete e.e[t],!0),getOwnPropertyDescriptor(e,t){let n=N(e),a=Reflect.getOwnPropertyDescriptor(n,t);return a&&{writable:!0,configurable:1!==e.o||"length"!==t,enumerable:a.enumerable,value:n[t]}},defineProperty(){c(11)},getPrototypeOf:e=>d(e.t),setPrototypeOf(){c(12)}},z={};function q(e,t){let n=e[u];return(n?N(n):e)[t]}function G(e,t){if(!(t in e))return;let n=d(e);for(;n;){let e=Object.getOwnPropertyDescriptor(n,t);if(e)return e;n=d(n)}}function K(e){e.s||(e.s=!0,e.i&&K(e.i))}function X(e){e.e||(e.e=E(e.t,e.n.p.S))}h(Y,((e,t)=>{z[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),z.deleteProperty=function(e,t){return z.set.call(this,e,t,void 0)},z.set=function(e,t,n){return Y.set.call(this,e[0],t,n,e[0])};var H=class{constructor(e){this.y=!0,this.S=!1,this.produce=(e,t,n)=>{if("function"==typeof e&&"function"!=typeof t){let n=t;t=e;let a=this;return function(e=n,...o){return a.produce(e,(e=>t.call(this,e,...o)))}}let a;if("function"!=typeof t&&c(6),void 0!==n&&"function"!=typeof n&&c(7),m(e)){let o=k(this),r=W(e,void 0),l=!0;try{a=t(r),l=!1}finally{l?D(o):x(o)}return U(o,n),L(a,o)}if(!e||"object"!=typeof e){if(a=t(e),void 0===a&&(a=e),a===i&&(a=void 0),this.y&&_(a,!0),n){let t=[],o=[];V("Patches").T(e,a,t,o),n(t,o)}return a}c(1)},this.produceWithPatches=(e,t)=>{if("function"==typeof e)return(t,...n)=>this.produceWithPatches(t,(t=>e(t,...n)));let n,a;return[this.produce(e,t,((e,t)=>{n=e,a=t})),n,a]},"boolean"==typeof e?.autoFreeze&&this.setAutoFreeze(e.autoFreeze),"boolean"==typeof e?.useStrictShallowCopy&&this.setUseStrictShallowCopy(e.useStrictShallowCopy)}createDraft(e){m(e)||c(8),p(e)&&(e=J(e));let t=k(this),n=W(e,void 0);return n[u].l=!0,x(t),n}finishDraft(e,t){let n=e&&e[u];(!n||!n.l)&&c(9);let{n:a}=n;return U(a,t),L(void 0,a)}setAutoFreeze(e){this.y=e}setUseStrictShallowCopy(e){this.S=e}applyPatches(e,t){let n;for(n=t.length-1;n>=0;n--){let a=t[n];if(0===a.path.length&&"replace"===a.op){e=a.value;break}}n>-1&&(t=t.slice(n+1));let a=V("Patches").A;return p(e)?a(e,t):this.produce(e,(e=>a(e,t)))}};function W(e,t){let n=O(e)?V("MapSet").I(e,t):A(e)?V("MapSet").D(e,t):function(e,t){let n=Array.isArray(e),a={o:n?1:0,n:t?t.n:T(),s:!1,c:!1,r:{},i:t,t:e,u:null,e:null,x:null,l:!1},o=a,r=Y;n&&(o=[a],r=z);let{revoke:l,proxy:i}=Proxy.revocable(o,r);return a.u=i,a.x=l,i}(e,t);return(t?t.n:T()).a.push(n),n}function J(e){return p(e)||c(10),Q(e)}function Q(e){if(!m(e)||S(e))return e;let t,n=e[u];if(n){if(!n.s)return n.t;n.c=!0,t=E(e,n.n.p.S)}else t=E(e,!0);return h(t,((e,n)=>{M(t,e,Q(n))})),n&&(n.c=!1),t}function Z(){let e="replace",t="add",n="remove";function a(e){if(!m(e))return e;if(Array.isArray(e))return e.map(a);if(O(e))return new Map(Array.from(e.entries()).map((([e,t])=>[e,a(t)])));if(A(e))return new Set(Array.from(e).map(a));let t=Object.create(d(e));for(let n in e)t[n]=a(e[n]);return P(e,s)&&(t[s]=e[s]),t}function o(e){return p(e)?a(e):e}I("Patches",{A:function(o,r){return r.forEach((r=>{let{path:l,op:i}=r,s=o;for(let e=0;e<l.length-1;e++){let t=g(s),n=l[e];"string"!=typeof n&&"number"!=typeof n&&(n=""+n),(0===t||1===t)&&("__proto__"===n||"constructor"===n)&&c(19),"function"==typeof s&&"prototype"===n&&c(19),s=y(s,n),"object"!=typeof s&&c(18,l.join("/"))}let u=g(s),d=a(r.value),p=l[l.length-1];switch(i){case e:switch(u){case 2:return s.set(p,d);case 3:c(16);default:return s[p]=d}case t:switch(u){case 1:return"-"===p?s.push(d):s.splice(p,0,d);case 2:return s.set(p,d);case 3:return s.add(d);default:return s[p]=d}case n:switch(u){case 1:return s.splice(p,1);case 2:return s.delete(p);case 3:return s.delete(r.value);default:return delete s[p]}default:c(17)}})),o},g:function(a,r,l,i){switch(a.o){case 0:case 2:return function(a,r,l,i){let{t:s,e:u}=a;h(a.r,((a,c)=>{let d=y(s,a),p=y(u,a),m=c?P(s,a)?e:t:n;if(d===p&&m===e)return;let f=r.concat(a);l.push(m===n?{op:m,path:f}:{op:m,path:f,value:p}),i.push(m===t?{op:n,path:f}:m===n?{op:t,path:f,value:o(d)}:{op:e,path:f,value:o(d)})}))}(a,r,l,i);case 1:return function(a,r,l,i){let{t:s,r:u}=a,c=a.e;c.length<s.length&&([s,c]=[c,s],[l,i]=[i,l]);for(let t=0;t<s.length;t++)if(u[t]&&c[t]!==s[t]){let n=r.concat([t]);l.push({op:e,path:n,value:o(c[t])}),i.push({op:e,path:n,value:o(s[t])})}for(let e=s.length;e<c.length;e++){let n=r.concat([e]);l.push({op:t,path:n,value:o(c[e])})}for(let e=c.length-1;s.length<=e;--e){let t=r.concat([e]);i.push({op:n,path:t})}}(a,r,l,i);case 3:return function(e,a,o,r){let{t:l,e:i}=e,s=0;l.forEach((e=>{if(!i.has(e)){let l=a.concat([s]);o.push({op:n,path:l,value:e}),r.unshift({op:t,path:l,value:e})}s++})),s=0,i.forEach((e=>{if(!l.has(e)){let l=a.concat([s]);o.push({op:t,path:l,value:e}),r.unshift({op:n,path:l,value:e})}s++}))}(a,r,l,i)}},T:function(t,n,a,o){a.push({op:e,path:[],value:n===i?void 0:n}),o.push({op:e,path:[],value:t})}})}function ee(){class e extends Map{constructor(e,t){super(),this[u]={o:2,i:t,n:t?t.n:T(),s:!1,c:!1,e:void 0,r:void 0,t:e,u:this,l:!1,m:!1}}get size(){return N(this[u]).size}has(e){return N(this[u]).has(e)}set(e,n){let a=this[u];return o(a),(!N(a).has(e)||N(a).get(e)!==n)&&(t(a),K(a),a.r.set(e,!0),a.e.set(e,n),a.r.set(e,!0)),this}delete(e){if(!this.has(e))return!1;let n=this[u];return o(n),t(n),K(n),n.t.has(e)?n.r.set(e,!1):n.r.delete(e),n.e.delete(e),!0}clear(){let e=this[u];o(e),N(e).size&&(t(e),K(e),e.r=new Map,h(e.t,(t=>{e.r.set(t,!1)})),e.e.clear())}forEach(e,t){N(this[u]).forEach(((n,a,o)=>{e.call(t,this.get(a),a,this)}))}get(e){let n=this[u];o(n);let a=N(n).get(e);if(n.c||!m(a)||a!==n.t.get(e))return a;let r=W(a,n);return t(n),n.e.set(e,r),r}keys(){return N(this[u]).keys()}values(){let e=this.keys();return{[Symbol.iterator]:()=>this.values(),next:()=>{let t=e.next();return t.done?t:{done:!1,value:this.get(t.value)}}}}entries(){let e=this.keys();return{[Symbol.iterator]:()=>this.entries(),next:()=>{let t=e.next();if(t.done)return t;let n=this.get(t.value);return{done:!1,value:[t.value,n]}}}}[Symbol.iterator](){return this.entries()}}function t(e){e.e||(e.r=new Map,e.e=new Map(e.t))}class n extends Set{constructor(e,t){super(),this[u]={o:3,i:t,n:t?t.n:T(),s:!1,c:!1,e:void 0,t:e,u:this,a:new Map,m:!1,l:!1}}get size(){return N(this[u]).size}has(e){let t=this[u];return o(t),t.e?!!(t.e.has(e)||t.a.has(e)&&t.e.has(t.a.get(e))):t.t.has(e)}add(e){let t=this[u];return o(t),this.has(e)||(a(t),K(t),t.e.add(e)),this}delete(e){if(!this.has(e))return!1;let t=this[u];return o(t),a(t),K(t),t.e.delete(e)||!!t.a.has(e)&&t.e.delete(t.a.get(e))}clear(){let e=this[u];o(e),N(e).size&&(a(e),K(e),e.e.clear())}values(){let e=this[u];return o(e),a(e),e.e.values()}entries(){let e=this[u];return o(e),a(e),e.e.entries()}keys(){return this.values()}[Symbol.iterator](){return this.values()}forEach(e,t){let n=this.values(),a=n.next();for(;!a.done;)e.call(t,a.value,a.value,this),a=n.next()}}function a(e){e.e||(e.e=new Set,e.t.forEach((t=>{if(m(t)){let n=W(t,e);e.a.set(t,n),e.e.add(n)}else e.e.add(t)})))}function o(e){e.m&&c(3,JSON.stringify(N(e)))}I("MapSet",{I:function(t,n){return new e(t,n)},D:function(e,t){return new n(e,t)}})}var te=new H,ne=te.produce,ae=te.produceWithPatches.bind(te),oe=te.setAutoFreeze.bind(te),re=te.setUseStrictShallowCopy.bind(te),le=te.applyPatches.bind(te),ie=te.createDraft.bind(te),se=te.finishDraft.bind(te);function ue(e){return e}function ce(e){return e}},152:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=n(883),o=({itemClassName:e,handleClick:t})=>a.createElement("div",{className:e,onClick:t});o.displayName="Item",t.default=o},182:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.version=t.validate=t.v7=t.v6ToV1=t.v6=t.v5=t.v4=t.v3=t.v1ToV6=t.v1=t.stringify=t.parse=t.NIL=t.MAX=void 0;var a=n(196);Object.defineProperty(t,"MAX",{enumerable:!0,get:function(){return a.default}});var o=n(465);Object.defineProperty(t,"NIL",{enumerable:!0,get:function(){return o.default}});var r=n(797);Object.defineProperty(t,"parse",{enumerable:!0,get:function(){return r.default}});var l=n(11);Object.defineProperty(t,"stringify",{enumerable:!0,get:function(){return l.default}});var i=n(425);Object.defineProperty(t,"v1",{enumerable:!0,get:function(){return i.default}});var s=n(568);Object.defineProperty(t,"v1ToV6",{enumerable:!0,get:function(){return s.default}});var u=n(591);Object.defineProperty(t,"v3",{enumerable:!0,get:function(){return u.default}});var c=n(286);Object.defineProperty(t,"v4",{enumerable:!0,get:function(){return c.default}});var d=n(557);Object.defineProperty(t,"v5",{enumerable:!0,get:function(){return d.default}});var p=n(356);Object.defineProperty(t,"v6",{enumerable:!0,get:function(){return p.default}});var m=n(268);Object.defineProperty(t,"v6ToV1",{enumerable:!0,get:function(){return m.default}});var f=n(299);Object.defineProperty(t,"v7",{enumerable:!0,get:function(){return f.default}});var v=n(746);Object.defineProperty(t,"validate",{enumerable:!0,get:function(){return v.default}});var b=n(770);Object.defineProperty(t,"version",{enumerable:!0,get:function(){return b.default}})},196:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="ffffffff-ffff-ffff-ffff-ffffffffffff"},268:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=n(797),o=n(11);t.default=function(e){const t=(n="string"==typeof e?(0,a.default)(e):e,Uint8Array.of((15&n[3])<<4|n[4]>>4&15,(15&n[4])<<4|(240&n[5])>>4,(15&n[5])<<4|15&n[6],n[7],(15&n[1])<<4|(240&n[2])>>4,(15&n[2])<<4|(240&n[3])>>4,16|(240&n[0])>>4,(15&n[0])<<4|(240&n[1])>>4,n[8],n[9],n[10],n[11],n[12],n[13],n[14],n[15]));var n;return"string"==typeof e?(0,o.unsafeStringify)(t):t}},286:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=n(779),o=n(291),r=n(11);t.default=function(e,t,n){if(a.default.randomUUID&&!t&&!e)return a.default.randomUUID();const l=(e=e||{}).random??e.rng?.()??(0,o.default)();if(l.length<16)throw new Error("Random bytes length must be >= 16");if(l[6]=15&l[6]|64,l[8]=63&l[8]|128,t){if((n=n||0)<0||n+16>t.length)throw new RangeError(`UUID byte range ${n}:${n+15} is out of buffer bounds`);for(let e=0;e<16;++e)t[n+e]=l[e];return t}return(0,r.unsafeStringify)(l)}},291:(e,t)=>{"use strict";let n;Object.defineProperty(t,"__esModule",{value:!0});const a=new Uint8Array(16);t.default=function(){if(!n){if("undefined"==typeof crypto||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");n=crypto.getRandomValues.bind(crypto)}return n(a)}},299:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateV7State=void 0;const a=n(291),o=n(11),r={};function l(e,t,n){return e.msecs??=-1/0,e.seq??=0,t>e.msecs?(e.seq=n[6]<<23|n[7]<<16|n[8]<<8|n[9],e.msecs=t):(e.seq=e.seq+1|0,0===e.seq&&e.msecs++),e}function i(e,t,n,a,o=0){if(e.length<16)throw new Error("Random bytes length must be >= 16");if(a){if(o<0||o+16>a.length)throw new RangeError(`UUID byte range ${o}:${o+15} is out of buffer bounds`)}else a=new Uint8Array(16),o=0;return t??=Date.now(),n??=127*e[6]<<24|e[7]<<16|e[8]<<8|e[9],a[o++]=t/1099511627776&255,a[o++]=t/4294967296&255,a[o++]=t/16777216&255,a[o++]=t/65536&255,a[o++]=t/256&255,a[o++]=255&t,a[o++]=112|n>>>28&15,a[o++]=n>>>20&255,a[o++]=128|n>>>14&63,a[o++]=n>>>6&255,a[o++]=n<<2&255|3&e[10],a[o++]=e[11],a[o++]=e[12],a[o++]=e[13],a[o++]=e[14],a[o++]=e[15],a}t.updateV7State=l,t.default=function(e,t,n){let s;if(e)s=i(e.random??e.rng?.()??(0,a.default)(),e.msecs,e.seq,t,n);else{const e=Date.now(),o=(0,a.default)();l(r,e,o),s=i(o,r.msecs,r.seq,t,n)}return t??(0,o.unsafeStringify)(s)}},338:(e,t)=>{"use strict";function n(e){return 14+(e+64>>>9<<4)+1}function a(e,t){const n=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(n>>16)<<16|65535&n}function o(e,t,n,o,r,l){return a((i=a(a(t,e),a(o,l)))<<(s=r)|i>>>32-s,n);var i,s}function r(e,t,n,a,r,l,i){return o(t&n|~t&a,e,t,r,l,i)}function l(e,t,n,a,r,l,i){return o(t&a|n&~a,e,t,r,l,i)}function i(e,t,n,a,r,l,i){return o(t^n^a,e,t,r,l,i)}function s(e,t,n,a,r,l,i){return o(n^(t|~a),e,t,r,l,i)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return function(e){const t=new Uint8Array(4*e.length);for(let n=0;n<4*e.length;n++)t[n]=e[n>>2]>>>n%4*8&255;return t}(function(e,t){const o=new Uint32Array(n(t)).fill(0);o.set(e),o[t>>5]|=128<<t%32,o[o.length-1]=t,e=o;let u=1732584193,c=-271733879,d=-1732584194,p=271733878;for(let t=0;t<e.length;t+=16){const n=u,o=c,m=d,f=p;u=r(u,c,d,p,e[t],7,-680876936),p=r(p,u,c,d,e[t+1],12,-389564586),d=r(d,p,u,c,e[t+2],17,606105819),c=r(c,d,p,u,e[t+3],22,-1044525330),u=r(u,c,d,p,e[t+4],7,-176418897),p=r(p,u,c,d,e[t+5],12,1200080426),d=r(d,p,u,c,e[t+6],17,-1473231341),c=r(c,d,p,u,e[t+7],22,-45705983),u=r(u,c,d,p,e[t+8],7,1770035416),p=r(p,u,c,d,e[t+9],12,-1958414417),d=r(d,p,u,c,e[t+10],17,-42063),c=r(c,d,p,u,e[t+11],22,-1990404162),u=r(u,c,d,p,e[t+12],7,1804603682),p=r(p,u,c,d,e[t+13],12,-40341101),d=r(d,p,u,c,e[t+14],17,-1502002290),c=r(c,d,p,u,e[t+15],22,1236535329),u=l(u,c,d,p,e[t+1],5,-165796510),p=l(p,u,c,d,e[t+6],9,-1069501632),d=l(d,p,u,c,e[t+11],14,643717713),c=l(c,d,p,u,e[t],20,-373897302),u=l(u,c,d,p,e[t+5],5,-701558691),p=l(p,u,c,d,e[t+10],9,38016083),d=l(d,p,u,c,e[t+15],14,-660478335),c=l(c,d,p,u,e[t+4],20,-405537848),u=l(u,c,d,p,e[t+9],5,568446438),p=l(p,u,c,d,e[t+14],9,-1019803690),d=l(d,p,u,c,e[t+3],14,-187363961),c=l(c,d,p,u,e[t+8],20,1163531501),u=l(u,c,d,p,e[t+13],5,-1444681467),p=l(p,u,c,d,e[t+2],9,-51403784),d=l(d,p,u,c,e[t+7],14,1735328473),c=l(c,d,p,u,e[t+12],20,-1926607734),u=i(u,c,d,p,e[t+5],4,-378558),p=i(p,u,c,d,e[t+8],11,-2022574463),d=i(d,p,u,c,e[t+11],16,1839030562),c=i(c,d,p,u,e[t+14],23,-35309556),u=i(u,c,d,p,e[t+1],4,-1530992060),p=i(p,u,c,d,e[t+4],11,1272893353),d=i(d,p,u,c,e[t+7],16,-155497632),c=i(c,d,p,u,e[t+10],23,-1094730640),u=i(u,c,d,p,e[t+13],4,681279174),p=i(p,u,c,d,e[t],11,-358537222),d=i(d,p,u,c,e[t+3],16,-722521979),c=i(c,d,p,u,e[t+6],23,76029189),u=i(u,c,d,p,e[t+9],4,-640364487),p=i(p,u,c,d,e[t+12],11,-421815835),d=i(d,p,u,c,e[t+15],16,530742520),c=i(c,d,p,u,e[t+2],23,-995338651),u=s(u,c,d,p,e[t],6,-198630844),p=s(p,u,c,d,e[t+7],10,1126891415),d=s(d,p,u,c,e[t+14],15,-1416354905),c=s(c,d,p,u,e[t+5],21,-57434055),u=s(u,c,d,p,e[t+12],6,1700485571),p=s(p,u,c,d,e[t+3],10,-1894986606),d=s(d,p,u,c,e[t+10],15,-1051523),c=s(c,d,p,u,e[t+1],21,-2054922799),u=s(u,c,d,p,e[t+8],6,1873313359),p=s(p,u,c,d,e[t+15],10,-30611744),d=s(d,p,u,c,e[t+6],15,-1560198380),c=s(c,d,p,u,e[t+13],21,1309151649),u=s(u,c,d,p,e[t+4],6,-145523070),p=s(p,u,c,d,e[t+11],10,-1120210379),d=s(d,p,u,c,e[t+2],15,718787259),c=s(c,d,p,u,e[t+9],21,-343485551),u=a(u,n),c=a(c,o),d=a(d,m),p=a(p,f)}return Uint32Array.of(u,c,d,p)}(function(e){if(0===e.length)return new Uint32Array;const t=new Uint32Array(n(8*e.length)).fill(0);for(let n=0;n<e.length;n++)t[n>>2]|=(255&e[n])<<n%4*8;return t}(e),8*e.length))}},348:(e,t,n)=>{var a=n(407),o=n(883);t.useImmer=function(e){var t=o.useState((function(){return a.freeze("function"==typeof e?e():e,!0)})),n=t[1];return[t[0],o.useCallback((function(e){n("function"==typeof e?a.produce(e):a.freeze(e))}),[])]},t.useImmerReducer=function(e,t,n){var r=o.useMemo((function(){return a.produce(e)}),[e]);return o.useReducer(r,t,n)}},356:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=n(11),o=n(425),r=n(568);t.default=function(e,t,n){e??={},n??=0;let l=(0,o.default)({...e,_v6:!0},new Uint8Array(16));if(l=(0,r.default)(l),t){for(let e=0;e<16;e++)t[n+e]=l[e];return t}return(0,a.unsafeStringify)(l)}},377:t=>{"use strict";t.exports=e},390:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.initialControlState=t.initialOffOnState=t.initialAutoManState=t.parameterInitialState=t.pumpInitialProps=t.pumpInitialStatus=t.valveProps=t.processObjectProps=t.valveStatus=void 0,t.valveStatus={alarm:!1,actFB:!1,deActFB:!0,activatedConfig:7,deactivatedConfig:5,itemName:"VXXX",manual:!1,masked:!1,changing:!1,locate:!1},t.processObjectProps={status:t.valveStatus},t.valveProps={processObject:t.processObjectProps,handleClick:()=>{console.log("Valve clicked")},labelPosition:"left",showLabel:!1},t.pumpInitialStatus={alarm:!1,actFB:!1,deActFB:!1,configuration:7,itemName:"itemName",manual:!1,masked:!1,changing:!1,locate:!1},t.pumpInitialProps={status:t.pumpInitialStatus},t.parameterInitialState=[{label:{text:"label",className:"",tooltipText:"",tooltipPosition:"",tooltipClassName:"",tooltipId:""},input:{type:"text",inputmode:"numeric",placeholder:"Enter a number",editable:!0,pattern:"^[0-9]*[.,]?[0-9]*$",min:0,max:100,decimalPlaces:2,eu:"µC",value:0}}],t.initialAutoManState={auto:!0,manual:!1},t.initialOffOnState={off:!1,on:!1},t.initialControlState={command:{interlocks:{main:[],upperSeat:[],lowerSeat:[]},main:{label:"Main",autoManual:!1,activation:!1},upperSeat:{label:"Upper Seat",activation:!1},lowerSeat:{label:"Lower Seat",activation:!1}}}},407:(e,t,n)=>{"use strict";e.exports=n(124)},425:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateV1State=void 0;const a=n(291),o=n(11),r={};function l(e,t,n){return e.msecs??=-1/0,e.nsecs??=0,t===e.msecs?(e.nsecs++,e.nsecs>=1e4&&(e.node=void 0,e.nsecs=0)):t>e.msecs?e.nsecs=0:t<e.msecs&&(e.node=void 0),e.node||(e.node=n.slice(10,16),e.node[0]|=1,e.clockseq=16383&(n[8]<<8|n[9])),e.msecs=t,e}function i(e,t,n,a,o,r,l=0){if(e.length<16)throw new Error("Random bytes length must be >= 16");if(r){if(l<0||l+16>r.length)throw new RangeError(`UUID byte range ${l}:${l+15} is out of buffer bounds`)}else r=new Uint8Array(16),l=0;t??=Date.now(),n??=0,a??=16383&(e[8]<<8|e[9]),o??=e.slice(10,16);const i=(1e4*(268435455&(t+=122192928e5))+n)%4294967296;r[l++]=i>>>24&255,r[l++]=i>>>16&255,r[l++]=i>>>8&255,r[l++]=255&i;const s=t/4294967296*1e4&268435455;r[l++]=s>>>8&255,r[l++]=255&s,r[l++]=s>>>24&15|16,r[l++]=s>>>16&255,r[l++]=a>>>8|128,r[l++]=255&a;for(let e=0;e<6;++e)r[l++]=o[e];return r}t.updateV1State=l,t.default=function(e,t,n){let s;const u=e?._v6??!1;if(e){const t=Object.keys(e);1===t.length&&"_v6"===t[0]&&(e=void 0)}if(e)s=i(e.random??e.rng?.()??(0,a.default)(),e.msecs,e.nsecs,e.clockseq,e.node,t,n);else{const e=Date.now(),o=(0,a.default)();l(r,e,o),s=i(o,r.msecs,r.nsecs,u?void 0:r.clockseq,u?void 0:r.node,t,n)}return t??(0,o.unsafeStringify)(s)}},429:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getBoolAtIndex=void 0,t.getBoolAtIndex=(e,t)=>Boolean(e>>t&1)},441:(e,t,n)=>{"use strict";var a;Object.defineProperty(t,"__esModule",{value:!0}),t.PumpCompound=t.usePumpContext=t.PumpContextProvider=t.COMPONENT_TYPE=void 0;const o=n(883),r=n(542),l=n(535),i=n(152),s=n(506),u=n(390);t.COMPONENT_TYPE=r.PUMP_COMPONENT_TYPE,a=(0,l.useCreateContext)("PumpCompound"),t.PumpContextProvider=a[0],t.usePumpContext=a[1],t.PumpCompound={Root:({componentProps:e,pumpProps:n,onActionPerformed:a,children:r})=>o.createElement(t.PumpContextProvider,{pumpProps:n,componentProps:e,onActionPerformed:a},r),pump:()=>{const{pumpProps:e,onActionPerformed:n,componentProps:a}=(0,t.usePumpContext)("Valve"),r=o.useRef(null),{emit:l}=a,{processObject:c,pumpType:d}=e,{status:p}=c||u.pumpInitialProps;let m=s.pumpItemNames;(null==p?void 0:p.locate)||(m=m.slice(0,-1));const f=a.store.isCoordContainerChild;console.log(`isCoordChild ${f}`);const v=f?"display-none":"hmi-component__row",b=f?"hmi-component hmi-component-pump":`hmi-component ${f?"display-none":"hmi-component__column"} `;return o.createElement("div",Object.assign({ref:r},l({classes:[`${b}`]}),{"data-component":t.COMPONENT_TYPE,onClick:n}),o.createElement("div",{className:`${v}`},o.createElement("div",{className:"hmi-component hmi-component-pump"},o.createElement(i.default,{itemClassName:`${(0,s.getPumpStatusClassNames)("base-1 show",p)}`}),o.createElement(i.default,{itemClassName:"base-2 show item"}),o.createElement(i.default,{itemClassName:"base-3 show item"}),m.map((({name:e,index:t,key:n})=>o.createElement(i.default,{itemClassName:e+" "+(0,s.getPumpItemClassName)(t,p,d||"centrifugal"),key:n})))),o.createElement(i.default,{itemClassName:"locate "+(p.locate?"show item":"hide item")})))},popover:({anchorEl:e})=>{const{pumpProps:n,componentProps:a}=(0,t.usePumpContext)("Popover"),{showLabel:r,labelPosition:l,processObject:i}=n,{status:u}=i||{};if(!r)return null;const{position:c}=a;let d="itemId popover position-left";return l&&(d=(0,s.getItemIdPositionClassName)(d,l)),o.createElement("div",{className:d,style:{top:c.y,left:c.x}},o.createElement("div",{style:{padding:8}},null==u?void 0:u.itemName))}}},465:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="00000000-0000-0000-0000-000000000000"},506:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getPumpStatusClassNames=t.getPumpItemClassName=t.pumpItemNames=t.getItemIdPositionClassName=t.valveMpItemNames=t.itemNames=t.getValveMpItemClassName=t.getItemClassName=void 0;const a=n(429),o=n(542),r=n(182);t.getItemClassName=(e,t)=>{var n,o;let r="";const l=null!==(n=null==t?void 0:t.activatedConfig)&&void 0!==n?n:0,i=null!==(o=null==t?void 0:t.deactivatedConfig)&&void 0!==o?o:0;return r=e<12?(0,a.getBoolAtIndex)(l,e)&&(null==t?void 0:t.actFB)||(0,a.getBoolAtIndex)(i,e)&&(null==t?void 0:t.deActFB)?"show item":"hide item":14===e?"show":12===e||13===e?(0,a.getBoolAtIndex)(l,e)||(0,a.getBoolAtIndex)(i,e)?"show":"hide":15===e||16===e?(0,a.getBoolAtIndex)(l,12)||(0,a.getBoolAtIndex)(i,12)?"show":"hide":17===e?(0,a.getBoolAtIndex)(l,13)||(0,a.getBoolAtIndex)(i,13)?"show":"hide":18===e&&((0,a.getBoolAtIndex)(l,13)||(0,a.getBoolAtIndex)(i,13))?"show":"hide",r.includes("show")&&!r.includes("item")&&((null==t?void 0:t.alarm)&&(r=r.replace("AlarmState","")+" AlarmState"),(null==t?void 0:t.changing)&&(r=r.replace("Changing","")+" Changing"),(null==t?void 0:t.manual)&&(r=r.replace("Manual","")+" Manual"),(null==t?void 0:t.masked)&&!t.alarm&&(r=r.replace("NoAlarmMask","")+" NoAlarmMask"),(null==t?void 0:t.masked)&&(r=r.replace("Masked","")+" Masked"),(null==t?void 0:t.actFB)&&(r=r.replace("Activated","")+" Activated"),(null==t?void 0:t.deActFB)&&(r=r.replace("Deactivated","")+" Deactivated"),(null==t?void 0:t.locate)&&(r=r.replace("circle","")+" circle")),r},t.getValveMpItemClassName=(e,t)=>{var n,o;let r="";const l=null!==(n=null==t?void 0:t.activatedConfig)&&void 0!==n?n:0,i=null!==(o=null==t?void 0:t.deactivatedConfig)&&void 0!==o?o:0;return e<8?r=(0,a.getBoolAtIndex)(l,e)&&(null==t?void 0:t.actFB)||(0,a.getBoolAtIndex)(i,e)&&(null==t?void 0:t.deActFB)?"show item":"hide item":9===e?r="show":8===e?r=(0,a.getBoolAtIndex)(l,e)||(0,a.getBoolAtIndex)(i,e)?"show":"hide":10===e?(0,a.getBoolAtIndex)(l,10)||(0,a.getBoolAtIndex)(i,10)?(r="show item",r=(null==t?void 0:t.usl)?r.replace("Activated","")+" Activated":r.replace("Deactivated","")+" Deactivated"):r="hide item":11===e?(0,a.getBoolAtIndex)(l,11)||(0,a.getBoolAtIndex)(i,11)?(r="show item",r=(null==t?void 0:t.lsl)?r.replace("Activated","")+" Activated":r.replace("Deactivated","")+" Deactivated"):r="hide item":12===e&&((null==t?void 0:t.locate)?(r=r.replace("show item","")+" show item",((0,a.getBoolAtIndex)(l,8)||(0,a.getBoolAtIndex)(i,8))&&(r=r.replace("show large item","")+" show large item")):r=r.replace("hide item","")+" hide item"),r.includes("show")&&!r.includes("item")&&((null==t?void 0:t.alarm)&&(r=r.replace("AlarmState","")+" AlarmState"),(null==t?void 0:t.changing)&&(r=r.replace("Changing","")+" Changing"),(null==t?void 0:t.manual)&&(r=r.replace("Manual","")+" Manual"),(null==t?void 0:t.masked)&&!t.alarm&&(r=r.replace("NoAlarmMask","")+" NoAlarmMask"),(null==t?void 0:t.masked)&&(r=r.replace("Masked","")+" Masked"),(null==t?void 0:t.actFB)&&(r=r.replace("Activated","")+" Activated"),(null==t?void 0:t.deActFB)&&(r=r.replace("Deactivated","")+" Deactivated")),r},t.itemNames=Object.entries(o.ItemNameEnum).map(((e,t)=>({key:(0,r.v4)(),name:e,value:e[1],index:t}))),t.valveMpItemNames=Object.entries(o.valveMpItemNameEnum).map(((e,t)=>({key:(0,r.v4)(),name:e,value:e[1],index:t}))),t.getItemIdPositionClassName=(e,t)=>{if(!e.includes("itemId popover"))return console.warn("Function getItemIdPositionClassName called when 'itemId popover' not in given className"),e;switch(e="itemId popover",t){case"left":e=e.replace("position-left","")+" position-left";break;case"right":e=e.replace("position-right","")+" position-right";break;case"top-left":e=e.replace("position-top-left","")+" position-top-left";break;case"top-right":e=e.replace("position-top-right","")+" position-top-right";break;case"bottom-left":e=e.replace("position-bottom-left","")+" position-bottom-left";break;case"bottom-right":e=e.replace("position-bottom-right","")+" position-bottom-right"}return e},t.pumpItemNames=o.pumpItemList.map(((e,t)=>({key:(0,r.v4)(),name:e,index:t}))),t.getPumpItemClassName=(e,t,n)=>{const o=(e=>{switch(e){case"centrifugal":case"diaphragm":case"positive-displacment":case"progressive-cavity":return 1;case"gear":case"liquid-ring":case"positive-screw":return 3;default:throw Error(`In getPumpConfiguration() pump type: ${e} not found`)}})(n);let r="";return e<2&&(r=(0,a.getBoolAtIndex)(o,e)?`show item ${n}`:"hide item"),r.includes("show")&&!r.includes("item")&&(console.log("index",e,r),(null==t?void 0:t.alarm)&&(r=r.replace("AlarmState","")+" AlarmState"),(null==t?void 0:t.changing)&&(r=r.replace("Changing","")+" Changing"),(null==t?void 0:t.manual)&&(r=r.replace("Manual","")+" Manual"),(null==t?void 0:t.masked)&&!t.alarm&&(r=r.replace("NoAlarmMask","")+" NoAlarmMask"),(null==t?void 0:t.masked)&&(r=r.replace("Masked","")+" Masked"),(null==t?void 0:t.actFB)&&(r=r.replace("Activated","")+" Activated"),(null==t?void 0:t.deActFB)&&(r=r.replace("Deactivated","")+" Deactivated")),r},t.getPumpStatusClassNames=(e,t)=>(console.log(`status: ${JSON.stringify(t,null,2)}`),e.includes("show")&&!e.includes("item")&&((null==t?void 0:t.alarm)&&(e=e.replace("AlarmState","")+" AlarmState"),(null==t?void 0:t.changing)&&(e=e.replace("Changing","")+" Changing"),(null==t?void 0:t.manual)&&(e=e.replace("Manual","")+" Manual"),(null==t?void 0:t.masked)&&!t.alarm&&(e=e.replace("NoAlarmMask","")+" NoAlarmMask"),(null==t?void 0:t.masked)&&(e=e.replace("Masked","")+" Masked"),(null==t?void 0:t.actFB)&&(e=e.replace("Activated","")+" Activated"),(null==t?void 0:t.deActFB)&&(e=e.replace("Deactivated","")+" Deactivated")),e)},511:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.useValveReducer=function(){const[e,t]=(0,a.useImmerReducer)(r,o.valveStatus);return{state:e,reducer:{updateActConfig:function(e){t({type:"UPDATE_ACT_CONFIG",value:e})},updateDeActConfig:function(e){t({type:"UPDATE_DEACT_CONFIG",value:e})},updateAlarm:function(){t({type:"UPDATE_ALARM"})},updateActFB:function(){t({type:"UPDATE_ACT_FB"})},updateDeActFB:function(){t({type:"UPDATE_DE_ACT_FB"})},updateUsl:function(){t({type:"UPDATE_USL"})},updateLsl:function(){t({type:"UPDATE_LSL"})},updateManual:function(){t({type:"UPDATE_MANUAL"})},updateMasked:function(){t({type:"UPDATE_MASKED"})},updateChanging:function(){t({type:"UPDATE_CHANGING"})},updateLocate:function(){t({type:"UPDATE_LOCATE"})}}}},t.ParameterReducer=l,t.paramItemsReducer=function(){const[e,t]=(0,a.useImmerReducer)(l,o.parameterInitialState);return{state:e,reducer:{updateValue:function(e,n){t({type:"UPDATE_VALUE",index:e,value:n})}}}},t.useValveMpCommandReducer=function(){const[e,t]=(0,a.useImmerReducer)(i,o.initialControlState);return{state:e,reducer:{updateAutoManSelection:function(e){t({type:"UPDATE_AUTO_MANUAL",mode:e})},updateMainManualOn:function(){t({type:"UPDATE_MAIN_MAN_ON"})},updateMainManualOff:function(){t({type:"UPDATE_MAIN_MAN_OFF"})},updateUslManualOn:function(){t({type:"UPDATE_USL_MAN_ON"})},updateUslManualOff:function(){t({type:"UPDATE_USL_MAN_OFF"})},updateLslManualOn:function(){t({type:"UPDATE_LSL_MAN_ON"})},updateLslManualOff:function(){t({type:"UPDATE_LSL_MAN_OFF"})}}}};const a=n(348),o=n(390);function r(e,t){switch(t.type){case"UPDATE_ACT_CONFIG":return e.activatedConfig=t.value,e;case"UPDATE_DEACT_CONFIG":return e.deactivatedConfig=t.value,e;case"UPDATE_ACT_FB":return e.actFB=!e.actFB,e;case"UPDATE_DE_ACT_FB":return e.deActFB=!e.deActFB,e;case"UPDATE_USL":return e.usl=!e.usl,e;case"UPDATE_LSL":return e.lsl=!e.lsl,e;case"UPDATE_MANUAL":return e.manual=!e.manual,e;case"UPDATE_ALARM":return e.alarm=!e.alarm,e;case"UPDATE_MASKED":return e.masked=!e.masked,e;case"UPDATE_CHANGING":return e.changing=!e.changing,e;case"UPDATE_LOCATE":return e.locate=!e.locate,e;default:return e}}function l(e,t){return"UPDATE_VALUE"===t.type?(e[t.index].input.value=t.value,e):e}function i(e,t){var n,a,o,r,l,i,s;switch(t.type){case"UPDATE_AUTO_MANUAL":if(null===(n=e.command)||void 0===n?void 0:n.main)if("auto"===t.mode)e.command.main.autoManual=!1,console.log("In Auto");else if("manual"===t.mode)return e.command.main.autoManual=!0,console.log("In Manual"),e;return e;case"UPDATE_MAIN_MAN_ON":return(null===(a=e.command)||void 0===a?void 0:a.main)&&(e.command.main.activation=!0),e;case"UPDATE_MAIN_MAN_OFF":return(null===(o=e.command)||void 0===o?void 0:o.main)&&(e.command.main.activation=!1),e;case"UPDATE_USL_MAN_ON":return(null===(r=e.command)||void 0===r?void 0:r.upperSeat)&&(e.command.upperSeat.activation=!0),e;case"UPDATE_USL_MAN_OFF":return(null===(l=e.command)||void 0===l?void 0:l.upperSeat)&&(e.command.upperSeat.activation=!1),e;case"UPDATE_LSL_MAN_ON":return(null===(i=e.command)||void 0===i?void 0:i.lowerSeat)&&(e.command.lowerSeat.activation=!0),e;case"UPDATE_LSL_MAN_OFF":return(null===(s=e.command)||void 0===s?void 0:s.lowerSeat)&&(e.command.lowerSeat.activation=!1),e;default:return e}}},535:function(e,t,n){"use strict";var a=this&&this.__rest||function(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(a=Object.getOwnPropertySymbols(e);o<a.length;o++)t.indexOf(a[o])<0&&Object.prototype.propertyIsEnumerable.call(e,a[o])&&(n[a[o]]=e[a[o]])}return n};Object.defineProperty(t,"__esModule",{value:!0}),t.useCreateContext=function(e,t){const n=o.createContext(t),r=e=>{const{children:t}=e,r=a(e,["children"]),l=o.useMemo((()=>r),Object.values(r));return o.createElement(n.Provider,{value:l},t)};return r.displayName=e+"Provider",[r,function(a){const r=o.useContext(n);if(r)return r;if(void 0!==t)return t;throw new Error(`\`${a}\` must be used within \`${e}\``)}]};const o=n(883)},542:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.pumpItemList=t.ItemPositionEnum=t.valveMpItemClickableNameEnum=t.ItemClickableNameEnum=t.valveMpItemNameEnum=t.ItemNameEnum=t.ValveClassNameEnum=t.PUMP_COMPONENT_TYPE=t.VALVE_COMPONENT_TYPE=void 0,t.VALVE_COMPONENT_TYPE="hmi.process_objects.Valve",t.PUMP_COMPONENT_TYPE="hmi.process_objects.Pump",t.ValveClassNameEnum={AlarmState:"AlarmState",Activated:"Activated",Deactivated:"Deactivated",Manual:"Manual",Masked:"Masked",Changing:"Changing",NoAlarmMask:"NoAlarmMask",Locate:"Locate"},t.ItemNameEnum={V1b1:"v1b1",V1b2:"v1b2",V1b3:"v1b3",V1b4:"v1b4",V2b1:"v2b1",V2b2:"v2b2",V2b3:"v2b3",V2b4:"v2b4",V3b1:"v3b1",V3b2:"v3b2",V3b3:"v3b3",V3b4:"v3b4",V2:"v2",V3:"v3",V1:"v1",V2f1:"v2f1",V2f2:"v2f2",V3f1:"v3f1",V3f2:"v3f2"},t.valveMpItemNameEnum={V1b1:"v1b1",V1b2:"v1b2",V1b3:"v1b3",V1b4:"v1b4",V2b1:"v2b1",V2b2:"v2b2",V2b3:"v2b3",V2b4:"v2b4",V2:"v2",v1:"v1",usl:"usl",lsl:"lsl",locate:"locate"},t.ItemClickableNameEnum={V1b1:"v1b1",V1b2:"v1b2",V1b3:"v1b3",V1b4:"v1b4",V2b1:"v2b1",V2b2:"v2b2",V2b3:"v2b3",V2b4:"v2b4",V3b1:"v3b1",V3b2:"v3b2",V3b3:"v3b3",V3b4:"v3b4",V2:"v2",V3:"v3",V1:"v1"},t.valveMpItemClickableNameEnum={V1b1:"v1b1",V1b2:"v1b2",V1b3:"v1b3",V1b4:"v1b4",V2b1:"v2b1",V2b2:"v2b2",V2b3:"v2b3",V2b4:"v2b4",V2:"v2",V1:"v1"},t.ItemPositionEnum={v1b1:"v1b1",v1b2:"v1b2",v1b3:"v1b3",v1b4:"v1b4",v2b1:"v2b1",V2b2:"v2b2",v2b3:"v2b3",v2b4:"v2b4",v3b1:"v3b1",v3b2:"v3b2",v3b3:"v3b3",v3b4:"v3b4",v2:"v2",v3:"v3"},t.pumpItemList=["symbol-1","symbol-2","locate"]},557:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=void 0;const a=n(829),o=n(988);var r=n(988);function l(e,t,n,r){return(0,o.default)(80,a.default,e,t,n,r)}Object.defineProperty(t,"DNS",{enumerable:!0,get:function(){return r.DNS}}),Object.defineProperty(t,"URL",{enumerable:!0,get:function(){return r.URL}}),l.DNS=o.DNS,l.URL=o.URL,t.default=l},568:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=n(797),o=n(11);t.default=function(e){const t=(n="string"==typeof e?(0,a.default)(e):e,Uint8Array.of((15&n[6])<<4|n[7]>>4&15,(15&n[7])<<4|(240&n[4])>>4,(15&n[4])<<4|(240&n[5])>>4,(15&n[5])<<4|(240&n[0])>>4,(15&n[0])<<4|(240&n[1])>>4,(15&n[1])<<4|(240&n[2])>>4,96|15&n[2],n[3],n[8],n[9],n[10],n[11],n[12],n[13],n[14],n[15]));var n;return"string"==typeof e?(0,o.unsafeStringify)(t):t}},591:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=void 0;const a=n(338),o=n(988);var r=n(988);function l(e,t,n,r){return(0,o.default)(48,a.default,e,t,n,r)}Object.defineProperty(t,"DNS",{enumerable:!0,get:function(){return r.DNS}}),Object.defineProperty(t,"URL",{enumerable:!0,get:function(){return r.URL}}),l.DNS=o.DNS,l.URL=o.URL,t.default=l},697:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i},702:(e,t,n)=>{"use strict";n.r(t)},740:(e,t,n)=>{"use strict";var a;Object.defineProperty(t,"__esModule",{value:!0}),t.ValveMpCompound=t.useValveContext=t.ValveContextProvider=void 0;const o=n(883),r=n(511),l=n(506),i=n(152),s=n(535),u=n(542),c=n(390),d=u.VALVE_COMPONENT_TYPE;a=(0,s.useCreateContext)("ValveMpCompound"),t.ValveContextProvider=a[0],t.useValveContext=a[1],t.ValveMpCompound={Root:({componentProps:e,valveProps:n,onActionPerformed:a,children:l})=>o.createElement(t.ValveContextProvider,{valveProps:n,componentProps:e,onActionPerformed:a,useValveReducer:r.useValveReducer},l),valve:()=>{var e;const{valveProps:n,onActionPerformed:a,componentProps:r}=(0,t.useValveContext)("Valve"),s=o.useRef(null),{position:u,emit:p}=r,{processObject:m}=n,{status:f}=m||c.processObjectProps,v=null!==(e=null==u?void 0:u.x)&&void 0!==e&&e;let b=l.valveMpItemNames;return(null==f?void 0:f.locate)||(b=b.slice(0,-1)),v?o.createElement("div",Object.assign({ref:s},p({classes:["hmi-component hmi-component-valve__mp "]}),{"data-component":d,onClick:a}),b.map((({value:e,index:t,key:n})=>o.createElement(i.default,{itemClassName:e+" "+(0,l.getValveMpItemClassName)(t,f),key:n})))):o.createElement("div",Object.assign({ref:s},p({classes:["hmi-component hmi-component__column "]}),{"data-component":d,onClick:a}),o.createElement("div",{className:"hmi-component__row"},o.createElement("div",{className:"hmi-component-valve__mp"},b.map((({value:e,index:t,key:n})=>o.createElement(i.default,{itemClassName:e+" "+(0,l.getValveMpItemClassName)(t,f),key:n}))))))},popover:({anchorEl:e})=>{const{valveProps:n,componentProps:a}=(0,t.useValveContext)("Popover"),{showLabel:r,labelPosition:i,processObject:s}=n,{status:u}=s||c.processObjectProps;if(!r)return null;const{position:d}=a;let p="itemId popover position-left";return i&&(p=(0,l.getItemIdPositionClassName)(p,i)),o.createElement("div",{className:p,style:{top:d.y,left:d.x}},o.createElement("div",{style:{padding:8}},null==u?void 0:u.itemName))}}},746:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=n(697);t.default=function(e){return"string"==typeof e&&a.default.test(e)}},770:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=n(746);t.default=function(e){if(!(0,a.default)(e))throw TypeError("Invalid UUID");return parseInt(e.slice(14,15),16)}},779:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n="undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto);t.default={randomUUID:n}},797:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=n(746);t.default=function(e){if(!(0,a.default)(e))throw TypeError("Invalid UUID");let t;return Uint8Array.of((t=parseInt(e.slice(0,8),16))>>>24,t>>>16&255,t>>>8&255,255&t,(t=parseInt(e.slice(9,13),16))>>>8,255&t,(t=parseInt(e.slice(14,18),16))>>>8,255&t,(t=parseInt(e.slice(19,23),16))>>>8,255&t,(t=parseInt(e.slice(24,36),16))/1099511627776&255,t/4294967296&255,t>>>24&255,t>>>16&255,t>>>8&255,255&t)}},829:(e,t)=>{"use strict";function n(e,t,n,a){switch(e){case 0:return t&n^~t&a;case 1:case 3:return t^n^a;case 2:return t&n^t&a^n&a}}function a(e,t){return e<<t|e>>>32-t}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){const t=[1518500249,1859775393,2400959708,3395469782],o=[1732584193,4023233417,2562383102,271733878,3285377520],r=new Uint8Array(e.length+1);r.set(e),r[e.length]=128;const l=(e=r).length/4+2,i=Math.ceil(l/16),s=new Array(i);for(let t=0;t<i;++t){const n=new Uint32Array(16);for(let a=0;a<16;++a)n[a]=e[64*t+4*a]<<24|e[64*t+4*a+1]<<16|e[64*t+4*a+2]<<8|e[64*t+4*a+3];s[t]=n}s[i-1][14]=8*(e.length-1)/Math.pow(2,32),s[i-1][14]=Math.floor(s[i-1][14]),s[i-1][15]=8*(e.length-1)&4294967295;for(let e=0;e<i;++e){const r=new Uint32Array(80);for(let t=0;t<16;++t)r[t]=s[e][t];for(let e=16;e<80;++e)r[e]=a(r[e-3]^r[e-8]^r[e-14]^r[e-16],1);let l=o[0],i=o[1],u=o[2],c=o[3],d=o[4];for(let e=0;e<80;++e){const o=Math.floor(e/20),s=a(l,5)+n(o,i,u,c)+d+t[o]+r[e]>>>0;d=c,c=u,u=a(i,30)>>>0,i=l,l=s}o[0]=o[0]+l>>>0,o[1]=o[1]+i>>>0,o[2]=o[2]+u>>>0,o[3]=o[3]+c>>>0,o[4]=o[4]+d>>>0}return Uint8Array.of(o[0]>>24,o[0]>>16,o[0]>>8,o[0],o[1]>>24,o[1]>>16,o[1]>>8,o[1],o[2]>>24,o[2]>>16,o[2]>>8,o[2],o[3]>>24,o[3]>>16,o[3]>>8,o[3],o[4]>>24,o[4]>>16,o[4]>>8,o[4])}},838:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ParameterListComponentMeta=t.ParameterListComponent=t.COMPONENT_TYPE=void 0;const a=n(883),o=n(390),r=[{label:{text:"text"},input:{value:null,placeholder:"Enter a Number"}}];t.COMPONENT_TYPE="hmi.input.ParameterList",t.ParameterListComponent=e=>{const t=a.useMemo((()=>{const{parameters:t}=e.props||r;return t}),[e.props.parameters]);return a.createElement("div",{className:"display-flex-column"},t.map(((t,n)=>{const{label:o,input:r}=t;return console.log(r.value),a.createElement("label",{key:`${o.text}-parameter${n}`,className:"field small"},a.createElement("span",{className:"label"},o.text),a.createElement("span",{className:"eu"},r.eu),a.createElement("input",{type:"text",id:`${o.text}-parameter${n}`,inputMode:r.inputmode,pattern:r.pattern||"[0-9]*",placeholder:r.placeholder,disabled:!r.editable,value:r.value,onChange:t=>{e.store.props.write(`parameters[${n}].input.value`,t.currentTarget.value)}}))})))},t.ParameterListComponentMeta=class{getComponentType(){return t.COMPONENT_TYPE}getDefaultSize(){return{width:120,height:240}}getPropsReducer(e){return{parameters:e.read("parameters",o.parameterInitialState)}}getViewComponent(){return t.ParameterListComponent}}},863:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CommandValveMpMeta=t.CommandValveMp=t.COMPONENT_TYPE=void 0;const a=n(883),o=n(883),r=n(511);t.COMPONENT_TYPE="hmi.input.CommandValveMp",t.CommandValveMp=a.memo((e=>{const{state:t,reducer:n}=(0,r.useValveMpCommandReducer)();(0,o.useEffect)((()=>{const a=e.store.props.subscribe((e=>{var a,o,r;const l=e.read("command"),{main:i,upperSeat:s,lowerSeat:u}=l;(null===(a=t.command)||void 0===a?void 0:a.main)&&i&&(i.autoManual!==t.command.main.autoManual&&n.updateAutoManSelection(i.autoManual?"manual":"auto"),i.activation!==t.command.main.activation&&(i.activation?i.activation&&n.updateMainManualOn():n.updateMainManualOff())),(null===(o=t.command)||void 0===o?void 0:o.lowerSeat)&&u&&u.activation!==t.command.lowerSeat.activation&&(u.activation?u.activation&&n.updateLslManualOn():n.updateLslManualOff()),(null===(r=t.command)||void 0===r?void 0:r.upperSeat)&&s&&s.activation!==t.command.upperSeat.activation&&(s.activation?s.activation&&n.updateUslManualOn():n.updateUslManualOff()),console.log("command changed:",l)}));return()=>{"function"==typeof a&&a()}}),[e.store.props]),console.log(`props.store.addressPath ${e.store.addressPath}`),console.log(`props.store.isDirty ${e.store.props.isDirty()}`);const{main:l,upperSeat:i,lowerSeat:s,interlocks:u}=t.command||{},c=e=>e.includes(!0,0),d=t=>{var a,o;n.updateAutoManSelection(t),"auto"===t?null===(a=e.store.props)||void 0===a||a.write("command.main.autoManual",!1):"manual"===t&&(null===(o=e.store.props)||void 0===o||o.write("command.main.autoManual",!0))};return a.createElement("div",{className:"hmi-component-command-valve-mp hmi-component-command-valve-mp__grid"},a.createElement("label",{className:"main-label"},null==l?void 0:l.label),a.createElement("div",{role:"group",className:"button-group outlined main-auto-manual"},a.createElement("button",{className:"button outlined "+((null==l?void 0:l.autoManual)?"":"selected"),disabled:c((null==u?void 0:u.main)||[]),onClick:()=>d("auto")},"Auto "),a.createElement("button",{className:"button outlined "+((null==l?void 0:l.autoManual)?"selected":""),disabled:c((null==u?void 0:u.main)||[]),onClick:()=>d("manual")},"Manual")),a.createElement("div",{role:"group",className:"button-group outlined main-on-off"},a.createElement("button",{className:"button outlined "+((null==l?void 0:l.activation)?"selected":""),disabled:c((null==u?void 0:u.main)||[])||!(null==l?void 0:l.autoManual),onClick:()=>{var t;n.updateMainManualOn(),null===(t=e.store.props)||void 0===t||t.write("command.main.activation",!0)}},"On "),a.createElement("button",{className:"button outlined "+((null==l?void 0:l.activation)?"":"selected"),disabled:c((null==u?void 0:u.main)||[])||!(null==l?void 0:l.autoManual),onClick:()=>{var t;n.updateMainManualOff(),null===(t=e.store.props)||void 0===t||t.write("command.main.activation",!1)}},"Off")),a.createElement("label",{className:"upper-seat-label"},null==i?void 0:i.label),a.createElement("div",{role:"group",className:"button-group outlined upper-seat-on-off"},a.createElement("button",{className:"button outlined "+((null==i?void 0:i.activation)?"selected":""),disabled:c((null==u?void 0:u.upperSeat)||[])||!(null==l?void 0:l.autoManual),onClick:()=>{var t;n.updateUslManualOn(),null===(t=e.store.props)||void 0===t||t.write("command.upperSeat.activation",!0)}},"On "),a.createElement("button",{className:"button outlined "+((null==i?void 0:i.activation)?"":"selected"),disabled:c((null==u?void 0:u.upperSeat)||[])||!(null==l?void 0:l.autoManual),onClick:()=>{var t;n.updateUslManualOff(),null===(t=e.store.props)||void 0===t||t.write("command.upperSeat.activation",!1)}},"Off")),a.createElement("label",{className:"lower-seat-label"},null==s?void 0:s.label),a.createElement("div",{role:"group",className:"button-group outlined lower-seat-on-off"},a.createElement("button",{className:"button outlined "+((null==s?void 0:s.activation)?"selected":""),disabled:c((null==u?void 0:u.lowerSeat)||[])||!(null==l?void 0:l.autoManual),onClick:()=>{var t;n.updateLslManualOn(),null===(t=e.store.props)||void 0===t||t.write("command.lowerSeat.activation",!0)}},"On "),a.createElement("button",{className:"button outlined "+((null==s?void 0:s.activation)?"":"selected"),disabled:c((null==u?void 0:u.lowerSeat)||[])||!(null==l?void 0:l.autoManual),onClick:()=>{var t;n.updateLslManualOff(),null===(t=e.store.props)||void 0===t||t.write("command.lowerSeat.activation",!1)},value:"true"},"Off")))}),((e,t)=>e.props===t.props)),t.CommandValveMpMeta=class{getComponentType(){return t.COMPONENT_TYPE}getViewComponent(){return t.CommandValveMp}getDefaultSize(){return{width:280,height:140}}getPropsReducer(e){return{command:{interlocks:{main:e.readArray("command.interlocks.main"),upperSeat:e.readArray("command.interlocks.upperSeat"),lowerSeat:e.readArray("command.interlocks.lowerSeat")},main:{label:e.readString("commands.main.label",""),autoManual:e.readBoolean("command.main.autoManual",!1),activation:e.readBoolean("command.main.activation",!1)},upperSeat:{label:e.readString("commands.upperSeat.label",""),activation:e.readBoolean("command.upperSeat.activation",!1)},lowerSeat:{label:e.readString("commands.lowerSeat.label",""),activation:e.readBoolean("command.lowerSeat.activation",!1)}}}}}},869:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PumpMeta=t.Pump=t.COMPONENT_TYPE=void 0;const a=n(883),o=n(377),r=n(441),l=n(390);t.COMPONENT_TYPE="hmi.process_objects.Pump";class i extends o.Component{constructor(e){var t;super(e),this.processObject=(null===(t=this.props.props.processObject)||void 0===t?void 0:t.status)||l.pumpInitialStatus,this.status=this.processObject,this.showLabel=this.props.props.showLabel||!1,this.labelPosition=this.props.props.labelPosition||"left",this.onActionPerformed=()=>{this.props.eventsEnabled?(console.log("Valve clicked!"),this.props.componentEvents.fireComponentEvent("onActionPerformed",{})):console.log("Valve is disabled in the design-scope")},this.valveRef=a.createRef()}componentDidMount(){}render(){return a.createElement(r.PumpCompound.Root,{componentProps:this.props,pumpProps:this.props.props,onActionPerformed:this.onActionPerformed},a.createElement(r.PumpCompound.pump,null),a.createElement(r.PumpCompound.popover,{anchorEl:this.valveRef.current}))}}t.Pump=i,t.PumpMeta=class{getComponentType(){return t.COMPONENT_TYPE}getViewComponent(){return i}getDefaultSize(){return{width:36,height:36}}getPropsReducer(e){return{pumpType:e.readString("pumpType","centrifugal"),processObject:{status:{alarm:e.readBoolean("processObject.status.alarm",!1),actFB:e.readBoolean("processObject.status.actFB",!1),deActFB:e.readBoolean("processObject.status.deActFB",!1),configuration:e.readNumber("processObject.status.configuration",7),itemName:e.readString("processObject.status.itemName",""),manual:e.readBoolean("processObject.status.manual",!1),masked:e.readBoolean("processObject.status.masked",!1),changing:e.readBoolean("processObject.status.changing",!1),locate:e.readBoolean("processObject.status.locate",!1)}},showLabel:e.readBoolean("showLabel",!1),labelPosition:e.readString("labelPosition","top-left")}}}},872:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.StatusValveMpMeta=t.StatusValveMp=t.COMPONENT_TYPE=void 0;const a=n(883);t.COMPONENT_TYPE="hmi.display.StatusValveMp",t.StatusValveMp=e=>{const{statusItems:t}=e.props;return a.createElement("div",{className:"hmi-component-status-valve-mp hmi-component-status-valve-mp__grid"},a.createElement("ul",{className:"list bordered dense"},t.map(((e,t)=>a.createElement("li",{key:t},a.createElement("label",{className:"checkbox"},a.createElement("div",{className:"text"},a.createElement("p",{className:"x-small"},e.label)),a.createElement("div",{className:"end"},a.createElement("input",{name:"checkbox",id:`checkbox-${t}`,type:"checkbox",checked:e.status,readOnly:!0}))))))))},t.StatusValveMpMeta=class{getComponentType(){return t.COMPONENT_TYPE}getViewComponent(){return t.StatusValveMp}getDefaultSize(){return{width:24,height:48}}getPropsReducer(e){return console.log(`status ${e.read("status")}`),{statusItems:e.read("status",[{label:"label text",status:!1}])}}}},883:e=>{"use strict";e.exports=t},973:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ValveMeta=t.Valve=t.COMPONENT_TYPE=void 0;const a=n(883),o=n(377),r=n(740),l=n(390);t.COMPONENT_TYPE="hmi.process_objects.Valve_mp";class i extends o.Component{constructor(e){super(e),this.processObject=this.props.props.processObject||l.processObjectProps,this.status=this.processObject.status,this.showLabel=this.props.props.showLabel||!1,this.labelPosition=this.props.props.labelPosition||"left",this.onActionPerformed=()=>{this.props.eventsEnabled?(console.log("Valve clicked!"),this.props.componentEvents.fireComponentEvent("onActionPerformed",{})):console.log("Valve is disabled in the design-scope")},this.valveRef=a.createRef()}componentDidMount(){}render(){return a.createElement(r.ValveMpCompound.Root,{componentProps:this.props,valveProps:this.props.props,onActionPerformed:this.onActionPerformed},a.createElement(r.ValveMpCompound.valve,null),a.createElement(r.ValveMpCompound.popover,{anchorEl:this.valveRef.current}))}}t.Valve=i,t.ValveMeta=class{getComponentType(){return t.COMPONENT_TYPE}getViewComponent(){return i}getDefaultSize(){return{width:20,height:40}}getPropsReducer(e){return console.log(`itemName: ${e.readString("processObject.status.itemName")} showLabel ${e.readBoolean("showLabel")}`),{processObject:{status:{alarm:e.readBoolean("processObject.status.alarm",!1),actFB:e.readBoolean("processObject.status.actFB",!1),deActFB:e.readBoolean("processObject.status.deActFB",!1),activatedConfig:e.readNumber("processObject.status.activatedConfig",511),deactivatedConfig:e.readNumber("processObject.status.deactivatedConfig",4095),itemName:e.readString("processObject.status.itemName",""),manual:e.readBoolean("processObject.status.manual",!1),masked:e.readBoolean("processObject.status.masked",!1),changing:e.readBoolean("processObject.status.changing",!1),locate:e.readBoolean("processObject.status.locate",!1),usl:e.readBoolean("processObject.status.usl",!1),lsl:e.readBoolean("processObject.status.lsl",!1)}},showLabel:e.readBoolean("showLabel",!1),labelPosition:e.readString("labelPosition","top-left")}}}},988:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=t.stringToBytes=void 0;const a=n(797),o=n(11);function r(e){e=unescape(encodeURIComponent(e));const t=new Uint8Array(e.length);for(let n=0;n<e.length;++n)t[n]=e.charCodeAt(n);return t}t.stringToBytes=r,t.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",t.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",t.default=function(e,t,n,l,i,s){const u="string"==typeof n?r(n):n,c="string"==typeof l?(0,a.default)(l):l;if("string"==typeof l&&(l=(0,a.default)(l)),16!==l?.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");let d=new Uint8Array(16+u.length);if(d.set(c),d.set(u,c.length),d=t(d),d[6]=15&d[6]|e,d[8]=63&d[8]|128,i){s=s||0;for(let e=0;e<16;++e)i[s+e]=d[e];return i}return(0,o.unsafeStringify)(d)}}},a={};function o(e){var t=a[e];if(void 0!==t)return t.exports;var r=a[e]={exports:{}};return n[e].call(r.exports,r,r.exports,o),r.exports}o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};return(()=>{"use strict";var e=r;Object.defineProperty(e,"__esModule",{value:!0}),e.StatusValveMp=e.CommandValveMp=e.ParameterListComponent=e.Pump=e.Valve=void 0;const t=o(377),n=o(973);Object.defineProperty(e,"Valve",{enumerable:!0,get:function(){return n.Valve}});const a=o(869);Object.defineProperty(e,"Pump",{enumerable:!0,get:function(){return a.Pump}});const l=o(838);Object.defineProperty(e,"ParameterListComponent",{enumerable:!0,get:function(){return l.ParameterListComponent}});const i=o(863);Object.defineProperty(e,"CommandValveMp",{enumerable:!0,get:function(){return i.CommandValveMp}});const s=o(872);Object.defineProperty(e,"StatusValveMp",{enumerable:!0,get:function(){return s.StatusValveMp}}),o(702),[new n.ValveMeta,new a.PumpMeta,new l.ParameterListComponentMeta,new i.CommandValveMpMeta,new s.StatusValveMpMeta].forEach((e=>t.ComponentRegistry.register(e)))})(),r})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFTZ0IsR0FBcUIsRUFBQThjLGtCQUFrQkMsU0FBUy9jLEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9janMtYnJvd3Nlci9zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9pbW1lci9kaXN0L2Nqcy9pbW1lci5janMucHJvZHVjdGlvbi5qcyIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vc3JjL2NvbXBvbmVudHMvcHJvY2Vzcy1vYmplY3RzL3ZhbHZlL2l0ZW0udHN4Iiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2Nqcy1icm93c2VyL2luZGV4LmpzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2Nqcy1icm93c2VyL21heC5qcyIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9janMtYnJvd3Nlci92NlRvVjEuanMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY2pzLWJyb3dzZXIvdjQuanMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY2pzLWJyb3dzZXIvcm5nLmpzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2Nqcy1icm93c2VyL3Y3LmpzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2Nqcy1icm93c2VyL21kNS5qcyIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL3VzZS1pbW1lci9kaXN0L3VzZS1pbW1lci5qcyIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9janMtYnJvd3Nlci92Ni5qcyIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzL2V4dGVybmFsIHVtZCBcIlBlcnNwZWN0aXZlQ2xpZW50XCIiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL3NyYy9hcGkvaW5pdGlhbFN0YXRlLnRzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvaW1tZXIvZGlzdC9janMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY2pzLWJyb3dzZXIvdjEuanMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL3NyYy91dGlscy9udW1iZXJVdGlsLnRzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9zcmMvY29tcG9uZW50cy9wcm9jZXNzLW9iamVjdHMvcHVtcHMvUHVtcENvbXBvdW5kLnRzeCIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9janMtYnJvd3Nlci9uaWwuanMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL3NyYy9hcGkvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL3NyYy9hcGkvaG9va3MudHMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL3NyYy91dGlscy9jcmVhdGVDb250ZXh0LnRzeCIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vc3JjL2FwaS90eXBlcy50cyIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9janMtYnJvd3Nlci92NS5qcyIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9janMtYnJvd3Nlci92MVRvVjYuanMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY2pzLWJyb3dzZXIvdjMuanMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY2pzLWJyb3dzZXIvcmVnZXguanMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL3NyYy9jb21wb25lbnRzL3Byb2Nlc3Mtb2JqZWN0cy92YWx2ZS1tcC9WYWx2ZU1wLnRzeCIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9janMtYnJvd3Nlci92YWxpZGF0ZS5qcyIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9janMtYnJvd3Nlci92ZXJzaW9uLmpzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2Nqcy1icm93c2VyL25hdGl2ZS5qcyIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9janMtYnJvd3Nlci9wYXJzZS5qcyIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9janMtYnJvd3Nlci9zaGExLmpzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9zcmMvY29tcG9uZW50cy9QYXJhbWV0ZXJMaXN0LnRzeCIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vc3JjL2NvbXBvbmVudHMvQ29tbWFuZFZhbHZlTXAudHN4Iiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9zcmMvY29tcG9uZW50cy9QdW1wLnRzeCIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vc3JjL2NvbXBvbmVudHMvU3RhdHVzVmFsdmVNcC50c3giLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy9leHRlcm5hbCB1bWQgXCJSZWFjdFwiIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9zcmMvY29tcG9uZW50cy9WYWx2ZS50c3giLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY2pzLWJyb3dzZXIvdjM1LmpzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiUGVyc3BlY3RpdmVDbGllbnRcIiksIHJlcXVpcmUoXCJSZWFjdFwiKSk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShcIkhtaUNvbXBvbmVudHNcIiwgW1wiUGVyc3BlY3RpdmVDbGllbnRcIiwgXCJSZWFjdFwiXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJIbWlDb21wb25lbnRzXCJdID0gZmFjdG9yeShyZXF1aXJlKFwiUGVyc3BlY3RpdmVDbGllbnRcIiksIHJlcXVpcmUoXCJSZWFjdFwiKSk7XG5cdGVsc2Vcblx0XHRyb290W1wiSG1pQ29tcG9uZW50c1wiXSA9IGZhY3Rvcnkocm9vdFtcIlBlcnNwZWN0aXZlQ2xpZW50XCJdLCByb290W1wiUmVhY3RcIl0pO1xufSkoc2VsZiwgKF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzM3N19fLCBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX184ODNfXykgPT4ge1xucmV0dXJuICIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51bnNhZmVTdHJpbmdpZnkgPSB2b2lkIDA7XG5jb25zdCB2YWxpZGF0ZV9qc18xID0gcmVxdWlyZShcIi4vdmFsaWRhdGUuanNcIik7XG5jb25zdCBieXRlVG9IZXggPSBbXTtcbmZvciAobGV0IGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgICBieXRlVG9IZXgucHVzaCgoaSArIDB4MTAwKS50b1N0cmluZygxNikuc2xpY2UoMSkpO1xufVxuZnVuY3Rpb24gdW5zYWZlU3RyaW5naWZ5KGFyciwgb2Zmc2V0ID0gMCkge1xuICAgIHJldHVybiAoYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAwXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDFdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMl1dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAzXV0gK1xuICAgICAgICAnLScgK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDRdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNV1dICtcbiAgICAgICAgJy0nICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA2XV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDddXSArXG4gICAgICAgICctJyArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOF1dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA5XV0gK1xuICAgICAgICAnLScgK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDEwXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDExXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDEyXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDEzXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDE0XV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDE1XV0pLnRvTG93ZXJDYXNlKCk7XG59XG5leHBvcnRzLnVuc2FmZVN0cmluZ2lmeSA9IHVuc2FmZVN0cmluZ2lmeTtcbmZ1bmN0aW9uIHN0cmluZ2lmeShhcnIsIG9mZnNldCA9IDApIHtcbiAgICBjb25zdCB1dWlkID0gdW5zYWZlU3RyaW5naWZ5KGFyciwgb2Zmc2V0KTtcbiAgICBpZiAoISgwLCB2YWxpZGF0ZV9qc18xLmRlZmF1bHQpKHV1aWQpKSB7XG4gICAgICAgIHRocm93IFR5cGVFcnJvcignU3RyaW5naWZpZWQgVVVJRCBpcyBpbnZhbGlkJyk7XG4gICAgfVxuICAgIHJldHVybiB1dWlkO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gc3RyaW5naWZ5O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIG5lPU9iamVjdC5kZWZpbmVQcm9wZXJ0eTt2YXIgZ2U9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjt2YXIgYmU9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7dmFyIFRlPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7dmFyIEFlPShlLHQpPT57Zm9yKHZhciByIGluIHQpbmUoZSxyLHtnZXQ6dFtyXSxlbnVtZXJhYmxlOiEwfSl9LEllPShlLHQscixuKT0+e2lmKHQmJnR5cGVvZiB0PT1cIm9iamVjdFwifHx0eXBlb2YgdD09XCJmdW5jdGlvblwiKWZvcihsZXQgaSBvZiBiZSh0KSkhVGUuY2FsbChlLGkpJiZpIT09ciYmbmUoZSxpLHtnZXQ6KCk9PnRbaV0sZW51bWVyYWJsZTohKG49Z2UodCxpKSl8fG4uZW51bWVyYWJsZX0pO3JldHVybiBlfTt2YXIgRGU9ZT0+SWUobmUoe30sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZSk7dmFyIEJlPXt9O0FlKEJlLHtJbW1lcjooKT0+SixhcHBseVBhdGNoZXM6KCk9PkNlLGNhc3REcmFmdDooKT0+a2UsY2FzdEltbXV0YWJsZTooKT0+S2UsY3JlYXRlRHJhZnQ6KCk9PlJlLGN1cnJlbnQ6KCk9PnJlLGVuYWJsZU1hcFNldDooKT0+eGUsZW5hYmxlUGF0Y2hlczooKT0+UGUsZmluaXNoRHJhZnQ6KCk9PnZlLGZyZWV6ZTooKT0+SyxpbW1lcmFibGU6KCk9Pk4saXNEcmFmdDooKT0+Tyxpc0RyYWZ0YWJsZTooKT0+QSxub3RoaW5nOigpPT5qLG9yaWdpbmFsOigpPT5sZSxwcm9kdWNlOigpPT5GZSxwcm9kdWNlV2l0aFBhdGNoZXM6KCk9Pk5lLHNldEF1dG9GcmVlemU6KCk9PnplLHNldFVzZVN0cmljdFNoYWxsb3dDb3B5OigpPT5qZX0pO21vZHVsZS5leHBvcnRzPURlKEJlKTt2YXIgaj1TeW1ib2wuZm9yKFwiaW1tZXItbm90aGluZ1wiKSxOPVN5bWJvbC5mb3IoXCJpbW1lci1kcmFmdGFibGVcIiksdT1TeW1ib2wuZm9yKFwiaW1tZXItc3RhdGVcIik7ZnVuY3Rpb24gaChlLC4uLnQpe3Rocm93IG5ldyBFcnJvcihgW0ltbWVyXSBtaW5pZmllZCBlcnJvciBucjogJHtlfS4gRnVsbCBlcnJvciBhdDogaHR0cHM6Ly9iaXQubHkvM2NYRUtXZmApfXZhciB6PU9iamVjdC5nZXRQcm90b3R5cGVPZjtmdW5jdGlvbiBPKGUpe3JldHVybiEhZSYmISFlW3VdfWZ1bmN0aW9uIEEoZSl7cmV0dXJuIGU/eWUoZSl8fEFycmF5LmlzQXJyYXkoZSl8fCEhZVtOXXx8ISFlLmNvbnN0cnVjdG9yPy5bTl18fHYoZSl8fGsoZSk6ITF9dmFyIE9lPU9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IudG9TdHJpbmcoKTtmdW5jdGlvbiB5ZShlKXtpZighZXx8dHlwZW9mIGUhPVwib2JqZWN0XCIpcmV0dXJuITE7bGV0IHQ9eihlKTtpZih0PT09bnVsbClyZXR1cm4hMDtsZXQgcj1PYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbCh0LFwiY29uc3RydWN0b3JcIikmJnQuY29uc3RydWN0b3I7cmV0dXJuIHI9PT1PYmplY3Q/ITA6dHlwZW9mIHI9PVwiZnVuY3Rpb25cIiYmRnVuY3Rpb24udG9TdHJpbmcuY2FsbChyKT09PU9lfWZ1bmN0aW9uIGxlKGUpe3JldHVybiBPKGUpfHxoKDE1LGUpLGVbdV0udH1mdW5jdGlvbiBfKGUsdCl7QyhlKT09PTA/UmVmbGVjdC5vd25LZXlzKGUpLmZvckVhY2gocj0+e3QocixlW3JdLGUpfSk6ZS5mb3JFYWNoKChyLG4pPT50KG4scixlKSl9ZnVuY3Rpb24gQyhlKXtsZXQgdD1lW3VdO3JldHVybiB0P3QubzpBcnJheS5pc0FycmF5KGUpPzE6dihlKT8yOmsoZSk/MzowfWZ1bmN0aW9uIFIoZSx0KXtyZXR1cm4gQyhlKT09PTI/ZS5oYXModCk6T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9ZnVuY3Rpb24gWChlLHQpe3JldHVybiBDKGUpPT09Mj9lLmdldCh0KTplW3RdfWZ1bmN0aW9uIFEoZSx0LHIpe2xldCBuPUMoZSk7bj09PTI/ZS5zZXQodCxyKTpuPT09Mz9lLmFkZChyKTplW3RdPXJ9ZnVuY3Rpb24gcGUoZSx0KXtyZXR1cm4gZT09PXQ/ZSE9PTB8fDEvZT09PTEvdDplIT09ZSYmdCE9PXR9ZnVuY3Rpb24gdihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIE1hcH1mdW5jdGlvbiBrKGUpe3JldHVybiBlIGluc3RhbmNlb2YgU2V0fWZ1bmN0aW9uIFQoZSl7cmV0dXJuIGUuZXx8ZS50fWZ1bmN0aW9uIEwoZSx0KXtpZih2KGUpKXJldHVybiBuZXcgTWFwKGUpO2lmKGsoZSkpcmV0dXJuIG5ldyBTZXQoZSk7aWYoQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZSk7bGV0IHI9eWUoZSk7aWYodD09PSEwfHx0PT09XCJjbGFzc19vbmx5XCImJiFyKXtsZXQgbj1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhlKTtkZWxldGUgblt1XTtsZXQgaT1SZWZsZWN0Lm93bktleXMobik7Zm9yKGxldCBmPTA7ZjxpLmxlbmd0aDtmKyspe2xldCBsPWlbZl0sYz1uW2xdO2Mud3JpdGFibGU9PT0hMSYmKGMud3JpdGFibGU9ITAsYy5jb25maWd1cmFibGU9ITApLChjLmdldHx8Yy5zZXQpJiYobltsXT17Y29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLGVudW1lcmFibGU6Yy5lbnVtZXJhYmxlLHZhbHVlOmVbbF19KX1yZXR1cm4gT2JqZWN0LmNyZWF0ZSh6KGUpLG4pfWVsc2V7bGV0IG49eihlKTtpZihuIT09bnVsbCYmcilyZXR1cm57Li4uZX07bGV0IGk9T2JqZWN0LmNyZWF0ZShuKTtyZXR1cm4gT2JqZWN0LmFzc2lnbihpLGUpfX1mdW5jdGlvbiBLKGUsdD0hMSl7cmV0dXJuICQoZSl8fE8oZSl8fCFBKGUpfHwoQyhlKT4xJiYoZS5zZXQ9ZS5hZGQ9ZS5jbGVhcj1lLmRlbGV0ZT1NZSksT2JqZWN0LmZyZWV6ZShlKSx0JiZPYmplY3QuZW50cmllcyhlKS5mb3JFYWNoKChbcixuXSk9PksobiwhMCkpKSxlfWZ1bmN0aW9uIE1lKCl7aCgyKX1mdW5jdGlvbiAkKGUpe3JldHVybiBPYmplY3QuaXNGcm96ZW4oZSl9dmFyIGFlPXt9O2Z1bmN0aW9uIHcoZSl7bGV0IHQ9YWVbZV07cmV0dXJuIHR8fGgoMCxlKSx0fWZ1bmN0aW9uIFkoZSx0KXthZVtlXXx8KGFlW2VdPXQpfXZhciBVO2Z1bmN0aW9uIEIoKXtyZXR1cm4gVX1mdW5jdGlvbiBfZShlLHQpe3JldHVybnthOltdLGk6ZSxwOnQsUDohMCxkOjB9fWZ1bmN0aW9uIG9lKGUsdCl7dCYmKHcoXCJQYXRjaGVzXCIpLGUuZj1bXSxlLmg9W10sZS5iPXQpfWZ1bmN0aW9uIFYoZSl7WihlKSxlLmEuZm9yRWFjaCh3ZSksZS5hPW51bGx9ZnVuY3Rpb24gWihlKXtlPT09VSYmKFU9ZS5pKX1mdW5jdGlvbiBpZShlKXtyZXR1cm4gVT1fZShVLGUpfWZ1bmN0aW9uIHdlKGUpe2xldCB0PWVbdV07dC5vPT09MHx8dC5vPT09MT90LngoKTp0Lm09ITB9ZnVuY3Rpb24gc2UoZSx0KXt0LmQ9dC5hLmxlbmd0aDtsZXQgcj10LmFbMF07cmV0dXJuIGUhPT12b2lkIDAmJmUhPT1yPyhyW3VdLnMmJihWKHQpLGgoNCkpLEEoZSkmJihlPWVlKHQsZSksdC5pfHx0ZSh0LGUpKSx0LmYmJncoXCJQYXRjaGVzXCIpLlQoclt1XS50LGUsdC5mLHQuaCkpOmU9ZWUodCxyLFtdKSxWKHQpLHQuZiYmdC5iKHQuZix0LmgpLGUhPT1qP2U6dm9pZCAwfWZ1bmN0aW9uIGVlKGUsdCxyKXtpZigkKHQpKXJldHVybiB0O2xldCBuPXRbdV07aWYoIW4pcmV0dXJuIF8odCwoaSxmKT0+ZGUoZSxuLHQsaSxmLHIpKSx0O2lmKG4ubiE9PWUpcmV0dXJuIHQ7aWYoIW4ucylyZXR1cm4gdGUoZSxuLnQsITApLG4udDtpZighbi5jKXtuLmM9ITAsbi5uLmQtLTtsZXQgaT1uLmUsZj1pLGw9ITE7bi5vPT09MyYmKGY9bmV3IFNldChpKSxpLmNsZWFyKCksbD0hMCksXyhmLChjLGIpPT5kZShlLG4saSxjLGIscixsKSksdGUoZSxpLCExKSxyJiZlLmYmJncoXCJQYXRjaGVzXCIpLmcobixyLGUuZixlLmgpfXJldHVybiBuLmV9ZnVuY3Rpb24gZGUoZSx0LHIsbixpLGYsbCl7aWYoTyhpKSl7bGV0IGM9ZiYmdCYmdC5vIT09MyYmIVIodC5yLG4pP2YuY29uY2F0KG4pOnZvaWQgMCxiPWVlKGUsaSxjKTtpZihRKHIsbixiKSxPKGIpKWUuUD0hMTtlbHNlIHJldHVybn1lbHNlIGwmJnIuYWRkKGkpO2lmKEEoaSkmJiEkKGkpKXtpZighZS5wLnkmJmUuZDwxKXJldHVybjtlZShlLGkpLCghdHx8IXQubi5pKSYmdHlwZW9mIG4hPVwic3ltYm9sXCImJk9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChyLG4pJiZ0ZShlLGkpfX1mdW5jdGlvbiB0ZShlLHQscj0hMSl7IWUuaSYmZS5wLnkmJmUuUCYmSyh0LHIpfWZ1bmN0aW9uIGhlKGUsdCl7bGV0IHI9QXJyYXkuaXNBcnJheShlKSxuPXtvOnI/MTowLG46dD90Lm46QigpLHM6ITEsYzohMSxyOnt9LGk6dCx0OmUsdTpudWxsLGU6bnVsbCx4Om51bGwsbDohMX0saT1uLGY9dWU7ciYmKGk9W25dLGY9cSk7bGV0e3Jldm9rZTpsLHByb3h5OmN9PVByb3h5LnJldm9jYWJsZShpLGYpO3JldHVybiBuLnU9YyxuLng9bCxjfXZhciB1ZT17Z2V0KGUsdCl7aWYodD09PXUpcmV0dXJuIGU7bGV0IHI9VChlKTtpZighUihyLHQpKXJldHVybiBFZShlLHIsdCk7bGV0IG49clt0XTtyZXR1cm4gZS5jfHwhQShuKT9uOm49PT1jZShlLnQsdCk/KGZlKGUpLGUuZVt0XT1XKG4sZSkpOm59LGhhcyhlLHQpe3JldHVybiB0IGluIFQoZSl9LG93bktleXMoZSl7cmV0dXJuIFJlZmxlY3Qub3duS2V5cyhUKGUpKX0sc2V0KGUsdCxyKXtsZXQgbj1tZShUKGUpLHQpO2lmKG4/LnNldClyZXR1cm4gbi5zZXQuY2FsbChlLnUsciksITA7aWYoIWUucyl7bGV0IGk9Y2UoVChlKSx0KSxmPWk/Llt1XTtpZihmJiZmLnQ9PT1yKXJldHVybiBlLmVbdF09cixlLnJbdF09ITEsITA7aWYocGUocixpKSYmKHIhPT12b2lkIDB8fFIoZS50LHQpKSlyZXR1cm4hMDtmZShlKSxFKGUpfXJldHVybiBlLmVbdF09PT1yJiYociE9PXZvaWQgMHx8dCBpbiBlLmUpfHxOdW1iZXIuaXNOYU4ocikmJk51bWJlci5pc05hTihlLmVbdF0pfHwoZS5lW3RdPXIsZS5yW3RdPSEwKSwhMH0sZGVsZXRlUHJvcGVydHkoZSx0KXtyZXR1cm4gY2UoZS50LHQpIT09dm9pZCAwfHx0IGluIGUudD8oZS5yW3RdPSExLGZlKGUpLEUoZSkpOmRlbGV0ZSBlLnJbdF0sZS5lJiZkZWxldGUgZS5lW3RdLCEwfSxnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSx0KXtsZXQgcj1UKGUpLG49UmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iocix0KTtyZXR1cm4gbiYme3dyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTplLm8hPT0xfHx0IT09XCJsZW5ndGhcIixlbnVtZXJhYmxlOm4uZW51bWVyYWJsZSx2YWx1ZTpyW3RdfX0sZGVmaW5lUHJvcGVydHkoKXtoKDExKX0sZ2V0UHJvdG90eXBlT2YoZSl7cmV0dXJuIHooZS50KX0sc2V0UHJvdG90eXBlT2YoKXtoKDEyKX19LHE9e307Xyh1ZSwoZSx0KT0+e3FbZV09ZnVuY3Rpb24oKXtyZXR1cm4gYXJndW1lbnRzWzBdPWFyZ3VtZW50c1swXVswXSx0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KTtxLmRlbGV0ZVByb3BlcnR5PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHEuc2V0LmNhbGwodGhpcyxlLHQsdm9pZCAwKX07cS5zZXQ9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB1ZS5zZXQuY2FsbCh0aGlzLGVbMF0sdCxyLGVbMF0pfTtmdW5jdGlvbiBjZShlLHQpe2xldCByPWVbdV07cmV0dXJuKHI/VChyKTplKVt0XX1mdW5jdGlvbiBFZShlLHQscil7bGV0IG49bWUodCxyKTtyZXR1cm4gbj9cInZhbHVlXCJpbiBuP24udmFsdWU6bi5nZXQ/LmNhbGwoZS51KTp2b2lkIDB9ZnVuY3Rpb24gbWUoZSx0KXtpZighKHQgaW4gZSkpcmV0dXJuO2xldCByPXooZSk7Zm9yKDtyOyl7bGV0IG49T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyLHQpO2lmKG4pcmV0dXJuIG47cj16KHIpfX1mdW5jdGlvbiBFKGUpe2Uuc3x8KGUucz0hMCxlLmkmJkUoZS5pKSl9ZnVuY3Rpb24gZmUoZSl7ZS5lfHwoZS5lPUwoZS50LGUubi5wLlMpKX12YXIgSj1jbGFzc3tjb25zdHJ1Y3Rvcih0KXt0aGlzLnk9ITA7dGhpcy5TPSExO3RoaXMucHJvZHVjZT0odCxyLG4pPT57aWYodHlwZW9mIHQ9PVwiZnVuY3Rpb25cIiYmdHlwZW9mIHIhPVwiZnVuY3Rpb25cIil7bGV0IGY9cjtyPXQ7bGV0IGw9dGhpcztyZXR1cm4gZnVuY3Rpb24oYj1mLC4uLmEpe3JldHVybiBsLnByb2R1Y2UoYixvPT5yLmNhbGwodGhpcyxvLC4uLmEpKX19dHlwZW9mIHIhPVwiZnVuY3Rpb25cIiYmaCg2KSxuIT09dm9pZCAwJiZ0eXBlb2YgbiE9XCJmdW5jdGlvblwiJiZoKDcpO2xldCBpO2lmKEEodCkpe2xldCBmPWllKHRoaXMpLGw9Vyh0LHZvaWQgMCksYz0hMDt0cnl7aT1yKGwpLGM9ITF9ZmluYWxseXtjP1YoZik6WihmKX1yZXR1cm4gb2UoZixuKSxzZShpLGYpfWVsc2UgaWYoIXR8fHR5cGVvZiB0IT1cIm9iamVjdFwiKXtpZihpPXIodCksaT09PXZvaWQgMCYmKGk9dCksaT09PWomJihpPXZvaWQgMCksdGhpcy55JiZLKGksITApLG4pe2xldCBmPVtdLGw9W107dyhcIlBhdGNoZXNcIikuVCh0LGksZixsKSxuKGYsbCl9cmV0dXJuIGl9ZWxzZSBoKDEsdCl9O3RoaXMucHJvZHVjZVdpdGhQYXRjaGVzPSh0LHIpPT57aWYodHlwZW9mIHQ9PVwiZnVuY3Rpb25cIilyZXR1cm4obCwuLi5jKT0+dGhpcy5wcm9kdWNlV2l0aFBhdGNoZXMobCxiPT50KGIsLi4uYykpO2xldCBuLGk7cmV0dXJuW3RoaXMucHJvZHVjZSh0LHIsKGwsYyk9PntuPWwsaT1jfSksbixpXX07dHlwZW9mIHQ/LmF1dG9GcmVlemU9PVwiYm9vbGVhblwiJiZ0aGlzLnNldEF1dG9GcmVlemUodC5hdXRvRnJlZXplKSx0eXBlb2YgdD8udXNlU3RyaWN0U2hhbGxvd0NvcHk9PVwiYm9vbGVhblwiJiZ0aGlzLnNldFVzZVN0cmljdFNoYWxsb3dDb3B5KHQudXNlU3RyaWN0U2hhbGxvd0NvcHkpfWNyZWF0ZURyYWZ0KHQpe0EodCl8fGgoOCksTyh0KSYmKHQ9cmUodCkpO2xldCByPWllKHRoaXMpLG49Vyh0LHZvaWQgMCk7cmV0dXJuIG5bdV0ubD0hMCxaKHIpLG59ZmluaXNoRHJhZnQodCxyKXtsZXQgbj10JiZ0W3VdOyghbnx8IW4ubCkmJmgoOSk7bGV0e246aX09bjtyZXR1cm4gb2UoaSxyKSxzZSh2b2lkIDAsaSl9c2V0QXV0b0ZyZWV6ZSh0KXt0aGlzLnk9dH1zZXRVc2VTdHJpY3RTaGFsbG93Q29weSh0KXt0aGlzLlM9dH1hcHBseVBhdGNoZXModCxyKXtsZXQgbjtmb3Iobj1yLmxlbmd0aC0xO24+PTA7bi0tKXtsZXQgZj1yW25dO2lmKGYucGF0aC5sZW5ndGg9PT0wJiZmLm9wPT09XCJyZXBsYWNlXCIpe3Q9Zi52YWx1ZTticmVha319bj4tMSYmKHI9ci5zbGljZShuKzEpKTtsZXQgaT13KFwiUGF0Y2hlc1wiKS5BO3JldHVybiBPKHQpP2kodCxyKTp0aGlzLnByb2R1Y2UodCxmPT5pKGYscikpfX07ZnVuY3Rpb24gVyhlLHQpe2xldCByPXYoZSk/dyhcIk1hcFNldFwiKS5JKGUsdCk6ayhlKT93KFwiTWFwU2V0XCIpLkQoZSx0KTpoZShlLHQpO3JldHVybih0P3QubjpCKCkpLmEucHVzaChyKSxyfWZ1bmN0aW9uIHJlKGUpe3JldHVybiBPKGUpfHxoKDEwLGUpLFNlKGUpfWZ1bmN0aW9uIFNlKGUpe2lmKCFBKGUpfHwkKGUpKXJldHVybiBlO2xldCB0PWVbdV0scjtpZih0KXtpZighdC5zKXJldHVybiB0LnQ7dC5jPSEwLHI9TChlLHQubi5wLlMpfWVsc2Ugcj1MKGUsITApO3JldHVybiBfKHIsKG4saSk9PntRKHIsbixTZShpKSl9KSx0JiYodC5jPSExKSxyfWZ1bmN0aW9uIFBlKCl7bGV0IHQ9XCJyZXBsYWNlXCIscj1cImFkZFwiLG49XCJyZW1vdmVcIjtmdW5jdGlvbiBpKHMsUyxtLHgpe3N3aXRjaChzLm8pe2Nhc2UgMDpjYXNlIDI6cmV0dXJuIGwocyxTLG0seCk7Y2FzZSAxOnJldHVybiBmKHMsUyxtLHgpO2Nhc2UgMzpyZXR1cm4gYyhzLFMsbSx4KX19ZnVuY3Rpb24gZihzLFMsbSx4KXtsZXR7dDpJLHI6UH09cyxnPXMuZTtnLmxlbmd0aDxJLmxlbmd0aCYmKFtJLGddPVtnLEldLFttLHhdPVt4LG1dKTtmb3IobGV0IHk9MDt5PEkubGVuZ3RoO3krKylpZihQW3ldJiZnW3ldIT09SVt5XSl7bGV0IGQ9Uy5jb25jYXQoW3ldKTttLnB1c2goe29wOnQscGF0aDpkLHZhbHVlOnAoZ1t5XSl9KSx4LnB1c2goe29wOnQscGF0aDpkLHZhbHVlOnAoSVt5XSl9KX1mb3IobGV0IHk9SS5sZW5ndGg7eTxnLmxlbmd0aDt5Kyspe2xldCBkPVMuY29uY2F0KFt5XSk7bS5wdXNoKHtvcDpyLHBhdGg6ZCx2YWx1ZTpwKGdbeV0pfSl9Zm9yKGxldCB5PWcubGVuZ3RoLTE7SS5sZW5ndGg8PXk7LS15KXtsZXQgZD1TLmNvbmNhdChbeV0pO3gucHVzaCh7b3A6bixwYXRoOmR9KX19ZnVuY3Rpb24gbChzLFMsbSx4KXtsZXR7dDpJLGU6UH09cztfKHMuciwoZyx5KT0+e2xldCBkPVgoSSxnKSxIPVgoUCxnKSxGPXk/UihJLGcpP3Q6cjpuO2lmKGQ9PT1IJiZGPT09dClyZXR1cm47bGV0IEQ9Uy5jb25jYXQoZyk7bS5wdXNoKEY9PT1uP3tvcDpGLHBhdGg6RH06e29wOkYscGF0aDpELHZhbHVlOkh9KSx4LnB1c2goRj09PXI/e29wOm4scGF0aDpEfTpGPT09bj97b3A6cixwYXRoOkQsdmFsdWU6cChkKX06e29wOnQscGF0aDpELHZhbHVlOnAoZCl9KX0pfWZ1bmN0aW9uIGMocyxTLG0seCl7bGV0e3Q6SSxlOlB9PXMsZz0wO0kuZm9yRWFjaCh5PT57aWYoIVAuaGFzKHkpKXtsZXQgZD1TLmNvbmNhdChbZ10pO20ucHVzaCh7b3A6bixwYXRoOmQsdmFsdWU6eX0pLHgudW5zaGlmdCh7b3A6cixwYXRoOmQsdmFsdWU6eX0pfWcrK30pLGc9MCxQLmZvckVhY2goeT0+e2lmKCFJLmhhcyh5KSl7bGV0IGQ9Uy5jb25jYXQoW2ddKTttLnB1c2goe29wOnIscGF0aDpkLHZhbHVlOnl9KSx4LnVuc2hpZnQoe29wOm4scGF0aDpkLHZhbHVlOnl9KX1nKyt9KX1mdW5jdGlvbiBiKHMsUyxtLHgpe20ucHVzaCh7b3A6dCxwYXRoOltdLHZhbHVlOlM9PT1qP3ZvaWQgMDpTfSkseC5wdXNoKHtvcDp0LHBhdGg6W10sdmFsdWU6c30pfWZ1bmN0aW9uIGEocyxTKXtyZXR1cm4gUy5mb3JFYWNoKG09PntsZXR7cGF0aDp4LG9wOkl9PW0sUD1zO2ZvcihsZXQgSD0wO0g8eC5sZW5ndGgtMTtIKyspe2xldCBGPUMoUCksRD14W0hdO3R5cGVvZiBEIT1cInN0cmluZ1wiJiZ0eXBlb2YgRCE9XCJudW1iZXJcIiYmKEQ9XCJcIitEKSwoRj09PTB8fEY9PT0xKSYmKEQ9PT1cIl9fcHJvdG9fX1wifHxEPT09XCJjb25zdHJ1Y3RvclwiKSYmaCgxNiszKSx0eXBlb2YgUD09XCJmdW5jdGlvblwiJiZEPT09XCJwcm90b3R5cGVcIiYmaCgxNiszKSxQPVgoUCxEKSx0eXBlb2YgUCE9XCJvYmplY3RcIiYmaCgxNisyLHguam9pbihcIi9cIikpfWxldCBnPUMoUCkseT1vKG0udmFsdWUpLGQ9eFt4Lmxlbmd0aC0xXTtzd2l0Y2goSSl7Y2FzZSB0OnN3aXRjaChnKXtjYXNlIDI6cmV0dXJuIFAuc2V0KGQseSk7Y2FzZSAzOmgoMTYpO2RlZmF1bHQ6cmV0dXJuIFBbZF09eX1jYXNlIHI6c3dpdGNoKGcpe2Nhc2UgMTpyZXR1cm4gZD09PVwiLVwiP1AucHVzaCh5KTpQLnNwbGljZShkLDAseSk7Y2FzZSAyOnJldHVybiBQLnNldChkLHkpO2Nhc2UgMzpyZXR1cm4gUC5hZGQoeSk7ZGVmYXVsdDpyZXR1cm4gUFtkXT15fWNhc2Ugbjpzd2l0Y2goZyl7Y2FzZSAxOnJldHVybiBQLnNwbGljZShkLDEpO2Nhc2UgMjpyZXR1cm4gUC5kZWxldGUoZCk7Y2FzZSAzOnJldHVybiBQLmRlbGV0ZShtLnZhbHVlKTtkZWZhdWx0OnJldHVybiBkZWxldGUgUFtkXX1kZWZhdWx0OmgoMTYrMSxJKX19KSxzfWZ1bmN0aW9uIG8ocyl7aWYoIUEocykpcmV0dXJuIHM7aWYoQXJyYXkuaXNBcnJheShzKSlyZXR1cm4gcy5tYXAobyk7aWYodihzKSlyZXR1cm4gbmV3IE1hcChBcnJheS5mcm9tKHMuZW50cmllcygpKS5tYXAoKFttLHhdKT0+W20sbyh4KV0pKTtpZihrKHMpKXJldHVybiBuZXcgU2V0KEFycmF5LmZyb20ocykubWFwKG8pKTtsZXQgUz1PYmplY3QuY3JlYXRlKHoocykpO2ZvcihsZXQgbSBpbiBzKVNbbV09byhzW21dKTtyZXR1cm4gUihzLE4pJiYoU1tOXT1zW05dKSxTfWZ1bmN0aW9uIHAocyl7cmV0dXJuIE8ocyk/byhzKTpzfVkoXCJQYXRjaGVzXCIse0E6YSxnOmksVDpifSl9ZnVuY3Rpb24geGUoKXtjbGFzcyBlIGV4dGVuZHMgTWFwe2NvbnN0cnVjdG9yKGEsbyl7c3VwZXIoKTt0aGlzW3VdPXtvOjIsaTpvLG46bz9vLm46QigpLHM6ITEsYzohMSxlOnZvaWQgMCxyOnZvaWQgMCx0OmEsdTp0aGlzLGw6ITEsbTohMX19Z2V0IHNpemUoKXtyZXR1cm4gVCh0aGlzW3VdKS5zaXplfWhhcyhhKXtyZXR1cm4gVCh0aGlzW3VdKS5oYXMoYSl9c2V0KGEsbyl7bGV0IHA9dGhpc1t1XTtyZXR1cm4gbChwKSwoIVQocCkuaGFzKGEpfHxUKHApLmdldChhKSE9PW8pJiYocihwKSxFKHApLHAuci5zZXQoYSwhMCkscC5lLnNldChhLG8pLHAuci5zZXQoYSwhMCkpLHRoaXN9ZGVsZXRlKGEpe2lmKCF0aGlzLmhhcyhhKSlyZXR1cm4hMTtsZXQgbz10aGlzW3VdO3JldHVybiBsKG8pLHIobyksRShvKSxvLnQuaGFzKGEpP28uci5zZXQoYSwhMSk6by5yLmRlbGV0ZShhKSxvLmUuZGVsZXRlKGEpLCEwfWNsZWFyKCl7bGV0IGE9dGhpc1t1XTtsKGEpLFQoYSkuc2l6ZSYmKHIoYSksRShhKSxhLnI9bmV3IE1hcCxfKGEudCxvPT57YS5yLnNldChvLCExKX0pLGEuZS5jbGVhcigpKX1mb3JFYWNoKGEsbyl7bGV0IHA9dGhpc1t1XTtUKHApLmZvckVhY2goKHMsUyxtKT0+e2EuY2FsbChvLHRoaXMuZ2V0KFMpLFMsdGhpcyl9KX1nZXQoYSl7bGV0IG89dGhpc1t1XTtsKG8pO2xldCBwPVQobykuZ2V0KGEpO2lmKG8uY3x8IUEocCl8fHAhPT1vLnQuZ2V0KGEpKXJldHVybiBwO2xldCBzPVcocCxvKTtyZXR1cm4gcihvKSxvLmUuc2V0KGEscyksc31rZXlzKCl7cmV0dXJuIFQodGhpc1t1XSkua2V5cygpfXZhbHVlcygpe2xldCBhPXRoaXMua2V5cygpO3JldHVybntbU3ltYm9sLml0ZXJhdG9yXTooKT0+dGhpcy52YWx1ZXMoKSxuZXh0OigpPT57bGV0IG89YS5uZXh0KCk7cmV0dXJuIG8uZG9uZT9vOntkb25lOiExLHZhbHVlOnRoaXMuZ2V0KG8udmFsdWUpfX19fWVudHJpZXMoKXtsZXQgYT10aGlzLmtleXMoKTtyZXR1cm57W1N5bWJvbC5pdGVyYXRvcl06KCk9PnRoaXMuZW50cmllcygpLG5leHQ6KCk9PntsZXQgbz1hLm5leHQoKTtpZihvLmRvbmUpcmV0dXJuIG87bGV0IHA9dGhpcy5nZXQoby52YWx1ZSk7cmV0dXJue2RvbmU6ITEsdmFsdWU6W28udmFsdWUscF19fX19Wyh1LFN5bWJvbC5pdGVyYXRvcildKCl7cmV0dXJuIHRoaXMuZW50cmllcygpfX1mdW5jdGlvbiB0KGMsYil7cmV0dXJuIG5ldyBlKGMsYil9ZnVuY3Rpb24gcihjKXtjLmV8fChjLnI9bmV3IE1hcCxjLmU9bmV3IE1hcChjLnQpKX1jbGFzcyBuIGV4dGVuZHMgU2V0e2NvbnN0cnVjdG9yKGEsbyl7c3VwZXIoKTt0aGlzW3VdPXtvOjMsaTpvLG46bz9vLm46QigpLHM6ITEsYzohMSxlOnZvaWQgMCx0OmEsdTp0aGlzLGE6bmV3IE1hcCxtOiExLGw6ITF9fWdldCBzaXplKCl7cmV0dXJuIFQodGhpc1t1XSkuc2l6ZX1oYXMoYSl7bGV0IG89dGhpc1t1XTtyZXR1cm4gbChvKSxvLmU/ISEoby5lLmhhcyhhKXx8by5hLmhhcyhhKSYmby5lLmhhcyhvLmEuZ2V0KGEpKSk6by50LmhhcyhhKX1hZGQoYSl7bGV0IG89dGhpc1t1XTtyZXR1cm4gbChvKSx0aGlzLmhhcyhhKXx8KGYobyksRShvKSxvLmUuYWRkKGEpKSx0aGlzfWRlbGV0ZShhKXtpZighdGhpcy5oYXMoYSkpcmV0dXJuITE7bGV0IG89dGhpc1t1XTtyZXR1cm4gbChvKSxmKG8pLEUobyksby5lLmRlbGV0ZShhKXx8KG8uYS5oYXMoYSk/by5lLmRlbGV0ZShvLmEuZ2V0KGEpKTohMSl9Y2xlYXIoKXtsZXQgYT10aGlzW3VdO2woYSksVChhKS5zaXplJiYoZihhKSxFKGEpLGEuZS5jbGVhcigpKX12YWx1ZXMoKXtsZXQgYT10aGlzW3VdO3JldHVybiBsKGEpLGYoYSksYS5lLnZhbHVlcygpfWVudHJpZXMoKXtsZXQgYT10aGlzW3VdO3JldHVybiBsKGEpLGYoYSksYS5lLmVudHJpZXMoKX1rZXlzKCl7cmV0dXJuIHRoaXMudmFsdWVzKCl9Wyh1LFN5bWJvbC5pdGVyYXRvcildKCl7cmV0dXJuIHRoaXMudmFsdWVzKCl9Zm9yRWFjaChhLG8pe2xldCBwPXRoaXMudmFsdWVzKCkscz1wLm5leHQoKTtmb3IoOyFzLmRvbmU7KWEuY2FsbChvLHMudmFsdWUscy52YWx1ZSx0aGlzKSxzPXAubmV4dCgpfX1mdW5jdGlvbiBpKGMsYil7cmV0dXJuIG5ldyBuKGMsYil9ZnVuY3Rpb24gZihjKXtjLmV8fChjLmU9bmV3IFNldCxjLnQuZm9yRWFjaChiPT57aWYoQShiKSl7bGV0IGE9VyhiLGMpO2MuYS5zZXQoYixhKSxjLmUuYWRkKGEpfWVsc2UgYy5lLmFkZChiKX0pKX1mdW5jdGlvbiBsKGMpe2MubSYmaCgzLEpTT04uc3RyaW5naWZ5KFQoYykpKX1ZKFwiTWFwU2V0XCIse0k6dCxEOml9KX12YXIgTT1uZXcgSixGZT1NLnByb2R1Y2UsTmU9TS5wcm9kdWNlV2l0aFBhdGNoZXMuYmluZChNKSx6ZT1NLnNldEF1dG9GcmVlemUuYmluZChNKSxqZT1NLnNldFVzZVN0cmljdFNoYWxsb3dDb3B5LmJpbmQoTSksQ2U9TS5hcHBseVBhdGNoZXMuYmluZChNKSxSZT1NLmNyZWF0ZURyYWZ0LmJpbmQoTSksdmU9TS5maW5pc2hEcmFmdC5iaW5kKE0pO2Z1bmN0aW9uIGtlKGUpe3JldHVybiBlfWZ1bmN0aW9uIEtlKGUpe3JldHVybiBlfTAmJihtb2R1bGUuZXhwb3J0cz17SW1tZXIsYXBwbHlQYXRjaGVzLGNhc3REcmFmdCxjYXN0SW1tdXRhYmxlLGNyZWF0ZURyYWZ0LGN1cnJlbnQsZW5hYmxlTWFwU2V0LGVuYWJsZVBhdGNoZXMsZmluaXNoRHJhZnQsZnJlZXplLGltbWVyYWJsZSxpc0RyYWZ0LGlzRHJhZnRhYmxlLG5vdGhpbmcsb3JpZ2luYWwscHJvZHVjZSxwcm9kdWNlV2l0aFBhdGNoZXMsc2V0QXV0b0ZyZWV6ZSxzZXRVc2VTdHJpY3RTaGFsbG93Q29weX0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW1tZXIuY2pzLnByb2R1Y3Rpb24uanMubWFwIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG4vL2ltcG9ydCBcIi4vaXRlbS5tb2R1bGUuY3NzXCI7XG5cbmludGVyZmFjZSBJdGVtUHJvcHMge1xuXHRpdGVtQ2xhc3NOYW1lOiBzdHJpbmc7XG5cdGhhbmRsZUNsaWNrPzogKGV2ZW50OiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxEaXZFbGVtZW50LCBNb3VzZUV2ZW50PikgPT4gdm9pZDtcbn1cbi8vIGNvbnN0IGJpdCA9IChuOiBudW1iZXIsIGk6IG51bWJlcik6IG51bWJlciA9PiB7XG4vLyBcdHJldHVybiAobiA+PiBpKSAmIDE7XG4vLyB9O1xuY29uc3QgSXRlbTogUmVhY3QuRkM8SXRlbVByb3BzPiA9ICh7IGl0ZW1DbGFzc05hbWUsIGhhbmRsZUNsaWNrIH0pOiBSZWFjdC5SZWFjdEVsZW1lbnQgPT4ge1xuXHRyZXR1cm4gPGRpdiBjbGFzc05hbWU9e2l0ZW1DbGFzc05hbWV9XG5cdG9uQ2xpY2s9e2hhbmRsZUNsaWNrfT48L2Rpdj47XG59O1xuSXRlbS5kaXNwbGF5TmFtZSA9IFwiSXRlbVwiO1xuZXhwb3J0IGRlZmF1bHQgSXRlbTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy52ZXJzaW9uID0gZXhwb3J0cy52YWxpZGF0ZSA9IGV4cG9ydHMudjcgPSBleHBvcnRzLnY2VG9WMSA9IGV4cG9ydHMudjYgPSBleHBvcnRzLnY1ID0gZXhwb3J0cy52NCA9IGV4cG9ydHMudjMgPSBleHBvcnRzLnYxVG9WNiA9IGV4cG9ydHMudjEgPSBleHBvcnRzLnN0cmluZ2lmeSA9IGV4cG9ydHMucGFyc2UgPSBleHBvcnRzLk5JTCA9IGV4cG9ydHMuTUFYID0gdm9pZCAwO1xudmFyIG1heF9qc18xID0gcmVxdWlyZShcIi4vbWF4LmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTUFYXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtYXhfanNfMS5kZWZhdWx0OyB9IH0pO1xudmFyIG5pbF9qc18xID0gcmVxdWlyZShcIi4vbmlsLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTklMXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuaWxfanNfMS5kZWZhdWx0OyB9IH0pO1xudmFyIHBhcnNlX2pzXzEgPSByZXF1aXJlKFwiLi9wYXJzZS5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInBhcnNlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwYXJzZV9qc18xLmRlZmF1bHQ7IH0gfSk7XG52YXIgc3RyaW5naWZ5X2pzXzEgPSByZXF1aXJlKFwiLi9zdHJpbmdpZnkuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzdHJpbmdpZnlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0cmluZ2lmeV9qc18xLmRlZmF1bHQ7IH0gfSk7XG52YXIgdjFfanNfMSA9IHJlcXVpcmUoXCIuL3YxLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidjFcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHYxX2pzXzEuZGVmYXVsdDsgfSB9KTtcbnZhciB2MVRvVjZfanNfMSA9IHJlcXVpcmUoXCIuL3YxVG9WNi5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInYxVG9WNlwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdjFUb1Y2X2pzXzEuZGVmYXVsdDsgfSB9KTtcbnZhciB2M19qc18xID0gcmVxdWlyZShcIi4vdjMuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ2M1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdjNfanNfMS5kZWZhdWx0OyB9IH0pO1xudmFyIHY0X2pzXzEgPSByZXF1aXJlKFwiLi92NC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInY0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2NF9qc18xLmRlZmF1bHQ7IH0gfSk7XG52YXIgdjVfanNfMSA9IHJlcXVpcmUoXCIuL3Y1LmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidjVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHY1X2pzXzEuZGVmYXVsdDsgfSB9KTtcbnZhciB2Nl9qc18xID0gcmVxdWlyZShcIi4vdjYuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ2NlwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdjZfanNfMS5kZWZhdWx0OyB9IH0pO1xudmFyIHY2VG9WMV9qc18xID0gcmVxdWlyZShcIi4vdjZUb1YxLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidjZUb1YxXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2NlRvVjFfanNfMS5kZWZhdWx0OyB9IH0pO1xudmFyIHY3X2pzXzEgPSByZXF1aXJlKFwiLi92Ny5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInY3XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2N19qc18xLmRlZmF1bHQ7IH0gfSk7XG52YXIgdmFsaWRhdGVfanNfMSA9IHJlcXVpcmUoXCIuL3ZhbGlkYXRlLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidmFsaWRhdGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZhbGlkYXRlX2pzXzEuZGVmYXVsdDsgfSB9KTtcbnZhciB2ZXJzaW9uX2pzXzEgPSByZXF1aXJlKFwiLi92ZXJzaW9uLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidmVyc2lvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdmVyc2lvbl9qc18xLmRlZmF1bHQ7IH0gfSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9ICdmZmZmZmZmZi1mZmZmLWZmZmYtZmZmZi1mZmZmZmZmZmZmZmYnO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBwYXJzZV9qc18xID0gcmVxdWlyZShcIi4vcGFyc2UuanNcIik7XG5jb25zdCBzdHJpbmdpZnlfanNfMSA9IHJlcXVpcmUoXCIuL3N0cmluZ2lmeS5qc1wiKTtcbmZ1bmN0aW9uIHY2VG9WMSh1dWlkKSB7XG4gICAgY29uc3QgdjZCeXRlcyA9IHR5cGVvZiB1dWlkID09PSAnc3RyaW5nJyA/ICgwLCBwYXJzZV9qc18xLmRlZmF1bHQpKHV1aWQpIDogdXVpZDtcbiAgICBjb25zdCB2MUJ5dGVzID0gX3Y2VG9WMSh2NkJ5dGVzKTtcbiAgICByZXR1cm4gdHlwZW9mIHV1aWQgPT09ICdzdHJpbmcnID8gKDAsIHN0cmluZ2lmeV9qc18xLnVuc2FmZVN0cmluZ2lmeSkodjFCeXRlcykgOiB2MUJ5dGVzO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gdjZUb1YxO1xuZnVuY3Rpb24gX3Y2VG9WMSh2NkJ5dGVzKSB7XG4gICAgcmV0dXJuIFVpbnQ4QXJyYXkub2YoKCh2NkJ5dGVzWzNdICYgMHgwZikgPDwgNCkgfCAoKHY2Qnl0ZXNbNF0gPj4gNCkgJiAweDBmKSwgKCh2NkJ5dGVzWzRdICYgMHgwZikgPDwgNCkgfCAoKHY2Qnl0ZXNbNV0gJiAweGYwKSA+PiA0KSwgKCh2NkJ5dGVzWzVdICYgMHgwZikgPDwgNCkgfCAodjZCeXRlc1s2XSAmIDB4MGYpLCB2NkJ5dGVzWzddLCAoKHY2Qnl0ZXNbMV0gJiAweDBmKSA8PCA0KSB8ICgodjZCeXRlc1syXSAmIDB4ZjApID4+IDQpLCAoKHY2Qnl0ZXNbMl0gJiAweDBmKSA8PCA0KSB8ICgodjZCeXRlc1szXSAmIDB4ZjApID4+IDQpLCAweDEwIHwgKCh2NkJ5dGVzWzBdICYgMHhmMCkgPj4gNCksICgodjZCeXRlc1swXSAmIDB4MGYpIDw8IDQpIHwgKCh2NkJ5dGVzWzFdICYgMHhmMCkgPj4gNCksIHY2Qnl0ZXNbOF0sIHY2Qnl0ZXNbOV0sIHY2Qnl0ZXNbMTBdLCB2NkJ5dGVzWzExXSwgdjZCeXRlc1sxMl0sIHY2Qnl0ZXNbMTNdLCB2NkJ5dGVzWzE0XSwgdjZCeXRlc1sxNV0pO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBuYXRpdmVfanNfMSA9IHJlcXVpcmUoXCIuL25hdGl2ZS5qc1wiKTtcbmNvbnN0IHJuZ19qc18xID0gcmVxdWlyZShcIi4vcm5nLmpzXCIpO1xuY29uc3Qgc3RyaW5naWZ5X2pzXzEgPSByZXF1aXJlKFwiLi9zdHJpbmdpZnkuanNcIik7XG5mdW5jdGlvbiB2NChvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICAgIGlmIChuYXRpdmVfanNfMS5kZWZhdWx0LnJhbmRvbVVVSUQgJiYgIWJ1ZiAmJiAhb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmF0aXZlX2pzXzEuZGVmYXVsdC5yYW5kb21VVUlEKCk7XG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIGNvbnN0IHJuZHMgPSBvcHRpb25zLnJhbmRvbSA/PyBvcHRpb25zLnJuZz8uKCkgPz8gKDAsIHJuZ19qc18xLmRlZmF1bHQpKCk7XG4gICAgaWYgKHJuZHMubGVuZ3RoIDwgMTYpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSYW5kb20gYnl0ZXMgbGVuZ3RoIG11c3QgYmUgPj0gMTYnKTtcbiAgICB9XG4gICAgcm5kc1s2XSA9IChybmRzWzZdICYgMHgwZikgfCAweDQwO1xuICAgIHJuZHNbOF0gPSAocm5kc1s4XSAmIDB4M2YpIHwgMHg4MDtcbiAgICBpZiAoYnVmKSB7XG4gICAgICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAxNiA+IGJ1Zi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBVVUlEIGJ5dGUgcmFuZ2UgJHtvZmZzZXR9OiR7b2Zmc2V0ICsgMTV9IGlzIG91dCBvZiBidWZmZXIgYm91bmRzYCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgICAgICAgICBidWZbb2Zmc2V0ICsgaV0gPSBybmRzW2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidWY7XG4gICAgfVxuICAgIHJldHVybiAoMCwgc3RyaW5naWZ5X2pzXzEudW5zYWZlU3RyaW5naWZ5KShybmRzKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHY0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5sZXQgZ2V0UmFuZG9tVmFsdWVzO1xuY29uc3Qgcm5kczggPSBuZXcgVWludDhBcnJheSgxNik7XG5mdW5jdGlvbiBybmcoKSB7XG4gICAgaWYgKCFnZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjcnlwdG8gPT09ICd1bmRlZmluZWQnIHx8ICFjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NyeXB0by5nZXRSYW5kb21WYWx1ZXMoKSBub3Qgc3VwcG9ydGVkLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkI2dldHJhbmRvbXZhbHVlcy1ub3Qtc3VwcG9ydGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0UmFuZG9tVmFsdWVzID0gY3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKGNyeXB0byk7XG4gICAgfVxuICAgIHJldHVybiBnZXRSYW5kb21WYWx1ZXMocm5kczgpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gcm5nO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVwZGF0ZVY3U3RhdGUgPSB2b2lkIDA7XG5jb25zdCBybmdfanNfMSA9IHJlcXVpcmUoXCIuL3JuZy5qc1wiKTtcbmNvbnN0IHN0cmluZ2lmeV9qc18xID0gcmVxdWlyZShcIi4vc3RyaW5naWZ5LmpzXCIpO1xuY29uc3QgX3N0YXRlID0ge307XG5mdW5jdGlvbiB2NyhvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICAgIGxldCBieXRlcztcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgICBieXRlcyA9IHY3Qnl0ZXMob3B0aW9ucy5yYW5kb20gPz8gb3B0aW9ucy5ybmc/LigpID8/ICgwLCBybmdfanNfMS5kZWZhdWx0KSgpLCBvcHRpb25zLm1zZWNzLCBvcHRpb25zLnNlcSwgYnVmLCBvZmZzZXQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgY29uc3Qgcm5kcyA9ICgwLCBybmdfanNfMS5kZWZhdWx0KSgpO1xuICAgICAgICB1cGRhdGVWN1N0YXRlKF9zdGF0ZSwgbm93LCBybmRzKTtcbiAgICAgICAgYnl0ZXMgPSB2N0J5dGVzKHJuZHMsIF9zdGF0ZS5tc2VjcywgX3N0YXRlLnNlcSwgYnVmLCBvZmZzZXQpO1xuICAgIH1cbiAgICByZXR1cm4gYnVmID8/ICgwLCBzdHJpbmdpZnlfanNfMS51bnNhZmVTdHJpbmdpZnkpKGJ5dGVzKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVY3U3RhdGUoc3RhdGUsIG5vdywgcm5kcykge1xuICAgIHN0YXRlLm1zZWNzID8/PSAtSW5maW5pdHk7XG4gICAgc3RhdGUuc2VxID8/PSAwO1xuICAgIGlmIChub3cgPiBzdGF0ZS5tc2Vjcykge1xuICAgICAgICBzdGF0ZS5zZXEgPSAocm5kc1s2XSA8PCAyMykgfCAocm5kc1s3XSA8PCAxNikgfCAocm5kc1s4XSA8PCA4KSB8IHJuZHNbOV07XG4gICAgICAgIHN0YXRlLm1zZWNzID0gbm93O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc3RhdGUuc2VxID0gKHN0YXRlLnNlcSArIDEpIHwgMDtcbiAgICAgICAgaWYgKHN0YXRlLnNlcSA9PT0gMCkge1xuICAgICAgICAgICAgc3RhdGUubXNlY3MrKztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RhdGU7XG59XG5leHBvcnRzLnVwZGF0ZVY3U3RhdGUgPSB1cGRhdGVWN1N0YXRlO1xuZnVuY3Rpb24gdjdCeXRlcyhybmRzLCBtc2Vjcywgc2VxLCBidWYsIG9mZnNldCA9IDApIHtcbiAgICBpZiAocm5kcy5sZW5ndGggPCAxNikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JhbmRvbSBieXRlcyBsZW5ndGggbXVzdCBiZSA+PSAxNicpO1xuICAgIH1cbiAgICBpZiAoIWJ1Zikge1xuICAgICAgICBidWYgPSBuZXcgVWludDhBcnJheSgxNik7XG4gICAgICAgIG9mZnNldCA9IDA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAxNiA+IGJ1Zi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBVVUlEIGJ5dGUgcmFuZ2UgJHtvZmZzZXR9OiR7b2Zmc2V0ICsgMTV9IGlzIG91dCBvZiBidWZmZXIgYm91bmRzYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbXNlY3MgPz89IERhdGUubm93KCk7XG4gICAgc2VxID8/PSAoKHJuZHNbNl0gKiAweDdmKSA8PCAyNCkgfCAocm5kc1s3XSA8PCAxNikgfCAocm5kc1s4XSA8PCA4KSB8IHJuZHNbOV07XG4gICAgYnVmW29mZnNldCsrXSA9IChtc2VjcyAvIDB4MTAwMDAwMDAwMDApICYgMHhmZjtcbiAgICBidWZbb2Zmc2V0KytdID0gKG1zZWNzIC8gMHgxMDAwMDAwMDApICYgMHhmZjtcbiAgICBidWZbb2Zmc2V0KytdID0gKG1zZWNzIC8gMHgxMDAwMDAwKSAmIDB4ZmY7XG4gICAgYnVmW29mZnNldCsrXSA9IChtc2VjcyAvIDB4MTAwMDApICYgMHhmZjtcbiAgICBidWZbb2Zmc2V0KytdID0gKG1zZWNzIC8gMHgxMDApICYgMHhmZjtcbiAgICBidWZbb2Zmc2V0KytdID0gbXNlY3MgJiAweGZmO1xuICAgIGJ1ZltvZmZzZXQrK10gPSAweDcwIHwgKChzZXEgPj4+IDI4KSAmIDB4MGYpO1xuICAgIGJ1ZltvZmZzZXQrK10gPSAoc2VxID4+PiAyMCkgJiAweGZmO1xuICAgIGJ1ZltvZmZzZXQrK10gPSAweDgwIHwgKChzZXEgPj4+IDE0KSAmIDB4M2YpO1xuICAgIGJ1ZltvZmZzZXQrK10gPSAoc2VxID4+PiA2KSAmIDB4ZmY7XG4gICAgYnVmW29mZnNldCsrXSA9ICgoc2VxIDw8IDIpICYgMHhmZikgfCAocm5kc1sxMF0gJiAweDAzKTtcbiAgICBidWZbb2Zmc2V0KytdID0gcm5kc1sxMV07XG4gICAgYnVmW29mZnNldCsrXSA9IHJuZHNbMTJdO1xuICAgIGJ1ZltvZmZzZXQrK10gPSBybmRzWzEzXTtcbiAgICBidWZbb2Zmc2V0KytdID0gcm5kc1sxNF07XG4gICAgYnVmW29mZnNldCsrXSA9IHJuZHNbMTVdO1xuICAgIHJldHVybiBidWY7XG59XG5leHBvcnRzLmRlZmF1bHQgPSB2NztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gbWQ1KGJ5dGVzKSB7XG4gICAgY29uc3Qgd29yZHMgPSB1aW50OFRvVWludDMyKGJ5dGVzKTtcbiAgICBjb25zdCBtZDVCeXRlcyA9IHdvcmRzVG9NZDUod29yZHMsIGJ5dGVzLmxlbmd0aCAqIDgpO1xuICAgIHJldHVybiB1aW50MzJUb1VpbnQ4KG1kNUJ5dGVzKTtcbn1cbmZ1bmN0aW9uIHVpbnQzMlRvVWludDgoaW5wdXQpIHtcbiAgICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGlucHV0Lmxlbmd0aCAqIDQpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoICogNDsgaSsrKSB7XG4gICAgICAgIGJ5dGVzW2ldID0gKGlucHV0W2kgPj4gMl0gPj4+ICgoaSAlIDQpICogOCkpICYgMHhmZjtcbiAgICB9XG4gICAgcmV0dXJuIGJ5dGVzO1xufVxuZnVuY3Rpb24gZ2V0T3V0cHV0TGVuZ3RoKGlucHV0TGVuZ3RoOCkge1xuICAgIHJldHVybiAoKChpbnB1dExlbmd0aDggKyA2NCkgPj4+IDkpIDw8IDQpICsgMTQgKyAxO1xufVxuZnVuY3Rpb24gd29yZHNUb01kNSh4LCBsZW4pIHtcbiAgICBjb25zdCB4cGFkID0gbmV3IFVpbnQzMkFycmF5KGdldE91dHB1dExlbmd0aChsZW4pKS5maWxsKDApO1xuICAgIHhwYWQuc2V0KHgpO1xuICAgIHhwYWRbbGVuID4+IDVdIHw9IDB4ODAgPDwgbGVuICUgMzI7XG4gICAgeHBhZFt4cGFkLmxlbmd0aCAtIDFdID0gbGVuO1xuICAgIHggPSB4cGFkO1xuICAgIGxldCBhID0gMTczMjU4NDE5MztcbiAgICBsZXQgYiA9IC0yNzE3MzM4Nzk7XG4gICAgbGV0IGMgPSAtMTczMjU4NDE5NDtcbiAgICBsZXQgZCA9IDI3MTczMzg3ODtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHgubGVuZ3RoOyBpICs9IDE2KSB7XG4gICAgICAgIGNvbnN0IG9sZGEgPSBhO1xuICAgICAgICBjb25zdCBvbGRiID0gYjtcbiAgICAgICAgY29uc3Qgb2xkYyA9IGM7XG4gICAgICAgIGNvbnN0IG9sZGQgPSBkO1xuICAgICAgICBhID0gbWQ1ZmYoYSwgYiwgYywgZCwgeFtpXSwgNywgLTY4MDg3NjkzNik7XG4gICAgICAgIGQgPSBtZDVmZihkLCBhLCBiLCBjLCB4W2kgKyAxXSwgMTIsIC0zODk1NjQ1ODYpO1xuICAgICAgICBjID0gbWQ1ZmYoYywgZCwgYSwgYiwgeFtpICsgMl0sIDE3LCA2MDYxMDU4MTkpO1xuICAgICAgICBiID0gbWQ1ZmYoYiwgYywgZCwgYSwgeFtpICsgM10sIDIyLCAtMTA0NDUyNTMzMCk7XG4gICAgICAgIGEgPSBtZDVmZihhLCBiLCBjLCBkLCB4W2kgKyA0XSwgNywgLTE3NjQxODg5Nyk7XG4gICAgICAgIGQgPSBtZDVmZihkLCBhLCBiLCBjLCB4W2kgKyA1XSwgMTIsIDEyMDAwODA0MjYpO1xuICAgICAgICBjID0gbWQ1ZmYoYywgZCwgYSwgYiwgeFtpICsgNl0sIDE3LCAtMTQ3MzIzMTM0MSk7XG4gICAgICAgIGIgPSBtZDVmZihiLCBjLCBkLCBhLCB4W2kgKyA3XSwgMjIsIC00NTcwNTk4Myk7XG4gICAgICAgIGEgPSBtZDVmZihhLCBiLCBjLCBkLCB4W2kgKyA4XSwgNywgMTc3MDAzNTQxNik7XG4gICAgICAgIGQgPSBtZDVmZihkLCBhLCBiLCBjLCB4W2kgKyA5XSwgMTIsIC0xOTU4NDE0NDE3KTtcbiAgICAgICAgYyA9IG1kNWZmKGMsIGQsIGEsIGIsIHhbaSArIDEwXSwgMTcsIC00MjA2Myk7XG4gICAgICAgIGIgPSBtZDVmZihiLCBjLCBkLCBhLCB4W2kgKyAxMV0sIDIyLCAtMTk5MDQwNDE2Mik7XG4gICAgICAgIGEgPSBtZDVmZihhLCBiLCBjLCBkLCB4W2kgKyAxMl0sIDcsIDE4MDQ2MDM2ODIpO1xuICAgICAgICBkID0gbWQ1ZmYoZCwgYSwgYiwgYywgeFtpICsgMTNdLCAxMiwgLTQwMzQxMTAxKTtcbiAgICAgICAgYyA9IG1kNWZmKGMsIGQsIGEsIGIsIHhbaSArIDE0XSwgMTcsIC0xNTAyMDAyMjkwKTtcbiAgICAgICAgYiA9IG1kNWZmKGIsIGMsIGQsIGEsIHhbaSArIDE1XSwgMjIsIDEyMzY1MzUzMjkpO1xuICAgICAgICBhID0gbWQ1Z2coYSwgYiwgYywgZCwgeFtpICsgMV0sIDUsIC0xNjU3OTY1MTApO1xuICAgICAgICBkID0gbWQ1Z2coZCwgYSwgYiwgYywgeFtpICsgNl0sIDksIC0xMDY5NTAxNjMyKTtcbiAgICAgICAgYyA9IG1kNWdnKGMsIGQsIGEsIGIsIHhbaSArIDExXSwgMTQsIDY0MzcxNzcxMyk7XG4gICAgICAgIGIgPSBtZDVnZyhiLCBjLCBkLCBhLCB4W2ldLCAyMCwgLTM3Mzg5NzMwMik7XG4gICAgICAgIGEgPSBtZDVnZyhhLCBiLCBjLCBkLCB4W2kgKyA1XSwgNSwgLTcwMTU1ODY5MSk7XG4gICAgICAgIGQgPSBtZDVnZyhkLCBhLCBiLCBjLCB4W2kgKyAxMF0sIDksIDM4MDE2MDgzKTtcbiAgICAgICAgYyA9IG1kNWdnKGMsIGQsIGEsIGIsIHhbaSArIDE1XSwgMTQsIC02NjA0NzgzMzUpO1xuICAgICAgICBiID0gbWQ1Z2coYiwgYywgZCwgYSwgeFtpICsgNF0sIDIwLCAtNDA1NTM3ODQ4KTtcbiAgICAgICAgYSA9IG1kNWdnKGEsIGIsIGMsIGQsIHhbaSArIDldLCA1LCA1Njg0NDY0MzgpO1xuICAgICAgICBkID0gbWQ1Z2coZCwgYSwgYiwgYywgeFtpICsgMTRdLCA5LCAtMTAxOTgwMzY5MCk7XG4gICAgICAgIGMgPSBtZDVnZyhjLCBkLCBhLCBiLCB4W2kgKyAzXSwgMTQsIC0xODczNjM5NjEpO1xuICAgICAgICBiID0gbWQ1Z2coYiwgYywgZCwgYSwgeFtpICsgOF0sIDIwLCAxMTYzNTMxNTAxKTtcbiAgICAgICAgYSA9IG1kNWdnKGEsIGIsIGMsIGQsIHhbaSArIDEzXSwgNSwgLTE0NDQ2ODE0NjcpO1xuICAgICAgICBkID0gbWQ1Z2coZCwgYSwgYiwgYywgeFtpICsgMl0sIDksIC01MTQwMzc4NCk7XG4gICAgICAgIGMgPSBtZDVnZyhjLCBkLCBhLCBiLCB4W2kgKyA3XSwgMTQsIDE3MzUzMjg0NzMpO1xuICAgICAgICBiID0gbWQ1Z2coYiwgYywgZCwgYSwgeFtpICsgMTJdLCAyMCwgLTE5MjY2MDc3MzQpO1xuICAgICAgICBhID0gbWQ1aGgoYSwgYiwgYywgZCwgeFtpICsgNV0sIDQsIC0zNzg1NTgpO1xuICAgICAgICBkID0gbWQ1aGgoZCwgYSwgYiwgYywgeFtpICsgOF0sIDExLCAtMjAyMjU3NDQ2Myk7XG4gICAgICAgIGMgPSBtZDVoaChjLCBkLCBhLCBiLCB4W2kgKyAxMV0sIDE2LCAxODM5MDMwNTYyKTtcbiAgICAgICAgYiA9IG1kNWhoKGIsIGMsIGQsIGEsIHhbaSArIDE0XSwgMjMsIC0zNTMwOTU1Nik7XG4gICAgICAgIGEgPSBtZDVoaChhLCBiLCBjLCBkLCB4W2kgKyAxXSwgNCwgLTE1MzA5OTIwNjApO1xuICAgICAgICBkID0gbWQ1aGgoZCwgYSwgYiwgYywgeFtpICsgNF0sIDExLCAxMjcyODkzMzUzKTtcbiAgICAgICAgYyA9IG1kNWhoKGMsIGQsIGEsIGIsIHhbaSArIDddLCAxNiwgLTE1NTQ5NzYzMik7XG4gICAgICAgIGIgPSBtZDVoaChiLCBjLCBkLCBhLCB4W2kgKyAxMF0sIDIzLCAtMTA5NDczMDY0MCk7XG4gICAgICAgIGEgPSBtZDVoaChhLCBiLCBjLCBkLCB4W2kgKyAxM10sIDQsIDY4MTI3OTE3NCk7XG4gICAgICAgIGQgPSBtZDVoaChkLCBhLCBiLCBjLCB4W2ldLCAxMSwgLTM1ODUzNzIyMik7XG4gICAgICAgIGMgPSBtZDVoaChjLCBkLCBhLCBiLCB4W2kgKyAzXSwgMTYsIC03MjI1MjE5NzkpO1xuICAgICAgICBiID0gbWQ1aGgoYiwgYywgZCwgYSwgeFtpICsgNl0sIDIzLCA3NjAyOTE4OSk7XG4gICAgICAgIGEgPSBtZDVoaChhLCBiLCBjLCBkLCB4W2kgKyA5XSwgNCwgLTY0MDM2NDQ4Nyk7XG4gICAgICAgIGQgPSBtZDVoaChkLCBhLCBiLCBjLCB4W2kgKyAxMl0sIDExLCAtNDIxODE1ODM1KTtcbiAgICAgICAgYyA9IG1kNWhoKGMsIGQsIGEsIGIsIHhbaSArIDE1XSwgMTYsIDUzMDc0MjUyMCk7XG4gICAgICAgIGIgPSBtZDVoaChiLCBjLCBkLCBhLCB4W2kgKyAyXSwgMjMsIC05OTUzMzg2NTEpO1xuICAgICAgICBhID0gbWQ1aWkoYSwgYiwgYywgZCwgeFtpXSwgNiwgLTE5ODYzMDg0NCk7XG4gICAgICAgIGQgPSBtZDVpaShkLCBhLCBiLCBjLCB4W2kgKyA3XSwgMTAsIDExMjY4OTE0MTUpO1xuICAgICAgICBjID0gbWQ1aWkoYywgZCwgYSwgYiwgeFtpICsgMTRdLCAxNSwgLTE0MTYzNTQ5MDUpO1xuICAgICAgICBiID0gbWQ1aWkoYiwgYywgZCwgYSwgeFtpICsgNV0sIDIxLCAtNTc0MzQwNTUpO1xuICAgICAgICBhID0gbWQ1aWkoYSwgYiwgYywgZCwgeFtpICsgMTJdLCA2LCAxNzAwNDg1NTcxKTtcbiAgICAgICAgZCA9IG1kNWlpKGQsIGEsIGIsIGMsIHhbaSArIDNdLCAxMCwgLTE4OTQ5ODY2MDYpO1xuICAgICAgICBjID0gbWQ1aWkoYywgZCwgYSwgYiwgeFtpICsgMTBdLCAxNSwgLTEwNTE1MjMpO1xuICAgICAgICBiID0gbWQ1aWkoYiwgYywgZCwgYSwgeFtpICsgMV0sIDIxLCAtMjA1NDkyMjc5OSk7XG4gICAgICAgIGEgPSBtZDVpaShhLCBiLCBjLCBkLCB4W2kgKyA4XSwgNiwgMTg3MzMxMzM1OSk7XG4gICAgICAgIGQgPSBtZDVpaShkLCBhLCBiLCBjLCB4W2kgKyAxNV0sIDEwLCAtMzA2MTE3NDQpO1xuICAgICAgICBjID0gbWQ1aWkoYywgZCwgYSwgYiwgeFtpICsgNl0sIDE1LCAtMTU2MDE5ODM4MCk7XG4gICAgICAgIGIgPSBtZDVpaShiLCBjLCBkLCBhLCB4W2kgKyAxM10sIDIxLCAxMzA5MTUxNjQ5KTtcbiAgICAgICAgYSA9IG1kNWlpKGEsIGIsIGMsIGQsIHhbaSArIDRdLCA2LCAtMTQ1NTIzMDcwKTtcbiAgICAgICAgZCA9IG1kNWlpKGQsIGEsIGIsIGMsIHhbaSArIDExXSwgMTAsIC0xMTIwMjEwMzc5KTtcbiAgICAgICAgYyA9IG1kNWlpKGMsIGQsIGEsIGIsIHhbaSArIDJdLCAxNSwgNzE4Nzg3MjU5KTtcbiAgICAgICAgYiA9IG1kNWlpKGIsIGMsIGQsIGEsIHhbaSArIDldLCAyMSwgLTM0MzQ4NTU1MSk7XG4gICAgICAgIGEgPSBzYWZlQWRkKGEsIG9sZGEpO1xuICAgICAgICBiID0gc2FmZUFkZChiLCBvbGRiKTtcbiAgICAgICAgYyA9IHNhZmVBZGQoYywgb2xkYyk7XG4gICAgICAgIGQgPSBzYWZlQWRkKGQsIG9sZGQpO1xuICAgIH1cbiAgICByZXR1cm4gVWludDMyQXJyYXkub2YoYSwgYiwgYywgZCk7XG59XG5mdW5jdGlvbiB1aW50OFRvVWludDMyKGlucHV0KSB7XG4gICAgaWYgKGlucHV0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQzMkFycmF5KCk7XG4gICAgfVxuICAgIGNvbnN0IG91dHB1dCA9IG5ldyBVaW50MzJBcnJheShnZXRPdXRwdXRMZW5ndGgoaW5wdXQubGVuZ3RoICogOCkpLmZpbGwoMCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgICBvdXRwdXRbaSA+PiAyXSB8PSAoaW5wdXRbaV0gJiAweGZmKSA8PCAoKGkgJSA0KSAqIDgpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xufVxuZnVuY3Rpb24gc2FmZUFkZCh4LCB5KSB7XG4gICAgY29uc3QgbHN3ID0gKHggJiAweGZmZmYpICsgKHkgJiAweGZmZmYpO1xuICAgIGNvbnN0IG1zdyA9ICh4ID4+IDE2KSArICh5ID4+IDE2KSArIChsc3cgPj4gMTYpO1xuICAgIHJldHVybiAobXN3IDw8IDE2KSB8IChsc3cgJiAweGZmZmYpO1xufVxuZnVuY3Rpb24gYml0Um90YXRlTGVmdChudW0sIGNudCkge1xuICAgIHJldHVybiAobnVtIDw8IGNudCkgfCAobnVtID4+PiAoMzIgLSBjbnQpKTtcbn1cbmZ1bmN0aW9uIG1kNWNtbihxLCBhLCBiLCB4LCBzLCB0KSB7XG4gICAgcmV0dXJuIHNhZmVBZGQoYml0Um90YXRlTGVmdChzYWZlQWRkKHNhZmVBZGQoYSwgcSksIHNhZmVBZGQoeCwgdCkpLCBzKSwgYik7XG59XG5mdW5jdGlvbiBtZDVmZihhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XG4gICAgcmV0dXJuIG1kNWNtbigoYiAmIGMpIHwgKH5iICYgZCksIGEsIGIsIHgsIHMsIHQpO1xufVxuZnVuY3Rpb24gbWQ1Z2coYSwgYiwgYywgZCwgeCwgcywgdCkge1xuICAgIHJldHVybiBtZDVjbW4oKGIgJiBkKSB8IChjICYgfmQpLCBhLCBiLCB4LCBzLCB0KTtcbn1cbmZ1bmN0aW9uIG1kNWhoKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcbiAgICByZXR1cm4gbWQ1Y21uKGIgXiBjIF4gZCwgYSwgYiwgeCwgcywgdCk7XG59XG5mdW5jdGlvbiBtZDVpaShhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XG4gICAgcmV0dXJuIG1kNWNtbihjIF4gKGIgfCB+ZCksIGEsIGIsIHgsIHMsIHQpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gbWQ1O1xuIiwidmFyIGU9cmVxdWlyZShcImltbWVyXCIpLHI9cmVxdWlyZShcInJlYWN0XCIpO2V4cG9ydHMudXNlSW1tZXI9ZnVuY3Rpb24odSl7dmFyIG49ci51c2VTdGF0ZShmdW5jdGlvbigpe3JldHVybiBlLmZyZWV6ZShcImZ1bmN0aW9uXCI9PXR5cGVvZiB1P3UoKTp1LCEwKX0pLHQ9blsxXTtyZXR1cm5bblswXSxyLnVzZUNhbGxiYWNrKGZ1bmN0aW9uKHIpe3QoXCJmdW5jdGlvblwiPT10eXBlb2Ygcj9lLnByb2R1Y2Uocik6ZS5mcmVlemUocikpfSxbXSldfSxleHBvcnRzLnVzZUltbWVyUmVkdWNlcj1mdW5jdGlvbih1LG4sdCl7dmFyIG89ci51c2VNZW1vKGZ1bmN0aW9uKCl7cmV0dXJuIGUucHJvZHVjZSh1KX0sW3VdKTtyZXR1cm4gci51c2VSZWR1Y2VyKG8sbix0KX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtaW1tZXIuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHN0cmluZ2lmeV9qc18xID0gcmVxdWlyZShcIi4vc3RyaW5naWZ5LmpzXCIpO1xuY29uc3QgdjFfanNfMSA9IHJlcXVpcmUoXCIuL3YxLmpzXCIpO1xuY29uc3QgdjFUb1Y2X2pzXzEgPSByZXF1aXJlKFwiLi92MVRvVjYuanNcIik7XG5mdW5jdGlvbiB2NihvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICAgIG9wdGlvbnMgPz89IHt9O1xuICAgIG9mZnNldCA/Pz0gMDtcbiAgICBsZXQgYnl0ZXMgPSAoMCwgdjFfanNfMS5kZWZhdWx0KSh7IC4uLm9wdGlvbnMsIF92NjogdHJ1ZSB9LCBuZXcgVWludDhBcnJheSgxNikpO1xuICAgIGJ5dGVzID0gKDAsIHYxVG9WNl9qc18xLmRlZmF1bHQpKGJ5dGVzKTtcbiAgICBpZiAoYnVmKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgICAgICAgICAgYnVmW29mZnNldCArIGldID0gYnl0ZXNbaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9XG4gICAgcmV0dXJuICgwLCBzdHJpbmdpZnlfanNfMS51bnNhZmVTdHJpbmdpZnkpKGJ5dGVzKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHY2O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18zNzdfXzsiLCIvKipcbiAqIFRoZSBwdXJwb3NlIG9mIGluaXRpYWxTdGF0ZXMudHMgaXMgdG8gcHJvdmlkZSBpbml0aWFsIHN0YXRlIGZvciBjb21wb25lbnQgcHJvcHNcbiAqL1xuLy8gaW5pdGlhbFN0YXRlLnRzXG5cblxuaW1wb3J0IHsgQ29tbWFuZFZhbHZlTXBQcm9wcywgUGFyYW1JdGVtIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuZXhwb3J0IGNvbnN0IHZhbHZlU3RhdHVzID0ge1xuXHRhbGFybTogZmFsc2UsXG5cdGFjdEZCOiBmYWxzZSxcblx0ZGVBY3RGQjogdHJ1ZSxcblx0YWN0aXZhdGVkQ29uZmlnOiA3LFxuXHRkZWFjdGl2YXRlZENvbmZpZzogNSxcblx0aXRlbU5hbWU6IFwiVlhYWFwiLFxuXHRtYW51YWw6IGZhbHNlLFxuXHRtYXNrZWQ6IGZhbHNlLFxuXHRjaGFuZ2luZzogZmFsc2UsXG5cdGxvY2F0ZTogZmFsc2UsXG59O1xuXG5leHBvcnQgY29uc3QgcHJvY2Vzc09iamVjdFByb3BzID0ge1xuXHRzdGF0dXM6IHZhbHZlU3RhdHVzLFxufTtcbmV4cG9ydCBjb25zdCB2YWx2ZVByb3BzID0ge1xuXHRwcm9jZXNzT2JqZWN0OiBwcm9jZXNzT2JqZWN0UHJvcHMsXG5cdGhhbmRsZUNsaWNrOiAoKSA9PiB7XG5cdFx0Y29uc29sZS5sb2coXCJWYWx2ZSBjbGlja2VkXCIpO1xuXHR9LFxuXHRsYWJlbFBvc2l0aW9uOiBcImxlZnRcIixcblx0c2hvd0xhYmVsOiBmYWxzZSxcbn07XG5leHBvcnQgY29uc3QgcHVtcEluaXRpYWxTdGF0dXMgPSB7XG5cdGFsYXJtOiBmYWxzZSxcblx0YWN0RkI6IGZhbHNlLFxuXHRkZUFjdEZCOiBmYWxzZSxcblx0Y29uZmlndXJhdGlvbjogNyxcblx0aXRlbU5hbWU6IFwiaXRlbU5hbWVcIixcblx0bWFudWFsOiBmYWxzZSxcblx0bWFza2VkOiBmYWxzZSxcblx0Y2hhbmdpbmc6IGZhbHNlLFxuXHRsb2NhdGU6IGZhbHNlLFxufVxuXG5leHBvcnQgY29uc3QgcHVtcEluaXRpYWxQcm9wcyA9IHtcblx0c3RhdHVzOiBwdW1wSW5pdGlhbFN0YXR1cyxcbn1cbmV4cG9ydCBjb25zdCBwYXJhbWV0ZXJJbml0aWFsU3RhdGUgPSBbXG5cdHtcblx0XHRsYWJlbDoge1xuXHRcdFx0dGV4dDogXCJsYWJlbFwiLFxuXHRcdFx0Y2xhc3NOYW1lOiBcIlwiLFxuXHRcdFx0dG9vbHRpcFRleHQ6IFwiXCIsXG5cdFx0XHR0b29sdGlwUG9zaXRpb246IFwiXCIsXG5cdFx0XHR0b29sdGlwQ2xhc3NOYW1lOiBcIlwiLFxuXHRcdFx0dG9vbHRpcElkOiBcIlwiLFxuXHRcdH0sXG5cdFx0aW5wdXQ6IHtcblx0XHRcdHR5cGU6IFwidGV4dFwiLFxuXHRcdFx0aW5wdXRtb2RlOiBcIm51bWVyaWNcIixcblx0XHRcdHBsYWNlaG9sZGVyOiBcIkVudGVyIGEgbnVtYmVyXCIsXG5cdFx0XHRlZGl0YWJsZTogdHJ1ZSxcblx0XHRcdHBhdHRlcm46IFwiXlswLTldKlsuLF0/WzAtOV0qJFwiLFxuXHRcdFx0bWluOiAwLFxuXHRcdFx0bWF4OiAxMDAsXG5cdFx0XHRkZWNpbWFsUGxhY2VzOiAyLFxuXHRcdFx0ZXU6IFwiXFx1MDBCNUNcIixcblx0XHRcdHZhbHVlOiAwLFxuXHRcdH0sXG5cdH0gYXMgUGFyYW1JdGVtLFxuXTtcblxuZXhwb3J0IGNvbnN0IGluaXRpYWxBdXRvTWFuU3RhdGUgPSB7XG5cdGF1dG86IHRydWUsXG5cdG1hbnVhbDogZmFsc2UsXG59O1xuZXhwb3J0IGNvbnN0IGluaXRpYWxPZmZPblN0YXRlID0ge1xuXHRvZmY6IGZhbHNlLFxuXHRvbjogZmFsc2UsXG59O1xuZXhwb3J0IGNvbnN0IGluaXRpYWxDb250cm9sU3RhdGUgPSB7XG5cdGNvbW1hbmQ6IHtcblx0XHRpbnRlcmxvY2tzOiB7XG5cdFx0XHRtYWluOiBbXSxcblx0XHRcdHVwcGVyU2VhdDogW10sXG5cdFx0XHRsb3dlclNlYXQ6IFtdXG5cdFx0fSxcblx0XHRtYWluOiB7XG5cdFx0XHRsYWJlbDogXCJNYWluXCIsXG5cdFx0XHRhdXRvTWFudWFsOiBmYWxzZSxcblx0XHRcdGFjdGl2YXRpb246IGZhbHNlLFxuXHRcdH0sXG5cdFx0dXBwZXJTZWF0OiB7XG5cdFx0XHRsYWJlbDogXCJVcHBlciBTZWF0XCIsXG5cdFx0XHRhY3RpdmF0aW9uOiBmYWxzZSxcblx0XHR9LFxuXHRcdGxvd2VyU2VhdDoge1xuXHRcdFx0bGFiZWw6IFwiTG93ZXIgU2VhdFwiLFxuXHRcdFx0YWN0aXZhdGlvbjogZmFsc2UsXG5cdFx0fVxuXHR9XG59IGFzIENvbW1hbmRWYWx2ZU1wUHJvcHM7XG4iLCJcbid1c2Ugc3RyaWN0J1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vaW1tZXIuY2pzLnByb2R1Y3Rpb24uanMnKVxufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ltbWVyLmNqcy5kZXZlbG9wbWVudC5qcycpXG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVwZGF0ZVYxU3RhdGUgPSB2b2lkIDA7XG5jb25zdCBybmdfanNfMSA9IHJlcXVpcmUoXCIuL3JuZy5qc1wiKTtcbmNvbnN0IHN0cmluZ2lmeV9qc18xID0gcmVxdWlyZShcIi4vc3RyaW5naWZ5LmpzXCIpO1xuY29uc3QgX3N0YXRlID0ge307XG5mdW5jdGlvbiB2MShvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICAgIGxldCBieXRlcztcbiAgICBjb25zdCBpc1Y2ID0gb3B0aW9ucz8uX3Y2ID8/IGZhbHNlO1xuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnNLZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gICAgICAgIGlmIChvcHRpb25zS2V5cy5sZW5ndGggPT09IDEgJiYgb3B0aW9uc0tleXNbMF0gPT09ICdfdjYnKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIGJ5dGVzID0gdjFCeXRlcyhvcHRpb25zLnJhbmRvbSA/PyBvcHRpb25zLnJuZz8uKCkgPz8gKDAsIHJuZ19qc18xLmRlZmF1bHQpKCksIG9wdGlvbnMubXNlY3MsIG9wdGlvbnMubnNlY3MsIG9wdGlvbnMuY2xvY2tzZXEsIG9wdGlvbnMubm9kZSwgYnVmLCBvZmZzZXQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgY29uc3Qgcm5kcyA9ICgwLCBybmdfanNfMS5kZWZhdWx0KSgpO1xuICAgICAgICB1cGRhdGVWMVN0YXRlKF9zdGF0ZSwgbm93LCBybmRzKTtcbiAgICAgICAgYnl0ZXMgPSB2MUJ5dGVzKHJuZHMsIF9zdGF0ZS5tc2VjcywgX3N0YXRlLm5zZWNzLCBpc1Y2ID8gdW5kZWZpbmVkIDogX3N0YXRlLmNsb2Nrc2VxLCBpc1Y2ID8gdW5kZWZpbmVkIDogX3N0YXRlLm5vZGUsIGJ1Ziwgb2Zmc2V0KTtcbiAgICB9XG4gICAgcmV0dXJuIGJ1ZiA/PyAoMCwgc3RyaW5naWZ5X2pzXzEudW5zYWZlU3RyaW5naWZ5KShieXRlcyk7XG59XG5mdW5jdGlvbiB1cGRhdGVWMVN0YXRlKHN0YXRlLCBub3csIHJuZHMpIHtcbiAgICBzdGF0ZS5tc2VjcyA/Pz0gLUluZmluaXR5O1xuICAgIHN0YXRlLm5zZWNzID8/PSAwO1xuICAgIGlmIChub3cgPT09IHN0YXRlLm1zZWNzKSB7XG4gICAgICAgIHN0YXRlLm5zZWNzKys7XG4gICAgICAgIGlmIChzdGF0ZS5uc2VjcyA+PSAxMDAwMCkge1xuICAgICAgICAgICAgc3RhdGUubm9kZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHN0YXRlLm5zZWNzID0gMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChub3cgPiBzdGF0ZS5tc2Vjcykge1xuICAgICAgICBzdGF0ZS5uc2VjcyA9IDA7XG4gICAgfVxuICAgIGVsc2UgaWYgKG5vdyA8IHN0YXRlLm1zZWNzKSB7XG4gICAgICAgIHN0YXRlLm5vZGUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICghc3RhdGUubm9kZSkge1xuICAgICAgICBzdGF0ZS5ub2RlID0gcm5kcy5zbGljZSgxMCwgMTYpO1xuICAgICAgICBzdGF0ZS5ub2RlWzBdIHw9IDB4MDE7XG4gICAgICAgIHN0YXRlLmNsb2Nrc2VxID0gKChybmRzWzhdIDw8IDgpIHwgcm5kc1s5XSkgJiAweDNmZmY7XG4gICAgfVxuICAgIHN0YXRlLm1zZWNzID0gbm93O1xuICAgIHJldHVybiBzdGF0ZTtcbn1cbmV4cG9ydHMudXBkYXRlVjFTdGF0ZSA9IHVwZGF0ZVYxU3RhdGU7XG5mdW5jdGlvbiB2MUJ5dGVzKHJuZHMsIG1zZWNzLCBuc2VjcywgY2xvY2tzZXEsIG5vZGUsIGJ1Ziwgb2Zmc2V0ID0gMCkge1xuICAgIGlmIChybmRzLmxlbmd0aCA8IDE2KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUmFuZG9tIGJ5dGVzIGxlbmd0aCBtdXN0IGJlID49IDE2Jyk7XG4gICAgfVxuICAgIGlmICghYnVmKSB7XG4gICAgICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KDE2KTtcbiAgICAgICAgb2Zmc2V0ID0gMDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDE2ID4gYnVmLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYFVVSUQgYnl0ZSByYW5nZSAke29mZnNldH06JHtvZmZzZXQgKyAxNX0gaXMgb3V0IG9mIGJ1ZmZlciBib3VuZHNgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBtc2VjcyA/Pz0gRGF0ZS5ub3coKTtcbiAgICBuc2VjcyA/Pz0gMDtcbiAgICBjbG9ja3NlcSA/Pz0gKChybmRzWzhdIDw8IDgpIHwgcm5kc1s5XSkgJiAweDNmZmY7XG4gICAgbm9kZSA/Pz0gcm5kcy5zbGljZSgxMCwgMTYpO1xuICAgIG1zZWNzICs9IDEyMjE5MjkyODAwMDAwO1xuICAgIGNvbnN0IHRsID0gKChtc2VjcyAmIDB4ZmZmZmZmZikgKiAxMDAwMCArIG5zZWNzKSAlIDB4MTAwMDAwMDAwO1xuICAgIGJ1ZltvZmZzZXQrK10gPSAodGwgPj4+IDI0KSAmIDB4ZmY7XG4gICAgYnVmW29mZnNldCsrXSA9ICh0bCA+Pj4gMTYpICYgMHhmZjtcbiAgICBidWZbb2Zmc2V0KytdID0gKHRsID4+PiA4KSAmIDB4ZmY7XG4gICAgYnVmW29mZnNldCsrXSA9IHRsICYgMHhmZjtcbiAgICBjb25zdCB0bWggPSAoKG1zZWNzIC8gMHgxMDAwMDAwMDApICogMTAwMDApICYgMHhmZmZmZmZmO1xuICAgIGJ1ZltvZmZzZXQrK10gPSAodG1oID4+PiA4KSAmIDB4ZmY7XG4gICAgYnVmW29mZnNldCsrXSA9IHRtaCAmIDB4ZmY7XG4gICAgYnVmW29mZnNldCsrXSA9ICgodG1oID4+PiAyNCkgJiAweGYpIHwgMHgxMDtcbiAgICBidWZbb2Zmc2V0KytdID0gKHRtaCA+Pj4gMTYpICYgMHhmZjtcbiAgICBidWZbb2Zmc2V0KytdID0gKGNsb2Nrc2VxID4+PiA4KSB8IDB4ODA7XG4gICAgYnVmW29mZnNldCsrXSA9IGNsb2Nrc2VxICYgMHhmZjtcbiAgICBmb3IgKGxldCBuID0gMDsgbiA8IDY7ICsrbikge1xuICAgICAgICBidWZbb2Zmc2V0KytdID0gbm9kZVtuXTtcbiAgICB9XG4gICAgcmV0dXJuIGJ1Zjtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHYxO1xuIiwiLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9ucyBmb3IgbnVtYmVyc1xuICovXG5cbi8qKlxuICogVXNpbmcgdGhlIGJpbmFyeSByZXByZXNlbnRhdGlvbiBvZiBuLCBhbiBJbnRlZ2VyLCByZXR1cm5zIHRoZSBib29sZWFuXG4gKiB2YWx1ZSBhdCBpbmRleCwgaS5cbiAqIEBwYXJhbSBuIGEgbnVtYmVyIGlzIGltcGxpY2l0eSBjb252ZXJ0ZXIgdG8gYSAzMmJpdCBpbnRlZ2VyLCBieSB0aGUgYml0d2lzZSBvcGVyYXRvcnNcbiAqIEBwYXJhbSBpIGlzIGEgbnVtYmVyIHJlcHJlc2VudGluZyB0aGUgYml0IHBvc2l0aW9uIHRvIGJlIHRlc3RlZFxuICogQHJldHVybnMgdGhlIGJvb2xlYW4gdmFsdWUgb2YgdGhlIGJpdCBhdCBpbmRleCBpLlxuICovXG5leHBvcnQgY29uc3QgZ2V0Qm9vbEF0SW5kZXggPSAobjogbnVtYmVyLCBpOiBudW1iZXIpOiBib29sZWFuID0+IHtcblx0cmV0dXJuIEJvb2xlYW4oKG4gPj4gaSkgJiAxKTtcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHtcblx0UFVNUF9DT01QT05FTlRfVFlQRSxcblx0dHlwZSBFbGVtZW50UmVmLFxuXHR0eXBlIFB1bXBDb21wb3VuZENvbnRleHRUeXBlLFxuXHR0eXBlIFB1bXBDb21wb3VuZFJvb3RQcm9wcyxcbn0gZnJvbSBcIi4uLy4uLy4uL2FwaS90eXBlc1wiO1xuaW1wb3J0IHsgdXNlQ3JlYXRlQ29udGV4dCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9jcmVhdGVDb250ZXh0XCI7XG5pbXBvcnQgSXRlbSBmcm9tIFwiLi4vdmFsdmUvaXRlbVwiO1xuaW1wb3J0IHtcblx0Z2V0SXRlbUlkUG9zaXRpb25DbGFzc05hbWUsXG5cdGdldFB1bXBJdGVtQ2xhc3NOYW1lLFxuXHRnZXRQdW1wU3RhdHVzQ2xhc3NOYW1lcyxcblx0cHVtcEl0ZW1OYW1lcyxcbn0gZnJvbSBcIi4uLy4uLy4uL2FwaS91dGlsc1wiO1xuaW1wb3J0IHsgcHVtcEluaXRpYWxQcm9wcyB9IGZyb20gXCIuLi8uLi8uLi9hcGkvaW5pdGlhbFN0YXRlXCI7XG5cbmV4cG9ydCBjb25zdCBDT01QT05FTlRfVFlQRSA9IFBVTVBfQ09NUE9ORU5UX1RZUEU7XG5cbmV4cG9ydCBjb25zdCBbUHVtcENvbnRleHRQcm92aWRlciwgdXNlUHVtcENvbnRleHRdID1cblx0dXNlQ3JlYXRlQ29udGV4dDxQdW1wQ29tcG91bmRDb250ZXh0VHlwZT4oXCJQdW1wQ29tcG91bmRcIik7XG5cbmNvbnN0IFJvb3QgPSAoe1xuXHRjb21wb25lbnRQcm9wcyxcblx0cHVtcFByb3BzLFxuXHRvbkFjdGlvblBlcmZvcm1lZCxcblx0Y2hpbGRyZW4sXG59OiBQdW1wQ29tcG91bmRSb290UHJvcHMpID0+IHtcblx0cmV0dXJuIChcblx0XHQ8UHVtcENvbnRleHRQcm92aWRlclxuXHRcdFx0ey4uLntcblx0XHRcdFx0cHVtcFByb3BzLFxuXHRcdFx0XHRjb21wb25lbnRQcm9wcyxcblx0XHRcdFx0b25BY3Rpb25QZXJmb3JtZWQsXG5cdFx0XHR9fVxuXHRcdD5cblx0XHRcdHtjaGlsZHJlbn1cblx0XHQ8L1B1bXBDb250ZXh0UHJvdmlkZXI+XG5cdCk7XG59O1xuY29uc3QgcHVtcCA9ICgpID0+IHtcblx0Y29uc3QgeyBwdW1wUHJvcHMsIG9uQWN0aW9uUGVyZm9ybWVkLCBjb21wb25lbnRQcm9wcyB9ID1cblx0XHR1c2VQdW1wQ29udGV4dChcIlZhbHZlXCIpO1xuXHRjb25zdCBlbFJlZjogRWxlbWVudFJlZiA9IFJlYWN0LnVzZVJlZjxIVE1MRGl2RWxlbWVudD4obnVsbCk7XG5cdGNvbnN0IHsgZW1pdCB9ID0gY29tcG9uZW50UHJvcHM7XG5cdGNvbnN0IHsgcHJvY2Vzc09iamVjdCwgcHVtcFR5cGUgfSA9IHB1bXBQcm9wcztcblx0Y29uc3QgeyBzdGF0dXMgfSA9IHByb2Nlc3NPYmplY3QgfHwgcHVtcEluaXRpYWxQcm9wcztcblxuXHQvLyBpZiBub3QgbG9jYXRlLCB0cmltIGxhc3QgaXRlbSBmcm9tIHZhbHZlTXBJdGVtTmFtZXNcblx0bGV0IGNvbXBvbmVudEl0ZW1OYW1lcyA9IHB1bXBJdGVtTmFtZXM7XG5cdGlmICghc3RhdHVzPy5sb2NhdGUpIHtcblx0XHRjb21wb25lbnRJdGVtTmFtZXMgPSBjb21wb25lbnRJdGVtTmFtZXMuc2xpY2UoMCwgLTEpO1xuXHR9XG5cdGNvbnN0IGlzQ29vcmRDaGlsZDpib29sZWFuID0gY29tcG9uZW50UHJvcHMuc3RvcmUuaXNDb29yZENvbnRhaW5lckNoaWxkO1xuXHRjb25zb2xlLmxvZyhgaXNDb29yZENoaWxkICR7aXNDb29yZENoaWxkfWApO1xuXG5cdGNvbnN0IGZsZXhSb3dXcmFwcGVyID0gIWlzQ29vcmRDaGlsZCA/IFwiaG1pLWNvbXBvbmVudF9fcm93XCIgOiBcImRpc3BsYXktbm9uZVwiO1xuXHRjb25zdCBmbGV4Q29sV3JhcHBlciA9ICFpc0Nvb3JkQ2hpbGQgPyBcImhtaS1jb21wb25lbnRfX2NvbHVtblwiIDogXCJkaXNwbGF5LW5vbmVcIjtcblx0Y29uc3QgY29tcG9uZW50Q2xhc3NOYW1lID0gXCJobWktY29tcG9uZW50IGhtaS1jb21wb25lbnQtcHVtcFwiO1xuXHRjb25zdCBlbWl0Q2xhc3NOYW1lcyA9ICFpc0Nvb3JkQ2hpbGQgPyBgaG1pLWNvbXBvbmVudCAke2ZsZXhDb2xXcmFwcGVyfSBgIDogXCJobWktY29tcG9uZW50IGhtaS1jb21wb25lbnQtcHVtcFwiO1xuXHRyZXR1cm4gKFxuXG5cdFx0PGRpdlxuXHRcdFx0XHRyZWY9e2VsUmVmfVxuXHRcdFx0XHR7Li4uZW1pdCh7XG5cdFx0XHRcdFx0Y2xhc3NlczogW2Ake2VtaXRDbGFzc05hbWVzfWBdLFxuXHRcdFx0XHR9KX1cblx0XHRcdFx0ZGF0YS1jb21wb25lbnQ9e0NPTVBPTkVOVF9UWVBFfVxuXHRcdFx0XHRvbkNsaWNrPXtvbkFjdGlvblBlcmZvcm1lZH1cblx0XHRcdD5cblx0XHRcdFx0PGRpdiBjbGFzc05hbWU9e2Ake2ZsZXhSb3dXcmFwcGVyfWB9PlxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT17YCR7Y29tcG9uZW50Q2xhc3NOYW1lfWB9PlxuXHRcdFx0PEl0ZW0gaXRlbUNsYXNzTmFtZT17YCR7Z2V0UHVtcFN0YXR1c0NsYXNzTmFtZXMoXCJiYXNlLTEgc2hvd1wiLHN0YXR1cyl9YH0vPlxuXHRcdFx0ey8qIDxJdGVtIGl0ZW1DbGFzc05hbWU9e2Ake2dldFB1bXBTdGF0dXNDbGFzc05hbWVzKFwiYmFzZS0yIHNob3cgaXRlbVwiLHN0YXR1cyl9YH0vPiAqL31cblx0XHRcdHsvKiA8SXRlbSBpdGVtQ2xhc3NOYW1lPXtgJHtnZXRQdW1wU3RhdHVzQ2xhc3NOYW1lcyhcImJhc2UtMyBzaG93IGl0ZW1cIixzdGF0dXMpfWB9Lz4gKi99XG5cdFx0XHQ8SXRlbSBpdGVtQ2xhc3NOYW1lPXtcImJhc2UtMiBzaG93IGl0ZW1cIn0vPlxuXHRcdFx0PEl0ZW0gaXRlbUNsYXNzTmFtZT17XCJiYXNlLTMgc2hvdyBpdGVtXCJ9Lz5cblxuXHRcdFx0XHR7Y29tcG9uZW50SXRlbU5hbWVzLm1hcCgoeyBuYW1lLCBpbmRleCwga2V5IH0pID0+IChcblx0XHRcdFx0XHQ8SXRlbVxuXHRcdFx0XHRcdGl0ZW1DbGFzc05hbWU9e1xuXHRcdFx0XHRcdFx0bmFtZSArXG5cdFx0XHRcdFx0XHRcIiBcIiArXG5cdFx0XHRcdFx0XHRnZXRQdW1wSXRlbUNsYXNzTmFtZShcblx0XHRcdFx0XHRcdFx0aW5kZXgsXG5cdFx0XHRcdFx0XHRcdHN0YXR1cyxcblx0XHRcdFx0XHRcdFx0cHVtcFR5cGUgfHwgXCJjZW50cmlmdWdhbFwiLFxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRrZXk9e2tleX1cblx0XHRcdFx0XHQvPlxuXHRcdFx0XHQpKX1cblx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8SXRlbSBpdGVtQ2xhc3NOYW1lPXtgbG9jYXRlICR7c3RhdHVzLmxvY2F0ZSA/IFwic2hvdyBpdGVtXCIgOiBcImhpZGUgaXRlbVwifWB9Lz5cblx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblx0KTtcbn07XG5cbmNvbnN0IHBvcG92ZXIgPSAoeyBhbmNob3JFbCB9OiB7IGFuY2hvckVsOiBIVE1MRGl2RWxlbWVudCB8IG51bGwgfSkgPT4ge1xuXHRjb25zdCB7IHB1bXBQcm9wcywgY29tcG9uZW50UHJvcHMgfSA9IHVzZVB1bXBDb250ZXh0KFwiUG9wb3ZlclwiKTtcblx0Y29uc3QgeyBzaG93TGFiZWwsIGxhYmVsUG9zaXRpb24sIHByb2Nlc3NPYmplY3QgfSA9IHB1bXBQcm9wcztcblx0Y29uc3QgeyBzdGF0dXMgfSA9IHByb2Nlc3NPYmplY3QgfHwge307XG5cdGlmICghc2hvd0xhYmVsKSByZXR1cm4gbnVsbDtcblx0Y29uc3QgeyBwb3NpdGlvbiB9ID0gY29tcG9uZW50UHJvcHM7XG5cdGxldCBjbGFzc05hbWUgPSBcIml0ZW1JZCBwb3BvdmVyIHBvc2l0aW9uLWxlZnRcIjtcblx0aWYgKGxhYmVsUG9zaXRpb24pIHtcblx0XHRjbGFzc05hbWUgPSBnZXRJdGVtSWRQb3NpdGlvbkNsYXNzTmFtZShjbGFzc05hbWUsIGxhYmVsUG9zaXRpb24pO1xuXHR9XG5cdHJldHVybiAoXG5cdFx0PGRpdlxuXHRcdFx0Y2xhc3NOYW1lPXtjbGFzc05hbWV9XG5cdFx0XHRzdHlsZT17e1xuXHRcdFx0XHR0b3A6IHBvc2l0aW9uLnksXG5cdFx0XHRcdGxlZnQ6IHBvc2l0aW9uLngsXG5cdFx0XHR9fVxuXHRcdD5cblx0XHRcdDxkaXYgc3R5bGU9e3sgcGFkZGluZzogOCB9fT57c3RhdHVzPy5pdGVtTmFtZX08L2Rpdj5cblx0XHQ8L2Rpdj5cblx0KTtcbn07XG5cbmV4cG9ydCBjb25zdCBQdW1wQ29tcG91bmQgPSB7XG5cdFJvb3QsXG5cdHB1bXAsXG5cdHBvcG92ZXIsXG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHQgPSAnMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwJztcbiIsImltcG9ydCB7IGdldEJvb2xBdEluZGV4IH0gZnJvbSBcIi4uL3V0aWxzL251bWJlclV0aWxcIjtcbmltcG9ydCB7XG5cdEl0ZW1JZFBvc2l0aW9uVHlwZSxcblx0SXRlbU5hbWVFbnVtLFxuXHRwdW1wSXRlbUxpc3QsXG5cdHZhbHZlTXBJdGVtTmFtZUVudW0sXG5cdHR5cGUgUHVtcFN0YXRlLFxuXHR0eXBlIFB1bXBUeXBlLFxuXHR0eXBlIFZhbHZlU3RhdGUsXG59IGZyb20gXCIuLi9hcGkvdHlwZXNcIjtcbmltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gXCJ1dWlkXCI7XG4vKipcbiAqIFRoaXMgaXMgYSB1dGlsaXR5IGZ1bmN0aW9uIGZvciB0aGUgY29tcG9uZW50IFwicHJvY2Vzcy1vYmplY3QvVmFsdmVGQ1wiXG4gKlxuICogQHBhcmFtIGluZGV4OiBudW1iZXIgdGhlIGluZGV4IG9mIGFuIGR5bmFtaWMgdmlzdWFsIGVsZW1lbnQgXCJpdGVtXCIgd2l0aGluIHRoZSBWYWx2ZSBjb21wb25lbnRcbiAqIEBwYXJhbSB2YWx2ZVN0YXR1cz86VmFsdmVTdGF0dXMgdGhlIHN0YXR1cyByZXByZXNlbnRpbmcgcGh5c2ljYWwgcHJvY2VzcyB2YWx2ZVxuICogQHJldHVybnMgY2xhc3NOYW1lOnN0cmluZyByZXR1cm5zIGFkZGl0aW9uYWwgY2xhc3NuYW1lcyBmb3IgYW4gdmlzdWFsIGVsZW1lbnQgb2YgdGhlIHZhbHZlIGNvbXBvbmVudC5cbiAqXG4gKiBSZXR1cm5lZCBjbGFzc25hbWVzIGFyZTtcbiAqIFx0aGlkZSAtIHRoaXMgaGlkZXMgdGhlIGl0ZW1cbiAqIFx0c2hvdyAtXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRJdGVtQ2xhc3NOYW1lID0gKFxuXHRpbmRleDogbnVtYmVyLFxuXHR2YWx2ZVN0YXR1cz86IFZhbHZlU3RhdGVcbik6IHN0cmluZyA9PiB7XG5cdGxldCBjbGFzc05hbWUgPSBcIlwiO1xuXHQvLyBIYW5kbGUgdGhlIGZhY3QgdGhhdCBBY3RpdmF0ZWRDb25maWcgYW5kIERlYWN0aXZhdGVkQ29uZmlnIGFyZSBvcHRpb25hbCBhbmQgbWF5YmUgdW5kZWZpbmVkXG5cdGNvbnN0IEFjdGl2YXRlZENvbmZpZ1ZhbHVlID0gdmFsdmVTdGF0dXM/LmFjdGl2YXRlZENvbmZpZyA/PyAwO1xuXHRjb25zdCBEZWFjdGl2YXRlZENvbmZpZ1ZhbHVlID0gdmFsdmVTdGF0dXM/LmRlYWN0aXZhdGVkQ29uZmlnID8/IDA7XG5cdGlmIChpbmRleCA8IDEyKSB7XG5cdFx0aWYgKFxuXHRcdFx0KGdldEJvb2xBdEluZGV4KEFjdGl2YXRlZENvbmZpZ1ZhbHVlLCBpbmRleCkgJiYgdmFsdmVTdGF0dXM/LmFjdEZCKSB8fFxuXHRcdFx0KGdldEJvb2xBdEluZGV4KERlYWN0aXZhdGVkQ29uZmlnVmFsdWUsIGluZGV4KSAmJiB2YWx2ZVN0YXR1cz8uZGVBY3RGQilcblx0XHQpIHtcblx0XHRcdGNsYXNzTmFtZSA9IFwic2hvdyBpdGVtXCI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNsYXNzTmFtZSA9IFwiaGlkZSBpdGVtXCI7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKGluZGV4ID09PSAxNCkge1xuXHRcdGNsYXNzTmFtZSA9IFwic2hvd1wiO1xuXHR9IGVsc2UgaWYgKGluZGV4ID09PSAxMikge1xuXHRcdGlmIChcblx0XHRcdGdldEJvb2xBdEluZGV4KEFjdGl2YXRlZENvbmZpZ1ZhbHVlLCBpbmRleCkgfHxcblx0XHRcdGdldEJvb2xBdEluZGV4KERlYWN0aXZhdGVkQ29uZmlnVmFsdWUsIGluZGV4KVxuXHRcdCkge1xuXHRcdFx0Y2xhc3NOYW1lID0gXCJzaG93XCI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNsYXNzTmFtZSA9IFwiaGlkZVwiO1xuXHRcdH1cblx0fSBlbHNlIGlmIChpbmRleCA9PT0gMTMpIHtcblx0XHRpZiAoXG5cdFx0XHRnZXRCb29sQXRJbmRleChBY3RpdmF0ZWRDb25maWdWYWx1ZSwgaW5kZXgpIHx8XG5cdFx0XHRnZXRCb29sQXRJbmRleChEZWFjdGl2YXRlZENvbmZpZ1ZhbHVlLCBpbmRleClcblx0XHQpIHtcblx0XHRcdGNsYXNzTmFtZSA9IFwic2hvd1wiO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjbGFzc05hbWUgPSBcImhpZGVcIjtcblx0XHR9XG5cdH0gZWxzZSBpZiAoaW5kZXggPT09IDE1KSB7XG5cdFx0aWYgKFxuXHRcdFx0Z2V0Qm9vbEF0SW5kZXgoQWN0aXZhdGVkQ29uZmlnVmFsdWUsIDEyKSB8fFxuXHRcdFx0Z2V0Qm9vbEF0SW5kZXgoRGVhY3RpdmF0ZWRDb25maWdWYWx1ZSwgMTIpXG5cdFx0KSB7XG5cdFx0XHRjbGFzc05hbWUgPSBcInNob3dcIjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y2xhc3NOYW1lID0gXCJoaWRlXCI7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKGluZGV4ID09PSAxNikge1xuXHRcdGlmIChcblx0XHRcdGdldEJvb2xBdEluZGV4KEFjdGl2YXRlZENvbmZpZ1ZhbHVlLCAxMikgfHxcblx0XHRcdGdldEJvb2xBdEluZGV4KERlYWN0aXZhdGVkQ29uZmlnVmFsdWUsIDEyKVxuXHRcdCkge1xuXHRcdFx0Y2xhc3NOYW1lID0gXCJzaG93XCI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNsYXNzTmFtZSA9IFwiaGlkZVwiO1xuXHRcdH1cblx0fSBlbHNlIGlmIChpbmRleCA9PT0gMTcpIHtcblx0XHRpZiAoXG5cdFx0XHRnZXRCb29sQXRJbmRleChBY3RpdmF0ZWRDb25maWdWYWx1ZSwgMTMpIHx8XG5cdFx0XHRnZXRCb29sQXRJbmRleChEZWFjdGl2YXRlZENvbmZpZ1ZhbHVlLCAxMylcblx0XHQpIHtcblx0XHRcdGNsYXNzTmFtZSA9IFwic2hvd1wiO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjbGFzc05hbWUgPSBcImhpZGVcIjtcblx0XHR9XG5cdH0gZWxzZSBpZiAoaW5kZXggPT09IDE4KSB7XG5cdFx0aWYgKFxuXHRcdFx0Z2V0Qm9vbEF0SW5kZXgoQWN0aXZhdGVkQ29uZmlnVmFsdWUsIDEzKSB8fFxuXHRcdFx0Z2V0Qm9vbEF0SW5kZXgoRGVhY3RpdmF0ZWRDb25maWdWYWx1ZSwgMTMpXG5cdFx0KSB7XG5cdFx0XHRjbGFzc05hbWUgPSBcInNob3dcIjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y2xhc3NOYW1lID0gXCJoaWRlXCI7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdGNsYXNzTmFtZSA9IFwiaGlkZVwiO1xuXHR9XG5cdC8vIEFkZGl0aW9ucyB0byB0aGUgY2xhc3NOYW1lXG5cblx0aWYgKGNsYXNzTmFtZS5pbmNsdWRlcyhcInNob3dcIikgJiYgIWNsYXNzTmFtZS5pbmNsdWRlcyhcIml0ZW1cIikpIHtcblx0XHQvLyBjb25zb2xlLmxvZyhcImluZGV4XCIsIGluZGV4LCBjbGFzc05hbWUpO1xuXHRcdGlmICh2YWx2ZVN0YXR1cz8uYWxhcm0pIHtcblx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwiQWxhcm1TdGF0ZVwiLCBcIlwiKSArIFwiIEFsYXJtU3RhdGVcIjtcblx0XHR9XG5cdFx0aWYgKHZhbHZlU3RhdHVzPy5jaGFuZ2luZykge1xuXHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lLnJlcGxhY2UoXCJDaGFuZ2luZ1wiLCBcIlwiKSArIFwiIENoYW5naW5nXCI7XG5cdFx0fVxuXHRcdGlmICh2YWx2ZVN0YXR1cz8ubWFudWFsKSB7XG5cdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcIk1hbnVhbFwiLCBcIlwiKSArIFwiIE1hbnVhbFwiO1xuXHRcdH1cblx0XHRpZiAodmFsdmVTdGF0dXM/Lm1hc2tlZCAmJiAhdmFsdmVTdGF0dXMuYWxhcm0pIHtcblx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwiTm9BbGFybU1hc2tcIiwgXCJcIikgKyBcIiBOb0FsYXJtTWFza1wiO1xuXHRcdH1cblx0XHRpZiAodmFsdmVTdGF0dXM/Lm1hc2tlZCkge1xuXHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lLnJlcGxhY2UoXCJNYXNrZWRcIiwgXCJcIikgKyBcIiBNYXNrZWRcIjtcblx0XHR9XG5cdFx0aWYgKHZhbHZlU3RhdHVzPy5hY3RGQikge1xuXHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lLnJlcGxhY2UoXCJBY3RpdmF0ZWRcIiwgXCJcIikgKyBcIiBBY3RpdmF0ZWRcIjtcblx0XHR9XG5cdFx0aWYgKHZhbHZlU3RhdHVzPy5kZUFjdEZCKSB7XG5cdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcIkRlYWN0aXZhdGVkXCIsIFwiXCIpICsgXCIgRGVhY3RpdmF0ZWRcIjtcblx0XHR9XG5cdFx0aWYgKHZhbHZlU3RhdHVzPy5sb2NhdGUpIHtcblx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwiY2lyY2xlXCIsIFwiXCIpICsgXCIgY2lyY2xlXCI7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNsYXNzTmFtZTsgLy8gZGVmYXVsdCByZXR1cm4gdmFsdWUgaWYgbm8gb3RoZXIgY29uZGl0aW9uIGlzIG1ldFxufTtcbmV4cG9ydCBjb25zdCBnZXRWYWx2ZU1wSXRlbUNsYXNzTmFtZSA9IChcblx0aW5kZXg6IG51bWJlcixcblx0dmFsdmVTdGF0dXM/OiBWYWx2ZVN0YXRlXG4pOiBzdHJpbmcgPT4ge1xuXHRsZXQgY2xhc3NOYW1lID0gXCJcIjtcblx0Ly8gSGFuZGxlIHRoZSBmYWN0IHRoYXQgQWN0aXZhdGVkQ29uZmlnIGFuZCBEZWFjdGl2YXRlZENvbmZpZyBhcmUgb3B0aW9uYWwgYW5kIG1heWJlIHVuZGVmaW5lZFxuXHRjb25zdCBBY3RpdmF0ZWRDb25maWdWYWx1ZSA9IHZhbHZlU3RhdHVzPy5hY3RpdmF0ZWRDb25maWcgPz8gMDtcblx0Y29uc3QgRGVhY3RpdmF0ZWRDb25maWdWYWx1ZSA9IHZhbHZlU3RhdHVzPy5kZWFjdGl2YXRlZENvbmZpZyA/PyAwO1xuXHQvLyBjb25zb2xlLmxvZyh2YWx2ZVN0YXR1cyk7XG5cblx0aWYgKGluZGV4IDwgOCkge1xuXHRcdGlmIChcblx0XHRcdChnZXRCb29sQXRJbmRleChBY3RpdmF0ZWRDb25maWdWYWx1ZSwgaW5kZXgpICYmIHZhbHZlU3RhdHVzPy5hY3RGQikgfHxcblx0XHRcdChnZXRCb29sQXRJbmRleChEZWFjdGl2YXRlZENvbmZpZ1ZhbHVlLCBpbmRleCkgJiYgdmFsdmVTdGF0dXM/LmRlQWN0RkIpXG5cdFx0KSB7XG5cdFx0XHRjbGFzc05hbWUgPSBcInNob3cgaXRlbVwiO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjbGFzc05hbWUgPSBcImhpZGUgaXRlbVwiO1xuXHRcdH1cblx0fSBlbHNlIGlmIChpbmRleCA9PT0gOSkge1xuXHRcdGNsYXNzTmFtZSA9IFwic2hvd1wiO1xuXHR9IGVsc2UgaWYgKGluZGV4ID09PSA4KSB7XG5cdFx0aWYgKFxuXHRcdFx0Z2V0Qm9vbEF0SW5kZXgoQWN0aXZhdGVkQ29uZmlnVmFsdWUsIGluZGV4KSB8fFxuXHRcdFx0Z2V0Qm9vbEF0SW5kZXgoRGVhY3RpdmF0ZWRDb25maWdWYWx1ZSwgaW5kZXgpXG5cdFx0KSB7XG5cdFx0XHRjbGFzc05hbWUgPSBcInNob3dcIjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y2xhc3NOYW1lID0gXCJoaWRlXCI7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKGluZGV4ID09PSAxMCkge1xuXHRcdC8vIGNvbnNvbGUubG9nKFxuXHRcdC8vIFx0YGluZGV4ICR7aW5kZXh9IGRlYWN0IGNvbmZpZyAke0RlYWN0aXZhdGVkQ29uZmlnVmFsdWV9IGJpdCBpcyAke2dldEJvb2xBdEluZGV4KFxuXHRcdC8vIFx0XHREZWFjdGl2YXRlZENvbmZpZ1ZhbHVlLFxuXHRcdC8vIFx0XHQxMFxuXHRcdC8vIFx0KX1gXG5cdFx0Ly8gKTtcblxuXHRcdGlmIChcblx0XHRcdGdldEJvb2xBdEluZGV4KEFjdGl2YXRlZENvbmZpZ1ZhbHVlLCAxMCkgfHxcblx0XHRcdGdldEJvb2xBdEluZGV4KERlYWN0aXZhdGVkQ29uZmlnVmFsdWUsIDEwKVxuXHRcdCkge1xuXHRcdFx0Y2xhc3NOYW1lID0gXCJzaG93IGl0ZW1cIjtcblx0XHRcdGlmICh2YWx2ZVN0YXR1cz8udXNsKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwiQWN0aXZhdGVkXCIsIFwiXCIpICsgXCIgQWN0aXZhdGVkXCI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcIkRlYWN0aXZhdGVkXCIsIFwiXCIpICsgXCIgRGVhY3RpdmF0ZWRcIjtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y2xhc3NOYW1lID0gXCJoaWRlIGl0ZW1cIjtcblx0XHR9XG5cdH0gZWxzZSBpZiAoaW5kZXggPT09IDExKSB7XG5cdFx0aWYgKFxuXHRcdFx0Z2V0Qm9vbEF0SW5kZXgoQWN0aXZhdGVkQ29uZmlnVmFsdWUsIDExKSB8fFxuXHRcdFx0Z2V0Qm9vbEF0SW5kZXgoRGVhY3RpdmF0ZWRDb25maWdWYWx1ZSwgMTEpXG5cdFx0KSB7XG5cdFx0XHRjbGFzc05hbWUgPSBcInNob3cgaXRlbVwiO1xuXHRcdFx0aWYgKHZhbHZlU3RhdHVzPy5sc2wpIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lLnJlcGxhY2UoXCJBY3RpdmF0ZWRcIiwgXCJcIikgKyBcIiBBY3RpdmF0ZWRcIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwiRGVhY3RpdmF0ZWRcIiwgXCJcIikgKyBcIiBEZWFjdGl2YXRlZFwiO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjbGFzc05hbWUgPSBcImhpZGUgaXRlbVwiO1xuXHRcdH1cblx0fSBlbHNlIGlmIChpbmRleCA9PT0gMTIpIHtcblx0XHRpZiAodmFsdmVTdGF0dXM/LmxvY2F0ZSkge1xuXHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lLnJlcGxhY2UoXCJzaG93IGl0ZW1cIiwgXCJcIikgKyBcIiBzaG93IGl0ZW1cIjtcblx0XHRcdGlmIChcblx0XHRcdFx0Z2V0Qm9vbEF0SW5kZXgoQWN0aXZhdGVkQ29uZmlnVmFsdWUsIDgpIHx8XG5cdFx0XHRcdGdldEJvb2xBdEluZGV4KERlYWN0aXZhdGVkQ29uZmlnVmFsdWUsIDgpXG5cdFx0XHQpIHtcblx0XHRcdFx0Y2xhc3NOYW1lID1cblx0XHRcdFx0XHRjbGFzc05hbWUucmVwbGFjZShcInNob3cgbGFyZ2UgaXRlbVwiLCBcIlwiKSArIFwiIHNob3cgbGFyZ2UgaXRlbVwiO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcImhpZGUgaXRlbVwiLCBcIlwiKSArIFwiIGhpZGUgaXRlbVwiO1xuXHRcdH1cblx0fVxuXHQvLyBBZGRpdGlvbnMgdG8gdGhlIGNsYXNzTmFtZVxuXG5cdGlmIChjbGFzc05hbWUuaW5jbHVkZXMoXCJzaG93XCIpICYmICFjbGFzc05hbWUuaW5jbHVkZXMoXCJpdGVtXCIpKSB7XG5cdFx0Ly8gY29uc29sZS5sb2coXCJpbmRleFwiLCBpbmRleCwgY2xhc3NOYW1lKTtcblx0XHRpZiAodmFsdmVTdGF0dXM/LmFsYXJtKSB7XG5cdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcIkFsYXJtU3RhdGVcIiwgXCJcIikgKyBcIiBBbGFybVN0YXRlXCI7XG5cdFx0fVxuXHRcdGlmICh2YWx2ZVN0YXR1cz8uY2hhbmdpbmcpIHtcblx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwiQ2hhbmdpbmdcIiwgXCJcIikgKyBcIiBDaGFuZ2luZ1wiO1xuXHRcdH1cblx0XHRpZiAodmFsdmVTdGF0dXM/Lm1hbnVhbCkge1xuXHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lLnJlcGxhY2UoXCJNYW51YWxcIiwgXCJcIikgKyBcIiBNYW51YWxcIjtcblx0XHR9XG5cdFx0aWYgKHZhbHZlU3RhdHVzPy5tYXNrZWQgJiYgIXZhbHZlU3RhdHVzLmFsYXJtKSB7XG5cdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcIk5vQWxhcm1NYXNrXCIsIFwiXCIpICsgXCIgTm9BbGFybU1hc2tcIjtcblx0XHR9XG5cdFx0aWYgKHZhbHZlU3RhdHVzPy5tYXNrZWQpIHtcblx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwiTWFza2VkXCIsIFwiXCIpICsgXCIgTWFza2VkXCI7XG5cdFx0fVxuXHRcdGlmICh2YWx2ZVN0YXR1cz8uYWN0RkIpIHtcblx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwiQWN0aXZhdGVkXCIsIFwiXCIpICsgXCIgQWN0aXZhdGVkXCI7XG5cdFx0fVxuXHRcdGlmICh2YWx2ZVN0YXR1cz8uZGVBY3RGQikge1xuXHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lLnJlcGxhY2UoXCJEZWFjdGl2YXRlZFwiLCBcIlwiKSArIFwiIERlYWN0aXZhdGVkXCI7XG5cdFx0fVxuXHR9XG5cdC8vIGNvbnNvbGUubG9nKFwiaW5kZXhcIiwgaW5kZXgsIGNsYXNzTmFtZSk7XG5cblx0cmV0dXJuIGNsYXNzTmFtZTsgLy8gZGVmYXVsdCByZXR1cm4gdmFsdWUgaWYgbm8gb3RoZXIgY29uZGl0aW9uIGlzIG1ldFxufTtcbi8qKlxuICogQHJldHVybnMgQXJyYXkgb2YgaXRlbU5hbWUocykgZm9yIGVhY2ggdmlzdWFsIGVsZW1lbnQgb2YgYSB2YWx2ZSBjb21wb25lbnRcbiAqL1xuZXhwb3J0IGNvbnN0IGl0ZW1OYW1lcyA9IE9iamVjdC5lbnRyaWVzKEl0ZW1OYW1lRW51bSkubWFwKChrZXksIGluZGV4KSA9PiB7XG5cdC8vIGNvbnNvbGUubG9nKGBJbiBidWlsZCBJdGVtTmFtZXMgbmFtZSAke2tleX0gaW5kZXggJHtpbmRleH1gKTtcblx0cmV0dXJuIHtcblx0XHRrZXk6IHV1aWR2NCgpLFxuXHRcdG5hbWU6IGtleSxcblx0XHR2YWx1ZToga2V5WzFdLFxuXHRcdGluZGV4OiBpbmRleCxcblx0fTtcbn0pO1xuZXhwb3J0IGNvbnN0IHZhbHZlTXBJdGVtTmFtZXMgPSBPYmplY3QuZW50cmllcyh2YWx2ZU1wSXRlbU5hbWVFbnVtKS5tYXAoXG5cdChrZXksIGluZGV4KSA9PiB7XG5cdFx0Ly8gY29uc29sZS5sb2coYEluIGJ1aWxkIEl0ZW1OYW1lcyBuYW1lICR7a2V5fSBpbmRleCAke2luZGV4fWApO1xuXHRcdHJldHVybiB7XG5cdFx0XHRrZXk6IHV1aWR2NCgpLFxuXHRcdFx0bmFtZToga2V5LFxuXHRcdFx0dmFsdWU6IGtleVsxXSxcblx0XHRcdGluZGV4OiBpbmRleCxcblx0XHR9O1xuXHR9XG4pO1xuZXhwb3J0IGNvbnN0IGdldEl0ZW1JZFBvc2l0aW9uQ2xhc3NOYW1lID0gKFxuXHRjbGFzc05hbWU6IHN0cmluZyxcblx0aXRlbUlkUG9zaXRpb246IEl0ZW1JZFBvc2l0aW9uVHlwZVxuKTogSXRlbUlkUG9zaXRpb25UeXBlID0+IHtcblx0Ly8gQ2hlY2sgY2xhc3NOYW1lIGluY2x1ZGVzICdpdGVtSWQgcG9wb3ZlcicsIGlmIG5vdCByZXR1cm4gY2xhc3NOYW1lIGFuZCB3YXJuXG5cdGlmICghY2xhc3NOYW1lLmluY2x1ZGVzKFwiaXRlbUlkIHBvcG92ZXJcIikpIHtcblx0XHRjb25zb2xlLndhcm4oXG5cdFx0XHRcIkZ1bmN0aW9uIGdldEl0ZW1JZFBvc2l0aW9uQ2xhc3NOYW1lIGNhbGxlZCB3aGVuICdpdGVtSWQgcG9wb3Zlcicgbm90IGluIGdpdmVuIGNsYXNzTmFtZVwiXG5cdFx0KTtcblx0XHRyZXR1cm4gY2xhc3NOYW1lO1xuXHR9XG5cdC8vIE92ZXIgd3JpdGUgZ2l2ZW4gY2xhc3NOYW1lXG5cdGNsYXNzTmFtZSA9IFwiaXRlbUlkIHBvcG92ZXJcIjtcblx0c3dpdGNoIChpdGVtSWRQb3NpdGlvbikge1xuXHRcdGNhc2UgXCJsZWZ0XCI6XG5cdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcInBvc2l0aW9uLWxlZnRcIiwgXCJcIikgKyBcIiBwb3NpdGlvbi1sZWZ0XCI7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwicmlnaHRcIjpcblx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwicG9zaXRpb24tcmlnaHRcIiwgXCJcIikgKyBcIiBwb3NpdGlvbi1yaWdodFwiO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBcInRvcC1sZWZ0XCI6XG5cdFx0XHRjbGFzc05hbWUgPVxuXHRcdFx0XHRjbGFzc05hbWUucmVwbGFjZShcInBvc2l0aW9uLXRvcC1sZWZ0XCIsIFwiXCIpICsgXCIgcG9zaXRpb24tdG9wLWxlZnRcIjtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJ0b3AtcmlnaHRcIjpcblx0XHRcdGNsYXNzTmFtZSA9XG5cdFx0XHRcdGNsYXNzTmFtZS5yZXBsYWNlKFwicG9zaXRpb24tdG9wLXJpZ2h0XCIsIFwiXCIpICsgXCIgcG9zaXRpb24tdG9wLXJpZ2h0XCI7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwiYm90dG9tLWxlZnRcIjpcblx0XHRcdGNsYXNzTmFtZSA9XG5cdFx0XHRcdGNsYXNzTmFtZS5yZXBsYWNlKFwicG9zaXRpb24tYm90dG9tLWxlZnRcIiwgXCJcIikgKyBcIiBwb3NpdGlvbi1ib3R0b20tbGVmdFwiO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBcImJvdHRvbS1yaWdodFwiOlxuXHRcdFx0Y2xhc3NOYW1lID1cblx0XHRcdFx0Y2xhc3NOYW1lLnJlcGxhY2UoXCJwb3NpdGlvbi1ib3R0b20tcmlnaHRcIiwgXCJcIikgK1xuXHRcdFx0XHRcIiBwb3NpdGlvbi1ib3R0b20tcmlnaHRcIjtcblx0XHRcdGJyZWFrO1xuXG5cdFx0ZGVmYXVsdDpcblx0XHRcdGJyZWFrO1xuXHR9XG5cblx0cmV0dXJuIGNsYXNzTmFtZTtcbn07XG5cblxuZXhwb3J0IGNvbnN0IHB1bXBJdGVtTmFtZXMgPSBwdW1wSXRlbUxpc3QubWFwKFxuXHQoa2V5LCBpbmRleCkgPT4ge1xuXHRcdC8vIGNvbnNvbGUubG9nKGBJbiBidWlsZCBJdGVtTmFtZXMgbmFtZSAke2tleX0gaW5kZXggJHtpbmRleH1gKTtcblx0XHRyZXR1cm4ge1xuXHRcdFx0a2V5OiB1dWlkdjQoKSxcblx0XHRcdG5hbWU6IGtleSxcblx0XHRcdGluZGV4OiBpbmRleCxcblx0XHR9O1xuXHR9XG4pO1xuY29uc3QgZ2V0UHVtcENvbmZpZ3VyYXRpb24gPSAocHVtcFR5cGU6IFB1bXBUeXBlKTpudW1iZXIgPT57XG5cdHN3aXRjaCAocHVtcFR5cGUpe1xuXHRcdGNhc2UgXCJjZW50cmlmdWdhbFwiOlxuXHRcdFx0cmV0dXJuIDFcblx0XHRjYXNlIFwiZGlhcGhyYWdtXCI6XG5cdFx0XHRyZXR1cm4gMVxuXHRcdGNhc2UgXCJwb3NpdGl2ZS1kaXNwbGFjbWVudFwiOlxuXHRcdFx0cmV0dXJuIDFcblx0XHRjYXNlIFwicHJvZ3Jlc3NpdmUtY2F2aXR5XCI6XG5cdFx0XHRyZXR1cm4gMVxuXHRcdGNhc2UgXCJnZWFyXCI6XG5cdFx0XHRyZXR1cm4gM1xuXHRcdGNhc2UgXCJsaXF1aWQtcmluZ1wiOlxuXHRcdFx0cmV0dXJuIDNcblx0XHRjYXNlIFwicG9zaXRpdmUtc2NyZXdcIjpcblx0XHRcdHJldHVybiAzXG5cdFx0ZGVmYXVsdDpcblx0XHRcdHRocm93IEVycm9yKGBJbiBnZXRQdW1wQ29uZmlndXJhdGlvbigpIHB1bXAgdHlwZTogJHtwdW1wVHlwZX0gbm90IGZvdW5kYClcblx0fVxuXG5cbn1cbmV4cG9ydCBjb25zdCBnZXRQdW1wSXRlbUNsYXNzTmFtZSA9IChcblx0aW5kZXg6IG51bWJlcixcblx0c3RhdHVzOiBQdW1wU3RhdGUsXG5cdHB1bXBUeXBlOiBQdW1wVHlwZVxuXHQpOiBzdHJpbmcgPT4ge1xuXHRjb25zdCBjb25maWd1cmF0aW9uID0gZ2V0UHVtcENvbmZpZ3VyYXRpb24ocHVtcFR5cGUpXG5cdGxldCBjbGFzc05hbWUgPSBcIlwiO1xuXHQvLyBIYW5kbGUgdGhlIGZhY3QgdGhhdCBBY3RpdmF0ZWRDb25maWcgYW5kIERlYWN0aXZhdGVkQ29uZmlnIGFyZSBvcHRpb25hbCBhbmQgbWF5YmUgdW5kZWZpbmVkXG5cdGlmIChpbmRleCA8IDIpIHtcblx0XHRpZiAoZ2V0Qm9vbEF0SW5kZXgoY29uZmlndXJhdGlvbiwgaW5kZXgpKSB7XG5cdFx0XHRjbGFzc05hbWUgPSBgc2hvdyBpdGVtICR7cHVtcFR5cGV9YDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y2xhc3NOYW1lID0gXCJoaWRlIGl0ZW1cIjtcblx0XHR9XG5cdH1cblx0Ly8gQWRkaXRpb25zIHRvIHRoZSBjbGFzc05hbWVcblxuXHRpZiAoY2xhc3NOYW1lLmluY2x1ZGVzKFwic2hvd1wiKSAmJiAhY2xhc3NOYW1lLmluY2x1ZGVzKFwiaXRlbVwiKSkge1xuXHRcdGNvbnNvbGUubG9nKFwiaW5kZXhcIiwgaW5kZXgsIGNsYXNzTmFtZSk7XG5cdFx0aWYgKHN0YXR1cz8uYWxhcm0pIHtcblx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwiQWxhcm1TdGF0ZVwiLCBcIlwiKSArIFwiIEFsYXJtU3RhdGVcIjtcblx0XHR9XG5cdFx0aWYgKHN0YXR1cz8uY2hhbmdpbmcpIHtcblx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwiQ2hhbmdpbmdcIiwgXCJcIikgKyBcIiBDaGFuZ2luZ1wiO1xuXHRcdH1cblx0XHRpZiAoc3RhdHVzPy5tYW51YWwpIHtcblx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwiTWFudWFsXCIsIFwiXCIpICsgXCIgTWFudWFsXCI7XG5cdFx0fVxuXHRcdGlmIChzdGF0dXM/Lm1hc2tlZCAmJiAhc3RhdHVzLmFsYXJtKSB7XG5cdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcIk5vQWxhcm1NYXNrXCIsIFwiXCIpICsgXCIgTm9BbGFybU1hc2tcIjtcblx0XHR9XG5cdFx0aWYgKHN0YXR1cz8ubWFza2VkKSB7XG5cdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcIk1hc2tlZFwiLCBcIlwiKSArIFwiIE1hc2tlZFwiO1xuXHRcdH1cblx0XHRpZiAoc3RhdHVzPy5hY3RGQikge1xuXHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lLnJlcGxhY2UoXCJBY3RpdmF0ZWRcIiwgXCJcIikgKyBcIiBBY3RpdmF0ZWRcIjtcblx0XHR9XG5cdFx0aWYgKHN0YXR1cz8uZGVBY3RGQikge1xuXHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lLnJlcGxhY2UoXCJEZWFjdGl2YXRlZFwiLCBcIlwiKSArIFwiIERlYWN0aXZhdGVkXCI7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBjbGFzc05hbWU7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0UHVtcFN0YXR1c0NsYXNzTmFtZXMgPSAoY2xhc3NOYW1lOiBzdHJpbmcsIHN0YXR1czogUHVtcFN0YXRlKSA9PiB7XG5cdC8vIEFkZGl0aW9ucyB0byB0aGUgY2xhc3NOYW1lXG5cdGNvbnNvbGUubG9nKGBzdGF0dXM6ICR7SlNPTi5zdHJpbmdpZnkoc3RhdHVzLG51bGwsIDIpfWApO1xuXG5cblx0aWYgKGNsYXNzTmFtZS5pbmNsdWRlcyhcInNob3dcIikgJiYgIWNsYXNzTmFtZS5pbmNsdWRlcyhcIml0ZW1cIikpIHtcblx0XHRpZiAoc3RhdHVzPy5hbGFybSkge1xuXHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lLnJlcGxhY2UoXCJBbGFybVN0YXRlXCIsIFwiXCIpICsgXCIgQWxhcm1TdGF0ZVwiO1xuXHRcdH1cblx0XHRpZiAoc3RhdHVzPy5jaGFuZ2luZykge1xuXHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lLnJlcGxhY2UoXCJDaGFuZ2luZ1wiLCBcIlwiKSArIFwiIENoYW5naW5nXCI7XG5cdFx0fVxuXHRcdGlmIChzdGF0dXM/Lm1hbnVhbCkge1xuXHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lLnJlcGxhY2UoXCJNYW51YWxcIiwgXCJcIikgKyBcIiBNYW51YWxcIjtcblx0XHR9XG5cdFx0aWYgKHN0YXR1cz8ubWFza2VkICYmICFzdGF0dXMuYWxhcm0pIHtcblx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwiTm9BbGFybU1hc2tcIiwgXCJcIikgKyBcIiBOb0FsYXJtTWFza1wiO1xuXHRcdH1cblx0XHRpZiAoc3RhdHVzPy5tYXNrZWQpIHtcblx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwiTWFza2VkXCIsIFwiXCIpICsgXCIgTWFza2VkXCI7XG5cdFx0fVxuXHRcdGlmIChzdGF0dXM/LmFjdEZCKSB7XG5cdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcIkFjdGl2YXRlZFwiLCBcIlwiKSArIFwiIEFjdGl2YXRlZFwiO1xuXHRcdH1cblx0XHRpZiAoc3RhdHVzPy5kZUFjdEZCKSB7XG5cdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcIkRlYWN0aXZhdGVkXCIsIFwiXCIpICsgXCIgRGVhY3RpdmF0ZWRcIjtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGNsYXNzTmFtZTtcbn1cbiIsImltcG9ydCB7IHVzZUltbWVyUmVkdWNlciB9IGZyb20gXCJ1c2UtaW1tZXJcIjtcblxuaW1wb3J0IHtcblx0aW5pdGlhbENvbnRyb2xTdGF0ZSxcblx0Ly8gaW5pdGlhbENvbnRyb2xTdGF0ZSxcblx0cGFyYW1ldGVySW5pdGlhbFN0YXRlLFxuXHR2YWx2ZVN0YXR1cyxcbn0gZnJvbSBcIi4vaW5pdGlhbFN0YXRlXCI7XG5pbXBvcnQgdHlwZSB7XG5cdENvbW1hbmRWYWx2ZU1wUHJvcHMsXG5cdFBhcmFtZXRlckFjdGlvbixcblx0UGFyYW1JdGVtLFxuXHRVc2VQYXJhbWV0ZXJSZWR1Y2VyLFxuXHRVc2VWYWx2ZU1wQ29tbWFuZFJlZHVjZXIsXG5cdFVzZVZhbHZlUmVkdWNlcixcblx0VmFsdmVBY3Rpb24sXG5cdFZhbHZlTXBDb21tYW5kQWN0aW9uLFxuXHRWYWx2ZVN0YXRlLFxufSBmcm9tIFwiLi90eXBlc1wiO1xuXG5mdW5jdGlvbiB2YWx2ZVJlZHVjZXIoZHJhZnQ6IFZhbHZlU3RhdGUsIGFjdGlvbjogVmFsdmVBY3Rpb24pOiBWYWx2ZVN0YXRlIHtcblx0c3dpdGNoIChhY3Rpb24udHlwZSkge1xuXHRcdGNhc2UgXCJVUERBVEVfQUNUX0NPTkZJR1wiOlxuXHRcdFx0ZHJhZnQuYWN0aXZhdGVkQ29uZmlnID0gYWN0aW9uLnZhbHVlO1xuXHRcdFx0cmV0dXJuIGRyYWZ0O1xuXHRcdGNhc2UgXCJVUERBVEVfREVBQ1RfQ09ORklHXCI6XG5cdFx0XHRkcmFmdC5kZWFjdGl2YXRlZENvbmZpZyA9IGFjdGlvbi52YWx1ZTtcblx0XHRcdHJldHVybiBkcmFmdDtcblx0XHRjYXNlIFwiVVBEQVRFX0FDVF9GQlwiOlxuXHRcdFx0ZHJhZnQuYWN0RkIgPSAhZHJhZnQuYWN0RkI7XG5cdFx0XHRyZXR1cm4gZHJhZnQ7XG5cdFx0Y2FzZSBcIlVQREFURV9ERV9BQ1RfRkJcIjpcblx0XHRcdGRyYWZ0LmRlQWN0RkIgPSAhZHJhZnQuZGVBY3RGQjtcblx0XHRcdHJldHVybiBkcmFmdDtcblx0XHRjYXNlIFwiVVBEQVRFX1VTTFwiOlxuXHRcdFx0ZHJhZnQudXNsID0gIWRyYWZ0LnVzbDtcblx0XHRcdHJldHVybiBkcmFmdDtcblx0XHRjYXNlIFwiVVBEQVRFX0xTTFwiOlxuXHRcdFx0ZHJhZnQubHNsID0gIWRyYWZ0LmxzbDtcblx0XHRcdHJldHVybiBkcmFmdDtcblx0XHRjYXNlIFwiVVBEQVRFX01BTlVBTFwiOlxuXHRcdFx0ZHJhZnQubWFudWFsID0gIWRyYWZ0Lm1hbnVhbDtcblx0XHRcdHJldHVybiBkcmFmdDtcblx0XHRjYXNlIFwiVVBEQVRFX0FMQVJNXCI6XG5cdFx0XHRkcmFmdC5hbGFybSA9ICFkcmFmdC5hbGFybTtcblx0XHRcdHJldHVybiBkcmFmdDtcblx0XHRjYXNlIFwiVVBEQVRFX01BU0tFRFwiOlxuXHRcdFx0ZHJhZnQubWFza2VkID0gIWRyYWZ0Lm1hc2tlZDtcblx0XHRcdHJldHVybiBkcmFmdDtcblx0XHRjYXNlIFwiVVBEQVRFX0NIQU5HSU5HXCI6XG5cdFx0XHRkcmFmdC5jaGFuZ2luZyA9ICFkcmFmdC5jaGFuZ2luZztcblx0XHRcdHJldHVybiBkcmFmdDtcblx0XHRjYXNlIFwiVVBEQVRFX0xPQ0FURVwiOlxuXHRcdFx0ZHJhZnQubG9jYXRlID0gIWRyYWZ0LmxvY2F0ZTtcblx0XHRcdHJldHVybiBkcmFmdDtcblx0XHRkZWZhdWx0OiAvLyAjVE9ETyBBZGQgbW9yZSByZWR1Y2VyIGNhc2Ugc3RhdGVtZW50c1xuXHRcdFx0cmV0dXJuIGRyYWZ0O1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VWYWx2ZVJlZHVjZXIoKTogVXNlVmFsdmVSZWR1Y2VyIHtcblx0Y29uc3QgW3N0YXRlLCBkaXNwYXRjaF0gPSB1c2VJbW1lclJlZHVjZXIodmFsdmVSZWR1Y2VyLCB2YWx2ZVN0YXR1cyk7XG5cblx0ZnVuY3Rpb24gdXBkYXRlQWN0Q29uZmlnKHZhbHVlOiBudW1iZXIpIHtcblx0XHRkaXNwYXRjaCh7IHR5cGU6IFwiVVBEQVRFX0FDVF9DT05GSUdcIiwgdmFsdWUgfSk7XG5cdH1cblx0ZnVuY3Rpb24gdXBkYXRlRGVBY3RDb25maWcodmFsdWU6IG51bWJlcikge1xuXHRcdGRpc3BhdGNoKHsgdHlwZTogXCJVUERBVEVfREVBQ1RfQ09ORklHXCIsIHZhbHVlIH0pO1xuXHR9XG5cdGZ1bmN0aW9uIHVwZGF0ZVVzbCgpIHtcblx0XHRkaXNwYXRjaCh7IHR5cGU6IFwiVVBEQVRFX1VTTFwiIH0pO1xuXHR9XG5cdGZ1bmN0aW9uIHVwZGF0ZUxzbCgpIHtcblx0XHRkaXNwYXRjaCh7IHR5cGU6IFwiVVBEQVRFX0xTTFwiIH0pO1xuXHR9XG5cdGZ1bmN0aW9uIHVwZGF0ZUFsYXJtKCkge1xuXHRcdGRpc3BhdGNoKHsgdHlwZTogXCJVUERBVEVfQUxBUk1cIiB9KTtcblx0fVxuXHRmdW5jdGlvbiB1cGRhdGVBY3RGQigpIHtcblx0XHRkaXNwYXRjaCh7IHR5cGU6IFwiVVBEQVRFX0FDVF9GQlwiIH0pO1xuXHR9XG5cdGZ1bmN0aW9uIHVwZGF0ZURlQWN0RkIoKSB7XG5cdFx0ZGlzcGF0Y2goeyB0eXBlOiBcIlVQREFURV9ERV9BQ1RfRkJcIiB9KTtcblx0fVxuXHRmdW5jdGlvbiB1cGRhdGVNYW51YWwoKSB7XG5cdFx0ZGlzcGF0Y2goeyB0eXBlOiBcIlVQREFURV9NQU5VQUxcIiB9KTtcblx0fVxuXHRmdW5jdGlvbiB1cGRhdGVNYXNrZWQoKSB7XG5cdFx0ZGlzcGF0Y2goeyB0eXBlOiBcIlVQREFURV9NQVNLRURcIiB9KTtcblx0fVxuXHRmdW5jdGlvbiB1cGRhdGVDaGFuZ2luZygpIHtcblx0XHRkaXNwYXRjaCh7IHR5cGU6IFwiVVBEQVRFX0NIQU5HSU5HXCIgfSk7XG5cdH1cblx0ZnVuY3Rpb24gdXBkYXRlTG9jYXRlKCkge1xuXHRcdGRpc3BhdGNoKHsgdHlwZTogXCJVUERBVEVfTE9DQVRFXCIgfSk7XG5cdH1cblxuXHRjb25zdCB1c2VFZGl0VmFsdmVSZWR1Y2VyID0ge1xuXHRcdHN0YXRlLFxuXHRcdHJlZHVjZXI6IHtcblx0XHRcdHVwZGF0ZUFjdENvbmZpZyxcblx0XHRcdHVwZGF0ZURlQWN0Q29uZmlnLFxuXHRcdFx0dXBkYXRlQWxhcm0sXG5cdFx0XHR1cGRhdGVBY3RGQixcblx0XHRcdHVwZGF0ZURlQWN0RkIsXG5cdFx0XHR1cGRhdGVVc2wsXG5cdFx0XHR1cGRhdGVMc2wsXG5cdFx0XHR1cGRhdGVNYW51YWwsXG5cdFx0XHR1cGRhdGVNYXNrZWQsXG5cdFx0XHR1cGRhdGVDaGFuZ2luZyxcblx0XHRcdHVwZGF0ZUxvY2F0ZSxcblx0XHR9LFxuXHR9O1xuXG5cdHJldHVybiB1c2VFZGl0VmFsdmVSZWR1Y2VyO1xufVxuLyoqXG4gKiAgVXBkYXRlIGEgcGFyYW1ldGVyIGl0ZW0gaW4gYSBsaXN0IG9mIHBhcmFtZXRlciBpdGVtc1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBQYXJhbWV0ZXJSZWR1Y2VyKFxuXHRkcmFmdDogUGFyYW1JdGVtW10sXG5cdGFjdGlvbjogUGFyYW1ldGVyQWN0aW9uXG4pOiBQYXJhbUl0ZW1bXSB7XG5cdHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcblx0XHRjYXNlIFwiVVBEQVRFX1ZBTFVFXCI6XG5cdFx0XHRkcmFmdFthY3Rpb24uaW5kZXhdLmlucHV0LnZhbHVlID0gYWN0aW9uLnZhbHVlO1xuXHRcdFx0cmV0dXJuIGRyYWZ0O1xuXHRcdGRlZmF1bHQ6IC8vICNUT0RPIEFkZCBtb3JlIHJlZHVjZXIgY2FzZSBzdGF0ZW1lbnRzXG5cdFx0XHRyZXR1cm4gZHJhZnQ7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcmFtSXRlbXNSZWR1Y2VyKCk6IFVzZVBhcmFtZXRlclJlZHVjZXIge1xuXHRjb25zdCBbc3RhdGUsIGRpc3BhdGNoXSA9IHVzZUltbWVyUmVkdWNlcihcblx0XHRQYXJhbWV0ZXJSZWR1Y2VyLFxuXHRcdHBhcmFtZXRlckluaXRpYWxTdGF0ZVxuXHQpO1xuXG5cdGZ1bmN0aW9uIHVwZGF0ZVZhbHVlKGluZGV4OiBudW1iZXIsIHZhbHVlOiBudW1iZXIpIHtcblx0XHRkaXNwYXRjaCh7IHR5cGU6IFwiVVBEQVRFX1ZBTFVFXCIsIGluZGV4OiBpbmRleCwgdmFsdWU6IHZhbHVlIH0pO1xuXHR9XG5cdC8vIEFkZCBtb3JlIGRpc3BhdGNoIGZ1bmN0aW9ucyBoZXJlXG5cdGNvbnN0IHVzZVBhcmFtZXRlclJlZHVjZXIgPSB7XG5cdFx0c3RhdGUsXG5cdFx0cmVkdWNlcjoge1xuXHRcdFx0dXBkYXRlVmFsdWUsXG5cdFx0fSxcblx0fTtcblx0cmV0dXJuIHVzZVBhcmFtZXRlclJlZHVjZXI7XG59XG5mdW5jdGlvbiB2YWx2ZU1wUmVkdWNlcihcblx0ZHJhZnQ6IENvbW1hbmRWYWx2ZU1wUHJvcHMsXG5cdGFjdGlvbjogVmFsdmVNcENvbW1hbmRBY3Rpb25cbik6IENvbW1hbmRWYWx2ZU1wUHJvcHMge1xuXHRzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG5cdFx0Y2FzZSBcIlVQREFURV9BVVRPX01BTlVBTFwiOlxuXHRcdFx0aWYgKGRyYWZ0LmNvbW1hbmQ/Lm1haW4pIHtcblx0XHRcdFx0aWYgKGFjdGlvbi5tb2RlID09PSBcImF1dG9cIikge1xuXHRcdFx0XHRcdGRyYWZ0LmNvbW1hbmQubWFpbi5hdXRvTWFudWFsID0gZmFsc2U7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coYEluIEF1dG9gKTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKGFjdGlvbi5tb2RlID09PSBcIm1hbnVhbFwiKSB7XG5cdFx0XHRcdFx0ZHJhZnQuY29tbWFuZC5tYWluLmF1dG9NYW51YWwgPSB0cnVlO1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKGBJbiBNYW51YWxgKTtcblx0XHRcdFx0XHRyZXR1cm4gZHJhZnQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBkcmFmdDtcblx0XHRjYXNlIFwiVVBEQVRFX01BSU5fTUFOX09OXCI6XG5cdFx0XHRpZiAoZHJhZnQuY29tbWFuZD8ubWFpbikge1xuXHRcdFx0XHRkcmFmdC5jb21tYW5kLm1haW4uYWN0aXZhdGlvbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZHJhZnQ7XG5cdFx0Y2FzZSBcIlVQREFURV9NQUlOX01BTl9PRkZcIjpcblx0XHRcdGlmIChkcmFmdC5jb21tYW5kPy5tYWluKSB7XG5cdFx0XHRcdGRyYWZ0LmNvbW1hbmQubWFpbi5hY3RpdmF0aW9uID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZHJhZnQ7XG5cdFx0Y2FzZSBcIlVQREFURV9VU0xfTUFOX09OXCI6XG5cdFx0XHRpZiAoZHJhZnQuY29tbWFuZD8udXBwZXJTZWF0KSB7XG5cdFx0XHRcdGRyYWZ0LmNvbW1hbmQudXBwZXJTZWF0LmFjdGl2YXRpb24gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGRyYWZ0O1xuXHRcdGNhc2UgXCJVUERBVEVfVVNMX01BTl9PRkZcIjpcblx0XHRcdGlmIChkcmFmdC5jb21tYW5kPy51cHBlclNlYXQpIHtcblx0XHRcdFx0ZHJhZnQuY29tbWFuZC51cHBlclNlYXQuYWN0aXZhdGlvbiA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGRyYWZ0O1xuXHRcdGNhc2UgXCJVUERBVEVfTFNMX01BTl9PTlwiOlxuXHRcdFx0aWYgKGRyYWZ0LmNvbW1hbmQ/Lmxvd2VyU2VhdCkge1xuXHRcdFx0XHRkcmFmdC5jb21tYW5kLmxvd2VyU2VhdC5hY3RpdmF0aW9uID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBkcmFmdDtcblx0XHRjYXNlIFwiVVBEQVRFX0xTTF9NQU5fT0ZGXCI6XG5cdFx0XHRpZiAoZHJhZnQuY29tbWFuZD8ubG93ZXJTZWF0KSB7XG5cdFx0XHRcdGRyYWZ0LmNvbW1hbmQubG93ZXJTZWF0LmFjdGl2YXRpb24gPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBkcmFmdDtcblxuXHRcdGRlZmF1bHQ6IC8vICNUT0RPIEFkZCBtb3JlIHJlZHVjZXIgY2FzZSBzdGF0ZW1lbnRzXG5cdFx0XHRyZXR1cm4gZHJhZnQ7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVZhbHZlTXBDb21tYW5kUmVkdWNlcigpOiBVc2VWYWx2ZU1wQ29tbWFuZFJlZHVjZXIge1xuXHRjb25zdCBbc3RhdGUsIGRpc3BhdGNoXSA9IHVzZUltbWVyUmVkdWNlcihcblx0XHR2YWx2ZU1wUmVkdWNlcixcblx0XHRpbml0aWFsQ29udHJvbFN0YXRlXG5cdCk7XG5cblx0ZnVuY3Rpb24gdXBkYXRlQXV0b01hblNlbGVjdGlvbihtb2RlOiBcImF1dG9cIiB8IFwibWFudWFsXCIpIHtcblx0XHRkaXNwYXRjaCh7IHR5cGU6IFwiVVBEQVRFX0FVVE9fTUFOVUFMXCIsIG1vZGUgfSk7XG5cdH1cblx0ZnVuY3Rpb24gdXBkYXRlTWFpbk1hbnVhbE9uKCkge1xuXHRcdGRpc3BhdGNoKHsgdHlwZTogXCJVUERBVEVfTUFJTl9NQU5fT05cIiB9KTtcblx0fVxuXHRmdW5jdGlvbiB1cGRhdGVNYWluTWFudWFsT2ZmKCkge1xuXHRcdGRpc3BhdGNoKHsgdHlwZTogXCJVUERBVEVfTUFJTl9NQU5fT0ZGXCIgfSk7XG5cdH1cblx0ZnVuY3Rpb24gdXBkYXRlVXNsTWFudWFsT24oKSB7XG5cdFx0ZGlzcGF0Y2goeyB0eXBlOiBcIlVQREFURV9VU0xfTUFOX09OXCIgfSk7XG5cdH1cblx0ZnVuY3Rpb24gdXBkYXRlVXNsTWFudWFsT2ZmKCkge1xuXHRcdGRpc3BhdGNoKHsgdHlwZTogXCJVUERBVEVfVVNMX01BTl9PRkZcIiB9KTtcblx0fVxuXHRmdW5jdGlvbiB1cGRhdGVMc2xNYW51YWxPbigpIHtcblx0XHRkaXNwYXRjaCh7IHR5cGU6IFwiVVBEQVRFX0xTTF9NQU5fT05cIiB9KTtcblx0fVxuXHRmdW5jdGlvbiB1cGRhdGVMc2xNYW51YWxPZmYoKSB7XG5cdFx0ZGlzcGF0Y2goeyB0eXBlOiBcIlVQREFURV9MU0xfTUFOX09GRlwiIH0pO1xuXHR9XG5cblx0Y29uc3QgdXNlQ29tbWFuZHNWYWx2ZU1wUmVkdWNlciA9IHtcblx0XHRzdGF0ZSxcblx0XHRyZWR1Y2VyOiB7XG5cdFx0XHR1cGRhdGVBdXRvTWFuU2VsZWN0aW9uLFxuXHRcdFx0dXBkYXRlTWFpbk1hbnVhbE9uLFxuXHRcdFx0dXBkYXRlTWFpbk1hbnVhbE9mZixcblx0XHRcdHVwZGF0ZVVzbE1hbnVhbE9uLFxuXHRcdFx0dXBkYXRlVXNsTWFudWFsT2ZmLFxuXHRcdFx0dXBkYXRlTHNsTWFudWFsT24sXG5cdFx0XHR1cGRhdGVMc2xNYW51YWxPZmYsXG5cdFx0fSxcblx0fTtcblxuXHRyZXR1cm4gdXNlQ29tbWFuZHNWYWx2ZU1wUmVkdWNlcjtcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlQ3JlYXRlQ29udGV4dDxDb250ZXh0VmFsdWVUeXBlIGV4dGVuZHMgb2JqZWN0IHwgbnVsbD4oXG4gIHJvb3RDb21wb25lbnROYW1lOiBzdHJpbmcsXG4gIGRlZmF1bHRDb250ZXh0PzogQ29udGV4dFZhbHVlVHlwZVxuKSB7XG4gIGNvbnN0IENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PENvbnRleHRWYWx1ZVR5cGUgfCB1bmRlZmluZWQ+KFxuICAgIGRlZmF1bHRDb250ZXh0XG4gICk7XG5cbiAgY29uc3QgUHJvdmlkZXI6IFJlYWN0LkZDPENvbnRleHRWYWx1ZVR5cGUgJiB7IGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUgfT4gPSAoXG4gICAgcHJvcHNcbiAgKSA9PiB7XG4gICAgY29uc3QgeyBjaGlsZHJlbiwgLi4uY29udGV4dCB9ID0gcHJvcHM7XG4gICAgLy8gT25seSByZS1tZW1vaXplIHdoZW4gcHJvcCB2YWx1ZXMgY2hhbmdlXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAgIGNvbnN0IHZhbHVlID0gUmVhY3QudXNlTWVtbyhcbiAgICAgICgpID0+IGNvbnRleHQsXG4gICAgICBPYmplY3QudmFsdWVzKGNvbnRleHQpXG4gICAgKSBhcyBDb250ZXh0VmFsdWVUeXBlO1xuICAgIHJldHVybiA8Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17dmFsdWV9PntjaGlsZHJlbn08L0NvbnRleHQuUHJvdmlkZXI+O1xuICB9O1xuXG4gIFByb3ZpZGVyLmRpc3BsYXlOYW1lID0gcm9vdENvbXBvbmVudE5hbWUgKyBcIlByb3ZpZGVyXCI7XG5cbiAgZnVuY3Rpb24gdXNlQ29udGV4dChjb25zdW1lck5hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IGNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KENvbnRleHQpO1xuICAgIGlmIChjb250ZXh0KSByZXR1cm4gY29udGV4dDtcbiAgICBpZiAoZGVmYXVsdENvbnRleHQgIT09IHVuZGVmaW5lZCkgcmV0dXJuIGRlZmF1bHRDb250ZXh0O1xuICAgIC8vIGlmIGEgZGVmYXVsdENvbnRleHQgd2Fzbid0IHNwZWNpZmllZCwgaXQncyBhIHJlcXVpcmVkIGNvbnRleHQuXG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYFxcYCR7Y29uc3VtZXJOYW1lfVxcYCBtdXN0IGJlIHVzZWQgd2l0aGluIFxcYCR7cm9vdENvbXBvbmVudE5hbWV9XFxgYFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gW1Byb3ZpZGVyLCB1c2VDb250ZXh0XSBhcyBjb25zdDtcbn1cbiIsImltcG9ydCB0eXBlIHsgUmVhY3ROb2RlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgdHlwZSB7IENvbXBvbmVudFByb3BzIH0gZnJvbSBcIkBpbmR1Y3RpdmVhdXRvbWF0aW9uL3BlcnNwZWN0aXZlLWNsaWVudFwiO1xuXG5leHBvcnQgY29uc3QgVkFMVkVfQ09NUE9ORU5UX1RZUEUgPSBcImhtaS5wcm9jZXNzX29iamVjdHMuVmFsdmVcIjtcbmV4cG9ydCB0eXBlIEVsZW1lbnRSZWYgPSBSZWFjdC5SZWZPYmplY3Q8SFRNTERpdkVsZW1lbnQ+O1xuZXhwb3J0IHR5cGUgVmFsdmVTdGF0ZSA9IHtcblx0YWxhcm06IGJvb2xlYW47XG5cdGFjdEZCOiBib29sZWFuO1xuXHRkZUFjdEZCOiBib29sZWFuO1xuXHR1c2w/OiBib29sZWFuO1xuXHRsc2w/OiBib29sZWFuO1xuXHRhY3RpdmF0ZWRDb25maWc6IG51bWJlcjtcblx0ZGVhY3RpdmF0ZWRDb25maWc6IG51bWJlcjtcblx0aXRlbU5hbWU6IHN0cmluZztcblx0bWFudWFsOiBib29sZWFuO1xuXHRtYXNrZWQ6IGJvb2xlYW47XG5cdGNoYW5naW5nOiBib29sZWFuO1xuXHRsb2NhdGU6IGJvb2xlYW47XG59O1xuXG5leHBvcnQgdHlwZSBWYWx2ZUNvbXBvdW5kQ29udGV4dFR5cGUgPSB7XG5cdGNvbXBvbmVudFByb3BzOiBDb21wb25lbnRQcm9wczxhbnksIGFueT47XG5cdHZhbHZlUHJvcHM6IFZhbHZlUHJvcHM7XG5cdG9uQWN0aW9uUGVyZm9ybWVkOiAoKSA9PiB2b2lkO1xuXHRjaGlsZHJlbjogUmVhY3ROb2RlO1xufTtcbmV4cG9ydCB0eXBlIFZhbHZlQ29tcG91bmRSb290UHJvcHMgPSB7XG5cdGNvbXBvbmVudFByb3BzOiBDb21wb25lbnRQcm9wczxhbnksIGFueT47XG5cdHZhbHZlUHJvcHM6IFZhbHZlUHJvcHM7XG5cdG9uQWN0aW9uUGVyZm9ybWVkOiAoKSA9PiB2b2lkO1xuXHRjaGlsZHJlbjogUmVhY3ROb2RlO1xufTtcbmV4cG9ydCBjb25zdCBQVU1QX0NPTVBPTkVOVF9UWVBFID0gXCJobWkucHJvY2Vzc19vYmplY3RzLlB1bXBcIjtcbmV4cG9ydCB0eXBlIFB1bXBTdGF0ZSA9IHtcblx0YWxhcm06IGJvb2xlYW47XG5cdGFjdEZCOiBib29sZWFuO1xuXHRkZUFjdEZCOiBib29sZWFuO1xuXHRjb25maWd1cmF0aW9uOiBudW1iZXI7XG5cdGl0ZW1OYW1lOiBzdHJpbmc7XG5cdG1hbnVhbDogYm9vbGVhbjtcblx0bWFza2VkOiBib29sZWFuO1xuXHRjaGFuZ2luZzogYm9vbGVhbjtcblx0bG9jYXRlOiBib29sZWFuO1xufTtcblxuZXhwb3J0IHR5cGUgUHVtcENvbXBvdW5kQ29udGV4dFR5cGUgPSB7XG5cdGNvbXBvbmVudFByb3BzOiBDb21wb25lbnRQcm9wczxhbnksIGFueT47XG5cdHB1bXBQcm9wczogUHVtcFByb3BzO1xuXHRvbkFjdGlvblBlcmZvcm1lZDogKCkgPT4gdm9pZDtcblx0Y2hpbGRyZW46IFJlYWN0Tm9kZTtcbn07XG5leHBvcnQgdHlwZSBQdW1wQ29tcG91bmRSb290UHJvcHMgPSB7XG5cdGNvbXBvbmVudFByb3BzOiBDb21wb25lbnRQcm9wczxhbnksIGFueT47XG5cdHB1bXBQcm9wczogUHVtcFByb3BzO1xuXHRvbkFjdGlvblBlcmZvcm1lZDogKCkgPT4gdm9pZDtcblx0Y2hpbGRyZW46IFJlYWN0Tm9kZTtcbn07XG4vKipcbiAqIERlZmluZSB0aGUgc2hhcGUgb2YgdGhlIFBhcmFtZXRlckFjdGlvbiB0eXBlXG4gKiBAVXNlYWdlIHVzZVBhcmFtZXRlclJlZHVjZXJcbiAqL1xuZXhwb3J0IHR5cGUgUGFyYW1ldGVyQWN0aW9uID0ge1xuXHR0eXBlOiBcIlVQREFURV9WQUxVRVwiO1xuXHR2YWx1ZTogbnVtYmVyO1xuXHRpbmRleDogbnVtYmVyO1xufTtcblxuZXhwb3J0IHR5cGUgUGFyYW1ldGVyUmVkdWNlciA9IChcblx0c3RhdGU6IFBhcmFtSXRlbSB8IFBhcmFtSXRlbVtdLFxuXHRhY3Rpb246IFBhcmFtZXRlckFjdGlvblxuKSA9PiBWYWx2ZVN0YXRlO1xuXG5leHBvcnQgdHlwZSBVc2VQYXJhbWV0ZXJSZWR1Y2VyID0ge1xuXHRzdGF0ZTogUGFyYW1JdGVtW107XG5cdHJlZHVjZXI6IHtcblx0XHR1cGRhdGVWYWx1ZTogKHZhbHVlOiBudW1iZXIsIGluZGV4OiBudW1iZXIpID0+IHZvaWQ7XG5cdFx0Ly9hZGQgbW9yZSBoYW5kbGVycyBhcyBuZWVkZWRcblx0fTtcbn07XG5leHBvcnQgdHlwZSBQYXJhbUxhYmVsID0ge1xuXHR0ZXh0OiBzdHJpbmc7XG5cdGNsYXNzTmFtZT86IHN0cmluZztcblx0dG9vbHRpcFRleHQ/OiBzdHJpbmc7XG5cdHRvb2x0aXBQb3NpdGlvbj86IHN0cmluZztcblx0dG9vbHRpcENsYXNzTmFtZT86IHN0cmluZztcblx0dG9vbHRpcElkPzogc3RyaW5nO1xufTtcbmV4cG9ydCB0eXBlIFBhcmFtSW5wdXQgPSB7XG5cdHR5cGU6IHN0cmluZztcblx0aW5wdXRtb2RlOlxuXHRcdHwgXCJub25lXCJcblx0XHR8IFwidGV4dFwiXG5cdFx0fCBcInRlbFwiXG5cdFx0fCBcInVybFwiXG5cdFx0fCBcImVtYWlsXCJcblx0XHR8IFwibnVtZXJpY1wiXG5cdFx0fCBcImRlY2ltYWxcIlxuXHRcdHwgXCJzZWFyY2hcIlxuXHRcdHwgdW5kZWZpbmVkO1xuXHRwbGFjZWhvbGRlcjogc3RyaW5nO1xuXHRlZGl0YWJsZTogYm9vbGVhbjtcblx0cGF0dGVybjogc3RyaW5nO1xuXHRtaW46IG51bWJlcjtcblx0bWF4OiBudW1iZXI7XG5cdGRlY2ltYWxQbGFjZXM6IG51bWJlcjtcblx0Ly8gcGF0dGVybjogXCJeWzAtOV0qWy4sXT9bMC05XSokXCIgZm9yIGRlY2ltYWwgbnVtYmVyc1xuXHQvLyBwYXR0ZXJuOiBcIl5bMC05XSokXCIgZm9yIGludGVnZXJzXG5cdGV1OiBzdHJpbmc7XG5cdHZhbHVlOiBudW1iZXI7XG59O1xuLy8gdHlwZSBQYXJhbXNIZWFkZXIgPSB7XG4vLyBcdGxhYmVsOiBzdHJpbmdcbi8vIH1cbmV4cG9ydCB0eXBlIFBhcmFtSXRlbSA9IHtcblx0bGFiZWw6IFBhcmFtTGFiZWw7XG5cdGlucHV0OiBQYXJhbUlucHV0O1xufTtcbmV4cG9ydCB0eXBlIFBhcmFtZXRlcnNMaXN0U3RhdGUgPSB7XG5cdHBhcmFtZXRlcnM6IFBhcmFtSXRlbVtdO1xufTtcbi8qKlxuICogRGVmaW5lIHRoZSBzaGFwZSBvZiB0aGUgVmFsdmVBY3Rpb24gdHlwZVxuICogQFVzZWFnZSB1c2VWYWx2ZVJlZHVjZXJcbiAqL1xuZXhwb3J0IHR5cGUgVmFsdmVBY3Rpb24gPVxuXHR8IHsgdHlwZTogXCJVUERBVEVfQUNUX0NPTkZJR1wiOyB2YWx1ZTogbnVtYmVyIH1cblx0fCB7IHR5cGU6IFwiVVBEQVRFX0RFQUNUX0NPTkZJR1wiOyB2YWx1ZTogbnVtYmVyIH1cblx0fCB7IHR5cGU6IFwiVVBEQVRFX0FDVF9GQlwiIH1cblx0fCB7IHR5cGU6IFwiVVBEQVRFX0RFX0FDVF9GQlwiIH1cblx0fCB7IHR5cGU6IFwiVVBEQVRFX1VTTFwiIH1cblx0fCB7IHR5cGU6IFwiVVBEQVRFX0xTTFwiIH1cblx0fCB7IHR5cGU6IFwiVVBEQVRFX01BTlVBTFwiIH1cblx0fCB7IHR5cGU6IFwiVVBEQVRFX0FMQVJNXCIgfVxuXHR8IHsgdHlwZTogXCJVUERBVEVfTUFTS0VEXCIgfVxuXHR8IHsgdHlwZTogXCJVUERBVEVfQ0hBTkdJTkdcIiB9XG5cdHwgeyB0eXBlOiBcIlVQREFURV9MT0NBVEVcIiB9O1xuXG5leHBvcnQgdHlwZSBWYWx2ZVJlZHVjZXIgPSAoXG5cdHN0YXRlOiBWYWx2ZVN0YXRlLFxuXHRhY3Rpb246IFZhbHZlQWN0aW9uXG4pID0+IFZhbHZlU3RhdGU7XG5cbmV4cG9ydCB0eXBlIFVzZVZhbHZlUmVkdWNlciA9IHtcblx0c3RhdGU6IFZhbHZlU3RhdGU7XG5cdHJlZHVjZXI6IHtcblx0XHR1cGRhdGVBY3RDb25maWc6ICh2YWx1ZTogbnVtYmVyKSA9PiB2b2lkO1xuXHRcdHVwZGF0ZURlQWN0Q29uZmlnOiAodmFsdWU6IG51bWJlcikgPT4gdm9pZDtcblx0XHR1cGRhdGVBbGFybTogKCkgPT4gdm9pZDtcblx0XHR1cGRhdGVBY3RGQjogKCkgPT4gdm9pZDtcblx0XHR1cGRhdGVEZUFjdEZCOiAoKSA9PiB2b2lkO1xuXHRcdHVwZGF0ZVVzbDogKCkgPT4gdm9pZDtcblx0XHR1cGRhdGVMc2w6ICgpID0+IHZvaWQ7XG5cdFx0dXBkYXRlTWFudWFsOiAoKSA9PiB2b2lkO1xuXHRcdHVwZGF0ZU1hc2tlZDogKCkgPT4gdm9pZDtcblx0XHR1cGRhdGVDaGFuZ2luZzogKCkgPT4gdm9pZDtcblx0XHR1cGRhdGVMb2NhdGU6ICgpID0+IHZvaWQ7XG5cblx0XHQvL2FkZCBtb3JlIGhhbmRsZXJzIGFzIG5lZWRlZFxuXHR9O1xufTtcblxuZXhwb3J0IGNvbnN0IFZhbHZlQ2xhc3NOYW1lRW51bSA9IHtcblx0QWxhcm1TdGF0ZTogXCJBbGFybVN0YXRlXCIsXG5cdEFjdGl2YXRlZDogXCJBY3RpdmF0ZWRcIixcblx0RGVhY3RpdmF0ZWQ6IFwiRGVhY3RpdmF0ZWRcIixcblx0TWFudWFsOiBcIk1hbnVhbFwiLFxuXHRNYXNrZWQ6IFwiTWFza2VkXCIsXG5cdENoYW5naW5nOiBcIkNoYW5naW5nXCIsXG5cdE5vQWxhcm1NYXNrOiBcIk5vQWxhcm1NYXNrXCIsXG5cdExvY2F0ZTogXCJMb2NhdGVcIixcbn07XG5leHBvcnQgdHlwZSBWYWx2ZUNsYXNzTmFtZUVudW0gPVxuXHQodHlwZW9mIFZhbHZlQ2xhc3NOYW1lRW51bSlba2V5b2YgdHlwZW9mIFZhbHZlQ2xhc3NOYW1lRW51bV07XG5leHBvcnQgY29uc3QgSXRlbU5hbWVFbnVtID0ge1xuXHRWMWIxOiBcInYxYjFcIiwgLy8gaW5kZXggMFxuXHRWMWIyOiBcInYxYjJcIiwgLy8gaW5kZXggMVxuXHRWMWIzOiBcInYxYjNcIiwgLy8gaW5kZXggMlxuXHRWMWI0OiBcInYxYjRcIiwgLy8gaW5kZXggM1xuXHRWMmIxOiBcInYyYjFcIiwgLy8gaW5kZXggNFxuXHRWMmIyOiBcInYyYjJcIiwgLy8gaW5kZXggNVxuXHRWMmIzOiBcInYyYjNcIiwgLy8gaW5kZXggNlxuXHRWMmI0OiBcInYyYjRcIiwgLy8gaW5kZXggN1xuXHRWM2IxOiBcInYzYjFcIiwgLy8gaW5kZXggOFxuXHRWM2IyOiBcInYzYjJcIiwgLy8gaW5kZXggOVxuXHRWM2IzOiBcInYzYjNcIiwgLy8gaW5kZXggMTBcblx0VjNiNDogXCJ2M2I0XCIsIC8vIGluZGV4IDExXG5cdFYyOiBcInYyXCIsIC8vIGluZGV4IDEyXG5cdFYzOiBcInYzXCIsIC8vIGluZGV4IDEzXG5cdFYxOiBcInYxXCIsIC8vIGluZGV4IDE0XG5cdFYyZjE6IFwidjJmMVwiLCAvLyBpbmRleCAxNVxuXHRWMmYyOiBcInYyZjJcIiwgLy8gaW5kZXggMTZcblx0VjNmMTogXCJ2M2YxXCIsIC8vIGluZGV4IDE3XG5cdFYzZjI6IFwidjNmMlwiLCAvLyBpbmRleCAxOFxufTtcbmV4cG9ydCB0eXBlIEl0ZW1OYW1lRW51bSA9ICh0eXBlb2YgSXRlbU5hbWVFbnVtKVtrZXlvZiB0eXBlb2YgSXRlbU5hbWVFbnVtXTtcbmV4cG9ydCBjb25zdCB2YWx2ZU1wSXRlbU5hbWVFbnVtID0ge1xuXHRWMWIxOiBcInYxYjFcIiwgLy8gaW5kZXggMFxuXHRWMWIyOiBcInYxYjJcIiwgLy8gaW5kZXggMVxuXHRWMWIzOiBcInYxYjNcIiwgLy8gaW5kZXggMlxuXHRWMWI0OiBcInYxYjRcIiwgLy8gaW5kZXggM1xuXHRWMmIxOiBcInYyYjFcIiwgLy8gaW5kZXggNFxuXHRWMmIyOiBcInYyYjJcIiwgLy8gaW5kZXggNVxuXHRWMmIzOiBcInYyYjNcIiwgLy8gaW5kZXggNlxuXHRWMmI0OiBcInYyYjRcIiwgLy8gaW5kZXggN1xuXHRWMjogXCJ2MlwiLCAvLyBpbmRleCA4XG5cdHYxOiBcInYxXCIsIC8vIGluZGV4IDlcblx0dXNsOiBcInVzbFwiLCAvLyBpbmRleCAxMCB1cHBlci1zZWF0LWxpZnRcblx0bHNsOiBcImxzbFwiLCAvLyBpbmRleCAxMSBsb3dlci1zZWF0LWxpZnRcblx0bG9jYXRlOiBcImxvY2F0ZVwiLCAvLyBpbmRleCAxMiBsb2NhdGUgYW5pbWF0aW9uXG59O1xuZXhwb3J0IHR5cGUgdmFsdmVNcEl0ZW1OYW1lRW51bSA9XG5cdCh0eXBlb2YgdmFsdmVNcEl0ZW1OYW1lRW51bSlba2V5b2YgdHlwZW9mIHZhbHZlTXBJdGVtTmFtZUVudW1dO1xuXG5cbmV4cG9ydCBjb25zdCBJdGVtQ2xpY2thYmxlTmFtZUVudW0gPSB7XG5cdFYxYjE6IFwidjFiMVwiLCAvLyBpbmRleCAwXG5cdFYxYjI6IFwidjFiMlwiLCAvLyBpbmRleCAxXG5cdFYxYjM6IFwidjFiM1wiLCAvLyBpbmRleCAyXG5cdFYxYjQ6IFwidjFiNFwiLCAvLyBpbmRleCAzXG5cdFYyYjE6IFwidjJiMVwiLCAvLyBpbmRleCA0XG5cdFYyYjI6IFwidjJiMlwiLCAvLyBpbmRleCA1XG5cdFYyYjM6IFwidjJiM1wiLCAvLyBpbmRleCA2XG5cdFYyYjQ6IFwidjJiNFwiLCAvLyBpbmRleCA3XG5cdFYzYjE6IFwidjNiMVwiLCAvLyBpbmRleCA4XG5cdFYzYjI6IFwidjNiMlwiLCAvLyBpbmRleCA5XG5cdFYzYjM6IFwidjNiM1wiLCAvLyBpbmRleCAxMFxuXHRWM2I0OiBcInYzYjRcIiwgLy8gaW5kZXggMTFcblx0VjI6IFwidjJcIiwgLy8gaW5kZXggMTJcblx0VjM6IFwidjNcIiwgLy8gaW5kZXggMTNcblx0VjE6IFwidjFcIiwgLy8gaW5kZXggMTRcbn07XG5leHBvcnQgdHlwZSBJdGVtQ2xpY2thYmxlTmFtZUVudW0gPVxuXHQodHlwZW9mIEl0ZW1DbGlja2FibGVOYW1lRW51bSlba2V5b2YgdHlwZW9mIEl0ZW1DbGlja2FibGVOYW1lRW51bV07XG5leHBvcnQgY29uc3QgdmFsdmVNcEl0ZW1DbGlja2FibGVOYW1lRW51bSA9IHtcblx0VjFiMTogXCJ2MWIxXCIsIC8vIGluZGV4IDBcblx0VjFiMjogXCJ2MWIyXCIsIC8vIGluZGV4IDFcblx0VjFiMzogXCJ2MWIzXCIsIC8vIGluZGV4IDJcblx0VjFiNDogXCJ2MWI0XCIsIC8vIGluZGV4IDNcblx0VjJiMTogXCJ2MmIxXCIsIC8vIGluZGV4IDRcblx0VjJiMjogXCJ2MmIyXCIsIC8vIGluZGV4IDVcblx0VjJiMzogXCJ2MmIzXCIsIC8vIGluZGV4IDZcblx0VjJiNDogXCJ2MmI0XCIsIC8vIGluZGV4IDdcblx0VjI6IFwidjJcIiwgLy8gaW5kZXggOFxuXHRWMTogXCJ2MVwiLCAvLyBpbmRleCA5XG59O1xuZXhwb3J0IHR5cGUgdmFsdmVNcEl0ZW1DbGlja2FibGVOYW1lRW51bSA9XG5cdCh0eXBlb2YgdmFsdmVNcEl0ZW1DbGlja2FibGVOYW1lRW51bSlba2V5b2YgdHlwZW9mIHZhbHZlTXBJdGVtQ2xpY2thYmxlTmFtZUVudW1dO1xuXG5leHBvcnQgY29uc3QgSXRlbVBvc2l0aW9uRW51bSA9IHtcblx0djFiMTogXCJ2MWIxXCIsXG5cdHYxYjI6IFwidjFiMlwiLFxuXHR2MWIzOiBcInYxYjNcIixcblx0djFiNDogXCJ2MWI0XCIsXG5cdHYyYjE6IFwidjJiMVwiLFxuXHRWMmIyOiBcInYyYjJcIixcblx0djJiMzogXCJ2MmIzXCIsXG5cdHYyYjQ6IFwidjJiNFwiLFxuXHR2M2IxOiBcInYzYjFcIixcblx0djNiMjogXCJ2M2IyXCIsXG5cdHYzYjM6IFwidjNiM1wiLFxuXHR2M2I0OiBcInYzYjRcIixcblx0djI6IFwidjJcIixcblx0djM6IFwidjNcIixcbn07XG5leHBvcnQgdHlwZSBJdGVtUG9zaXRpb25FbnVtID1cblx0KHR5cGVvZiBJdGVtUG9zaXRpb25FbnVtKVtrZXlvZiB0eXBlb2YgSXRlbVBvc2l0aW9uRW51bV07XG5cbmNvbnN0IFZhbHZlU3RhdGVFbnVtID0ge1xuXHRhbGFybTogXCJhbGFybVwiLFxuXHRtYW51YWw6IFwibWFudWFsXCIsXG5cdG1hc2tlZDogXCJtYXNrZWRcIixcbn07XG5leHBvcnQgdHlwZSBWYWx2ZVN0YXRlRW51bSA9XG5cdCh0eXBlb2YgVmFsdmVTdGF0ZUVudW0pW2tleW9mIHR5cGVvZiBWYWx2ZVN0YXRlRW51bV07XG5cbmNvbnN0IGl0ZW1JZFBvc2l0aW9ucyA9IFtcblx0XCJyaWdodFwiLFxuXHRcImxlZnRcIixcblx0XCJ0b3AtbGVmdFwiLFxuXHRcInRvcC1yaWdodFwiLFxuXHRcImJvdHRvbS1sZWZ0XCIsXG5cdFwiYm90dG9tLXJpZ2h0XCIsXG5dO1xuXG5leHBvcnQgdHlwZSBJdGVtSWRQb3NpdGlvblR5cGUgPSAodHlwZW9mIGl0ZW1JZFBvc2l0aW9ucylbbnVtYmVyXTtcbmV4cG9ydCB0eXBlIFByb2Nlc3NPYmplY3QgPSB7XG5cdHN0YXR1czogVmFsdmVTdGF0ZTtcbn07XG5leHBvcnQgdHlwZSBQdW1wID0ge1xuXHRzdGF0dXM6IFB1bXBTdGF0ZTtcbn07XG5leHBvcnQgdHlwZSBWYWx2ZVByb3BzID0ge1xuXHRwcm9jZXNzT2JqZWN0PzogUHJvY2Vzc09iamVjdDtcblx0bGFiZWxQb3NpdGlvbj86IEl0ZW1JZFBvc2l0aW9uVHlwZTtcblx0c2hvd0xhYmVsPzogYm9vbGVhbjtcblx0aGFuZGxlQ2xpY2s/OiAoKSA9PiB2b2lkO1xufTtcbmNvbnN0IHB1bXBUeXBlcz0gW1xuXHRcImNlbnRyaWZ1Z2FsXCIsXG5cdFwiZGlhcGhyYWdtXCIsXG5cdFwiZ2VhclwiLFxuXHRcImxpcXVpZC1yaW5nXCIsXG5cdFwicG9zaXRpdmUtZGlzcGxhY21lbnRcIixcblx0XCJwb3NpdGl2ZS1zY3Jld1wiLFxuXHRcInByb2dyZXNzaXZlLWNhdml0eVwiLFxuXVxuZXhwb3J0IHR5cGUgUHVtcFR5cGUgPSAodHlwZW9mIHB1bXBUeXBlcylbbnVtYmVyXTtcbmV4cG9ydCB0eXBlIFB1bXBQcm9wcyA9IHtcblx0cHVtcFR5cGU/OiBQdW1wVHlwZTtcblx0cHJvY2Vzc09iamVjdD86IFB1bXA7XG5cdGxhYmVsUG9zaXRpb24/OiBJdGVtSWRQb3NpdGlvblR5cGU7XG5cdHNob3dMYWJlbD86IGJvb2xlYW47XG5cdGhhbmRsZUNsaWNrPzogKCkgPT4gdm9pZDtcbn07XG5leHBvcnQgY29uc3QgcHVtcEl0ZW1MaXN0ID0gW1xuXHRcInN5bWJvbC0xXCIsXG5cdFwic3ltYm9sLTJcIixcbiBcdFwibG9jYXRlXCIsXG5dXG5leHBvcnQgdHlwZSBQdW1wSXRlbUxpc3QgPSAodHlwZW9mIHB1bXBJdGVtTGlzdClbbnVtYmVyXTtcblxuZXhwb3J0IHR5cGUgSXRlbURhdGEgPSB7XG5cdGtleTogc3RyaW5nO1xuXHR2YWx1ZTogc3RyaW5nO1xuXHRwcm9wczogVmFsdmVTdGF0ZTtcbn07XG4vKipcbiAqIGRyYWdnYWJsZSBjb21wb25lbnQgdHlwZXNcbiAqL1xuLy8gZXhwb3J0IHR5cGUgRHJhZ2dhYmxlSXRlbSA9IHtcbi8vIFx0aWQ6IFVuaXF1ZUlkZW50aWZpZXI7XG4vLyBcdGxlZnQ6IG51bWJlcjtcbi8vIFx0dG9wOiBudW1iZXI7XG4vLyB9XG5cbi8vIGV4cG9ydCB0eXBlIERyYWdnYWJsZVByb3BzID0ge1xuLy8gXHRpZDogVW5pcXVlSWRlbnRpZmllcixcbi8vIFx0b25DbG9zZTogKGlkOiBVbmlxdWVJZGVudGlmaWVyKT0+IHZvaWQsXG4vLyBcdGVsZW1lbnQ/OiBrZXlvZiBIVE1MRWxlbWVudCxcbi8vIFx0bGVmdDogbnVtYmVyO1xuLy8gXHR0b3AgOiBudW1iZXI7XG4vLyBcdGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGU7XG4vLyBcdGNsYXNzTmFtZTogc3RyaW5nO1xuLy8gfVxuZXhwb3J0IHR5cGUgaXRlbU5hbWVQcm9wcyA9IHtcblx0a2V5OiBzdHJpbmc7XG5cdG5hbWU6IFtzdHJpbmcsIHN0cmluZ107XG5cdHZhbHVlOiBzdHJpbmc7XG5cdGluZGV4OiBudW1iZXI7XG59O1xuZXhwb3J0IHR5cGUgQ29tbWFuZFZhbHZlTXBQcm9wcyA9IHtcblx0Y29tbWFuZD86IHtcblx0XHRpbnRlcmxvY2tzPzoge1xuXHRcdFx0bWFpbjogYm9vbGVhbltdO1xuXHRcdFx0dXBwZXJTZWF0OiBib29sZWFuW107XG5cdFx0XHRsb3dlclNlYXQ6IGJvb2xlYW5bXTtcblx0XHR9O1xuXHRcdG1haW4/OiB7XG5cdFx0XHRsYWJlbDogc3RyaW5nO1xuXHRcdFx0YXV0b01hbnVhbDogYm9vbGVhbjtcblx0XHRcdGFjdGl2YXRpb246IGJvb2xlYW47XG5cdFx0fTtcblx0XHR1cHBlclNlYXQ/OiB7XG5cdFx0XHRsYWJlbDogc3RyaW5nO1xuXHRcdFx0YWN0aXZhdGlvbjogYm9vbGVhbjtcblx0XHR9O1xuXHRcdGxvd2VyU2VhdD86IHtcblx0XHRcdGxhYmVsOiBzdHJpbmc7XG5cdFx0XHRhY3RpdmF0aW9uOiBib29sZWFuO1xuXHRcdH07XG5cdH07XG59O1xuXG5leHBvcnQgdHlwZSBDb21tYW5kc1ZhbHZlTXBDb21wb3VuZENvbnRleHRUeXBlID0ge1xuXHRjb21wb25lbnRQcm9wczogQ29tcG9uZW50UHJvcHM8YW55LCBhbnk+O1xuXHR1c2VSZWR1Y2VyOiBVc2VWYWx2ZU1wQ29tbWFuZFJlZHVjZXI7XG5cdGNoaWxkcmVuOiBSZWFjdE5vZGU7XG59O1xuZXhwb3J0IHR5cGUgQ29tbWFuZHNWYWx2ZU1wQ29tcG91bmRSb290UHJvcHMgPSB7XG5cdGNvbXBvbmVudFByb3BzOiBDb21wb25lbnRQcm9wczxhbnksIGFueT47XG5cdGNvbW1hbmQ6IENvbW1hbmRWYWx2ZU1wUHJvcHM7XG5cdGNoaWxkcmVuOiBSZWFjdE5vZGU7XG59O1xuLyoqXG4gKiBEZWZpbmUgdGhlIHNoYXBlIG9mIHRoZSBWYWx2ZUFjdGlvbiB0eXBlXG4gKiBAVXNlYWdlIHVzZVZhbHZlUmVkdWNlclxuICovXG5leHBvcnQgdHlwZSBWYWx2ZU1wQ29tbWFuZEFjdGlvbiA9XG5cdHwgeyB0eXBlOiBcIlVQREFURV9BVVRPX01BTlVBTFwiOyBtb2RlOiBcImF1dG9cIiB8IFwibWFudWFsXCIgfVxuXHR8IHsgdHlwZTogXCJVUERBVEVfTUFJTl9NQU5fT05cIiB9XG5cdHwgeyB0eXBlOiBcIlVQREFURV9NQUlOX01BTl9PRkZcIiB9XG5cdHwgeyB0eXBlOiBcIlVQREFURV9VU0xfTUFOX09OXCIgfVxuXHR8IHsgdHlwZTogXCJVUERBVEVfVVNMX01BTl9PRkZcIiB9XG5cdHwgeyB0eXBlOiBcIlVQREFURV9MU0xfTUFOX09OXCIgfVxuXHR8IHsgdHlwZTogXCJVUERBVEVfTFNMX01BTl9PRkZcIiB9O1xuZXhwb3J0IHR5cGUgVmFsdmVNcENvbW1hbmRSZWR1Y2VyID0gKFxuXHRzdGF0ZTogQ29tbWFuZFZhbHZlTXBQcm9wcyxcblx0YWN0aW9uOiBWYWx2ZU1wQ29tbWFuZEFjdGlvblxuKSA9PiBWYWx2ZVN0YXRlO1xuXG5leHBvcnQgdHlwZSBVc2VWYWx2ZU1wQ29tbWFuZFJlZHVjZXIgPSB7XG5cdHN0YXRlOiBDb21tYW5kVmFsdmVNcFByb3BzO1xuXHRyZWR1Y2VyOiB7XG5cdFx0dXBkYXRlQXV0b01hblNlbGVjdGlvbjogKG1vZGU6IFwiYXV0b1wiIHwgXCJtYW51YWxcIikgPT4gdm9pZDtcblx0XHR1cGRhdGVNYWluTWFudWFsT246ICgpID0+IHZvaWQ7XG5cdFx0dXBkYXRlTWFpbk1hbnVhbE9mZjogKCkgPT4gdm9pZDtcblx0XHR1cGRhdGVVc2xNYW51YWxPbjogKCkgPT4gdm9pZDtcblx0XHR1cGRhdGVVc2xNYW51YWxPZmY6ICgpID0+IHZvaWQ7XG5cdFx0dXBkYXRlTHNsTWFudWFsT246ICgpID0+IHZvaWQ7XG5cdFx0dXBkYXRlTHNsTWFudWFsT2ZmOiAoKSA9PiB2b2lkO1xuXHRcdC8vYWRkIG1vcmUgaGFuZGxlcnMgYXMgbmVlZGVkXG5cdH07XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlVSTCA9IGV4cG9ydHMuRE5TID0gdm9pZCAwO1xuY29uc3Qgc2hhMV9qc18xID0gcmVxdWlyZShcIi4vc2hhMS5qc1wiKTtcbmNvbnN0IHYzNV9qc18xID0gcmVxdWlyZShcIi4vdjM1LmpzXCIpO1xudmFyIHYzNV9qc18yID0gcmVxdWlyZShcIi4vdjM1LmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRE5TXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2MzVfanNfMi5ETlM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJVUkxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHYzNV9qc18yLlVSTDsgfSB9KTtcbmZ1bmN0aW9uIHY1KHZhbHVlLCBuYW1lc3BhY2UsIGJ1Ziwgb2Zmc2V0KSB7XG4gICAgcmV0dXJuICgwLCB2MzVfanNfMS5kZWZhdWx0KSgweDUwLCBzaGExX2pzXzEuZGVmYXVsdCwgdmFsdWUsIG5hbWVzcGFjZSwgYnVmLCBvZmZzZXQpO1xufVxudjUuRE5TID0gdjM1X2pzXzEuRE5TO1xudjUuVVJMID0gdjM1X2pzXzEuVVJMO1xuZXhwb3J0cy5kZWZhdWx0ID0gdjU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHBhcnNlX2pzXzEgPSByZXF1aXJlKFwiLi9wYXJzZS5qc1wiKTtcbmNvbnN0IHN0cmluZ2lmeV9qc18xID0gcmVxdWlyZShcIi4vc3RyaW5naWZ5LmpzXCIpO1xuZnVuY3Rpb24gdjFUb1Y2KHV1aWQpIHtcbiAgICBjb25zdCB2MUJ5dGVzID0gdHlwZW9mIHV1aWQgPT09ICdzdHJpbmcnID8gKDAsIHBhcnNlX2pzXzEuZGVmYXVsdCkodXVpZCkgOiB1dWlkO1xuICAgIGNvbnN0IHY2Qnl0ZXMgPSBfdjFUb1Y2KHYxQnl0ZXMpO1xuICAgIHJldHVybiB0eXBlb2YgdXVpZCA9PT0gJ3N0cmluZycgPyAoMCwgc3RyaW5naWZ5X2pzXzEudW5zYWZlU3RyaW5naWZ5KSh2NkJ5dGVzKSA6IHY2Qnl0ZXM7XG59XG5leHBvcnRzLmRlZmF1bHQgPSB2MVRvVjY7XG5mdW5jdGlvbiBfdjFUb1Y2KHYxQnl0ZXMpIHtcbiAgICByZXR1cm4gVWludDhBcnJheS5vZigoKHYxQnl0ZXNbNl0gJiAweDBmKSA8PCA0KSB8ICgodjFCeXRlc1s3XSA+PiA0KSAmIDB4MGYpLCAoKHYxQnl0ZXNbN10gJiAweDBmKSA8PCA0KSB8ICgodjFCeXRlc1s0XSAmIDB4ZjApID4+IDQpLCAoKHYxQnl0ZXNbNF0gJiAweDBmKSA8PCA0KSB8ICgodjFCeXRlc1s1XSAmIDB4ZjApID4+IDQpLCAoKHYxQnl0ZXNbNV0gJiAweDBmKSA8PCA0KSB8ICgodjFCeXRlc1swXSAmIDB4ZjApID4+IDQpLCAoKHYxQnl0ZXNbMF0gJiAweDBmKSA8PCA0KSB8ICgodjFCeXRlc1sxXSAmIDB4ZjApID4+IDQpLCAoKHYxQnl0ZXNbMV0gJiAweDBmKSA8PCA0KSB8ICgodjFCeXRlc1syXSAmIDB4ZjApID4+IDQpLCAweDYwIHwgKHYxQnl0ZXNbMl0gJiAweDBmKSwgdjFCeXRlc1szXSwgdjFCeXRlc1s4XSwgdjFCeXRlc1s5XSwgdjFCeXRlc1sxMF0sIHYxQnl0ZXNbMTFdLCB2MUJ5dGVzWzEyXSwgdjFCeXRlc1sxM10sIHYxQnl0ZXNbMTRdLCB2MUJ5dGVzWzE1XSk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVVJMID0gZXhwb3J0cy5ETlMgPSB2b2lkIDA7XG5jb25zdCBtZDVfanNfMSA9IHJlcXVpcmUoXCIuL21kNS5qc1wiKTtcbmNvbnN0IHYzNV9qc18xID0gcmVxdWlyZShcIi4vdjM1LmpzXCIpO1xudmFyIHYzNV9qc18yID0gcmVxdWlyZShcIi4vdjM1LmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRE5TXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2MzVfanNfMi5ETlM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJVUkxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHYzNV9qc18yLlVSTDsgfSB9KTtcbmZ1bmN0aW9uIHYzKHZhbHVlLCBuYW1lc3BhY2UsIGJ1Ziwgb2Zmc2V0KSB7XG4gICAgcmV0dXJuICgwLCB2MzVfanNfMS5kZWZhdWx0KSgweDMwLCBtZDVfanNfMS5kZWZhdWx0LCB2YWx1ZSwgbmFtZXNwYWNlLCBidWYsIG9mZnNldCk7XG59XG52My5ETlMgPSB2MzVfanNfMS5ETlM7XG52My5VUkwgPSB2MzVfanNfMS5VUkw7XG5leHBvcnRzLmRlZmF1bHQgPSB2MztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gL14oPzpbMC05YS1mXXs4fS1bMC05YS1mXXs0fS1bMS04XVswLTlhLWZdezN9LVs4OWFiXVswLTlhLWZdezN9LVswLTlhLWZdezEyfXwwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDB8ZmZmZmZmZmYtZmZmZi1mZmZmLWZmZmYtZmZmZmZmZmZmZmZmKSQvaTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHR5cGUge1xuXHRWYWx2ZUNvbXBvdW5kQ29udGV4dFR5cGUsXG5cdFZhbHZlQ29tcG91bmRSb290UHJvcHMsXG59IGZyb20gXCIuLi8uLi8uLi9hcGkvdHlwZXNcIjtcbmltcG9ydCB7IHVzZVZhbHZlUmVkdWNlciB9IGZyb20gXCIuLi8uLi8uLi9hcGkvaG9va3NcIjtcbmltcG9ydCB7IGdldEl0ZW1JZFBvc2l0aW9uQ2xhc3NOYW1lLCBnZXRWYWx2ZU1wSXRlbUNsYXNzTmFtZSwgdmFsdmVNcEl0ZW1OYW1lcyB9IGZyb20gXCIuLi8uLi8uLi9hcGkvdXRpbHNcIjtcbmltcG9ydCBJdGVtIGZyb20gXCIuLi92YWx2ZS9pdGVtXCI7XG5pbXBvcnQgeyB1c2VDcmVhdGVDb250ZXh0IH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL2NyZWF0ZUNvbnRleHRcIjtcbmltcG9ydCB7IFZBTFZFX0NPTVBPTkVOVF9UWVBFIH0gZnJvbSBcIi4uLy4uLy4uL2FwaS90eXBlc1wiO1xuaW1wb3J0IHsgcHJvY2Vzc09iamVjdFByb3BzIH0gZnJvbSBcIi4uLy4uLy4uL2FwaS9pbml0aWFsU3RhdGVcIjtcblxuLy8gaW1wb3J0ICcuL3ZhbHZlLW1wLm1vZHVsZS5jc3MnXG4vLyBpbXBvcnQge3ZhbHZlU3RhdHVzfSBmcm9tICcuLi8uLi9hcGkvaW5pdGlhbFN0YXRlJ1xuY29uc3QgQ09NUE9ORU5UX1RZUEUgPSBWQUxWRV9DT01QT05FTlRfVFlQRTtcblxuLy8gaW1wb3J0IHt2YWx2ZVN0YXR1c30gZnJvbSAnLi9pbml0aWFsU3RhdGUnXG5cbmV4cG9ydCBjb25zdCBbVmFsdmVDb250ZXh0UHJvdmlkZXIsIHVzZVZhbHZlQ29udGV4dF0gPVxuXHR1c2VDcmVhdGVDb250ZXh0PFZhbHZlQ29tcG91bmRDb250ZXh0VHlwZT4oXCJWYWx2ZU1wQ29tcG91bmRcIik7XG5cbmNvbnN0IFJvb3QgPSAoe1xuXHRjb21wb25lbnRQcm9wcyxcblx0dmFsdmVQcm9wcyxcblx0b25BY3Rpb25QZXJmb3JtZWQsXG5cdGNoaWxkcmVuLFxufTogVmFsdmVDb21wb3VuZFJvb3RQcm9wcykgPT4ge1xuXHRyZXR1cm4gKFxuXHRcdDxWYWx2ZUNvbnRleHRQcm92aWRlclxuXHRcdFx0ey4uLntcblx0XHRcdFx0dmFsdmVQcm9wcyxcblx0XHRcdFx0Y29tcG9uZW50UHJvcHMsXG5cdFx0XHRcdG9uQWN0aW9uUGVyZm9ybWVkLFxuXHRcdFx0XHR1c2VWYWx2ZVJlZHVjZXIsXG5cdFx0XHR9fVxuXHRcdD5cblx0XHRcdHtjaGlsZHJlbn1cblx0XHQ8L1ZhbHZlQ29udGV4dFByb3ZpZGVyPlxuXHQpO1xufTtcbmNvbnN0IHZhbHZlID0gKCkgPT4ge1xuXHRjb25zdCB7IHZhbHZlUHJvcHMsIG9uQWN0aW9uUGVyZm9ybWVkLCBjb21wb25lbnRQcm9wcyB9ID1cblx0XHR1c2VWYWx2ZUNvbnRleHQoXCJWYWx2ZVwiKTtcblx0XHRjb25zdCB2YWx2ZVJlZiA9IFJlYWN0LnVzZVJlZjxIVE1MRGl2RWxlbWVudD4obnVsbClcblx0Y29uc3QgeyBwb3NpdGlvbiwgZW1pdCB9ID0gY29tcG9uZW50UHJvcHM7XG5cdGNvbnN0IHsgcHJvY2Vzc09iamVjdH0gPSB2YWx2ZVByb3BzO1xuXHRjb25zdCB7IHN0YXR1cyB9ID0gcHJvY2Vzc09iamVjdCB8fCBwcm9jZXNzT2JqZWN0UHJvcHM7XG5cdGNvbnN0IGluQ29vcmQgPSBwb3NpdGlvbj8ueCA/PyBmYWxzZTtcblx0Ly8gaWYgbm90IGxvY2F0ZSwgdHJpbSBsYXN0IGl0ZW0gZnJvbSB2YWx2ZU1wSXRlbU5hbWVzXG5cdGxldCBjb21wb25lbnRJdGVtTmFtZXMgPSB2YWx2ZU1wSXRlbU5hbWVzO1xuXHRpZiAoIXN0YXR1cz8ubG9jYXRlKSB7XG5cdFx0Y29tcG9uZW50SXRlbU5hbWVzID0gY29tcG9uZW50SXRlbU5hbWVzLnNsaWNlKDAsIC0xKTtcblx0fVxuXG5cdGlmICghaW5Db29yZCkge1xuXHRcdHJldHVybiAoXG5cdFx0XHQ8ZGl2XG5cdFx0XHRyZWY9e3ZhbHZlUmVmfVxuXHRcdFx0ey4uLmVtaXQoe1xuXHRcdFx0XHRjbGFzc2VzOiBbYGhtaS1jb21wb25lbnQgaG1pLWNvbXBvbmVudF9fY29sdW1uIGBdLFxuXHRcdFx0fSl9XG5cdFx0XHRcdGRhdGEtY29tcG9uZW50PXtDT01QT05FTlRfVFlQRX1cblx0XHRcdFx0b25DbGljaz17b25BY3Rpb25QZXJmb3JtZWR9XG5cdFx0XHQ+XG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiaG1pLWNvbXBvbmVudF9fcm93XCI+XG5cdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJobWktY29tcG9uZW50LXZhbHZlX19tcFwiPlxuXHRcdFx0XHRcdFx0e2NvbXBvbmVudEl0ZW1OYW1lcy5tYXAoXG5cdFx0XHRcdFx0XHRcdCh7IHZhbHVlLCBpbmRleCwga2V5IH0pID0+IChcblx0XHRcdFx0XHRcdFx0XHQvLyBjb25zb2xlLmxvZyhcblx0XHRcdFx0XHRcdFx0XHQvLyBcdGByZS1yZW5kZXJlZCAsa2V5ICR7a2V5fSB2YWx1ZSAke3ZhbHVlfSBpbmRleCAke2luZGV4fWBcblx0XHRcdFx0XHRcdFx0XHQvLyApLFxuXHRcdFx0XHRcdFx0XHRcdChcblx0XHRcdFx0XHRcdFx0XHRcdDxJdGVtXG5cdFx0XHRcdFx0XHRcdFx0XHRpdGVtQ2xhc3NOYW1lPXtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dmFsdWUgKyBcIiBcIiArIGdldFZhbHZlTXBJdGVtQ2xhc3NOYW1lKGluZGV4LCBzdGF0dXMpXG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRrZXk9e2tleX1cblx0XHRcdFx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpfVxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXHRcdCk7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIChcblx0XHRcdDxkaXZcblx0XHRcdHJlZj17dmFsdmVSZWZ9XG5cdFx0XHR7Li4uZW1pdCh7XG5cdFx0XHRcdGNsYXNzZXM6IFtgaG1pLWNvbXBvbmVudCBobWktY29tcG9uZW50LXZhbHZlX19tcCBgXSxcblx0XHRcdH0pfVxuXHRcdFx0ZGF0YS1jb21wb25lbnQ9e0NPTVBPTkVOVF9UWVBFfVxuXHRcdFx0b25DbGljaz17b25BY3Rpb25QZXJmb3JtZWR9XG5cdFx0XHQ+XG5cdFx0XHRcdHtjb21wb25lbnRJdGVtTmFtZXMubWFwKFxuXHRcdFx0XHRcdCh7IHZhbHVlLCBpbmRleCwga2V5IH0pID0+IChcblx0XHRcdFx0XHRcdC8vIGNvbnNvbGUubG9nKFxuXHRcdFx0XHRcdFx0Ly8gXHRgcmUtcmVuZGVyZWQgLGtleSAke2tleX0gdmFsdWUgJHt2YWx1ZX0gaW5kZXggJHtpbmRleH1gXG5cdFx0XHRcdFx0XHQvLyApLFxuXHRcdFx0XHRcdFx0KFxuXHRcdFx0XHRcdFx0XHQ8SXRlbVxuXHRcdFx0XHRcdFx0XHRcdGl0ZW1DbGFzc05hbWU9e1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFsdWUgKyBcIiBcIiArIGdldFZhbHZlTXBJdGVtQ2xhc3NOYW1lKGluZGV4LCBzdGF0dXMpXG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGtleT17a2V5fVxuXHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdClcblx0XHRcdFx0KX1cblx0XHRcdDwvZGl2PlxuXHRcdCk7XG5cdH1cbn07XG5cbmNvbnN0IHBvcG92ZXIgPSAoeyBhbmNob3JFbCB9OiB7IGFuY2hvckVsOiBIVE1MRGl2RWxlbWVudCB8IG51bGwgfSkgPT4ge1xuXHRjb25zdCB7IHZhbHZlUHJvcHMsIGNvbXBvbmVudFByb3BzIH0gPSB1c2VWYWx2ZUNvbnRleHQoXCJQb3BvdmVyXCIpO1xuICAgIGNvbnN0IHsgc2hvd0xhYmVsLGxhYmVsUG9zaXRpb24sIHByb2Nlc3NPYmplY3QgfSA9IHZhbHZlUHJvcHM7XG5cdGNvbnN0IHsgc3RhdHVzIH0gPSBwcm9jZXNzT2JqZWN0IHx8IHByb2Nlc3NPYmplY3RQcm9wcztcblx0aWYgKCFzaG93TGFiZWwpIHJldHVybiBudWxsO1xuICAgIGNvbnN0IHsgcG9zaXRpb24gfSA9IGNvbXBvbmVudFByb3BzO1xuXHRsZXQgY2xhc3NOYW1lID0gXCJpdGVtSWQgcG9wb3ZlciBwb3NpdGlvbi1sZWZ0XCI7XG5cdGlmIChsYWJlbFBvc2l0aW9uKSB7XG5cdFx0Y2xhc3NOYW1lID0gZ2V0SXRlbUlkUG9zaXRpb25DbGFzc05hbWUoY2xhc3NOYW1lLCBsYWJlbFBvc2l0aW9uKVxuXHR9XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdlxuXHRcdFx0Y2xhc3NOYW1lPXtjbGFzc05hbWV9XG4gICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgIHRvcDogcG9zaXRpb24ueSxcbiAgICAgICAgICAgICAgICBsZWZ0OiBwb3NpdGlvbi54LFxuICAgICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgICAgPGRpdiBzdHlsZT17eyBwYWRkaW5nOiA4IH19PntzdGF0dXM/Lml0ZW1OYW1lfTwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuXG5leHBvcnQgY29uc3QgVmFsdmVNcENvbXBvdW5kID0ge1xuXHRSb290LFxuXHR2YWx2ZSxcblx0cG9wb3Zlcixcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHJlZ2V4X2pzXzEgPSByZXF1aXJlKFwiLi9yZWdleC5qc1wiKTtcbmZ1bmN0aW9uIHZhbGlkYXRlKHV1aWQpIHtcbiAgICByZXR1cm4gdHlwZW9mIHV1aWQgPT09ICdzdHJpbmcnICYmIHJlZ2V4X2pzXzEuZGVmYXVsdC50ZXN0KHV1aWQpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gdmFsaWRhdGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHZhbGlkYXRlX2pzXzEgPSByZXF1aXJlKFwiLi92YWxpZGF0ZS5qc1wiKTtcbmZ1bmN0aW9uIHZlcnNpb24odXVpZCkge1xuICAgIGlmICghKDAsIHZhbGlkYXRlX2pzXzEuZGVmYXVsdCkodXVpZCkpIHtcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbnZhbGlkIFVVSUQnKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlSW50KHV1aWQuc2xpY2UoMTQsIDE1KSwgMTYpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gdmVyc2lvbjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgcmFuZG9tVVVJRCA9IHR5cGVvZiBjcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIGNyeXB0by5yYW5kb21VVUlEICYmIGNyeXB0by5yYW5kb21VVUlELmJpbmQoY3J5cHRvKTtcbmV4cG9ydHMuZGVmYXVsdCA9IHsgcmFuZG9tVVVJRCB9O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB2YWxpZGF0ZV9qc18xID0gcmVxdWlyZShcIi4vdmFsaWRhdGUuanNcIik7XG5mdW5jdGlvbiBwYXJzZSh1dWlkKSB7XG4gICAgaWYgKCEoMCwgdmFsaWRhdGVfanNfMS5kZWZhdWx0KSh1dWlkKSkge1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ0ludmFsaWQgVVVJRCcpO1xuICAgIH1cbiAgICBsZXQgdjtcbiAgICByZXR1cm4gVWludDhBcnJheS5vZigodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMCwgOCksIDE2KSkgPj4+IDI0LCAodiA+Pj4gMTYpICYgMHhmZiwgKHYgPj4+IDgpICYgMHhmZiwgdiAmIDB4ZmYsICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSg5LCAxMyksIDE2KSkgPj4+IDgsIHYgJiAweGZmLCAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMTQsIDE4KSwgMTYpKSA+Pj4gOCwgdiAmIDB4ZmYsICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgxOSwgMjMpLCAxNikpID4+PiA4LCB2ICYgMHhmZiwgKCh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgyNCwgMzYpLCAxNikpIC8gMHgxMDAwMDAwMDAwMCkgJiAweGZmLCAodiAvIDB4MTAwMDAwMDAwKSAmIDB4ZmYsICh2ID4+PiAyNCkgJiAweGZmLCAodiA+Pj4gMTYpICYgMHhmZiwgKHYgPj4+IDgpICYgMHhmZiwgdiAmIDB4ZmYpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gcGFyc2U7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIGYocywgeCwgeSwgeikge1xuICAgIHN3aXRjaCAocykge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICByZXR1cm4gKHggJiB5KSBeICh+eCAmIHopO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICByZXR1cm4geCBeIHkgXiB6O1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICByZXR1cm4gKHggJiB5KSBeICh4ICYgeikgXiAoeSAmIHopO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICByZXR1cm4geCBeIHkgXiB6O1xuICAgIH1cbn1cbmZ1bmN0aW9uIFJPVEwoeCwgbikge1xuICAgIHJldHVybiAoeCA8PCBuKSB8ICh4ID4+PiAoMzIgLSBuKSk7XG59XG5mdW5jdGlvbiBzaGExKGJ5dGVzKSB7XG4gICAgY29uc3QgSyA9IFsweDVhODI3OTk5LCAweDZlZDllYmExLCAweDhmMWJiY2RjLCAweGNhNjJjMWQ2XTtcbiAgICBjb25zdCBIID0gWzB4Njc0NTIzMDEsIDB4ZWZjZGFiODksIDB4OThiYWRjZmUsIDB4MTAzMjU0NzYsIDB4YzNkMmUxZjBdO1xuICAgIGNvbnN0IG5ld0J5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYnl0ZXMubGVuZ3RoICsgMSk7XG4gICAgbmV3Qnl0ZXMuc2V0KGJ5dGVzKTtcbiAgICBuZXdCeXRlc1tieXRlcy5sZW5ndGhdID0gMHg4MDtcbiAgICBieXRlcyA9IG5ld0J5dGVzO1xuICAgIGNvbnN0IGwgPSBieXRlcy5sZW5ndGggLyA0ICsgMjtcbiAgICBjb25zdCBOID0gTWF0aC5jZWlsKGwgLyAxNik7XG4gICAgY29uc3QgTSA9IG5ldyBBcnJheShOKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IE47ICsraSkge1xuICAgICAgICBjb25zdCBhcnIgPSBuZXcgVWludDMyQXJyYXkoMTYpO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDE2OyArK2opIHtcbiAgICAgICAgICAgIGFycltqXSA9XG4gICAgICAgICAgICAgICAgKGJ5dGVzW2kgKiA2NCArIGogKiA0XSA8PCAyNCkgfFxuICAgICAgICAgICAgICAgICAgICAoYnl0ZXNbaSAqIDY0ICsgaiAqIDQgKyAxXSA8PCAxNikgfFxuICAgICAgICAgICAgICAgICAgICAoYnl0ZXNbaSAqIDY0ICsgaiAqIDQgKyAyXSA8PCA4KSB8XG4gICAgICAgICAgICAgICAgICAgIGJ5dGVzW2kgKiA2NCArIGogKiA0ICsgM107XG4gICAgICAgIH1cbiAgICAgICAgTVtpXSA9IGFycjtcbiAgICB9XG4gICAgTVtOIC0gMV1bMTRdID0gKChieXRlcy5sZW5ndGggLSAxKSAqIDgpIC8gTWF0aC5wb3coMiwgMzIpO1xuICAgIE1bTiAtIDFdWzE0XSA9IE1hdGguZmxvb3IoTVtOIC0gMV1bMTRdKTtcbiAgICBNW04gLSAxXVsxNV0gPSAoKGJ5dGVzLmxlbmd0aCAtIDEpICogOCkgJiAweGZmZmZmZmZmO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTjsgKytpKSB7XG4gICAgICAgIGNvbnN0IFcgPSBuZXcgVWludDMyQXJyYXkoODApO1xuICAgICAgICBmb3IgKGxldCB0ID0gMDsgdCA8IDE2OyArK3QpIHtcbiAgICAgICAgICAgIFdbdF0gPSBNW2ldW3RdO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IHQgPSAxNjsgdCA8IDgwOyArK3QpIHtcbiAgICAgICAgICAgIFdbdF0gPSBST1RMKFdbdCAtIDNdIF4gV1t0IC0gOF0gXiBXW3QgLSAxNF0gXiBXW3QgLSAxNl0sIDEpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBhID0gSFswXTtcbiAgICAgICAgbGV0IGIgPSBIWzFdO1xuICAgICAgICBsZXQgYyA9IEhbMl07XG4gICAgICAgIGxldCBkID0gSFszXTtcbiAgICAgICAgbGV0IGUgPSBIWzRdO1xuICAgICAgICBmb3IgKGxldCB0ID0gMDsgdCA8IDgwOyArK3QpIHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBNYXRoLmZsb29yKHQgLyAyMCk7XG4gICAgICAgICAgICBjb25zdCBUID0gKFJPVEwoYSwgNSkgKyBmKHMsIGIsIGMsIGQpICsgZSArIEtbc10gKyBXW3RdKSA+Pj4gMDtcbiAgICAgICAgICAgIGUgPSBkO1xuICAgICAgICAgICAgZCA9IGM7XG4gICAgICAgICAgICBjID0gUk9UTChiLCAzMCkgPj4+IDA7XG4gICAgICAgICAgICBiID0gYTtcbiAgICAgICAgICAgIGEgPSBUO1xuICAgICAgICB9XG4gICAgICAgIEhbMF0gPSAoSFswXSArIGEpID4+PiAwO1xuICAgICAgICBIWzFdID0gKEhbMV0gKyBiKSA+Pj4gMDtcbiAgICAgICAgSFsyXSA9IChIWzJdICsgYykgPj4+IDA7XG4gICAgICAgIEhbM10gPSAoSFszXSArIGQpID4+PiAwO1xuICAgICAgICBIWzRdID0gKEhbNF0gKyBlKSA+Pj4gMDtcbiAgICB9XG4gICAgcmV0dXJuIFVpbnQ4QXJyYXkub2YoSFswXSA+PiAyNCwgSFswXSA+PiAxNiwgSFswXSA+PiA4LCBIWzBdLCBIWzFdID4+IDI0LCBIWzFdID4+IDE2LCBIWzFdID4+IDgsIEhbMV0sIEhbMl0gPj4gMjQsIEhbMl0gPj4gMTYsIEhbMl0gPj4gOCwgSFsyXSwgSFszXSA+PiAyNCwgSFszXSA+PiAxNiwgSFszXSA+PiA4LCBIWzNdLCBIWzRdID4+IDI0LCBIWzRdID4+IDE2LCBIWzRdID4+IDgsIEhbNF0pO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gc2hhMTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtcblx0UHJvcGVydHlUcmVlLFxufSBmcm9tICdAaW5kdWN0aXZlYXV0b21hdGlvbi9wZXJzcGVjdGl2ZS1jbGllbnQnO1xuaW1wb3J0IHR5cGUge1xuXHRDb21wb25lbnRQcm9wc1xuXHQsQ29tcG9uZW50TWV0YVxuXHQsUENvbXBvbmVudFxuXHQsU2l6ZU9iamVjdFxufSBmcm9tICdAaW5kdWN0aXZlYXV0b21hdGlvbi9wZXJzcGVjdGl2ZS1jbGllbnQnO1xuXG4vLyBpbXBvcnQgeyB1c2VDcmVhdGVDb250ZXh0IH0gZnJvbSBcInNyYy91dGlscy9jcmVhdGVDb250ZXh0XCI7XG5pbXBvcnQgeyBQYXJhbWV0ZXJzTGlzdFN0YXRlLCBQYXJhbUl0ZW0gfSBmcm9tIFwiLi4vYXBpL3R5cGVzXCI7XG5pbXBvcnQgeyBwYXJhbWV0ZXJJbml0aWFsU3RhdGUgfSBmcm9tIFwiLi4vYXBpL2luaXRpYWxTdGF0ZVwiO1xuXG4vLyBUeXBlc1xuXG4vLyB0eXBlIEVkaXRQYXJhbUlucHV0Q29udGV4dFR5cGUgPSB7XG4vLyBcdHBhcmFtSXRlbTogUGFyYW1JdGVtO1xuLy8gXHRzZXRQYXJhbUl0ZW06IChwYXJhbUl0ZW06IFBhcmFtSXRlbSkgPT4gdm9pZDtcbi8vIH1cbi8vIHR5cGUgRWRpdFBhcmFtSW5wdXRDb250ZXh0VHlwZSA9IHtcbi8vIFx0c3RhdGU6IFBhcmFtSXRlbVtdO1xuLy8gXHRyZWR1Y2VyOiBVc2VQYXJhbWV0ZXJSZWR1Y2VyO1xuLy8gfVxuXG50eXBlIFBhcmFtZXRlcnNMaXN0Q29tcG9uZW50UHJvcHMgPSB7XG5cdHBhcmFtZXRlcnM6IFBhcmFtSXRlbVtdXG59XG5jb25zdCBpbml0UGFyYW1ldGVycyA9IFt7XG5cdGxhYmVsOntcblx0XHR0ZXh0OiBcInRleHRcIlxuXHR9LFxuXHRpbnB1dDoge1xuXHRcdHZhbHVlOiBudWxsLFxuXHRcdHBsYWNlaG9sZGVyOiBcIkVudGVyIGEgTnVtYmVyXCJcblx0fVxufV1cblxuLy8gY29uc3QgW0VkaXRQYXJhbUlucHV0Q29udGV4dFByb3ZpZGVyLCB1c2VFZGl0UGFyYW1JbnB1dENvbnRleHRdID1cbi8vIHVzZUNyZWF0ZUNvbnRleHQ8RWRpdFBhcmFtSW5wdXRDb250ZXh0VHlwZT4oXCJFZGl0UGFyYW1JbnB1dENvbnRleHRcIik7XG5cbmV4cG9ydCBjb25zdCBDT01QT05FTlRfVFlQRSA9IFwiaG1pLmlucHV0LlBhcmFtZXRlckxpc3RcIjtcblxuZXhwb3J0IGNvbnN0IFBhcmFtZXRlckxpc3RDb21wb25lbnQgPSAocHJvcHM6IENvbXBvbmVudFByb3BzPFBhcmFtZXRlcnNMaXN0Q29tcG9uZW50UHJvcHM+KSA9PiB7XG5jb25zdCB0cmFuc2Zvcm1lZFByb3BzID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG5cdGNvbnN0IHsgcGFyYW1ldGVyc30gPSBwcm9wcy5wcm9wcyB8fCBpbml0UGFyYW1ldGVyc1xuXHRyZXR1cm4gcGFyYW1ldGVyc1xufSwgW3Byb3BzLnByb3BzLnBhcmFtZXRlcnNdKVxuXG5cblxuXHRcdHJldHVybihcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiZGlzcGxheS1mbGV4LWNvbHVtblwiXG5cdFx0XHQ+XG5cdFx0e3RyYW5zZm9ybWVkUHJvcHMubWFwKChwYXJhbTogUGFyYW1JdGVtLCBpbmRleDogbnVtYmVyKT0+e1xuXHRcdFx0Y29uc3QgeyBsYWJlbCxpbnB1dH0gPSBwYXJhbTtcblx0XHRcdGNvbnNvbGUubG9nKGlucHV0LnZhbHVlKTtcblxuXHRcdFx0cmV0dXJuIChcblx0XHRcdFx0PGxhYmVsIGtleT17YCR7bGFiZWwudGV4dH0tcGFyYW1ldGVyJHtpbmRleH1gfWNsYXNzTmFtZT1cImZpZWxkIHNtYWxsXCI+XG5cdFx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPVwibGFiZWxcIj57bGFiZWwudGV4dH08L3NwYW4+XG5cdFx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPVwiZXVcIj57aW5wdXQuZXV9PC9zcGFuPlxuXHRcdFx0XHRcdDxpbnB1dCB0eXBlPVwidGV4dFwiXG5cdFx0XHRcdFx0aWQ9e2Ake2xhYmVsLnRleHR9LXBhcmFtZXRlciR7aW5kZXh9YH1cblx0XHRcdFx0XHRpbnB1dE1vZGU9e2lucHV0LmlucHV0bW9kZX1cblx0XHRcdFx0XHRwYXR0ZXJuPXtpbnB1dC5wYXR0ZXJuIHx8IFwiWzAtOV0qXCJ9XG5cdFx0XHRcdFx0cGxhY2Vob2xkZXI9e2lucHV0LnBsYWNlaG9sZGVyfVxuXHRcdFx0XHRcdGRpc2FibGVkPXshaW5wdXQuZWRpdGFibGV9XG5cdFx0XHRcdFx0dmFsdWU9e2lucHV0LnZhbHVlfVxuXHRcdFx0XHRcdG9uQ2hhbmdlPXtcblx0XHRcdFx0XHRcdChlKSA9PiB7XG5cdFx0XHRcdFx0XHRcdC8vIGNvbnNvbGUubG9nKGBPbiBjaGFuZ2UgZXZlbnQgJHtlLmN1cnJlbnRUYXJnZXQudmFsdWV9YCk7XG5cdFx0XHRcdFx0XHRcdHByb3BzLnN0b3JlLnByb3BzLndyaXRlKFxuXHRcdFx0XHRcdFx0XHRcdGBwYXJhbWV0ZXJzWyR7aW5kZXh9XS5pbnB1dC52YWx1ZWAsXG5cdFx0XHRcdFx0XHRcdFx0ZS5jdXJyZW50VGFyZ2V0LnZhbHVlXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdC8vIHVwZGF0ZVZhbHVlKHBhcnNlRmxvYXQocGFyc2VGbG9hdChlLnRhcmdldC52YWx1ZSkudG9GaXhlZCgyKSksIGluZGV4KTtcblx0XHRcdFx0XHR9fVxuXHRcdFx0XHRcdC8+XG5cdFx0XHRcdDwvbGFiZWw+XG5cdFx0XHRcdFx0KVxuXG5cdFx0fSlcblx0fTwvZGl2PlxuXHRcdClcblxufTtcblxuZXhwb3J0IGNsYXNzIFBhcmFtZXRlckxpc3RDb21wb25lbnRNZXRhIGltcGxlbWVudHMgQ29tcG9uZW50TWV0YSB7XG5cdGdldENvbXBvbmVudFR5cGUoKTpzdHJpbmd7XG5yZXR1cm4gQ09NUE9ORU5UX1RZUEVcblx0fVxuXG5cdGdldERlZmF1bHRTaXplKCk6IFNpemVPYmplY3R7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHdpZHRoOiAxMjAsXG5cdFx0XHRoZWlnaHQ6IDI0MCxcblx0XHR9XG5cdH1cblxuXHRnZXRQcm9wc1JlZHVjZXIodHJlZTogUHJvcGVydHlUcmVlKTogUGFyYW1ldGVyc0xpc3RTdGF0ZSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHBhcmFtZXRlcnM6dHJlZS5yZWFkICgncGFyYW1ldGVycycsIHBhcmFtZXRlckluaXRpYWxTdGF0ZSlcblx0XHR9XG5cdH1cblxuXHRnZXRWaWV3Q29tcG9uZW50KCk6IFBDb21wb25lbnQge1xuXHRcdHJldHVybiBQYXJhbWV0ZXJMaXN0Q29tcG9uZW50IGFzIFBDb21wb25lbnRcblx0fVxufVxuIiwiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB0eXBlIENvbW1hbmRWYWx2ZU1wUHJvcHMgfSBmcm9tIFwiLi4vYXBpL3R5cGVzXCI7XG4vLyBpbXBvcnQgeyBJY29uQXV0bywgSWNvbkhhbmRDbGljayB9IGZyb20gJy4uL3V0aWxzL2ljb25zJztcbmltcG9ydCB7IFByb3BlcnR5VHJlZSB9IGZyb20gXCJAaW5kdWN0aXZlYXV0b21hdGlvbi9wZXJzcGVjdGl2ZS1jbGllbnRcIjtcbmltcG9ydCB0eXBlIHtcblx0Q29tcG9uZW50UHJvcHMsXG5cdENvbXBvbmVudE1ldGEsXG5cdFBDb21wb25lbnQsXG5cdFNpemVPYmplY3QsXG59IGZyb20gXCJAaW5kdWN0aXZlYXV0b21hdGlvbi9wZXJzcGVjdGl2ZS1jbGllbnRcIjsgLy8nQGluZHVjdGl2ZWF1dG9tYXRpb24vcGVyc3BlY3RpdmUtY2xpZW50Jztcbi8vIGltcG9ydCB7IGluaXRpYWxDb250cm9sU3RhdGUgfSBmcm9tIFwiLi4vYXBpL2luaXRpYWxTdGF0ZVwiO1xuaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VWYWx2ZU1wQ29tbWFuZFJlZHVjZXIgfSBmcm9tIFwiLi4vYXBpL2hvb2tzXCI7XG5cbmV4cG9ydCBjb25zdCBDT01QT05FTlRfVFlQRSA9IFwiaG1pLmlucHV0LkNvbW1hbmRWYWx2ZU1wXCI7XG5cbmNvbnN0IGFyZUVxdWFsID0gKFxuXHRwcmV2UHJvcHM6IENvbXBvbmVudFByb3BzPENvbW1hbmRWYWx2ZU1wUHJvcHM+LFxuXHRuZXh0UHJvcHM6IENvbXBvbmVudFByb3BzPENvbW1hbmRWYWx2ZU1wUHJvcHM+XG4pID0+IHtcblx0Ly8gcmV0dXJuIHRydWUgaWYgcHJvcHMgYXJlIGVxdWFsLCBmYWxzZSBpZiByZS1yZW5kZXIgaXMgbmVlZGVkXG5cdHJldHVybiBwcmV2UHJvcHMucHJvcHMgPT09IG5leHRQcm9wcy5wcm9wcztcbn07XG5cbi8qKlxuICogVmFsdmUgY29tcG9uZW50IGNsYXNzLlxuICogRXh0ZW5kcyB0aGUgYmFzZSBDb21wb25lbnQgY2xhc3MgZnJvbSBQZXJzcGVjdGl2ZSwgdHlwZWQgd2l0aCBWYWx2ZVByb3BzLlxuICogUHJvdmlkZXMgYSBjdXN0b21pemFibGUgdmFsdmUgd2l0aCBwcm9wZXIgaGFuZGxpbmcgb2YgZGVzaWduZXIvcHJldmlldyBtb2Rlcy5cblxuICovXG5leHBvcnQgY29uc3QgQ29tbWFuZFZhbHZlTXAgPSBSZWFjdC5tZW1vKFxuXHQocHJvcHM6IENvbXBvbmVudFByb3BzPENvbW1hbmRWYWx2ZU1wUHJvcHM+KSA9PiB7XG5cdFx0Y29uc3QgeyBzdGF0ZSwgcmVkdWNlciB9ID0gdXNlVmFsdmVNcENvbW1hbmRSZWR1Y2VyKCk7XG5cdFx0Ly8gY29uc3QgdHJlZSA9IHByb3BzLnN0b3JlLnByb3BzXG5cblx0XHR1c2VFZmZlY3QoKCkgPT4ge1xuXHRcdFx0Ly8gU3Vic2NyaWJlIHRvIGNoYW5nZXMgb24gdGhlIFwiY29tbWFuZFwiIHByb3BlcnR5XG5cdFx0XHRjb25zdCB1bnN1YnNjcmliZSA9IHByb3BzLnN0b3JlLnByb3BzLnN1YnNjcmliZSgodHJlZTogUHJvcGVydHlUcmVlKSA9PiB7XG5cdFx0XHRcdC8vIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIHdoZW5ldmVyIFwiY29tbWFuZFwiIGNoYW5nZXNcblx0XHRcdFx0Y29uc3QgY29tbWFuZCA9IHRyZWUucmVhZChcImNvbW1hbmRcIik7XG5cdFx0XHRcdGNvbnN0IHsgbWFpbiwgdXBwZXJTZWF0LCBsb3dlclNlYXQgfSA9IGNvbW1hbmQ7XG5cdFx0XHRcdC8vIFlvdSBjYW4gdXBkYXRlIGxvY2FsIHN0YXRlIG9yIHBlcmZvcm0gb3RoZXIgYWN0aW9ucyBoZXJlXG5cdFx0XHRcdC8vIFVwZGF0ZSBtYWluIHN0YXRlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoc3RhdGUuY29tbWFuZD8ubWFpbiAmJiBtYWluKSB7XG5cdFx0XHRcdFx0aWYgKG1haW4uYXV0b01hbnVhbCAhPT0gc3RhdGUuY29tbWFuZC5tYWluLmF1dG9NYW51YWwpIHtcblx0XHRcdFx0XHRcdHJlZHVjZXIudXBkYXRlQXV0b01hblNlbGVjdGlvbighbWFpbi5hdXRvTWFudWFsID8gXCJhdXRvXCIgOiBcIm1hbnVhbFwiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKG1haW4uYWN0aXZhdGlvbiAhPT0gc3RhdGUuY29tbWFuZC5tYWluLmFjdGl2YXRpb24pIHtcblx0XHRcdFx0XHRcdGlmICghbWFpbi5hY3RpdmF0aW9uKSB7XG5cdFx0XHRcdFx0XHRcdHJlZHVjZXIudXBkYXRlTWFpbk1hbnVhbE9mZigpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChtYWluLmFjdGl2YXRpb24pIHtcblx0XHRcdFx0XHRcdFx0cmVkdWNlci51cGRhdGVNYWluTWFudWFsT24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBVcGRhdGUgbG93ZXJTZWF0IHN0YXRlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoc3RhdGUuY29tbWFuZD8ubG93ZXJTZWF0ICYmIGxvd2VyU2VhdCkge1xuXHRcdFx0XHRcdGlmIChsb3dlclNlYXQuYWN0aXZhdGlvbiAhPT0gc3RhdGUuY29tbWFuZC5sb3dlclNlYXQuYWN0aXZhdGlvbikge1xuXHRcdFx0XHRcdFx0aWYgKCFsb3dlclNlYXQuYWN0aXZhdGlvbikge1xuXHRcdFx0XHRcdFx0XHRyZWR1Y2VyLnVwZGF0ZUxzbE1hbnVhbE9mZigpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChsb3dlclNlYXQuYWN0aXZhdGlvbikge1xuXHRcdFx0XHRcdFx0XHRyZWR1Y2VyLnVwZGF0ZUxzbE1hbnVhbE9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIFVwZGF0ZSB1cHBlclNlYXQgc3RhdGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmIChzdGF0ZS5jb21tYW5kPy51cHBlclNlYXQgJiYgdXBwZXJTZWF0KSB7XG5cdFx0XHRcdFx0aWYgKHVwcGVyU2VhdC5hY3RpdmF0aW9uICE9PSBzdGF0ZS5jb21tYW5kLnVwcGVyU2VhdC5hY3RpdmF0aW9uKSB7XG5cdFx0XHRcdFx0XHRpZiAoIXVwcGVyU2VhdC5hY3RpdmF0aW9uKSB7XG5cdFx0XHRcdFx0XHRcdHJlZHVjZXIudXBkYXRlVXNsTWFudWFsT2ZmKCk7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHVwcGVyU2VhdC5hY3RpdmF0aW9uKSB7XG5cdFx0XHRcdFx0XHRcdHJlZHVjZXIudXBkYXRlVXNsTWFudWFsT24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29uc29sZS5sb2coXCJjb21tYW5kIGNoYW5nZWQ6XCIsIGNvbW1hbmQpO1xuXHRcdFx0fSk7XG5cblx0XHRcdC8vIENsZWFudXAgc3Vic2NyaXB0aW9uIG9uIHVubW91bnRcblx0XHRcdHJldHVybiAoKSA9PiB7XG5cdFx0XHRcdGlmICh0eXBlb2YgdW5zdWJzY3JpYmUgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdHVuc3Vic2NyaWJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fSwgW3Byb3BzLnN0b3JlLnByb3BzXSk7XG5cblx0XHRjb25zb2xlLmxvZyhgcHJvcHMuc3RvcmUuYWRkcmVzc1BhdGggJHtwcm9wcy5zdG9yZS5hZGRyZXNzUGF0aH1gKTtcblx0XHRjb25zb2xlLmxvZyhgcHJvcHMuc3RvcmUuaXNEaXJ0eSAke3Byb3BzLnN0b3JlLnByb3BzLmlzRGlydHkoKX1gKTtcblxuXHRcdGNvbnN0IHsgbWFpbiwgdXBwZXJTZWF0LCBsb3dlclNlYXQsIGludGVybG9ja3MgfSA9IHN0YXRlLmNvbW1hbmQgfHwge307XG5cblx0XHRjb25zdCBpc0ludGVybG9ja2VkID0gKGludGVybG9ja3M6IGJvb2xlYW5bXSk6IGJvb2xlYW4gPT4ge1xuXHRcdFx0cmV0dXJuIGludGVybG9ja3MuaW5jbHVkZXModHJ1ZSwgMCk7XG5cdFx0fTtcblxuXHRcdGNvbnN0IGhhbmRsZU1haW5BdXRvTWFudWFsU2VsZWN0aW9uID0gKG1vZGU6IFwiYXV0b1wiIHwgXCJtYW51YWxcIik6IHZvaWQgPT4ge1xuXHRcdFx0cmVkdWNlci51cGRhdGVBdXRvTWFuU2VsZWN0aW9uKG1vZGUpO1xuXHRcdFx0aWYgKG1vZGUgPT09IFwiYXV0b1wiKSB7XG5cdFx0XHRcdHByb3BzLnN0b3JlLnByb3BzPy53cml0ZShcImNvbW1hbmQubWFpbi5hdXRvTWFudWFsXCIsIGZhbHNlKTsgLy8gZmFsc2UgPSBhdXRvXG5cdFx0XHR9IGVsc2UgaWYgKG1vZGUgPT09IFwibWFudWFsXCIpIHtcblx0XHRcdFx0cHJvcHMuc3RvcmUucHJvcHM/LndyaXRlKFwiY29tbWFuZC5tYWluLmF1dG9NYW51YWxcIiwgdHJ1ZSk7IC8vIHRydWUgPSBtYW51YWxcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0Y29uc3QgaGFuZGxlTWFpbk1hbnVhbE9uID0gKCkgPT4ge1xuXHRcdFx0cmVkdWNlci51cGRhdGVNYWluTWFudWFsT24oKTtcblx0XHRcdHByb3BzLnN0b3JlLnByb3BzPy53cml0ZShcImNvbW1hbmQubWFpbi5hY3RpdmF0aW9uXCIsIHRydWUpO1xuXHRcdH07XG5cdFx0Y29uc3QgaGFuZGxlTWFpbk1hbnVhbE9mZiA9ICgpID0+IHtcblx0XHRcdHJlZHVjZXIudXBkYXRlTWFpbk1hbnVhbE9mZigpO1xuXHRcdFx0cHJvcHMuc3RvcmUucHJvcHM/LndyaXRlKFwiY29tbWFuZC5tYWluLmFjdGl2YXRpb25cIiwgZmFsc2UpO1xuXHRcdH07XG5cdFx0Y29uc3QgaGFuZGxlVXNsTWFudWFsT24gPSAoKSA9PiB7XG5cdFx0XHRyZWR1Y2VyLnVwZGF0ZVVzbE1hbnVhbE9uKCk7XG5cdFx0XHRwcm9wcy5zdG9yZS5wcm9wcz8ud3JpdGUoXCJjb21tYW5kLnVwcGVyU2VhdC5hY3RpdmF0aW9uXCIsIHRydWUpO1xuXHRcdH07XG5cdFx0Y29uc3QgaGFuZGxlVXNsTWFudWFsT2ZmID0gKCkgPT4ge1xuXHRcdFx0cmVkdWNlci51cGRhdGVVc2xNYW51YWxPZmYoKTtcblx0XHRcdHByb3BzLnN0b3JlLnByb3BzPy53cml0ZShcImNvbW1hbmQudXBwZXJTZWF0LmFjdGl2YXRpb25cIiwgZmFsc2UpO1xuXHRcdH07XG5cdFx0Y29uc3QgaGFuZGxlTHNsTWFudWFsT24gPSAoKSA9PiB7XG5cdFx0XHRyZWR1Y2VyLnVwZGF0ZUxzbE1hbnVhbE9uKCk7XG5cdFx0XHRwcm9wcy5zdG9yZS5wcm9wcz8ud3JpdGUoXCJjb21tYW5kLmxvd2VyU2VhdC5hY3RpdmF0aW9uXCIsIHRydWUpO1xuXHRcdH07XG5cdFx0Y29uc3QgaGFuZGxlTHNsTWFudWFsT2ZmID0gKCkgPT4ge1xuXHRcdFx0cmVkdWNlci51cGRhdGVMc2xNYW51YWxPZmYoKTtcblx0XHRcdHByb3BzLnN0b3JlLnByb3BzPy53cml0ZShcImNvbW1hbmQubG93ZXJTZWF0LmFjdGl2YXRpb25cIiwgZmFsc2UpO1xuXHRcdH07XG5cblx0XHRyZXR1cm4gKFxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJobWktY29tcG9uZW50LWNvbW1hbmQtdmFsdmUtbXAgaG1pLWNvbXBvbmVudC1jb21tYW5kLXZhbHZlLW1wX19ncmlkXCI+XG5cdFx0XHRcdDxsYWJlbCBjbGFzc05hbWU9XCJtYWluLWxhYmVsXCI+e21haW4/LmxhYmVsfTwvbGFiZWw+XG5cdFx0XHRcdDxkaXYgcm9sZT1cImdyb3VwXCIgY2xhc3NOYW1lPVwiYnV0dG9uLWdyb3VwIG91dGxpbmVkIG1haW4tYXV0by1tYW51YWxcIj5cblx0XHRcdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdFx0XHRjbGFzc05hbWU9e2BidXR0b24gb3V0bGluZWQgJHshbWFpbj8uYXV0b01hbnVhbCA/IFwic2VsZWN0ZWRcIiA6IFwiXCJ9YH1cblx0XHRcdFx0XHRcdGRpc2FibGVkPXtpc0ludGVybG9ja2VkKGludGVybG9ja3M/Lm1haW4gfHwgW10pfVxuXHRcdFx0XHRcdFx0b25DbGljaz17KCkgPT4gaGFuZGxlTWFpbkF1dG9NYW51YWxTZWxlY3Rpb24oXCJhdXRvXCIpfVxuXHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdEF1dG8gey8qIDxJY29uQXV0byAvPiAqL31cblx0XHRcdFx0XHQ8L2J1dHRvbj5cblx0XHRcdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdFx0XHRjbGFzc05hbWU9e2BidXR0b24gb3V0bGluZWQgJHttYWluPy5hdXRvTWFudWFsID8gXCJzZWxlY3RlZFwiIDogXCJcIn1gfVxuXHRcdFx0XHRcdFx0ZGlzYWJsZWQ9e2lzSW50ZXJsb2NrZWQoaW50ZXJsb2Nrcz8ubWFpbiB8fCBbXSl9XG5cdFx0XHRcdFx0XHRvbkNsaWNrPXsoKSA9PiBoYW5kbGVNYWluQXV0b01hbnVhbFNlbGVjdGlvbihcIm1hbnVhbFwiKX1cblx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRNYW51YWxcblx0XHRcdFx0XHRcdHsvKiA8SWNvbkhhbmRDbGljayAvPiAqL31cblx0XHRcdFx0XHQ8L2J1dHRvbj5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdDxkaXYgcm9sZT1cImdyb3VwXCIgY2xhc3NOYW1lPVwiYnV0dG9uLWdyb3VwIG91dGxpbmVkIG1haW4tb24tb2ZmXCI+XG5cdFx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lPXtgYnV0dG9uIG91dGxpbmVkICR7bWFpbj8uYWN0aXZhdGlvbiA/IFwic2VsZWN0ZWRcIiA6IFwiXCJ9YH1cblx0XHRcdFx0XHRcdGRpc2FibGVkPXtcblx0XHRcdFx0XHRcdFx0aXNJbnRlcmxvY2tlZChpbnRlcmxvY2tzPy5tYWluIHx8IFtdKSB8fCAhbWFpbj8uYXV0b01hbnVhbFxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0b25DbGljaz17aGFuZGxlTWFpbk1hbnVhbE9ufVxuXHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdE9uIHsvKiA8SWNvbkF1dG8gLz4gKi99XG5cdFx0XHRcdFx0PC9idXR0b24+XG5cdFx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lPXtgYnV0dG9uIG91dGxpbmVkICR7IW1haW4/LmFjdGl2YXRpb24gPyBcInNlbGVjdGVkXCIgOiBcIlwifWB9XG5cdFx0XHRcdFx0XHRkaXNhYmxlZD17XG5cdFx0XHRcdFx0XHRcdGlzSW50ZXJsb2NrZWQoaW50ZXJsb2Nrcz8ubWFpbiB8fCBbXSkgfHwgIW1haW4/LmF1dG9NYW51YWxcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG9uQ2xpY2s9e2hhbmRsZU1haW5NYW51YWxPZmZ9XG5cdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0T2ZmXG5cdFx0XHRcdFx0XHR7LyogPEljb25IYW5kQ2xpY2sgLz4gKi99XG5cdFx0XHRcdFx0PC9idXR0b24+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8bGFiZWwgY2xhc3NOYW1lPVwidXBwZXItc2VhdC1sYWJlbFwiPnt1cHBlclNlYXQ/LmxhYmVsfTwvbGFiZWw+XG5cdFx0XHRcdDxkaXYgcm9sZT1cImdyb3VwXCIgY2xhc3NOYW1lPVwiYnV0dG9uLWdyb3VwIG91dGxpbmVkIHVwcGVyLXNlYXQtb24tb2ZmXCI+XG5cdFx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lPXtgYnV0dG9uIG91dGxpbmVkICR7XG5cdFx0XHRcdFx0XHRcdHVwcGVyU2VhdD8uYWN0aXZhdGlvbiA/IFwic2VsZWN0ZWRcIiA6IFwiXCJcblx0XHRcdFx0XHRcdH1gfVxuXHRcdFx0XHRcdFx0ZGlzYWJsZWQ9e1xuXHRcdFx0XHRcdFx0XHRpc0ludGVybG9ja2VkKGludGVybG9ja3M/LnVwcGVyU2VhdCB8fCBbXSkgfHwgIW1haW4/LmF1dG9NYW51YWxcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG9uQ2xpY2s9e2hhbmRsZVVzbE1hbnVhbE9ufVxuXHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdE9uIHsvKiA8SWNvbkF1dG8gLz4gKi99XG5cdFx0XHRcdFx0PC9idXR0b24+XG5cdFx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lPXtgYnV0dG9uIG91dGxpbmVkICR7XG5cdFx0XHRcdFx0XHRcdCF1cHBlclNlYXQ/LmFjdGl2YXRpb24gPyBcInNlbGVjdGVkXCIgOiBcIlwiXG5cdFx0XHRcdFx0XHR9YH1cblx0XHRcdFx0XHRcdGRpc2FibGVkPXtcblx0XHRcdFx0XHRcdFx0aXNJbnRlcmxvY2tlZChpbnRlcmxvY2tzPy51cHBlclNlYXQgfHwgW10pIHx8ICFtYWluPy5hdXRvTWFudWFsXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRvbkNsaWNrPXtoYW5kbGVVc2xNYW51YWxPZmZ9XG5cdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0T2ZmXG5cdFx0XHRcdFx0XHR7LyogPEljb25IYW5kQ2xpY2sgLz4gKi99XG5cdFx0XHRcdFx0PC9idXR0b24+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8bGFiZWwgY2xhc3NOYW1lPVwibG93ZXItc2VhdC1sYWJlbFwiPntsb3dlclNlYXQ/LmxhYmVsfTwvbGFiZWw+XG5cdFx0XHRcdDxkaXYgcm9sZT1cImdyb3VwXCIgY2xhc3NOYW1lPVwiYnV0dG9uLWdyb3VwIG91dGxpbmVkIGxvd2VyLXNlYXQtb24tb2ZmXCI+XG5cdFx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lPXtgYnV0dG9uIG91dGxpbmVkICR7XG5cdFx0XHRcdFx0XHRcdGxvd2VyU2VhdD8uYWN0aXZhdGlvbiA/IFwic2VsZWN0ZWRcIiA6IFwiXCJcblx0XHRcdFx0XHRcdH1gfVxuXHRcdFx0XHRcdFx0ZGlzYWJsZWQ9e1xuXHRcdFx0XHRcdFx0XHRpc0ludGVybG9ja2VkKGludGVybG9ja3M/Lmxvd2VyU2VhdCB8fCBbXSkgfHwgIW1haW4/LmF1dG9NYW51YWxcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG9uQ2xpY2s9e2hhbmRsZUxzbE1hbnVhbE9ufVxuXHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdE9uIHsvKiA8SWNvbkF1dG8gLz4gKi99XG5cdFx0XHRcdFx0PC9idXR0b24+XG5cdFx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lPXtgYnV0dG9uIG91dGxpbmVkICR7XG5cdFx0XHRcdFx0XHRcdCFsb3dlclNlYXQ/LmFjdGl2YXRpb24gPyBcInNlbGVjdGVkXCIgOiBcIlwiXG5cdFx0XHRcdFx0XHR9YH1cblx0XHRcdFx0XHRcdGRpc2FibGVkPXtcblx0XHRcdFx0XHRcdFx0aXNJbnRlcmxvY2tlZChpbnRlcmxvY2tzPy5sb3dlclNlYXQgfHwgW10pIHx8ICFtYWluPy5hdXRvTWFudWFsXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRvbkNsaWNrPXtoYW5kbGVMc2xNYW51YWxPZmZ9XG5cdFx0XHRcdFx0XHR2YWx1ZT17XCJ0cnVlXCJ9XG5cdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0T2ZmXG5cdFx0XHRcdFx0XHR7LyogPEljb25IYW5kQ2xpY2sgLz4gKi99XG5cdFx0XHRcdFx0PC9idXR0b24+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0PC9kaXY+XG5cdFx0KTtcblx0fSxcblx0YXJlRXF1YWxcbik7XG5cbi8vIFRoaXMgaXMgdGhlIGFjdHVhbCB0aGluZyB0aGF0IGdldHMgcmVnaXN0ZXJlZCB3aXRoIHRoZSBjb21wb25lbnQgcmVnaXN0cnkuXG5leHBvcnQgY2xhc3MgQ29tbWFuZFZhbHZlTXBNZXRhIGltcGxlbWVudHMgQ29tcG9uZW50TWV0YSB7XG5cdGdldENvbXBvbmVudFR5cGUoKTogc3RyaW5nIHtcblx0XHRyZXR1cm4gQ09NUE9ORU5UX1RZUEU7XG5cdH1cblxuXHQvKipcblx0ICogQHJldHVybnMgVGhlIFJlYWN0IGNvbXBvbmVudCBjbGFzcy5cblx0ICovXG5cdGdldFZpZXdDb21wb25lbnQoKTogUENvbXBvbmVudCB7XG5cdFx0cmV0dXJuIENvbW1hbmRWYWx2ZU1wO1xuXHR9XG5cblx0Z2V0RGVmYXVsdFNpemUoKTogU2l6ZU9iamVjdCB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHdpZHRoOiAyODAsXG5cdFx0XHRoZWlnaHQ6MTQwLFxuXHRcdH07XG5cdH1cblxuXHQvLyBJbnZva2VkIHdoZW4gYW4gdXBkYXRlIHRvIHRoZSBQcm9wZXJ0eVRyZWUgaGFzIG9jY3VycmVkLFxuXHQvLyBlZmZlY3RpdmVseSBtYXBwaW5nIHRoZSB2YWx2ZVN0YXR1cyBvZiB0aGUgdHJlZSB0byBjb21wb25lbnQgcHJvcHMuXG5cdGdldFByb3BzUmVkdWNlcih0cmVlOiBQcm9wZXJ0eVRyZWUpOiBDb21tYW5kVmFsdmVNcFByb3BzIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Y29tbWFuZDoge1xuXHRcdFx0XHRpbnRlcmxvY2tzOiB7XG5cdFx0XHRcdFx0bWFpbjogdHJlZS5yZWFkQXJyYXkoXCJjb21tYW5kLmludGVybG9ja3MubWFpblwiKSxcblx0XHRcdFx0XHR1cHBlclNlYXQ6IHRyZWUucmVhZEFycmF5KFwiY29tbWFuZC5pbnRlcmxvY2tzLnVwcGVyU2VhdFwiKSxcblx0XHRcdFx0XHRsb3dlclNlYXQ6IHRyZWUucmVhZEFycmF5KFwiY29tbWFuZC5pbnRlcmxvY2tzLmxvd2VyU2VhdFwiKSxcblx0XHRcdFx0fSxcblx0XHRcdFx0bWFpbjoge1xuXHRcdFx0XHRcdGxhYmVsOiB0cmVlLnJlYWRTdHJpbmcoXCJjb21tYW5kcy5tYWluLmxhYmVsXCIsIFwiXCIpLFxuXHRcdFx0XHRcdGF1dG9NYW51YWw6IHRyZWUucmVhZEJvb2xlYW4oXCJjb21tYW5kLm1haW4uYXV0b01hbnVhbFwiLCBmYWxzZSksXG5cdFx0XHRcdFx0YWN0aXZhdGlvbjogdHJlZS5yZWFkQm9vbGVhbihcImNvbW1hbmQubWFpbi5hY3RpdmF0aW9uXCIsIGZhbHNlKSxcblx0XHRcdFx0fSxcblx0XHRcdFx0dXBwZXJTZWF0OiB7XG5cdFx0XHRcdFx0bGFiZWw6IHRyZWUucmVhZFN0cmluZyhcImNvbW1hbmRzLnVwcGVyU2VhdC5sYWJlbFwiLCBcIlwiKSxcblx0XHRcdFx0XHRhY3RpdmF0aW9uOiB0cmVlLnJlYWRCb29sZWFuKFwiY29tbWFuZC51cHBlclNlYXQuYWN0aXZhdGlvblwiLCBmYWxzZSksXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGxvd2VyU2VhdDoge1xuXHRcdFx0XHRcdGxhYmVsOiB0cmVlLnJlYWRTdHJpbmcoXCJjb21tYW5kcy5sb3dlclNlYXQubGFiZWxcIiwgXCJcIiksXG5cdFx0XHRcdFx0YWN0aXZhdGlvbjogdHJlZS5yZWFkQm9vbGVhbihcImNvbW1hbmQubG93ZXJTZWF0LmFjdGl2YXRpb25cIiwgZmFsc2UpLFxuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHR9O1xuXHR9XG59XG5cbi8qKlxuICpcbmdldFByb3BzUmVkdWNlcih0cmVlOiBQcm9wZXJ0eVRyZWUpOiBNeVByb3BUeXBlIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAvLyB3aWxsIGdpdmUgdGhlIHByb3BlcnR5IHRyZWUgYXMgYSBwbGFpbiBqcyBvYmplY3QsIGluc3RlYWQgb2YgYW4gaW5zdGFuY2Ugb2YgUHJvcGVydHlUcmVlXG4gICAgICAgIC8vIHRoaXMgd291bGQgbGV0IHlvdSByZWFkIHRoZSB2YWx1ZSBvZiB0aGUgdHJlZSB2aWEgYHRoaXMucHJvcHMucHJvcHMuanNvbmAuICBTYW1lIHJlc3VsdCBvY2N1cnMgaWZcbiAgICAgICAgLy8gY2FsbGluZyB0cmVlLnJlYWQoKSwgd2l0aG91dCBwYXNzaW5nIGEgcGF0aCBwYXJhbWV0ZXIuXG4gICAgICAganNvbjogdHJlZS50b1BsYWluT2JqZWN0KClcblxuXG4gICAgICAgLy8gSWYgeW91IGhhZCB0byB3cml0ZSB0byB0aGUgdHJlZSdzICdkYXRhJyBub2RlLCBwYXNzaW5nIGluIGEgY2FsbGJhY2sgZnVuY3Rpb24gaW5zdGVhZCBvZiB0aGUgYWN0dWFsXG4gICAgICAgLy8gUHJvcGVydHlUcmVlIHdpbGwgc2ltcGxpZnkgdW5pdCB0ZXN0YWJpbGl0eSBvZiB5b3VyIGNvbXBvbmVudCBvdXRzaWRlIG9mIHBlcnNwZWN0aXZlJ3MgZW52aXJvbm1lbnQuXG4gICAgICAgLy8gWW91IHdvdWxkIGNhbGwgdGhpcyB2aWEgdGhpcy5wcm9wcy5wcm9wcy53cml0ZURhdGEoc29tZU5ld0RhdGEpXG4gICAgICAgd3JpdGVEYXRhOiAobmV3SnNvbikgLT4gdHJlZS53cml0ZShcImRhdGFcIiwgbmV3SnNvbilcbiAgICB9XG59XG4gKi9cbiIsIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtcblx0SXRlbUlkUG9zaXRpb25UeXBlLFxuXHR0eXBlIFB1bXBQcm9wcyxcblx0dHlwZSBQdW1wU3RhdGUsXG59IGZyb20gXCIuLi9hcGkvdHlwZXNcIjtcblxuaW1wb3J0IHtcblx0Q29tcG9uZW50LFxuXHRQcm9wZXJ0eVRyZWUsXG59IGZyb20gXCJAaW5kdWN0aXZlYXV0b21hdGlvbi9wZXJzcGVjdGl2ZS1jbGllbnRcIjtcbmltcG9ydCB0eXBlIHtcblx0Q29tcG9uZW50UHJvcHMsXG5cdENvbXBvbmVudE1ldGEsXG5cdFBDb21wb25lbnQsXG5cdFNpemVPYmplY3QsXG59IGZyb20gXCJAaW5kdWN0aXZlYXV0b21hdGlvbi9wZXJzcGVjdGl2ZS1jbGllbnRcIjsgLy8nQGluZHVjdGl2ZWF1dG9tYXRpb24vcGVyc3BlY3RpdmUtY2xpZW50JztcbmltcG9ydCB7IFB1bXBDb21wb3VuZCB9IGZyb20gXCIuLi9jb21wb25lbnRzL3Byb2Nlc3Mtb2JqZWN0cy9wdW1wcy9QdW1wQ29tcG91bmRcIjtcbmltcG9ydCB7IHB1bXBJbml0aWFsU3RhdHVzIH0gZnJvbSBcIi4uL2FwaS9pbml0aWFsU3RhdGVcIjtcblxuZXhwb3J0IGNvbnN0IENPTVBPTkVOVF9UWVBFID0gXCJobWkucHJvY2Vzc19vYmplY3RzLlB1bXBcIjtcblxuLyoqXG4gKiBWYWx2ZSBjb21wb25lbnQgY2xhc3MuXG4gKiBFeHRlbmRzIHRoZSBiYXNlIENvbXBvbmVudCBjbGFzcyBmcm9tIFBlcnNwZWN0aXZlLCB0eXBlZCB3aXRoIFZhbHZlUHJvcHMuXG4gKiBQcm92aWRlcyBhIGN1c3RvbWl6YWJsZSB2YWx2ZSB3aXRoIHByb3BlciBoYW5kbGluZyBvZiBkZXNpZ25lci9wcmV2aWV3IG1vZGVzLlxuICovXG5leHBvcnQgY2xhc3MgUHVtcCBleHRlbmRzIENvbXBvbmVudDxDb21wb25lbnRQcm9wczxQdW1wUHJvcHM+LCBhbnk+IHtcblx0dmFsdmVSZWY6IFJlYWN0LlJlZk9iamVjdDxIVE1MRGl2RWxlbWVudD47XG5cblx0Y29uc3RydWN0b3IocHJvcHM6IENvbXBvbmVudFByb3BzPFB1bXBQcm9wcz4pIHtcblx0XHRzdXBlcihwcm9wcyk7XG5cdFx0dGhpcy52YWx2ZVJlZiA9IFJlYWN0LmNyZWF0ZVJlZjxIVE1MRGl2RWxlbWVudD4oKTtcblx0fVxuXG5cdC8vIFRoaXMgaXMgYSBsaWZlY3ljbGUgbWV0aG9kIHRoYXQgaXMgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBmaXJzdCBtb3VudGVkIHRvIHRoZSBET00uXG5cdGNvbXBvbmVudERpZE1vdW50KCk6IHZvaWQge1xuXHRcdC8vIE5vIG5lZWQgdG8gaW5pdGlhbGl6ZSB2YWx2ZVJlZiBoZXJlXG5cdH1cblx0cHJvY2Vzc09iamVjdDogUHVtcFN0YXRlID1cblx0XHR0aGlzLnByb3BzLnByb3BzLnByb2Nlc3NPYmplY3Q/LnN0YXR1cyB8fCBwdW1wSW5pdGlhbFN0YXR1cztcblx0c3RhdHVzOiBQdW1wU3RhdGUgPSB0aGlzLnByb2Nlc3NPYmplY3Q7XG5cdHNob3dMYWJlbDogYm9vbGVhbiA9IHRoaXMucHJvcHMucHJvcHMuc2hvd0xhYmVsIHx8IGZhbHNlO1xuXHRsYWJlbFBvc2l0aW9uOiBJdGVtSWRQb3NpdGlvblR5cGUgPSB0aGlzLnByb3BzLnByb3BzLmxhYmVsUG9zaXRpb24gfHwgXCJsZWZ0XCI7XG5cblx0LyoqXG5cdCAqIEhhbmRsZXIgZm9yIHRoZSBjb21wb25lbnQncyBhY3Rpb24gZXZlbnQuXG5cdCAqL1xuXHRvbkFjdGlvblBlcmZvcm1lZCA9ICgpID0+IHtcblx0XHQvLyBJZiB0aGUgZGVzaWduZXIgaXMgaW4gXCJkZXNpZ25cIiBtb2RlLCBkb24ndCBkbyBhbnl0aGluZ1xuXHRcdGlmICghdGhpcy5wcm9wcy5ldmVudHNFbmFibGVkKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhcIlZhbHZlIGlzIGRpc2FibGVkIGluIHRoZSBkZXNpZ24tc2NvcGVcIik7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGNvbnNvbGUubG9nKFwiVmFsdmUgY2xpY2tlZCFcIik7XG5cdFx0dGhpcy5wcm9wcy5jb21wb25lbnRFdmVudHMuZmlyZUNvbXBvbmVudEV2ZW50KFwib25BY3Rpb25QZXJmb3JtZWRcIiwge30pO1xuXHR9O1xuXG5cdHJlbmRlcigpIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0Ly8gPGRpdj5UaGlzIGlzIFZhbHZlPC9kaXY+XG5cdFx0XHQ8UHVtcENvbXBvdW5kLlJvb3Rcblx0XHRcdFx0Y29tcG9uZW50UHJvcHM9e3RoaXMucHJvcHN9XG5cdFx0XHRcdHB1bXBQcm9wcz17dGhpcy5wcm9wcy5wcm9wc31cblx0XHRcdFx0b25BY3Rpb25QZXJmb3JtZWQ9e3RoaXMub25BY3Rpb25QZXJmb3JtZWR9XG5cdFx0XHQ+XG5cdFx0XHRcdDxQdW1wQ29tcG91bmQucHVtcCAvPlxuXHRcdFx0XHQ8UHVtcENvbXBvdW5kLnBvcG92ZXIgYW5jaG9yRWw9e3RoaXMudmFsdmVSZWYuY3VycmVudH0gLz5cblx0XHRcdDwvUHVtcENvbXBvdW5kLlJvb3Q+XG5cdFx0KTtcblx0fVxufVxuLy8gVGhpcyBpcyB0aGUgYWN0dWFsIHRoaW5nIHRoYXQgZ2V0cyByZWdpc3RlcmVkIHdpdGggdGhlIGNvbXBvbmVudCByZWdpc3RyeS5cbmV4cG9ydCBjbGFzcyBQdW1wTWV0YSBpbXBsZW1lbnRzIENvbXBvbmVudE1ldGEge1xuXHRnZXRDb21wb25lbnRUeXBlKCk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIENPTVBPTkVOVF9UWVBFO1xuXHR9XG5cblx0LyoqXG5cdCAqIEByZXR1cm5zIFRoZSBSZWFjdCBjb21wb25lbnQgY2xhc3MuXG5cdCAqL1xuXHRnZXRWaWV3Q29tcG9uZW50KCk6IFBDb21wb25lbnQge1xuXHRcdHJldHVybiBQdW1wO1xuXHR9XG5cblx0Z2V0RGVmYXVsdFNpemUoKTogU2l6ZU9iamVjdCB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHdpZHRoOiAzNixcblx0XHRcdGhlaWdodDogMzYsXG5cdFx0fTtcblx0fVxuXG5cdC8vIEludm9rZWQgd2hlbiBhbiB1cGRhdGUgdG8gdGhlIFByb3BlcnR5VHJlZSBoYXMgb2NjdXJyZWQsXG5cdC8vIGVmZmVjdGl2ZWx5IG1hcHBpbmcgdGhlIHZhbHZlU3RhdHVzIG9mIHRoZSB0cmVlIHRvIGNvbXBvbmVudCBwcm9wcy5cblx0Z2V0UHJvcHNSZWR1Y2VyKHRyZWU6IFByb3BlcnR5VHJlZSk6IFB1bXBQcm9wcyB7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0cHVtcFR5cGU6IHRyZWUucmVhZFN0cmluZyhcInB1bXBUeXBlXCIsIFwiY2VudHJpZnVnYWxcIiksXG5cdFx0XHRwcm9jZXNzT2JqZWN0OiB7XG5cdFx0XHRcdHN0YXR1czoge1xuXHRcdFx0XHRcdGFsYXJtOiB0cmVlLnJlYWRCb29sZWFuKFwicHJvY2Vzc09iamVjdC5zdGF0dXMuYWxhcm1cIiwgZmFsc2UpLFxuXHRcdFx0XHRcdGFjdEZCOiB0cmVlLnJlYWRCb29sZWFuKFwicHJvY2Vzc09iamVjdC5zdGF0dXMuYWN0RkJcIiwgZmFsc2UpLFxuXHRcdFx0XHRcdGRlQWN0RkI6IHRyZWUucmVhZEJvb2xlYW4oXCJwcm9jZXNzT2JqZWN0LnN0YXR1cy5kZUFjdEZCXCIsIGZhbHNlKSxcblx0XHRcdFx0XHRjb25maWd1cmF0aW9uOiB0cmVlLnJlYWROdW1iZXIoXG5cdFx0XHRcdFx0XHRcInByb2Nlc3NPYmplY3Quc3RhdHVzLmNvbmZpZ3VyYXRpb25cIixcblx0XHRcdFx0XHRcdDdcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdGl0ZW1OYW1lOiB0cmVlLnJlYWRTdHJpbmcoXCJwcm9jZXNzT2JqZWN0LnN0YXR1cy5pdGVtTmFtZVwiLCBcIlwiKSxcblx0XHRcdFx0XHRtYW51YWw6IHRyZWUucmVhZEJvb2xlYW4oXCJwcm9jZXNzT2JqZWN0LnN0YXR1cy5tYW51YWxcIiwgZmFsc2UpLFxuXHRcdFx0XHRcdG1hc2tlZDogdHJlZS5yZWFkQm9vbGVhbihcInByb2Nlc3NPYmplY3Quc3RhdHVzLm1hc2tlZFwiLCBmYWxzZSksXG5cdFx0XHRcdFx0Y2hhbmdpbmc6IHRyZWUucmVhZEJvb2xlYW4oXCJwcm9jZXNzT2JqZWN0LnN0YXR1cy5jaGFuZ2luZ1wiLCBmYWxzZSksXG5cdFx0XHRcdFx0bG9jYXRlOiB0cmVlLnJlYWRCb29sZWFuKFwicHJvY2Vzc09iamVjdC5zdGF0dXMubG9jYXRlXCIsIGZhbHNlKSxcblx0XHRcdFx0fSxcblx0XHRcdH0sXG5cdFx0XHRzaG93TGFiZWw6IHRyZWUucmVhZEJvb2xlYW4oXCJzaG93TGFiZWxcIiwgZmFsc2UpLFxuXHRcdFx0bGFiZWxQb3NpdGlvbjogdHJlZS5yZWFkU3RyaW5nKFwibGFiZWxQb3NpdGlvblwiLCBcInRvcC1sZWZ0XCIpLFxuXHRcdH07XG5cdH1cbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHR5cGUgeyBTdGF0dXNQcm9wcyB9IGZyb20gXCIuLi9hci10eXBlcy9zdGF0dXNcIjtcbmltcG9ydCB0eXBlIHtcblx0Q29tcG9uZW50UHJvcHMsXG5cdENvbXBvbmVudE1ldGEsXG5cdFBDb21wb25lbnQsXG5cdFNpemVPYmplY3QsXG5cdFByb3BlcnR5VHJlZSxcbn0gZnJvbSBcIkBpbmR1Y3RpdmVhdXRvbWF0aW9uL3BlcnNwZWN0aXZlLWNsaWVudFwiOyAvLydAaW5kdWN0aXZlYXV0b21hdGlvbi9wZXJzcGVjdGl2ZS1jbGllbnQnO1xuXG5leHBvcnQgY29uc3QgQ09NUE9ORU5UX1RZUEUgPSBcImhtaS5kaXNwbGF5LlN0YXR1c1ZhbHZlTXBcIjtcblxuZXhwb3J0IGNvbnN0IFN0YXR1c1ZhbHZlTXAgPSAocHJvcHM6IENvbXBvbmVudFByb3BzPFN0YXR1c1Byb3BzPikgPT4ge1xuXHQvLyBjb25zdCB1c2VQcm9wcyA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuXHQvLyBcdGNvbnN0IHVzZVN0YXR1c1Byb3BzID0gcHJvcHMucHJvcHMgfHwge31cblx0Ly8gXHRyZXR1cm4gdXNlU3RhdHVzUHJvcHNcblx0Ly8gfVxuXHQvLyAsIFtwcm9wcy5wcm9wc10pXG5cdGNvbnN0IHsgc3RhdHVzSXRlbXMgfSA9IHByb3BzLnByb3BzO1xuXG5cdHJldHVybiAoXG5cdFx0PGRpdiBjbGFzc05hbWU9XCJobWktY29tcG9uZW50LXN0YXR1cy12YWx2ZS1tcCBobWktY29tcG9uZW50LXN0YXR1cy12YWx2ZS1tcF9fZ3JpZFwiPlxuXHRcdFx0PHVsXG5cdFx0XHRjbGFzc05hbWU9XCJsaXN0IGJvcmRlcmVkIGRlbnNlXCI+XG5cblx0XHRcdHtzdGF0dXNJdGVtcy5tYXAoKGl0ZW0sIGluZGV4KSA9PiB7XG5cblx0XHRcdFx0cmV0dXJuIChcblx0XHRcdFx0XHQ8bGkga2V5PXtpbmRleH0+XG5cdFx0XHRcdFx0XHQ8bGFiZWwgY2xhc3NOYW1lPVwiY2hlY2tib3hcIiA+XG5cdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwidGV4dFwiPlxuXHRcdFx0XHRcdFx0XHRcdDxwIGNsYXNzTmFtZT1cIngtc21hbGxcIj5cblx0XHRcdFx0XHRcdFx0XHR7aXRlbS5sYWJlbH1cblx0XHRcdFx0XHRcdFx0XHQ8L3A+XG5cdFx0XHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiZW5kXCI+XG5cdFx0XHRcdFx0XHRcdFx0PGlucHV0XG5cdFx0XHRcdFx0XHRcdFx0bmFtZT1cImNoZWNrYm94XCJcblx0XHRcdFx0XHRcdFx0XHRpZD17YGNoZWNrYm94LSR7aW5kZXh9YH1cblx0XHRcdFx0XHRcdFx0XHR0eXBlPVwiY2hlY2tib3hcIlxuXHRcdFx0XHRcdFx0XHRcdGNoZWNrZWQ9e2l0ZW0uc3RhdHVzfVxuXHRcdFx0XHRcdFx0XHRcdHJlYWRPbmx5PXt0cnVlfVxuXHRcdFx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdFx0PC9sYWJlbD5cblx0XHRcdFx0XHQ8L2xpPlxuXHRcdFx0XHQpO1xuXHRcdFx0fSl9XG5cdFx0XHQ8L3VsPlxuXHRcdDwvZGl2PlxuXHQpO1xufTtcbi8vIFRoaXMgaXMgdGhlIGFjdHVhbCB0aGluZyB0aGF0IGdldHMgcmVnaXN0ZXJlZCB3aXRoIHRoZSBjb21wb25lbnQgcmVnaXN0cnkuXG5leHBvcnQgY2xhc3MgU3RhdHVzVmFsdmVNcE1ldGEgaW1wbGVtZW50cyBDb21wb25lbnRNZXRhIHtcblx0Z2V0Q29tcG9uZW50VHlwZSgpOiBzdHJpbmcge1xuXHRcdHJldHVybiBDT01QT05FTlRfVFlQRTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcmV0dXJucyBUaGUgUmVhY3QgY29tcG9uZW50IGNsYXNzLlxuXHQgKi9cblx0Z2V0Vmlld0NvbXBvbmVudCgpOiBQQ29tcG9uZW50IHtcblx0XHRyZXR1cm4gU3RhdHVzVmFsdmVNcCBhcyB1bmtub3duIGFzIFBDb21wb25lbnQ7XG5cdH1cblxuXHRnZXREZWZhdWx0U2l6ZSgpOiBTaXplT2JqZWN0IHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0d2lkdGg6IDI0LFxuXHRcdFx0aGVpZ2h0OiA0OCxcblx0XHR9O1xuXHR9XG5cblx0Ly8gSW52b2tlZCB3aGVuIGFuIHVwZGF0ZSB0byB0aGUgUHJvcGVydHlUcmVlIGhhcyBvY2N1cnJlZCxcblx0Ly8gZWZmZWN0aXZlbHkgbWFwcGluZyB0aGUgdmFsdmVTdGF0dXMgb2YgdGhlIHRyZWUgdG8gY29tcG9uZW50IHByb3BzLlxuXHRnZXRQcm9wc1JlZHVjZXIodHJlZTogUHJvcGVydHlUcmVlKTogU3RhdHVzUHJvcHMge1xuXHRcdGNvbnNvbGUubG9nKGBzdGF0dXMgJHt0cmVlLnJlYWQoYHN0YXR1c2ApfWApO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHN0YXR1c0l0ZW1zOiB0cmVlLnJlYWQoXCJzdGF0dXNcIiwgW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IGBsYWJlbCB0ZXh0YCxcblx0XHRcdFx0XHRzdGF0dXM6IGZhbHNlLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSksXG5cdFx0fTtcblx0fVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX184ODNfXzsiLCIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7XG5cdEl0ZW1JZFBvc2l0aW9uVHlwZSxcblx0UHJvY2Vzc09iamVjdCxcblx0dHlwZSBWYWx2ZVByb3BzLFxuXHR0eXBlIFZhbHZlU3RhdGUsXG59IGZyb20gXCIuLi9hcGkvdHlwZXNcIjtcblxuaW1wb3J0IHtcblx0Q29tcG9uZW50LFxuXHRQcm9wZXJ0eVRyZWUsXG59IGZyb20gXCJAaW5kdWN0aXZlYXV0b21hdGlvbi9wZXJzcGVjdGl2ZS1jbGllbnRcIjtcbmltcG9ydCB0eXBlIHtcblx0Q29tcG9uZW50UHJvcHMsXG5cdENvbXBvbmVudE1ldGEsXG5cdFBDb21wb25lbnQsXG5cdFNpemVPYmplY3QsXG59IGZyb20gXCJAaW5kdWN0aXZlYXV0b21hdGlvbi9wZXJzcGVjdGl2ZS1jbGllbnRcIjsgLy8nQGluZHVjdGl2ZWF1dG9tYXRpb24vcGVyc3BlY3RpdmUtY2xpZW50JztcbmltcG9ydCB7IFZhbHZlTXBDb21wb3VuZCB9IGZyb20gXCIuL3Byb2Nlc3Mtb2JqZWN0cy92YWx2ZS1tcC9WYWx2ZU1wXCI7XG5pbXBvcnQgeyBwcm9jZXNzT2JqZWN0UHJvcHMgfSBmcm9tIFwiLi4vYXBpL2luaXRpYWxTdGF0ZVwiO1xuLy8gaW1wb3J0IHsgdmFsdmVQcm9wcyB9IGZyb20gXCIuL3Byb2Nlc3Mtb2JqZWN0cy92YWx2ZS9pbml0aWFsU3RhdGVcIjtcbi8vIGltcG9ydCB7IFZhbHZlRkNDb21wb3VuZCB9IGZyb20gXCIuL3Byb2Nlc3Mtb2JqZWN0cy92YWx2ZS9WYWx2ZUZDXCI7XG5cbmV4cG9ydCBjb25zdCBDT01QT05FTlRfVFlQRSA9IFwiaG1pLnByb2Nlc3Nfb2JqZWN0cy5WYWx2ZV9tcFwiO1xuXG4vKipcbiAqIFZhbHZlIGNvbXBvbmVudCBjbGFzcy5cbiAqIEV4dGVuZHMgdGhlIGJhc2UgQ29tcG9uZW50IGNsYXNzIGZyb20gUGVyc3BlY3RpdmUsIHR5cGVkIHdpdGggVmFsdmVQcm9wcy5cbiAqIFByb3ZpZGVzIGEgY3VzdG9taXphYmxlIHZhbHZlIHdpdGggcHJvcGVyIGhhbmRsaW5nIG9mIGRlc2lnbmVyL3ByZXZpZXcgbW9kZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBWYWx2ZSBleHRlbmRzIENvbXBvbmVudDxDb21wb25lbnRQcm9wczxWYWx2ZVByb3BzPiwgYW55PiB7XG5cdHZhbHZlUmVmOiBSZWFjdC5SZWZPYmplY3Q8SFRNTERpdkVsZW1lbnQ+O1xuXG5cdGNvbnN0cnVjdG9yKHByb3BzOiBDb21wb25lbnRQcm9wczxWYWx2ZVByb3BzPikge1xuXHRcdHN1cGVyKHByb3BzKTtcblx0XHR0aGlzLnZhbHZlUmVmID0gUmVhY3QuY3JlYXRlUmVmPEhUTUxEaXZFbGVtZW50PigpO1xuXHR9XG5cblx0Ly8gVGhpcyBpcyBhIGxpZmVjeWNsZSBtZXRob2QgdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGZpcnN0IG1vdW50ZWQgdG8gdGhlIERPTS5cblx0Y29tcG9uZW50RGlkTW91bnQoKTogdm9pZCB7XG5cdFx0Ly8gTm8gbmVlZCB0byBpbml0aWFsaXplIHZhbHZlUmVmIGhlcmVcblx0fVxuXHRwcm9jZXNzT2JqZWN0OiBQcm9jZXNzT2JqZWN0ID1cblx0XHR0aGlzLnByb3BzLnByb3BzLnByb2Nlc3NPYmplY3QgfHwgcHJvY2Vzc09iamVjdFByb3BzO1xuXHRzdGF0dXM6IFZhbHZlU3RhdGUgPSB0aGlzLnByb2Nlc3NPYmplY3Quc3RhdHVzO1xuXHRzaG93TGFiZWw6IGJvb2xlYW4gPSB0aGlzLnByb3BzLnByb3BzLnNob3dMYWJlbCB8fCBmYWxzZTtcblx0bGFiZWxQb3NpdGlvbjogSXRlbUlkUG9zaXRpb25UeXBlID0gdGhpcy5wcm9wcy5wcm9wcy5sYWJlbFBvc2l0aW9uIHx8IFwibGVmdFwiO1xuXG5cdC8qKlxuXHQgKiBIYW5kbGVyIGZvciB0aGUgY29tcG9uZW50J3MgYWN0aW9uIGV2ZW50LlxuXHQgKi9cblx0b25BY3Rpb25QZXJmb3JtZWQgPSAoKSA9PiB7XG5cdFx0Ly8gSWYgdGhlIGRlc2lnbmVyIGlzIGluIFwiZGVzaWduXCIgbW9kZSwgZG9uJ3QgZG8gYW55dGhpbmdcblx0XHRpZiAoIXRoaXMucHJvcHMuZXZlbnRzRW5hYmxlZCkge1xuXHRcdFx0Y29uc29sZS5sb2coXCJWYWx2ZSBpcyBkaXNhYmxlZCBpbiB0aGUgZGVzaWduLXNjb3BlXCIpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRjb25zb2xlLmxvZyhcIlZhbHZlIGNsaWNrZWQhXCIpO1xuXHRcdHRoaXMucHJvcHMuY29tcG9uZW50RXZlbnRzLmZpcmVDb21wb25lbnRFdmVudChcIm9uQWN0aW9uUGVyZm9ybWVkXCIsIHt9KTtcblx0fTtcblxuXHRyZW5kZXIoKSB7XG5cdFx0cmV0dXJuIChcblx0XHRcdC8vIDxkaXY+VGhpcyBpcyBWYWx2ZTwvZGl2PlxuXHRcdFx0PFZhbHZlTXBDb21wb3VuZC5Sb290XG5cdFx0XHRcdGNvbXBvbmVudFByb3BzPXt0aGlzLnByb3BzfVxuXHRcdFx0XHR2YWx2ZVByb3BzPXt0aGlzLnByb3BzLnByb3BzfVxuXHRcdFx0XHRvbkFjdGlvblBlcmZvcm1lZD17dGhpcy5vbkFjdGlvblBlcmZvcm1lZH1cblx0XHRcdD5cblx0XHRcdFx0PFZhbHZlTXBDb21wb3VuZC52YWx2ZSAvPlxuXHRcdFx0XHQ8VmFsdmVNcENvbXBvdW5kLnBvcG92ZXIgYW5jaG9yRWw9e3RoaXMudmFsdmVSZWYuY3VycmVudH0gLz5cblx0XHRcdDwvVmFsdmVNcENvbXBvdW5kLlJvb3Q+XG5cdFx0KTtcblx0fVxufVxuLy8gVGhpcyBpcyB0aGUgYWN0dWFsIHRoaW5nIHRoYXQgZ2V0cyByZWdpc3RlcmVkIHdpdGggdGhlIGNvbXBvbmVudCByZWdpc3RyeS5cbmV4cG9ydCBjbGFzcyBWYWx2ZU1ldGEgaW1wbGVtZW50cyBDb21wb25lbnRNZXRhIHtcblx0Z2V0Q29tcG9uZW50VHlwZSgpOiBzdHJpbmcge1xuXHRcdHJldHVybiBDT01QT05FTlRfVFlQRTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcmV0dXJucyBUaGUgUmVhY3QgY29tcG9uZW50IGNsYXNzLlxuXHQgKi9cblx0Z2V0Vmlld0NvbXBvbmVudCgpOiBQQ29tcG9uZW50IHtcblx0XHRyZXR1cm4gVmFsdmU7XG5cdH1cblxuXHRnZXREZWZhdWx0U2l6ZSgpOiBTaXplT2JqZWN0IHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0d2lkdGg6IDIwLFxuXHRcdFx0aGVpZ2h0OiA0MCxcblx0XHR9O1xuXHR9XG5cblx0Ly8gSW52b2tlZCB3aGVuIGFuIHVwZGF0ZSB0byB0aGUgUHJvcGVydHlUcmVlIGhhcyBvY2N1cnJlZCxcblx0Ly8gZWZmZWN0aXZlbHkgbWFwcGluZyB0aGUgdmFsdmVTdGF0dXMgb2YgdGhlIHRyZWUgdG8gY29tcG9uZW50IHByb3BzLlxuXHRnZXRQcm9wc1JlZHVjZXIodHJlZTogUHJvcGVydHlUcmVlKTogVmFsdmVQcm9wcyB7XG5cdFx0Y29uc29sZS5sb2coXG5cdFx0XHRgaXRlbU5hbWU6ICR7dHJlZS5yZWFkU3RyaW5nKFxuXHRcdFx0XHRcInByb2Nlc3NPYmplY3Quc3RhdHVzLml0ZW1OYW1lXCJcblx0XHRcdCl9IHNob3dMYWJlbCAke3RyZWUucmVhZEJvb2xlYW4oXCJzaG93TGFiZWxcIil9YFxuXHRcdCk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0cHJvY2Vzc09iamVjdDoge1xuXHRcdFx0XHRzdGF0dXM6IHtcblx0XHRcdFx0XHRhbGFybTogdHJlZS5yZWFkQm9vbGVhbihcInByb2Nlc3NPYmplY3Quc3RhdHVzLmFsYXJtXCIsIGZhbHNlKSxcblx0XHRcdFx0XHRhY3RGQjogdHJlZS5yZWFkQm9vbGVhbihcInByb2Nlc3NPYmplY3Quc3RhdHVzLmFjdEZCXCIsIGZhbHNlKSxcblx0XHRcdFx0XHRkZUFjdEZCOiB0cmVlLnJlYWRCb29sZWFuKFwicHJvY2Vzc09iamVjdC5zdGF0dXMuZGVBY3RGQlwiLCBmYWxzZSksXG5cdFx0XHRcdFx0YWN0aXZhdGVkQ29uZmlnOiB0cmVlLnJlYWROdW1iZXIoXG5cdFx0XHRcdFx0XHRcInByb2Nlc3NPYmplY3Quc3RhdHVzLmFjdGl2YXRlZENvbmZpZ1wiLFxuXHRcdFx0XHRcdFx0NTExXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRkZWFjdGl2YXRlZENvbmZpZzogdHJlZS5yZWFkTnVtYmVyKFxuXHRcdFx0XHRcdFx0XCJwcm9jZXNzT2JqZWN0LnN0YXR1cy5kZWFjdGl2YXRlZENvbmZpZ1wiLFxuXHRcdFx0XHRcdFx0NDA5NVxuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0aXRlbU5hbWU6IHRyZWUucmVhZFN0cmluZyhcInByb2Nlc3NPYmplY3Quc3RhdHVzLml0ZW1OYW1lXCIsIFwiXCIpLFxuXHRcdFx0XHRcdG1hbnVhbDogdHJlZS5yZWFkQm9vbGVhbihcInByb2Nlc3NPYmplY3Quc3RhdHVzLm1hbnVhbFwiLCBmYWxzZSksXG5cdFx0XHRcdFx0bWFza2VkOiB0cmVlLnJlYWRCb29sZWFuKFwicHJvY2Vzc09iamVjdC5zdGF0dXMubWFza2VkXCIsIGZhbHNlKSxcblx0XHRcdFx0XHRjaGFuZ2luZzogdHJlZS5yZWFkQm9vbGVhbihcInByb2Nlc3NPYmplY3Quc3RhdHVzLmNoYW5naW5nXCIsIGZhbHNlKSxcblx0XHRcdFx0XHRsb2NhdGU6IHRyZWUucmVhZEJvb2xlYW4oXCJwcm9jZXNzT2JqZWN0LnN0YXR1cy5sb2NhdGVcIiwgZmFsc2UpLFxuXHRcdFx0XHRcdHVzbDogdHJlZS5yZWFkQm9vbGVhbihcInByb2Nlc3NPYmplY3Quc3RhdHVzLnVzbFwiLCBmYWxzZSksXG5cdFx0XHRcdFx0bHNsOiB0cmVlLnJlYWRCb29sZWFuKFwicHJvY2Vzc09iamVjdC5zdGF0dXMubHNsXCIsIGZhbHNlKSxcblx0XHRcdFx0fSxcblx0XHRcdH0sXG5cdFx0XHRzaG93TGFiZWw6IHRyZWUucmVhZEJvb2xlYW4oXCJzaG93TGFiZWxcIiwgZmFsc2UpLFxuXHRcdFx0bGFiZWxQb3NpdGlvbjogdHJlZS5yZWFkU3RyaW5nKFwibGFiZWxQb3NpdGlvblwiLCBcInRvcC1sZWZ0XCIpLFxuXHRcdH07XG5cdH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5VUkwgPSBleHBvcnRzLkROUyA9IGV4cG9ydHMuc3RyaW5nVG9CeXRlcyA9IHZvaWQgMDtcbmNvbnN0IHBhcnNlX2pzXzEgPSByZXF1aXJlKFwiLi9wYXJzZS5qc1wiKTtcbmNvbnN0IHN0cmluZ2lmeV9qc18xID0gcmVxdWlyZShcIi4vc3RyaW5naWZ5LmpzXCIpO1xuZnVuY3Rpb24gc3RyaW5nVG9CeXRlcyhzdHIpIHtcbiAgICBzdHIgPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyKSk7XG4gICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShzdHIubGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgICAgICBieXRlc1tpXSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgIH1cbiAgICByZXR1cm4gYnl0ZXM7XG59XG5leHBvcnRzLnN0cmluZ1RvQnl0ZXMgPSBzdHJpbmdUb0J5dGVzO1xuZXhwb3J0cy5ETlMgPSAnNmJhN2I4MTAtOWRhZC0xMWQxLTgwYjQtMDBjMDRmZDQzMGM4JztcbmV4cG9ydHMuVVJMID0gJzZiYTdiODExLTlkYWQtMTFkMS04MGI0LTAwYzA0ZmQ0MzBjOCc7XG5mdW5jdGlvbiB2MzUodmVyc2lvbiwgaGFzaCwgdmFsdWUsIG5hbWVzcGFjZSwgYnVmLCBvZmZzZXQpIHtcbiAgICBjb25zdCB2YWx1ZUJ5dGVzID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHN0cmluZ1RvQnl0ZXModmFsdWUpIDogdmFsdWU7XG4gICAgY29uc3QgbmFtZXNwYWNlQnl0ZXMgPSB0eXBlb2YgbmFtZXNwYWNlID09PSAnc3RyaW5nJyA/ICgwLCBwYXJzZV9qc18xLmRlZmF1bHQpKG5hbWVzcGFjZSkgOiBuYW1lc3BhY2U7XG4gICAgaWYgKHR5cGVvZiBuYW1lc3BhY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG5hbWVzcGFjZSA9ICgwLCBwYXJzZV9qc18xLmRlZmF1bHQpKG5hbWVzcGFjZSk7XG4gICAgfVxuICAgIGlmIChuYW1lc3BhY2U/Lmxlbmd0aCAhPT0gMTYpIHtcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdOYW1lc3BhY2UgbXVzdCBiZSBhcnJheS1saWtlICgxNiBpdGVyYWJsZSBpbnRlZ2VyIHZhbHVlcywgMC0yNTUpJyk7XG4gICAgfVxuICAgIGxldCBieXRlcyA9IG5ldyBVaW50OEFycmF5KDE2ICsgdmFsdWVCeXRlcy5sZW5ndGgpO1xuICAgIGJ5dGVzLnNldChuYW1lc3BhY2VCeXRlcyk7XG4gICAgYnl0ZXMuc2V0KHZhbHVlQnl0ZXMsIG5hbWVzcGFjZUJ5dGVzLmxlbmd0aCk7XG4gICAgYnl0ZXMgPSBoYXNoKGJ5dGVzKTtcbiAgICBieXRlc1s2XSA9IChieXRlc1s2XSAmIDB4MGYpIHwgdmVyc2lvbjtcbiAgICBieXRlc1s4XSA9IChieXRlc1s4XSAmIDB4M2YpIHwgMHg4MDtcbiAgICBpZiAoYnVmKSB7XG4gICAgICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgICAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9IGJ5dGVzW2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidWY7XG4gICAgfVxuICAgIHJldHVybiAoMCwgc3RyaW5naWZ5X2pzXzEudW5zYWZlU3RyaW5naWZ5KShieXRlcyk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSB2MzU7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiaW1wb3J0IHsgQ29tcG9uZW50TWV0YSwgQ29tcG9uZW50UmVnaXN0cnkgfSBmcm9tICdAaW5kdWN0aXZlYXV0b21hdGlvbi9wZXJzcGVjdGl2ZS1jbGllbnQnO1xuLy9pbXBvcnQgeyBCdXR0b24sIEJ1dHRvbk1ldGEgfSBmcm9tICcuL2NvbXBvbmVudHMvQnV0dG9uJztcbi8vaW1wb3J0IHsgVmFsdmUsIFZhbHZlTWV0YSB9IGZyb20gXCIuL2NvbXBvbmVudHMvVmFsdmVcIjtcbmltcG9ydCB7IFZhbHZlLCBWYWx2ZU1ldGEgfSBmcm9tICcuL2NvbXBvbmVudHMvVmFsdmUnO1xuaW1wb3J0IHsgUHVtcCwgUHVtcE1ldGEgfSBmcm9tICcuL2NvbXBvbmVudHMvUHVtcCc7XG5pbXBvcnQgeyBQYXJhbWV0ZXJMaXN0Q29tcG9uZW50LCBQYXJhbWV0ZXJMaXN0Q29tcG9uZW50TWV0YX0gZnJvbSAnLi9jb21wb25lbnRzL1BhcmFtZXRlckxpc3QnXG5pbXBvcnQgeyBDb21tYW5kVmFsdmVNcCwgQ29tbWFuZFZhbHZlTXBNZXRhIH0gZnJvbSAnLi9jb21wb25lbnRzL0NvbW1hbmRWYWx2ZU1wJztcbmltcG9ydCB7IFN0YXR1c1ZhbHZlTXAsIFN0YXR1c1ZhbHZlTXBNZXRhIH0gZnJvbSAnLi9jb21wb25lbnRzL1N0YXR1c1ZhbHZlTXAnO1xuXG4vLyBFeHBvcnQgY29tcG9uZW50cyBmb3IgZXh0ZXJuYWwgcmVmZXJlbmNlXG5leHBvcnQge1xuXHRWYWx2ZSAsXG5cdFB1bXAgLFxuXHRQYXJhbWV0ZXJMaXN0Q29tcG9uZW50LFxuXHRDb21tYW5kVmFsdmVNcCxcblx0U3RhdHVzVmFsdmVNcFxuXHR9O1xuXG4vLyBJbXBvcnQgY29tcG9uZW50IHN0eWxlc1xuaW1wb3J0ICcuL2luZGV4LmNzcyc7XG5cbi8vIEFycmF5IG9mIGNvbXBvbmVudCBtZXRhZGF0YVxuY29uc3QgY29tcG9uZW50czogQXJyYXk8Q29tcG9uZW50TWV0YT4gPSBbXG5cdG5ldyBWYWx2ZU1ldGEoKSxcblx0bmV3IFB1bXBNZXRhKCksXG5cdG5ldyBQYXJhbWV0ZXJMaXN0Q29tcG9uZW50TWV0YSgpLFxuXHRuZXcgQ29tbWFuZFZhbHZlTXBNZXRhKCksXG5cdG5ldyBTdGF0dXNWYWx2ZU1wTWV0YSgpLFxuXG5dO1xuXG4vLyBSZWdpc3RlciBlYWNoIGNvbXBvbmVudCB3aXRoIHRoZSBQZXJzcGVjdGl2ZSBDb21wb25lbnRSZWdpc3RyeVxuY29tcG9uZW50cy5mb3JFYWNoKChjOiBDb21wb25lbnRNZXRhKSA9PiBDb21wb25lbnRSZWdpc3RyeS5yZWdpc3RlcihjKSk7XG4iXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwicmVxdWlyZSIsImRlZmluZSIsImFtZCIsInNlbGYiLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18zNzdfXyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzg4M19fIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsInVuc2FmZVN0cmluZ2lmeSIsInZhbGlkYXRlX2pzXzEiLCJieXRlVG9IZXgiLCJpIiwicHVzaCIsInRvU3RyaW5nIiwic2xpY2UiLCJhcnIiLCJvZmZzZXQiLCJ0b0xvd2VyQ2FzZSIsInV1aWQiLCJkZWZhdWx0IiwiVHlwZUVycm9yIiwiZSIsIm5lIiwiZ2UiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJiZSIsImdldE93blByb3BlcnR5TmFtZXMiLCJUZSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiQmUiLCJ0IiwiciIsImdldCIsImVudW1lcmFibGUiLCJBZSIsIkltbWVyIiwiSiIsImFwcGx5UGF0Y2hlcyIsIkNlIiwiY2FzdERyYWZ0Iiwia2UiLCJjYXN0SW1tdXRhYmxlIiwiS2UiLCJjcmVhdGVEcmFmdCIsIlJlIiwiY3VycmVudCIsInJlIiwiZW5hYmxlTWFwU2V0IiwieGUiLCJlbmFibGVQYXRjaGVzIiwiUGUiLCJmaW5pc2hEcmFmdCIsInZlIiwiZnJlZXplIiwiSyIsImltbWVyYWJsZSIsIk4iLCJpc0RyYWZ0IiwiTyIsImlzRHJhZnRhYmxlIiwiQSIsIm5vdGhpbmciLCJqIiwib3JpZ2luYWwiLCJsZSIsInByb2R1Y2UiLCJGZSIsInByb2R1Y2VXaXRoUGF0Y2hlcyIsIk5lIiwic2V0QXV0b0ZyZWV6ZSIsInplIiwic2V0VXNlU3RyaWN0U2hhbGxvd0NvcHkiLCJqZSIsIm4iLCJjYWxsIiwiSWUiLCJTeW1ib2wiLCJmb3IiLCJ1IiwiaCIsIkVycm9yIiwieiIsImdldFByb3RvdHlwZU9mIiwieWUiLCJBcnJheSIsImlzQXJyYXkiLCJjb25zdHJ1Y3RvciIsInYiLCJrIiwiT2UiLCJGdW5jdGlvbiIsIl8iLCJDIiwiUmVmbGVjdCIsIm93bktleXMiLCJmb3JFYWNoIiwibyIsIlIiLCJoYXMiLCJYIiwiUSIsInNldCIsImFkZCIsIk1hcCIsIlNldCIsIlQiLCJMIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImYiLCJsZW5ndGgiLCJsIiwiYyIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiY3JlYXRlIiwiYXNzaWduIiwiJCIsImNsZWFyIiwiZGVsZXRlIiwiTWUiLCJlbnRyaWVzIiwiaXNGcm96ZW4iLCJVIiwiYWUiLCJ3IiwiWSIsIkIiLCJvZSIsImIiLCJWIiwiWiIsImEiLCJ3ZSIsImllIiwicCIsIlAiLCJkIiwiX2UiLCJ4IiwibSIsInNlIiwicyIsImVlIiwidGUiLCJkZSIsImciLCJjb25jYXQiLCJ5IiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ1ZSIsIm1lIiwiRWUiLCJjZSIsImZlIiwiVyIsInBlIiwiRSIsIk51bWJlciIsImlzTmFOIiwiZGVsZXRlUHJvcGVydHkiLCJzZXRQcm90b3R5cGVPZiIsInEiLCJTIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJ0aGlzIiwiYXV0b0ZyZWV6ZSIsInVzZVN0cmljdFNoYWxsb3dDb3B5IiwicGF0aCIsIm9wIiwiSSIsIkQiLCJyZXZva2UiLCJwcm94eSIsIlByb3h5IiwicmV2b2NhYmxlIiwiaGUiLCJTZSIsIm1hcCIsImZyb20iLCJIIiwiRiIsImpvaW4iLCJzcGxpY2UiLCJ1bnNoaWZ0Iiwic3VwZXIiLCJzaXplIiwia2V5cyIsInZhbHVlcyIsIml0ZXJhdG9yIiwibmV4dCIsImRvbmUiLCJKU09OIiwic3RyaW5naWZ5IiwiTSIsImJpbmQiLCJJdGVtIiwiaXRlbUNsYXNzTmFtZSIsImhhbmRsZUNsaWNrIiwiY2xhc3NOYW1lIiwib25DbGljayIsImRpc3BsYXlOYW1lIiwidmVyc2lvbiIsInZhbGlkYXRlIiwidjciLCJ2NlRvVjEiLCJ2NiIsInY1IiwidjQiLCJ2MyIsInYxVG9WNiIsInYxIiwicGFyc2UiLCJOSUwiLCJNQVgiLCJtYXhfanNfMSIsIm5pbF9qc18xIiwicGFyc2VfanNfMSIsInN0cmluZ2lmeV9qc18xIiwidjFfanNfMSIsInYxVG9WNl9qc18xIiwidjNfanNfMSIsInY0X2pzXzEiLCJ2NV9qc18xIiwidjZfanNfMSIsInY2VG9WMV9qc18xIiwidjdfanNfMSIsInZlcnNpb25fanNfMSIsInYxQnl0ZXMiLCJ2NkJ5dGVzIiwiVWludDhBcnJheSIsIm9mIiwibmF0aXZlX2pzXzEiLCJybmdfanNfMSIsIm9wdGlvbnMiLCJidWYiLCJyYW5kb21VVUlEIiwicm5kcyIsInJhbmRvbSIsInJuZyIsIlJhbmdlRXJyb3IiLCJnZXRSYW5kb21WYWx1ZXMiLCJybmRzOCIsImNyeXB0byIsInVwZGF0ZVY3U3RhdGUiLCJfc3RhdGUiLCJzdGF0ZSIsIm5vdyIsIm1zZWNzIiwic2VxIiwidjdCeXRlcyIsIkRhdGUiLCJieXRlcyIsImdldE91dHB1dExlbmd0aCIsImlucHV0TGVuZ3RoOCIsInNhZmVBZGQiLCJsc3ciLCJtZDVjbW4iLCJudW0iLCJjbnQiLCJtZDVmZiIsIm1kNWdnIiwibWQ1aGgiLCJtZDVpaSIsImlucHV0IiwidWludDMyVG9VaW50OCIsImxlbiIsInhwYWQiLCJVaW50MzJBcnJheSIsImZpbGwiLCJvbGRhIiwib2xkYiIsIm9sZGMiLCJvbGRkIiwid29yZHNUb01kNSIsIm91dHB1dCIsInVpbnQ4VG9VaW50MzIiLCJ1c2VJbW1lciIsInVzZVN0YXRlIiwidXNlQ2FsbGJhY2siLCJ1c2VJbW1lclJlZHVjZXIiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsIl92NiIsInZhbHZlU3RhdHVzIiwiYWxhcm0iLCJhY3RGQiIsImRlQWN0RkIiLCJhY3RpdmF0ZWRDb25maWciLCJkZWFjdGl2YXRlZENvbmZpZyIsIml0ZW1OYW1lIiwibWFudWFsIiwibWFza2VkIiwiY2hhbmdpbmciLCJsb2NhdGUiLCJwcm9jZXNzT2JqZWN0UHJvcHMiLCJzdGF0dXMiLCJ2YWx2ZVByb3BzIiwicHJvY2Vzc09iamVjdCIsImNvbnNvbGUiLCJsb2ciLCJsYWJlbFBvc2l0aW9uIiwic2hvd0xhYmVsIiwicHVtcEluaXRpYWxTdGF0dXMiLCJjb25maWd1cmF0aW9uIiwicHVtcEluaXRpYWxQcm9wcyIsInBhcmFtZXRlckluaXRpYWxTdGF0ZSIsImxhYmVsIiwidGV4dCIsInRvb2x0aXBUZXh0IiwidG9vbHRpcFBvc2l0aW9uIiwidG9vbHRpcENsYXNzTmFtZSIsInRvb2x0aXBJZCIsInR5cGUiLCJpbnB1dG1vZGUiLCJwbGFjZWhvbGRlciIsImVkaXRhYmxlIiwicGF0dGVybiIsIm1pbiIsIm1heCIsImRlY2ltYWxQbGFjZXMiLCJldSIsImluaXRpYWxBdXRvTWFuU3RhdGUiLCJhdXRvIiwiaW5pdGlhbE9mZk9uU3RhdGUiLCJvZmYiLCJvbiIsImluaXRpYWxDb250cm9sU3RhdGUiLCJjb21tYW5kIiwiaW50ZXJsb2NrcyIsIm1haW4iLCJ1cHBlclNlYXQiLCJsb3dlclNlYXQiLCJhdXRvTWFudWFsIiwiYWN0aXZhdGlvbiIsInVwZGF0ZVYxU3RhdGUiLCJuc2VjcyIsIm5vZGUiLCJ1bmRlZmluZWQiLCJjbG9ja3NlcSIsInRsIiwidG1oIiwiaXNWNiIsIm9wdGlvbnNLZXlzIiwiZ2V0Qm9vbEF0SW5kZXgiLCJCb29sZWFuIiwiQ09NUE9ORU5UX1RZUEUiLCJQVU1QX0NPTVBPTkVOVF9UWVBFIiwidXNlQ3JlYXRlQ29udGV4dCIsIlB1bXBDb250ZXh0UHJvdmlkZXIiLCJ1c2VQdW1wQ29udGV4dCIsIlB1bXBDb21wb3VuZCIsIlJvb3QiLCJjb21wb25lbnRQcm9wcyIsInB1bXBQcm9wcyIsIm9uQWN0aW9uUGVyZm9ybWVkIiwiY2hpbGRyZW4iLCJwdW1wIiwiZWxSZWYiLCJSZWFjdCIsInVzZVJlZiIsImVtaXQiLCJwdW1wVHlwZSIsImNvbXBvbmVudEl0ZW1OYW1lcyIsInB1bXBJdGVtTmFtZXMiLCJpc0Nvb3JkQ2hpbGQiLCJzdG9yZSIsImlzQ29vcmRDb250YWluZXJDaGlsZCIsImZsZXhSb3dXcmFwcGVyIiwiZW1pdENsYXNzTmFtZXMiLCJyZWYiLCJjbGFzc2VzIiwiZ2V0UHVtcFN0YXR1c0NsYXNzTmFtZXMiLCJuYW1lIiwiaW5kZXgiLCJrZXkiLCJnZXRQdW1wSXRlbUNsYXNzTmFtZSIsInBvcG92ZXIiLCJhbmNob3JFbCIsInBvc2l0aW9uIiwiZ2V0SXRlbUlkUG9zaXRpb25DbGFzc05hbWUiLCJzdHlsZSIsInRvcCIsImxlZnQiLCJwYWRkaW5nIiwiZ2V0SXRlbUNsYXNzTmFtZSIsIkFjdGl2YXRlZENvbmZpZ1ZhbHVlIiwiRGVhY3RpdmF0ZWRDb25maWdWYWx1ZSIsImluY2x1ZGVzIiwicmVwbGFjZSIsImdldFZhbHZlTXBJdGVtQ2xhc3NOYW1lIiwidXNsIiwibHNsIiwiaXRlbU5hbWVzIiwiSXRlbU5hbWVFbnVtIiwidmFsdmVNcEl0ZW1OYW1lcyIsInZhbHZlTXBJdGVtTmFtZUVudW0iLCJpdGVtSWRQb3NpdGlvbiIsIndhcm4iLCJwdW1wSXRlbUxpc3QiLCJnZXRQdW1wQ29uZmlndXJhdGlvbiIsImRpc3BhdGNoIiwidmFsdmVSZWR1Y2VyIiwicmVkdWNlciIsInVwZGF0ZUFjdENvbmZpZyIsInVwZGF0ZURlQWN0Q29uZmlnIiwidXBkYXRlQWxhcm0iLCJ1cGRhdGVBY3RGQiIsInVwZGF0ZURlQWN0RkIiLCJ1cGRhdGVVc2wiLCJ1cGRhdGVMc2wiLCJ1cGRhdGVNYW51YWwiLCJ1cGRhdGVNYXNrZWQiLCJ1cGRhdGVDaGFuZ2luZyIsInVwZGF0ZUxvY2F0ZSIsIlBhcmFtZXRlclJlZHVjZXIiLCJ1cGRhdGVWYWx1ZSIsInZhbHZlTXBSZWR1Y2VyIiwidXBkYXRlQXV0b01hblNlbGVjdGlvbiIsIm1vZGUiLCJ1cGRhdGVNYWluTWFudWFsT24iLCJ1cGRhdGVNYWluTWFudWFsT2ZmIiwidXBkYXRlVXNsTWFudWFsT24iLCJ1cGRhdGVVc2xNYW51YWxPZmYiLCJ1cGRhdGVMc2xNYW51YWxPbiIsInVwZGF0ZUxzbE1hbnVhbE9mZiIsImRyYWZ0IiwiYWN0aW9uIiwicm9vdENvbXBvbmVudE5hbWUiLCJkZWZhdWx0Q29udGV4dCIsIkNvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiUHJvdmlkZXIiLCJwcm9wcyIsImNvbnRleHQiLCJjb25zdW1lck5hbWUiLCJ1c2VDb250ZXh0IiwiVkFMVkVfQ09NUE9ORU5UX1RZUEUiLCJWYWx2ZUNsYXNzTmFtZUVudW0iLCJBbGFybVN0YXRlIiwiQWN0aXZhdGVkIiwiRGVhY3RpdmF0ZWQiLCJNYW51YWwiLCJNYXNrZWQiLCJDaGFuZ2luZyIsIk5vQWxhcm1NYXNrIiwiTG9jYXRlIiwiVjFiMSIsIlYxYjIiLCJWMWIzIiwiVjFiNCIsIlYyYjEiLCJWMmIyIiwiVjJiMyIsIlYyYjQiLCJWM2IxIiwiVjNiMiIsIlYzYjMiLCJWM2I0IiwiVjIiLCJWMyIsIlYxIiwiVjJmMSIsIlYyZjIiLCJWM2YxIiwiVjNmMiIsIkl0ZW1DbGlja2FibGVOYW1lRW51bSIsInZhbHZlTXBJdGVtQ2xpY2thYmxlTmFtZUVudW0iLCJJdGVtUG9zaXRpb25FbnVtIiwidjFiMSIsInYxYjIiLCJ2MWIzIiwidjFiNCIsInYyYjEiLCJ2MmIzIiwidjJiNCIsInYzYjEiLCJ2M2IyIiwidjNiMyIsInYzYjQiLCJ2MiIsIlVSTCIsIkROUyIsInNoYTFfanNfMSIsInYzNV9qc18xIiwidjM1X2pzXzIiLCJuYW1lc3BhY2UiLCJtZDVfanNfMSIsIlZhbHZlQ29udGV4dFByb3ZpZGVyIiwidXNlVmFsdmVDb250ZXh0IiwiVmFsdmVNcENvbXBvdW5kIiwidXNlVmFsdmVSZWR1Y2VyIiwidmFsdmUiLCJ2YWx2ZVJlZiIsImluQ29vcmQiLCJyZWdleF9qc18xIiwidGVzdCIsInBhcnNlSW50IiwiUk9UTCIsIm5ld0J5dGVzIiwiTWF0aCIsImNlaWwiLCJwb3ciLCJmbG9vciIsImluaXRQYXJhbWV0ZXJzIiwiUGFyYW1ldGVyTGlzdENvbXBvbmVudCIsInRyYW5zZm9ybWVkUHJvcHMiLCJwYXJhbWV0ZXJzIiwicGFyYW0iLCJpZCIsImlucHV0TW9kZSIsImRpc2FibGVkIiwib25DaGFuZ2UiLCJ3cml0ZSIsImN1cnJlbnRUYXJnZXQiLCJnZXRDb21wb25lbnRUeXBlIiwiZ2V0RGVmYXVsdFNpemUiLCJ3aWR0aCIsImhlaWdodCIsImdldFByb3BzUmVkdWNlciIsInRyZWUiLCJyZWFkIiwiZ2V0Vmlld0NvbXBvbmVudCIsIkNvbW1hbmRWYWx2ZU1wIiwibWVtbyIsInVzZVZhbHZlTXBDb21tYW5kUmVkdWNlciIsInVzZUVmZmVjdCIsInVuc3Vic2NyaWJlIiwic3Vic2NyaWJlIiwiYWRkcmVzc1BhdGgiLCJpc0RpcnR5IiwiaXNJbnRlcmxvY2tlZCIsImhhbmRsZU1haW5BdXRvTWFudWFsU2VsZWN0aW9uIiwicm9sZSIsInByZXZQcm9wcyIsIm5leHRQcm9wcyIsInJlYWRBcnJheSIsInJlYWRTdHJpbmciLCJyZWFkQm9vbGVhbiIsIlB1bXAiLCJDb21wb25lbnQiLCJldmVudHNFbmFibGVkIiwiY29tcG9uZW50RXZlbnRzIiwiZmlyZUNvbXBvbmVudEV2ZW50IiwiY3JlYXRlUmVmIiwiY29tcG9uZW50RGlkTW91bnQiLCJyZW5kZXIiLCJyZWFkTnVtYmVyIiwiU3RhdHVzVmFsdmVNcCIsInN0YXR1c0l0ZW1zIiwiaXRlbSIsImNoZWNrZWQiLCJyZWFkT25seSIsIlZhbHZlIiwic3RyaW5nVG9CeXRlcyIsInN0ciIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiY2hhckNvZGVBdCIsImhhc2giLCJ2YWx1ZUJ5dGVzIiwibmFtZXNwYWNlQnl0ZXMiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwidG9TdHJpbmdUYWciLCJWYWx2ZU1ldGEiLCJQdW1wTWV0YSIsIlBhcmFtZXRlckxpc3RDb21wb25lbnRNZXRhIiwiQ29tbWFuZFZhbHZlTXBNZXRhIiwiU3RhdHVzVmFsdmVNcE1ldGEiLCJDb21wb25lbnRSZWdpc3RyeSIsInJlZ2lzdGVyIl0sInNvdXJjZVJvb3QiOiIifQ==