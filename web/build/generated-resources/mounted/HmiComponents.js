!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("PerspectiveClient"),require("React")):"function"==typeof define&&define.amd?define("HmiComponents",["PerspectiveClient","React"],t):"object"==typeof exports?exports.HmiComponents=t(require("PerspectiveClient"),require("React")):e.HmiComponents=t(e.PerspectiveClient,e.React)}(self,((e,t)=>(()=>{var n={11:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.unsafeStringify=void 0;const a=n(746),o=[];for(let e=0;e<256;++e)o.push((e+256).toString(16).slice(1));function r(e,t=0){return(o[e[t+0]]+o[e[t+1]]+o[e[t+2]]+o[e[t+3]]+"-"+o[e[t+4]]+o[e[t+5]]+"-"+o[e[t+6]]+o[e[t+7]]+"-"+o[e[t+8]]+o[e[t+9]]+"-"+o[e[t+10]]+o[e[t+11]]+o[e[t+12]]+o[e[t+13]]+o[e[t+14]]+o[e[t+15]]).toLowerCase()}t.unsafeStringify=r,t.default=function(e,t=0){const n=r(e,t);if(!(0,a.default)(n))throw TypeError("Stringified UUID is invalid");return n}},76:(e,t,n)=>{"use strict";var a;Object.defineProperty(t,"__esModule",{value:!0}),t.HeatExchangerCompound=t.useHxContext=t.HxContextProvider=t.COMPONENT_TYPE=void 0;const o=n(883),r=n(535),l=n(152),s=n(506),i=n(445),u=n(921),c=e=>{switch(console.log(`mode: ${e}`),e){case"alarm":return"var(--_error)";case"heating":return"var(--_heating)";case"cooling":return"var(--_cooling)";default:return"lime"}};t.COMPONENT_TYPE=u.HX_COMPONENT_TYPE,a=(0,r.useCreateContext)("HxCompound"),t.HxContextProvider=a[0],t.useHxContext=a[1],t.HeatExchangerCompound={Root:({componentProps:e,itemProps:n,onActionPerformed:a,children:r})=>o.createElement(t.HxContextProvider,{itemProps:n,componentProps:e,onActionPerformed:a},r),plate:()=>{const{itemProps:e,onActionPerformed:n,componentProps:a}=(0,t.useHxContext)("Plate"),r=o.useRef(null),{emit:p}=a,{type:d,locate:m,mode:f}=e,v=(e=>{switch(e){case"plate":return 18;case"tubular":return 15;default:return 0}})(null!=d?d:0);let h=(0,i.buildComponentElements)(v,0);m||(console.log(`locate is: ${m}`),h=h.slice(0,-1)),console.log(`componentItemNames: ${JSON.stringify(h,null,2)}`);const b=`heat-exchanger ${null!=d?d:""}`;return o.createElement("div",Object.assign({ref:r},p({classes:[`${u.IA_SYMBOL_COMPONENT_COLUMN}`]}),{"data-component":t.COMPONENT_TYPE,onClick:n}),o.createElement("div",{className:`${u.IA_SYMBOL_COMPONENT_ROW}`},o.createElement("div",{className:`${u.IA_SYMBOL_COMPONENT_WRAPPER}`},o.createElement("div",{className:`${u.HMI_COMPONENT_CLASS} ${b}`,style:{"--hmi-plate-color":c(null!=f?f:"")}},h.map((({name:e,index:t,key:n})=>o.createElement(l.default,{itemClassName:e+" "+(0,s.getClassNameWithStatus)(t,void 0,u.hxElements,"",v,524287,0,0),key:n})))))))},popover:({anchorEl:e})=>{const{itemProps:n,componentProps:a}=(0,t.useHxContext)("Popover"),{showLabel:r,labelPosition:l,itemName:i}=n;if(!r)return null;const{position:u}=a;let c="itemId popover position-left";return l&&(c=(0,s.getItemIdPositionClassName)(c,l)),o.createElement("div",{className:c,style:{top:u.y,left:u.x}},o.createElement("div",{style:{padding:8}},i))}}},124:e=>{"use strict";var t,n=Object.defineProperty,a=Object.getOwnPropertyDescriptor,o=Object.getOwnPropertyNames,r=Object.prototype.hasOwnProperty,l={};((e,t)=>{for(var a in t)n(e,a,{get:t[a],enumerable:!0})})(l,{Immer:()=>K,applyPatches:()=>le,castDraft:()=>ue,castImmutable:()=>ce,createDraft:()=>se,current:()=>G,enableMapSet:()=>ee,enablePatches:()=>Z,finishDraft:()=>ie,freeze:()=>C,immerable:()=>i,isDraft:()=>d,isDraftable:()=>m,nothing:()=>s,original:()=>h,produce:()=>ne,produceWithPatches:()=>ae,setAutoFreeze:()=>oe,setUseStrictShallowCopy:()=>re}),e.exports=(t=l,((e,t,l,s)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let l of o(t))!r.call(e,l)&&undefined!==l&&n(e,l,{get:()=>t[l],enumerable:!(s=a(t,l))||s.enumerable});return e})(n({},"__esModule",{value:!0}),t));var s=Symbol.for("immer-nothing"),i=Symbol.for("immer-draftable"),u=Symbol.for("immer-state");function c(e,...t){throw new Error(`[Immer] minified error nr: ${e}. Full error at: https://bit.ly/3cXEKWf`)}var p=Object.getPrototypeOf;function d(e){return!!e&&!!e[u]}function m(e){return!!e&&(v(e)||Array.isArray(e)||!!e[i]||!!e.constructor?.[i]||N(e)||_(e))}var f=Object.prototype.constructor.toString();function v(e){if(!e||"object"!=typeof e)return!1;let t=p(e);if(null===t)return!0;let n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return n===Object||"function"==typeof n&&Function.toString.call(n)===f}function h(e){return d(e)||c(15),e[u].t}function b(e,t){0===P(e)?Reflect.ownKeys(e).forEach((n=>{t(n,e[n],e)})):e.forEach(((n,a)=>t(a,n,e)))}function P(e){let t=e[u];return t?t.o:Array.isArray(e)?1:N(e)?2:_(e)?3:0}function O(e,t){return 2===P(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function g(e,t){return 2===P(e)?e.get(t):e[t]}function M(e,t,n){let a=P(e);2===a?e.set(t,n):3===a?e.add(n):e[t]=n}function N(e){return e instanceof Map}function _(e){return e instanceof Set}function y(e){return e.e||e.t}function E(e,t){if(N(e))return new Map(e);if(_(e))return new Set(e);if(Array.isArray(e))return Array.prototype.slice.call(e);let n=v(e);if(!0===t||"class_only"===t&&!n){let t=Object.getOwnPropertyDescriptors(e);delete t[u];let n=Reflect.ownKeys(t);for(let a=0;a<n.length;a++){let o=n[a],r=t[o];!1===r.writable&&(r.writable=!0,r.configurable=!0),(r.get||r.set)&&(t[o]={configurable:!0,writable:!0,enumerable:r.enumerable,value:e[o]})}return Object.create(p(e),t)}{let t=p(e);if(null!==t&&n)return{...e};let a=Object.create(t);return Object.assign(a,e)}}function C(e,t=!1){return A(e)||d(e)||!m(e)||(P(e)>1&&(e.set=e.add=e.clear=e.delete=S),Object.freeze(e),t&&Object.entries(e).forEach((([e,t])=>C(t,!0)))),e}function S(){c(2)}function A(e){return Object.isFrozen(e)}var w,T={};function j(e){let t=T[e];return t||c(0),t}function I(e,t){T[e]||(T[e]=t)}function x(){return w}function L(e,t){t&&(j("Patches"),e.f=[],e.h=[],e.b=t)}function V(e){U(e),e.a.forEach(B),e.a=null}function U(e){e===w&&(w=e.i)}function R(e){return w=function(e,t){return{a:[],i:e,p:t,P:!0,d:0}}(w,e)}function B(e){let t=e[u];0===t.o||1===t.o?t.x():t.m=!0}function k(e,t){t.d=t.a.length;let n=t.a[0];return void 0!==e&&e!==n?(n[u].s&&(V(t),c(4)),m(e)&&(e=D(t,e),t.i||$(t,e)),t.f&&j("Patches").T(n[u].t,e,t.f,t.h)):e=D(t,n,[]),V(t),t.f&&t.b(t.f,t.h),e!==s?e:void 0}function D(e,t,n){if(A(t))return t;let a=t[u];if(!a)return b(t,((o,r)=>Y(e,a,t,o,r,n))),t;if(a.n!==e)return t;if(!a.s)return $(e,a.t,!0),a.t;if(!a.c){a.c=!0,a.n.d--;let t=a.e,o=t,r=!1;3===a.o&&(o=new Set(t),t.clear(),r=!0),b(o,((o,l)=>Y(e,a,t,o,l,n,r))),$(e,t,!1),n&&e.f&&j("Patches").g(a,n,e.f,e.h)}return a.e}function Y(e,t,n,a,o,r,l){if(d(o)){let l=D(e,o,r&&t&&3!==t.o&&!O(t.r,a)?r.concat(a):void 0);if(M(n,a,l),!d(l))return;e.P=!1}else l&&n.add(o);if(m(o)&&!A(o)){if(!e.p.y&&e.d<1)return;D(e,o),(!t||!t.n.i)&&"symbol"!=typeof a&&Object.prototype.propertyIsEnumerable.call(n,a)&&$(e,o)}}function $(e,t,n=!1){!e.i&&e.p.y&&e.P&&C(t,n)}var H={get(e,t){if(t===u)return e;let n=y(e);if(!O(n,t))return function(e,t,n){let a=z(t,n);return a?"value"in a?a.value:a.get?.call(e.u):void 0}(e,n,t);let a=n[t];return e.c||!m(a)?a:a===W(e.t,t)?(X(e),e.e[t]=J(a,e)):a},has:(e,t)=>t in y(e),ownKeys:e=>Reflect.ownKeys(y(e)),set(e,t,n){let a=z(y(e),t);if(a?.set)return a.set.call(e.u,n),!0;if(!e.s){let a=W(y(e),t),o=a?.[u];if(o&&o.t===n)return e.e[t]=n,e.r[t]=!1,!0;if(function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}(n,a)&&(void 0!==n||O(e.t,t)))return!0;X(e),q(e)}return e.e[t]===n&&(void 0!==n||t in e.e)||Number.isNaN(n)&&Number.isNaN(e.e[t])||(e.e[t]=n,e.r[t]=!0),!0},deleteProperty:(e,t)=>(void 0!==W(e.t,t)||t in e.t?(e.r[t]=!1,X(e),q(e)):delete e.r[t],e.e&&delete e.e[t],!0),getOwnPropertyDescriptor(e,t){let n=y(e),a=Reflect.getOwnPropertyDescriptor(n,t);return a&&{writable:!0,configurable:1!==e.o||"length"!==t,enumerable:a.enumerable,value:n[t]}},defineProperty(){c(11)},getPrototypeOf:e=>p(e.t),setPrototypeOf(){c(12)}},F={};function W(e,t){let n=e[u];return(n?y(n):e)[t]}function z(e,t){if(!(t in e))return;let n=p(e);for(;n;){let e=Object.getOwnPropertyDescriptor(n,t);if(e)return e;n=p(n)}}function q(e){e.s||(e.s=!0,e.i&&q(e.i))}function X(e){e.e||(e.e=E(e.t,e.n.p.S))}b(H,((e,t)=>{F[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),F.deleteProperty=function(e,t){return F.set.call(this,e,t,void 0)},F.set=function(e,t,n){return H.set.call(this,e[0],t,n,e[0])};var K=class{constructor(e){this.y=!0,this.S=!1,this.produce=(e,t,n)=>{if("function"==typeof e&&"function"!=typeof t){let n=t;t=e;let a=this;return function(e=n,...o){return a.produce(e,(e=>t.call(this,e,...o)))}}let a;if("function"!=typeof t&&c(6),void 0!==n&&"function"!=typeof n&&c(7),m(e)){let o=R(this),r=J(e,void 0),l=!0;try{a=t(r),l=!1}finally{l?V(o):U(o)}return L(o,n),k(a,o)}if(!e||"object"!=typeof e){if(a=t(e),void 0===a&&(a=e),a===s&&(a=void 0),this.y&&C(a,!0),n){let t=[],o=[];j("Patches").T(e,a,t,o),n(t,o)}return a}c(1)},this.produceWithPatches=(e,t)=>{if("function"==typeof e)return(t,...n)=>this.produceWithPatches(t,(t=>e(t,...n)));let n,a;return[this.produce(e,t,((e,t)=>{n=e,a=t})),n,a]},"boolean"==typeof e?.autoFreeze&&this.setAutoFreeze(e.autoFreeze),"boolean"==typeof e?.useStrictShallowCopy&&this.setUseStrictShallowCopy(e.useStrictShallowCopy)}createDraft(e){m(e)||c(8),d(e)&&(e=G(e));let t=R(this),n=J(e,void 0);return n[u].l=!0,U(t),n}finishDraft(e,t){let n=e&&e[u];(!n||!n.l)&&c(9);let{n:a}=n;return L(a,t),k(void 0,a)}setAutoFreeze(e){this.y=e}setUseStrictShallowCopy(e){this.S=e}applyPatches(e,t){let n;for(n=t.length-1;n>=0;n--){let a=t[n];if(0===a.path.length&&"replace"===a.op){e=a.value;break}}n>-1&&(t=t.slice(n+1));let a=j("Patches").A;return d(e)?a(e,t):this.produce(e,(e=>a(e,t)))}};function J(e,t){let n=N(e)?j("MapSet").I(e,t):_(e)?j("MapSet").D(e,t):function(e,t){let n=Array.isArray(e),a={o:n?1:0,n:t?t.n:x(),s:!1,c:!1,r:{},i:t,t:e,u:null,e:null,x:null,l:!1},o=a,r=H;n&&(o=[a],r=F);let{revoke:l,proxy:s}=Proxy.revocable(o,r);return a.u=s,a.x=l,s}(e,t);return(t?t.n:x()).a.push(n),n}function G(e){return d(e)||c(10),Q(e)}function Q(e){if(!m(e)||A(e))return e;let t,n=e[u];if(n){if(!n.s)return n.t;n.c=!0,t=E(e,n.n.p.S)}else t=E(e,!0);return b(t,((e,n)=>{M(t,e,Q(n))})),n&&(n.c=!1),t}function Z(){let e="replace",t="add",n="remove";function a(e){if(!m(e))return e;if(Array.isArray(e))return e.map(a);if(N(e))return new Map(Array.from(e.entries()).map((([e,t])=>[e,a(t)])));if(_(e))return new Set(Array.from(e).map(a));let t=Object.create(p(e));for(let n in e)t[n]=a(e[n]);return O(e,i)&&(t[i]=e[i]),t}function o(e){return d(e)?a(e):e}I("Patches",{A:function(o,r){return r.forEach((r=>{let{path:l,op:s}=r,i=o;for(let e=0;e<l.length-1;e++){let t=P(i),n=l[e];"string"!=typeof n&&"number"!=typeof n&&(n=""+n),(0===t||1===t)&&("__proto__"===n||"constructor"===n)&&c(19),"function"==typeof i&&"prototype"===n&&c(19),i=g(i,n),"object"!=typeof i&&c(18,l.join("/"))}let u=P(i),p=a(r.value),d=l[l.length-1];switch(s){case e:switch(u){case 2:return i.set(d,p);case 3:c(16);default:return i[d]=p}case t:switch(u){case 1:return"-"===d?i.push(p):i.splice(d,0,p);case 2:return i.set(d,p);case 3:return i.add(p);default:return i[d]=p}case n:switch(u){case 1:return i.splice(d,1);case 2:return i.delete(d);case 3:return i.delete(r.value);default:return delete i[d]}default:c(17)}})),o},g:function(a,r,l,s){switch(a.o){case 0:case 2:return function(a,r,l,s){let{t:i,e:u}=a;b(a.r,((a,c)=>{let p=g(i,a),d=g(u,a),m=c?O(i,a)?e:t:n;if(p===d&&m===e)return;let f=r.concat(a);l.push(m===n?{op:m,path:f}:{op:m,path:f,value:d}),s.push(m===t?{op:n,path:f}:m===n?{op:t,path:f,value:o(p)}:{op:e,path:f,value:o(p)})}))}(a,r,l,s);case 1:return function(a,r,l,s){let{t:i,r:u}=a,c=a.e;c.length<i.length&&([i,c]=[c,i],[l,s]=[s,l]);for(let t=0;t<i.length;t++)if(u[t]&&c[t]!==i[t]){let n=r.concat([t]);l.push({op:e,path:n,value:o(c[t])}),s.push({op:e,path:n,value:o(i[t])})}for(let e=i.length;e<c.length;e++){let n=r.concat([e]);l.push({op:t,path:n,value:o(c[e])})}for(let e=c.length-1;i.length<=e;--e){let t=r.concat([e]);s.push({op:n,path:t})}}(a,r,l,s);case 3:return function(e,a,o,r){let{t:l,e:s}=e,i=0;l.forEach((e=>{if(!s.has(e)){let l=a.concat([i]);o.push({op:n,path:l,value:e}),r.unshift({op:t,path:l,value:e})}i++})),i=0,s.forEach((e=>{if(!l.has(e)){let l=a.concat([i]);o.push({op:t,path:l,value:e}),r.unshift({op:n,path:l,value:e})}i++}))}(a,r,l,s)}},T:function(t,n,a,o){a.push({op:e,path:[],value:n===s?void 0:n}),o.push({op:e,path:[],value:t})}})}function ee(){class e extends Map{constructor(e,t){super(),this[u]={o:2,i:t,n:t?t.n:x(),s:!1,c:!1,e:void 0,r:void 0,t:e,u:this,l:!1,m:!1}}get size(){return y(this[u]).size}has(e){return y(this[u]).has(e)}set(e,n){let a=this[u];return o(a),(!y(a).has(e)||y(a).get(e)!==n)&&(t(a),q(a),a.r.set(e,!0),a.e.set(e,n),a.r.set(e,!0)),this}delete(e){if(!this.has(e))return!1;let n=this[u];return o(n),t(n),q(n),n.t.has(e)?n.r.set(e,!1):n.r.delete(e),n.e.delete(e),!0}clear(){let e=this[u];o(e),y(e).size&&(t(e),q(e),e.r=new Map,b(e.t,(t=>{e.r.set(t,!1)})),e.e.clear())}forEach(e,t){y(this[u]).forEach(((n,a,o)=>{e.call(t,this.get(a),a,this)}))}get(e){let n=this[u];o(n);let a=y(n).get(e);if(n.c||!m(a)||a!==n.t.get(e))return a;let r=J(a,n);return t(n),n.e.set(e,r),r}keys(){return y(this[u]).keys()}values(){let e=this.keys();return{[Symbol.iterator]:()=>this.values(),next:()=>{let t=e.next();return t.done?t:{done:!1,value:this.get(t.value)}}}}entries(){let e=this.keys();return{[Symbol.iterator]:()=>this.entries(),next:()=>{let t=e.next();if(t.done)return t;let n=this.get(t.value);return{done:!1,value:[t.value,n]}}}}[Symbol.iterator](){return this.entries()}}function t(e){e.e||(e.r=new Map,e.e=new Map(e.t))}class n extends Set{constructor(e,t){super(),this[u]={o:3,i:t,n:t?t.n:x(),s:!1,c:!1,e:void 0,t:e,u:this,a:new Map,m:!1,l:!1}}get size(){return y(this[u]).size}has(e){let t=this[u];return o(t),t.e?!!(t.e.has(e)||t.a.has(e)&&t.e.has(t.a.get(e))):t.t.has(e)}add(e){let t=this[u];return o(t),this.has(e)||(a(t),q(t),t.e.add(e)),this}delete(e){if(!this.has(e))return!1;let t=this[u];return o(t),a(t),q(t),t.e.delete(e)||!!t.a.has(e)&&t.e.delete(t.a.get(e))}clear(){let e=this[u];o(e),y(e).size&&(a(e),q(e),e.e.clear())}values(){let e=this[u];return o(e),a(e),e.e.values()}entries(){let e=this[u];return o(e),a(e),e.e.entries()}keys(){return this.values()}[Symbol.iterator](){return this.values()}forEach(e,t){let n=this.values(),a=n.next();for(;!a.done;)e.call(t,a.value,a.value,this),a=n.next()}}function a(e){e.e||(e.e=new Set,e.t.forEach((t=>{if(m(t)){let n=J(t,e);e.a.set(t,n),e.e.add(n)}else e.e.add(t)})))}function o(e){e.m&&c(3,JSON.stringify(y(e)))}I("MapSet",{I:function(t,n){return new e(t,n)},D:function(e,t){return new n(e,t)}})}var te=new K,ne=te.produce,ae=te.produceWithPatches.bind(te),oe=te.setAutoFreeze.bind(te),re=te.setUseStrictShallowCopy.bind(te),le=te.applyPatches.bind(te),se=te.createDraft.bind(te),ie=te.finishDraft.bind(te);function ue(e){return e}function ce(e){return e}},152:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=n(883),o=({itemClassName:e,handleClick:t})=>a.createElement("div",{className:e,onClick:t});o.displayName="Item",t.default=o},182:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.version=t.validate=t.v7=t.v6ToV1=t.v6=t.v5=t.v4=t.v3=t.v1ToV6=t.v1=t.stringify=t.parse=t.NIL=t.MAX=void 0;var a=n(196);Object.defineProperty(t,"MAX",{enumerable:!0,get:function(){return a.default}});var o=n(465);Object.defineProperty(t,"NIL",{enumerable:!0,get:function(){return o.default}});var r=n(797);Object.defineProperty(t,"parse",{enumerable:!0,get:function(){return r.default}});var l=n(11);Object.defineProperty(t,"stringify",{enumerable:!0,get:function(){return l.default}});var s=n(425);Object.defineProperty(t,"v1",{enumerable:!0,get:function(){return s.default}});var i=n(568);Object.defineProperty(t,"v1ToV6",{enumerable:!0,get:function(){return i.default}});var u=n(591);Object.defineProperty(t,"v3",{enumerable:!0,get:function(){return u.default}});var c=n(286);Object.defineProperty(t,"v4",{enumerable:!0,get:function(){return c.default}});var p=n(557);Object.defineProperty(t,"v5",{enumerable:!0,get:function(){return p.default}});var d=n(356);Object.defineProperty(t,"v6",{enumerable:!0,get:function(){return d.default}});var m=n(268);Object.defineProperty(t,"v6ToV1",{enumerable:!0,get:function(){return m.default}});var f=n(299);Object.defineProperty(t,"v7",{enumerable:!0,get:function(){return f.default}});var v=n(746);Object.defineProperty(t,"validate",{enumerable:!0,get:function(){return v.default}});var h=n(770);Object.defineProperty(t,"version",{enumerable:!0,get:function(){return h.default}})},196:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="ffffffff-ffff-ffff-ffff-ffffffffffff"},268:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=n(797),o=n(11);t.default=function(e){const t=(n="string"==typeof e?(0,a.default)(e):e,Uint8Array.of((15&n[3])<<4|n[4]>>4&15,(15&n[4])<<4|(240&n[5])>>4,(15&n[5])<<4|15&n[6],n[7],(15&n[1])<<4|(240&n[2])>>4,(15&n[2])<<4|(240&n[3])>>4,16|(240&n[0])>>4,(15&n[0])<<4|(240&n[1])>>4,n[8],n[9],n[10],n[11],n[12],n[13],n[14],n[15]));var n;return"string"==typeof e?(0,o.unsafeStringify)(t):t}},286:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=n(779),o=n(291),r=n(11);t.default=function(e,t,n){if(a.default.randomUUID&&!t&&!e)return a.default.randomUUID();const l=(e=e||{}).random??e.rng?.()??(0,o.default)();if(l.length<16)throw new Error("Random bytes length must be >= 16");if(l[6]=15&l[6]|64,l[8]=63&l[8]|128,t){if((n=n||0)<0||n+16>t.length)throw new RangeError(`UUID byte range ${n}:${n+15} is out of buffer bounds`);for(let e=0;e<16;++e)t[n+e]=l[e];return t}return(0,r.unsafeStringify)(l)}},291:(e,t)=>{"use strict";let n;Object.defineProperty(t,"__esModule",{value:!0});const a=new Uint8Array(16);t.default=function(){if(!n){if("undefined"==typeof crypto||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");n=crypto.getRandomValues.bind(crypto)}return n(a)}},299:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateV7State=void 0;const a=n(291),o=n(11),r={};function l(e,t,n){return e.msecs??=-1/0,e.seq??=0,t>e.msecs?(e.seq=n[6]<<23|n[7]<<16|n[8]<<8|n[9],e.msecs=t):(e.seq=e.seq+1|0,0===e.seq&&e.msecs++),e}function s(e,t,n,a,o=0){if(e.length<16)throw new Error("Random bytes length must be >= 16");if(a){if(o<0||o+16>a.length)throw new RangeError(`UUID byte range ${o}:${o+15} is out of buffer bounds`)}else a=new Uint8Array(16),o=0;return t??=Date.now(),n??=127*e[6]<<24|e[7]<<16|e[8]<<8|e[9],a[o++]=t/1099511627776&255,a[o++]=t/4294967296&255,a[o++]=t/16777216&255,a[o++]=t/65536&255,a[o++]=t/256&255,a[o++]=255&t,a[o++]=112|n>>>28&15,a[o++]=n>>>20&255,a[o++]=128|n>>>14&63,a[o++]=n>>>6&255,a[o++]=n<<2&255|3&e[10],a[o++]=e[11],a[o++]=e[12],a[o++]=e[13],a[o++]=e[14],a[o++]=e[15],a}t.updateV7State=l,t.default=function(e,t,n){let i;if(e)i=s(e.random??e.rng?.()??(0,a.default)(),e.msecs,e.seq,t,n);else{const e=Date.now(),o=(0,a.default)();l(r,e,o),i=s(o,r.msecs,r.seq,t,n)}return t??(0,o.unsafeStringify)(i)}},338:(e,t)=>{"use strict";function n(e){return 14+(e+64>>>9<<4)+1}function a(e,t){const n=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(n>>16)<<16|65535&n}function o(e,t,n,o,r,l){return a((s=a(a(t,e),a(o,l)))<<(i=r)|s>>>32-i,n);var s,i}function r(e,t,n,a,r,l,s){return o(t&n|~t&a,e,t,r,l,s)}function l(e,t,n,a,r,l,s){return o(t&a|n&~a,e,t,r,l,s)}function s(e,t,n,a,r,l,s){return o(t^n^a,e,t,r,l,s)}function i(e,t,n,a,r,l,s){return o(n^(t|~a),e,t,r,l,s)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return function(e){const t=new Uint8Array(4*e.length);for(let n=0;n<4*e.length;n++)t[n]=e[n>>2]>>>n%4*8&255;return t}(function(e,t){const o=new Uint32Array(n(t)).fill(0);o.set(e),o[t>>5]|=128<<t%32,o[o.length-1]=t,e=o;let u=1732584193,c=-271733879,p=-1732584194,d=271733878;for(let t=0;t<e.length;t+=16){const n=u,o=c,m=p,f=d;u=r(u,c,p,d,e[t],7,-680876936),d=r(d,u,c,p,e[t+1],12,-389564586),p=r(p,d,u,c,e[t+2],17,606105819),c=r(c,p,d,u,e[t+3],22,-1044525330),u=r(u,c,p,d,e[t+4],7,-176418897),d=r(d,u,c,p,e[t+5],12,1200080426),p=r(p,d,u,c,e[t+6],17,-1473231341),c=r(c,p,d,u,e[t+7],22,-45705983),u=r(u,c,p,d,e[t+8],7,1770035416),d=r(d,u,c,p,e[t+9],12,-1958414417),p=r(p,d,u,c,e[t+10],17,-42063),c=r(c,p,d,u,e[t+11],22,-1990404162),u=r(u,c,p,d,e[t+12],7,1804603682),d=r(d,u,c,p,e[t+13],12,-40341101),p=r(p,d,u,c,e[t+14],17,-1502002290),c=r(c,p,d,u,e[t+15],22,1236535329),u=l(u,c,p,d,e[t+1],5,-165796510),d=l(d,u,c,p,e[t+6],9,-1069501632),p=l(p,d,u,c,e[t+11],14,643717713),c=l(c,p,d,u,e[t],20,-373897302),u=l(u,c,p,d,e[t+5],5,-701558691),d=l(d,u,c,p,e[t+10],9,38016083),p=l(p,d,u,c,e[t+15],14,-660478335),c=l(c,p,d,u,e[t+4],20,-405537848),u=l(u,c,p,d,e[t+9],5,568446438),d=l(d,u,c,p,e[t+14],9,-1019803690),p=l(p,d,u,c,e[t+3],14,-187363961),c=l(c,p,d,u,e[t+8],20,1163531501),u=l(u,c,p,d,e[t+13],5,-1444681467),d=l(d,u,c,p,e[t+2],9,-51403784),p=l(p,d,u,c,e[t+7],14,1735328473),c=l(c,p,d,u,e[t+12],20,-1926607734),u=s(u,c,p,d,e[t+5],4,-378558),d=s(d,u,c,p,e[t+8],11,-2022574463),p=s(p,d,u,c,e[t+11],16,1839030562),c=s(c,p,d,u,e[t+14],23,-35309556),u=s(u,c,p,d,e[t+1],4,-1530992060),d=s(d,u,c,p,e[t+4],11,1272893353),p=s(p,d,u,c,e[t+7],16,-155497632),c=s(c,p,d,u,e[t+10],23,-1094730640),u=s(u,c,p,d,e[t+13],4,681279174),d=s(d,u,c,p,e[t],11,-358537222),p=s(p,d,u,c,e[t+3],16,-722521979),c=s(c,p,d,u,e[t+6],23,76029189),u=s(u,c,p,d,e[t+9],4,-640364487),d=s(d,u,c,p,e[t+12],11,-421815835),p=s(p,d,u,c,e[t+15],16,530742520),c=s(c,p,d,u,e[t+2],23,-995338651),u=i(u,c,p,d,e[t],6,-198630844),d=i(d,u,c,p,e[t+7],10,1126891415),p=i(p,d,u,c,e[t+14],15,-1416354905),c=i(c,p,d,u,e[t+5],21,-57434055),u=i(u,c,p,d,e[t+12],6,1700485571),d=i(d,u,c,p,e[t+3],10,-1894986606),p=i(p,d,u,c,e[t+10],15,-1051523),c=i(c,p,d,u,e[t+1],21,-2054922799),u=i(u,c,p,d,e[t+8],6,1873313359),d=i(d,u,c,p,e[t+15],10,-30611744),p=i(p,d,u,c,e[t+6],15,-1560198380),c=i(c,p,d,u,e[t+13],21,1309151649),u=i(u,c,p,d,e[t+4],6,-145523070),d=i(d,u,c,p,e[t+11],10,-1120210379),p=i(p,d,u,c,e[t+2],15,718787259),c=i(c,p,d,u,e[t+9],21,-343485551),u=a(u,n),c=a(c,o),p=a(p,m),d=a(d,f)}return Uint32Array.of(u,c,p,d)}(function(e){if(0===e.length)return new Uint32Array;const t=new Uint32Array(n(8*e.length)).fill(0);for(let n=0;n<e.length;n++)t[n>>2]|=(255&e[n])<<n%4*8;return t}(e),8*e.length))}},348:(e,t,n)=>{var a=n(407),o=n(883);t.useImmer=function(e){var t=o.useState((function(){return a.freeze("function"==typeof e?e():e,!0)})),n=t[1];return[t[0],o.useCallback((function(e){n("function"==typeof e?a.produce(e):a.freeze(e))}),[])]},t.useImmerReducer=function(e,t,n){var r=o.useMemo((function(){return a.produce(e)}),[e]);return o.useReducer(r,t,n)}},356:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=n(11),o=n(425),r=n(568);t.default=function(e,t,n){e??={},n??=0;let l=(0,o.default)({...e,_v6:!0},new Uint8Array(16));if(l=(0,r.default)(l),t){for(let e=0;e<16;e++)t[n+e]=l[e];return t}return(0,a.unsafeStringify)(l)}},377:t=>{"use strict";t.exports=e},390:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.initialControlState=t.initialOffOnState=t.initialAutoManState=t.parameterInitialState=t.pumpInitialProps=t.pumpInitialStatus=t.valveProps=t.processObjectProps=t.valveStatus=void 0,t.valveStatus={alarm:!1,actFB:!1,deActFB:!0,activatedConfig:7,deactivatedConfig:5,itemName:"VXXX",manual:!1,masked:!1,changing:!1,locate:!1},t.processObjectProps={status:t.valveStatus},t.valveProps={processObject:t.processObjectProps,handleClick:()=>{console.log("Valve clicked")},labelPosition:"left",showLabel:!1},t.pumpInitialStatus={alarm:!1,actFB:!1,deActFB:!1,configuration:7,itemName:"itemName",manual:!1,masked:!1,changing:!1,locate:!1},t.pumpInitialProps={status:t.pumpInitialStatus},t.parameterInitialState=[{label:{text:"label",className:"",tooltipText:"",tooltipPosition:"",tooltipClassName:"",tooltipId:""},input:{type:"text",inputmode:"numeric",placeholder:"Enter a number",editable:!0,pattern:"^[0-9]*[.,]?[0-9]*$",min:0,max:100,decimalPlaces:2,eu:"µC",value:0}}],t.initialAutoManState={auto:!0,manual:!1},t.initialOffOnState={off:!1,on:!1},t.initialControlState={command:{interlocks:{main:[],upperSeat:[],lowerSeat:[]},main:{label:"Main",autoManual:!1,activation:!1},upperSeat:{label:"Upper Seat",activation:!1},lowerSeat:{label:"Lower Seat",activation:!1}}}},405:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.HxItemList=t.HxModes=t.HX_COMPONENT_TYPE=void 0,t.HX_COMPONENT_TYPE="hmi.process_objects.HeatExchanger",function(e){e.alarm="alarm",e.heating="heating",e.cooling="cooling"}(n||(t.HxModes=n={})),t.HxItemList=["item-1","item-2","item-3","item-4","item-5","item-6","item-7","base-1","locate"]},407:(e,t,n)=>{"use strict";e.exports=n(124)},425:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateV1State=void 0;const a=n(291),o=n(11),r={};function l(e,t,n){return e.msecs??=-1/0,e.nsecs??=0,t===e.msecs?(e.nsecs++,e.nsecs>=1e4&&(e.node=void 0,e.nsecs=0)):t>e.msecs?e.nsecs=0:t<e.msecs&&(e.node=void 0),e.node||(e.node=n.slice(10,16),e.node[0]|=1,e.clockseq=16383&(n[8]<<8|n[9])),e.msecs=t,e}function s(e,t,n,a,o,r,l=0){if(e.length<16)throw new Error("Random bytes length must be >= 16");if(r){if(l<0||l+16>r.length)throw new RangeError(`UUID byte range ${l}:${l+15} is out of buffer bounds`)}else r=new Uint8Array(16),l=0;t??=Date.now(),n??=0,a??=16383&(e[8]<<8|e[9]),o??=e.slice(10,16);const s=(1e4*(268435455&(t+=122192928e5))+n)%4294967296;r[l++]=s>>>24&255,r[l++]=s>>>16&255,r[l++]=s>>>8&255,r[l++]=255&s;const i=t/4294967296*1e4&268435455;r[l++]=i>>>8&255,r[l++]=255&i,r[l++]=i>>>24&15|16,r[l++]=i>>>16&255,r[l++]=a>>>8|128,r[l++]=255&a;for(let e=0;e<6;++e)r[l++]=o[e];return r}t.updateV1State=l,t.default=function(e,t,n){let i;const u=e?._v6??!1;if(e){const t=Object.keys(e);1===t.length&&"_v6"===t[0]&&(e=void 0)}if(e)i=s(e.random??e.rng?.()??(0,a.default)(),e.msecs,e.nsecs,e.clockseq,e.node,t,n);else{const e=Date.now(),o=(0,a.default)();l(r,e,o),i=s(o,r.msecs,r.nsecs,u?void 0:r.clockseq,u?void 0:r.node,t,n)}return t??(0,o.unsafeStringify)(i)}},429:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getBoolAtIndex=void 0,t.getBoolAtIndex=(e,t)=>Boolean(e>>t&1)},441:(e,t,n)=>{"use strict";var a;Object.defineProperty(t,"__esModule",{value:!0}),t.PumpCompound=t.usePumpContext=t.PumpContextProvider=t.COMPONENT_TYPE=void 0;const o=n(883),r=n(535),l=n(152),s=n(506),i=n(390),u=n(921);t.COMPONENT_TYPE=u.PUMP_COMPONENT_TYPE,a=(0,r.useCreateContext)("PumpCompound"),t.PumpContextProvider=a[0],t.usePumpContext=a[1],t.PumpCompound={Root:({componentProps:e,pumpProps:n,onActionPerformed:a,children:r})=>o.createElement(t.PumpContextProvider,{pumpProps:n,componentProps:e,onActionPerformed:a},r),pump:()=>{const{pumpProps:e,onActionPerformed:n,componentProps:a}=(0,t.usePumpContext)("Valve"),r=o.useRef(null),{emit:c}=a,{processObject:p,pumpType:d}=e,{status:m}=p||i.pumpInitialProps,f=o.useMemo((()=>(null==m?void 0:m.locate)?s.pumpItemNames:s.pumpItemNames.slice(0,-1)),[null==m?void 0:m.locate]);return o.createElement("div",Object.assign({ref:r},c({classes:[`${u.IA_SYMBOL_COMPONENT_COLUMN}`]}),{"data-component":t.COMPONENT_TYPE,onClick:n}),o.createElement("div",{className:`${u.IA_SYMBOL_COMPONENT_ROW}`},o.createElement("div",{className:`${u.IA_SYMBOL_COMPONENT_WRAPPER}`},o.createElement("div",{className:`${u.HMI_COMPONENT_CLASS} pump`},o.createElement(l.default,{itemClassName:`${(0,s.getPumpStatusClassNames)("base-1 show",m)}`}),o.createElement(l.default,{itemClassName:"base-2 show item"}),o.createElement(l.default,{itemClassName:"base-3 show item"}),f.map((({name:e,index:t,key:n})=>o.createElement(l.default,{itemClassName:e+" "+(0,s.getPumpItemClassName)(t,d||"centrifugal",m),key:n})))))))},popover:({anchorEl:e})=>{const{pumpProps:n,componentProps:a}=(0,t.usePumpContext)("Popover"),{showLabel:r,labelPosition:l,processObject:i}=n,{status:u}=i||{};if(!r)return null;const{position:c}=a;let p="itemId popover position-left";return l&&(p=(0,s.getItemIdPositionClassName)(p,l)),o.createElement("div",{className:p,style:{top:c.y,left:c.x}},o.createElement("div",{style:{padding:8}},null==u?void 0:u.itemName))}}},445:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.buildComponentElements=t.getHxModeClassNames=t.getHxItemClassName=t.hxItemNames=void 0;const a=n(182),o=n(405),r=n(429);t.hxItemNames=o.HxItemList.map(((e,t)=>({key:(0,a.v4)(),name:e,index:t}))),t.getHxItemClassName=(e,t,n)=>{const a=(e=>{switch(e){case"plate":case"tubelar":return 1;default:throw Error(`In getPumpConfiguration() pump type: ${e} not found`)}})(t);let o="";return e<2&&(o=(0,r.getBoolAtIndex)(a,e)?`show item ${t}`:"hide item"),o},t.getHxModeClassNames=(e,t)=>{if(e.includes("show")&&!e.includes("item"))switch(t){case"alarm":e=e.replace("AlarmState","")+" AlarmState";break;case"heating":e=e.replace("heating","")+" heating";break;case"cooling":e=e.replace("cooling","")+" cooling"}return e},t.buildComponentElements=(e,t)=>{let n=[];for(let o=0;o<e+t;o++){let r={key:(0,a.v4)(),name:o<e?`base-${o+1}`:`dynamic-${o+(1-t)}`,index:o};n.push(r)}let o={key:(0,a.v4)(),name:"locate",index:e+t};return n.push(o),n}},465:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="00000000-0000-0000-0000-000000000000"},506:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getPumpStatusClassNames=t.getPumpItemClassName=t.pumpItemNames=t.getItemIdPositionClassName=t.valveMpItemNames=t.getClassNameWithStatus=t.getValveMpItemClassName=void 0;const a=n(429),o=n(542),r=n(182);t.getValveMpItemClassName=(e,t)=>{var n,o;let r="";const l=null!==(n=null==t?void 0:t.activatedConfig)&&void 0!==n?n:0,s=null!==(o=null==t?void 0:t.deactivatedConfig)&&void 0!==o?o:0;return e<8?r=(0,a.getBoolAtIndex)(l,e)&&(null==t?void 0:t.actFB)||(0,a.getBoolAtIndex)(s,e)&&(null==t?void 0:t.deActFB)?"show item":"hide item":9===e?r="show":8===e?r=(0,a.getBoolAtIndex)(l,e)||(0,a.getBoolAtIndex)(s,e)?"show":"hide":10===e?(0,a.getBoolAtIndex)(l,10)||(0,a.getBoolAtIndex)(s,10)?(r="show item",r=(null==t?void 0:t.usl)?r.replace("activated","")+" activated":r.replace("deactivated","")+" deactivated"):r="hide item":11===e?(0,a.getBoolAtIndex)(l,11)||(0,a.getBoolAtIndex)(s,11)?(r="show item",r=(null==t?void 0:t.lsl)?r.replace("activated","")+" activated":r.replace("deactivated","")+" deactivated"):r="hide item":12===e&&((null==t?void 0:t.locate)?(r=r.replace("small","")+" small",((0,a.getBoolAtIndex)(l,8)||(0,a.getBoolAtIndex)(s,8))&&(r=r.replace("large","")+" large")):r=r.replace("hide item","")+" hide item"),r.includes("show")&&!r.includes("item")&&((null==t?void 0:t.alarm)&&(r=r.replace("alarm","")+" alarm"),(null==t?void 0:t.changing)&&(r=r.replace("changing","")+" changing"),(null==t?void 0:t.manual)&&(r=r.replace("manual","")+" manual"),(null==t?void 0:t.masked)&&!t.alarm&&(r=r.replace("no-alarm-mask","")+" no-alarm-mask"),(null==t?void 0:t.masked)&&(r=r.replace("masked","")+" masked"),(null==t?void 0:t.actFB)&&(r=r.replace("activated","")+" activated"),(null==t?void 0:t.deActFB)&&(r=r.replace("deactivated","")+" deactivated")),r},t.getClassNameWithStatus=(e,t,n,o,r,l,s,i)=>{var u;let c="",p="";if(n&&(null===(u=n[e])||void 0===u?void 0:u.statusKey)&&t){const a=n[e].statusKey,o=Object.keys(a).filter((e=>e in t));for(const e of o){const n=a[e];p+=t[e]?` ${(null==n?void 0:n.trueString)?n.trueString:""}`:` ${(null==n?void 0:n.falseString)?n.falseString:""}`}}if(r&&l){if(e<r){let t=e>0?"item":`${o}`;c=(0,a.getBoolAtIndex)(l,e)?`show ${t} ${p}`:`hide ${t}`}if(s&&i){let t=e-r;e>=r&&e<r+s&&(c=(0,a.getBoolAtIndex)(i,t)?"show item":"hide item")}}return c},t.valveMpItemNames=Object.entries(o.valveMpItemNameEnum).map(((e,t)=>({key:(0,r.v4)(),name:e,value:e[1],index:t}))),t.getItemIdPositionClassName=(e,t)=>{if(!e.includes("itemId popover"))return console.warn("Function getItemIdPositionClassName called when 'itemId popover' not in given className"),e;switch(e="itemId popover",t){case"left":e=e.replace("position-left","")+" position-left";break;case"right":e=e.replace("position-right","")+" position-right";break;case"top-left":e=e.replace("position-top-left","")+" position-top-left";break;case"top-right":e=e.replace("position-top-right","")+" position-top-right";break;case"bottom-left":e=e.replace("position-bottom-left","")+" position-bottom-left";break;case"bottom-right":e=e.replace("position-bottom-right","")+" position-bottom-right"}return e},t.pumpItemNames=o.pumpItemList.map(((e,t)=>({key:(0,r.v4)(),name:e,index:t}))),t.getPumpItemClassName=(e,t,n)=>{const o=(e=>{switch(e){case"centrifugal":case"diaphragm":case"positive-displacement":case"progressive-cavity":return 1;case"gear":case"liquid-ring":case"positive-screw":return 3;default:throw Error(`In getPumpConfiguration() pump type: ${e} not found`)}})(t);let r="";return e<2&&(r=(0,a.getBoolAtIndex)(o,e)?`show item ${t}`:"hide item"),r},t.getPumpStatusClassNames=(e,t)=>(e.includes("show")&&!e.includes("item")&&((null==t?void 0:t.alarm)&&(e=e.replace("alarm","")+" alarm"),(null==t?void 0:t.changing)&&(e=e.replace("changing","")+" changing"),(null==t?void 0:t.manual)&&(e=e.replace("manual","")+" manual"),(null==t?void 0:t.masked)&&!t.alarm&&(e=e.replace("no-alarm-mask","")+" no-alarm-mask"),(null==t?void 0:t.masked)&&(e=e.replace("masked","")+" masked"),(null==t?void 0:t.actFB)&&(e=e.replace("activated","")+" activated"),(null==t?void 0:t.deActFB)&&(e=e.replace("deactivated","")+" deactivated")),e)},511:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ParameterReducer=r,t.paramItemsReducer=function(){const[e,t]=(0,a.useImmerReducer)(r,o.parameterInitialState);return{state:e,reducer:{updateValue:function(e,n){t({type:"UPDATE_VALUE",index:e,value:n})}}}},t.useValveMpCommandReducer=function(){const[e,t]=(0,a.useImmerReducer)(l,o.initialControlState);return{state:e,reducer:{updateAutoManSelection:function(e){t({type:"UPDATE_AUTO_MANUAL",mode:e})},updateMainManualOn:function(){t({type:"UPDATE_MAIN_MAN_ON"})},updateMainManualOff:function(){t({type:"UPDATE_MAIN_MAN_OFF"})},updateUslManualOn:function(){t({type:"UPDATE_USL_MAN_ON"})},updateUslManualOff:function(){t({type:"UPDATE_USL_MAN_OFF"})},updateLslManualOn:function(){t({type:"UPDATE_LSL_MAN_ON"})},updateLslManualOff:function(){t({type:"UPDATE_LSL_MAN_OFF"})}}}};const a=n(348),o=n(390);function r(e,t){return"UPDATE_VALUE"===t.type?(e[t.index].input.value=t.value,e):e}function l(e,t){var n,a,o,r,l,s,i;switch(t.type){case"UPDATE_AUTO_MANUAL":if(null===(n=e.command)||void 0===n?void 0:n.main)if("auto"===t.mode)e.command.main.autoManual=!1,console.log("In Auto");else if("manual"===t.mode)return e.command.main.autoManual=!0,console.log("In Manual"),e;return e;case"UPDATE_MAIN_MAN_ON":return(null===(a=e.command)||void 0===a?void 0:a.main)&&(e.command.main.activation=!0),e;case"UPDATE_MAIN_MAN_OFF":return(null===(o=e.command)||void 0===o?void 0:o.main)&&(e.command.main.activation=!1),e;case"UPDATE_USL_MAN_ON":return(null===(r=e.command)||void 0===r?void 0:r.upperSeat)&&(e.command.upperSeat.activation=!0),e;case"UPDATE_USL_MAN_OFF":return(null===(l=e.command)||void 0===l?void 0:l.upperSeat)&&(e.command.upperSeat.activation=!1),e;case"UPDATE_LSL_MAN_ON":return(null===(s=e.command)||void 0===s?void 0:s.lowerSeat)&&(e.command.lowerSeat.activation=!0),e;case"UPDATE_LSL_MAN_OFF":return(null===(i=e.command)||void 0===i?void 0:i.lowerSeat)&&(e.command.lowerSeat.activation=!1),e;default:return e}}},535:function(e,t,n){"use strict";var a=this&&this.__rest||function(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(a=Object.getOwnPropertySymbols(e);o<a.length;o++)t.indexOf(a[o])<0&&Object.prototype.propertyIsEnumerable.call(e,a[o])&&(n[a[o]]=e[a[o]])}return n};Object.defineProperty(t,"__esModule",{value:!0}),t.useCreateContext=function(e,t){const n=o.createContext(t),r=e=>{const{children:t}=e,r=a(e,["children"]),l=o.useMemo((()=>r),Object.values(r));return o.createElement(n.Provider,{value:l},t)};return r.displayName=e+"Provider",[r,function(a){const r=o.useContext(n);if(r)return r;if(void 0!==t)return t;throw new Error(`\`${a}\` must be used within \`${e}\``)}]};const o=n(883)},542:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hxItemNameEnum=t.pumpItemList=t.valveMpItemNameEnum=t.ValveClassNameEnum=void 0,t.ValveClassNameEnum={AlarmState:"AlarmState",Activated:"Activated",Deactivated:"Deactivated",Manual:"Manual",Masked:"Masked",Changing:"Changing",NoAlarmMask:"NoAlarmMask",Locate:"Locate"},t.valveMpItemNameEnum={V1b1:"v1b1",V1b2:"v1b2",V1b3:"v1b3",V1b4:"v1b4",V2b1:"v2b1",V2b2:"v2b2",V2b3:"v2b3",V2b4:"v2b4",V2:"v2",v1:"v1",usl:"usl",lsl:"lsl",locate:"locate"},t.pumpItemList=["symbol-1","symbol-2","locate"],t.hxItemNameEnum={b1:"base-1",b2:"base-2",b3:"base-3",b4:"base-4",V2b1:"v2b1",V2b2:"v2b2",V2b3:"v2b3",V2b4:"v2b4",V2:"v2",v1:"v1",usl:"usl",lsl:"lsl",locate:"locate"}},557:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=void 0;const a=n(829),o=n(988);var r=n(988);function l(e,t,n,r){return(0,o.default)(80,a.default,e,t,n,r)}Object.defineProperty(t,"DNS",{enumerable:!0,get:function(){return r.DNS}}),Object.defineProperty(t,"URL",{enumerable:!0,get:function(){return r.URL}}),l.DNS=o.DNS,l.URL=o.URL,t.default=l},568:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=n(797),o=n(11);t.default=function(e){const t=(n="string"==typeof e?(0,a.default)(e):e,Uint8Array.of((15&n[6])<<4|n[7]>>4&15,(15&n[7])<<4|(240&n[4])>>4,(15&n[4])<<4|(240&n[5])>>4,(15&n[5])<<4|(240&n[0])>>4,(15&n[0])<<4|(240&n[1])>>4,(15&n[1])<<4|(240&n[2])>>4,96|15&n[2],n[3],n[8],n[9],n[10],n[11],n[12],n[13],n[14],n[15]));var n;return"string"==typeof e?(0,o.unsafeStringify)(t):t}},570:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HeatExchangerMeta=t.HeatExchanger=t.COMPONENT_TYPE=void 0;const a=n(883),o=n(377),r=n(76);t.COMPONENT_TYPE="hmi.process_objects.HeatExchanger";class l extends o.Component{constructor(e){super(e),this.type=this.props.props.type,this.itemName=this.props.props.itemName,this.mode=this.props.props.mode,this.locate=this.props.props.locate,this.showLabel=this.props.props.showLabel||!1,this.labelPosition=this.props.props.labelPosition||"left",this.onActionPerformed=()=>{this.props.eventsEnabled?(console.log("Valve clicked!"),this.props.componentEvents.fireComponentEvent("onActionPerformed",{})):console.log("Valve is disabled in the design-scope")},this.valveRef=a.createRef()}componentDidMount(){}render(){return a.createElement(r.HeatExchangerCompound.Root,{componentProps:this.props,itemProps:this.props.props,onActionPerformed:this.onActionPerformed},a.createElement(r.HeatExchangerCompound.plate,null),a.createElement(r.HeatExchangerCompound.popover,{anchorEl:this.valveRef.current}))}}t.HeatExchanger=l,t.HeatExchangerMeta=class{getComponentType(){return t.COMPONENT_TYPE}getViewComponent(){return l}getDefaultSize(){return{width:40,height:70}}getPropsReducer(e){return{type:e.readString("type","plate"),mode:e.readString("mode","heating"),itemName:e.readString("itemName",""),locate:e.readBoolean("locate",!1),showLabel:e.readBoolean("showLabel",!1),labelPosition:e.readString("labelPosition","top-left")}}}},591:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=void 0;const a=n(338),o=n(988);var r=n(988);function l(e,t,n,r){return(0,o.default)(48,a.default,e,t,n,r)}Object.defineProperty(t,"DNS",{enumerable:!0,get:function(){return r.DNS}}),Object.defineProperty(t,"URL",{enumerable:!0,get:function(){return r.URL}}),l.DNS=o.DNS,l.URL=o.URL,t.default=l},697:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i},702:(e,t,n)=>{"use strict";n.r(t)},740:(e,t,n)=>{"use strict";var a;Object.defineProperty(t,"__esModule",{value:!0}),t.ValveMpCompound=t.useValveContext=t.ValveContextProvider=void 0;const o=n(883),r=n(506),l=n(152),s=n(535),i=n(390),u=n(921),c=u.VALVE_COMPONENT_TYPE;a=(0,s.useCreateContext)("ValveMpCompound"),t.ValveContextProvider=a[0],t.useValveContext=a[1],t.ValveMpCompound={Root:({componentProps:e,valveProps:n,onActionPerformed:a,children:r})=>o.createElement(t.ValveContextProvider,{valveProps:n,componentProps:e,onActionPerformed:a},r),valve:()=>{const{valveProps:e,onActionPerformed:n,componentProps:a}=(0,t.useValveContext)("Valve"),s=o.useRef(null),{emit:p}=a,{processObject:d}=e,{status:m}=d||i.processObjectProps;let f=r.valveMpItemNames;return(null==m?void 0:m.locate)||(f=f.slice(0,-1)),o.createElement("div",Object.assign({ref:s},p({classes:[`${u.IA_SYMBOL_COMPONENT_COLUMN}`]}),{"data-component":c,onClick:n}),o.createElement("div",{className:`${u.IA_SYMBOL_COMPONENT_ROW}`},o.createElement("div",{className:`${u.IA_SYMBOL_COMPONENT_WRAPPER}`},o.createElement("div",{className:`${u.HMI_COMPONENT_CLASS} valve__mp`},f.map((({value:e,index:t,key:n})=>o.createElement(l.default,{itemClassName:e+" "+(0,r.getValveMpItemClassName)(t,m),key:n})))))))},popover:({anchorEl:e})=>{const{valveProps:n,componentProps:a}=(0,t.useValveContext)("Popover"),{showLabel:l,labelPosition:s,processObject:u}=n,{status:c}=u||i.processObjectProps;if(!l)return null;const{position:p}=a;let d="itemId popover position-left";return s&&(d=(0,r.getItemIdPositionClassName)(d,s)),o.createElement("div",{className:d,style:{top:p.y,left:p.x}},o.createElement("div",{style:{padding:8}},null==c?void 0:c.itemName))}}},746:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=n(697);t.default=function(e){return"string"==typeof e&&a.default.test(e)}},770:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=n(746);t.default=function(e){if(!(0,a.default)(e))throw TypeError("Invalid UUID");return parseInt(e.slice(14,15),16)}},779:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n="undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto);t.default={randomUUID:n}},797:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a=n(746);t.default=function(e){if(!(0,a.default)(e))throw TypeError("Invalid UUID");let t;return Uint8Array.of((t=parseInt(e.slice(0,8),16))>>>24,t>>>16&255,t>>>8&255,255&t,(t=parseInt(e.slice(9,13),16))>>>8,255&t,(t=parseInt(e.slice(14,18),16))>>>8,255&t,(t=parseInt(e.slice(19,23),16))>>>8,255&t,(t=parseInt(e.slice(24,36),16))/1099511627776&255,t/4294967296&255,t>>>24&255,t>>>16&255,t>>>8&255,255&t)}},829:(e,t)=>{"use strict";function n(e,t,n,a){switch(e){case 0:return t&n^~t&a;case 1:case 3:return t^n^a;case 2:return t&n^t&a^n&a}}function a(e,t){return e<<t|e>>>32-t}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){const t=[1518500249,1859775393,2400959708,3395469782],o=[1732584193,4023233417,2562383102,271733878,3285377520],r=new Uint8Array(e.length+1);r.set(e),r[e.length]=128;const l=(e=r).length/4+2,s=Math.ceil(l/16),i=new Array(s);for(let t=0;t<s;++t){const n=new Uint32Array(16);for(let a=0;a<16;++a)n[a]=e[64*t+4*a]<<24|e[64*t+4*a+1]<<16|e[64*t+4*a+2]<<8|e[64*t+4*a+3];i[t]=n}i[s-1][14]=8*(e.length-1)/Math.pow(2,32),i[s-1][14]=Math.floor(i[s-1][14]),i[s-1][15]=8*(e.length-1)&4294967295;for(let e=0;e<s;++e){const r=new Uint32Array(80);for(let t=0;t<16;++t)r[t]=i[e][t];for(let e=16;e<80;++e)r[e]=a(r[e-3]^r[e-8]^r[e-14]^r[e-16],1);let l=o[0],s=o[1],u=o[2],c=o[3],p=o[4];for(let e=0;e<80;++e){const o=Math.floor(e/20),i=a(l,5)+n(o,s,u,c)+p+t[o]+r[e]>>>0;p=c,c=u,u=a(s,30)>>>0,s=l,l=i}o[0]=o[0]+l>>>0,o[1]=o[1]+s>>>0,o[2]=o[2]+u>>>0,o[3]=o[3]+c>>>0,o[4]=o[4]+p>>>0}return Uint8Array.of(o[0]>>24,o[0]>>16,o[0]>>8,o[0],o[1]>>24,o[1]>>16,o[1]>>8,o[1],o[2]>>24,o[2]>>16,o[2]>>8,o[2],o[3]>>24,o[3]>>16,o[3]>>8,o[3],o[4]>>24,o[4]>>16,o[4]>>8,o[4])}},838:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ParameterListComponentMeta=t.ParameterListComponent=t.COMPONENT_TYPE=void 0;const a=n(883),o=n(921),r=[{label:{text:"text"},input:{value:null,placeholder:"Enter a Number"}}];t.COMPONENT_TYPE=o.PARAMETER_LIST_COMPONENT_TYPE,t.ParameterListComponent=e=>{const n=a.useMemo((()=>{const{parameters:t}=e.props||r;return t}),[e.props.parameters]),{emit:l}=e;return a.createElement("div",Object.assign({},l({classes:[`${o.IA_SYMBOL_COMPONENT_COLUMN}`]}),{"data-component":t.COMPONENT_TYPE}),a.createElement("div",{className:`${o.IA_SYMBOL_COMPONENT_ROW}`},a.createElement("div",{className:`${o.IA_SYMBOL_COMPONENT_WRAPPER}`},a.createElement("div",{className:`${o.HMI_COMPONENT_CLASS} parameter-list`},n.map(((t,n)=>{const{label:o,input:r}=t;return a.createElement("label",{key:`${o.text}-parameter${n}`,className:"field small"},a.createElement("span",{className:"label"},o.text),a.createElement("span",{className:"eu"},r.eu),a.createElement("input",{type:"text",id:`${o.text}-parameter${n}`,inputMode:r.inputmode,pattern:r.pattern||"[0-9]*",placeholder:r.placeholder,disabled:!r.editable,min:r.min,max:r.max,value:r.value,onChange:t=>{e.store.props.write(`parameters[${n}].input.value`,t.currentTarget.value)}}))}))))))},t.ParameterListComponentMeta=class{getComponentType(){return t.COMPONENT_TYPE}getDefaultSize(){return{width:240,height:240}}getPropsReducer(e){return{parameters:e.read("parameters",[{label:{text:"label",className:"",tooltipText:"",tooltipPosition:"",tooltipClassName:"",tooltipId:""},input:{type:"text",inputmode:"numeric",placeholder:"Enter a number",editable:!0,pattern:"^[0-9]*[.,]?[0-9]*$",min:0,max:100,decimalPlaces:2,eu:"µC",value:0}}])}}getViewComponent(){return t.ParameterListComponent}}},863:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CommandValveMpMeta=t.CommandValveMp=t.COMPONENT_TYPE=void 0;const a=n(883),o=n(883),r=n(511),l=n(921);t.COMPONENT_TYPE=l.COMMAND_VALVE_MP_COMPONENT_TYPE,t.CommandValveMp=a.memo((e=>{const{state:n,reducer:s}=(0,r.useValveMpCommandReducer)(),{emit:i}=e;(0,o.useEffect)((()=>{const t=e.store.props.subscribe((e=>{var t,a,o;const r=e.read("command"),{main:l,upperSeat:i,lowerSeat:u}=r;(null===(t=n.command)||void 0===t?void 0:t.main)&&l&&(l.autoManual!==n.command.main.autoManual&&s.updateAutoManSelection(l.autoManual?"manual":"auto"),l.activation!==n.command.main.activation&&(l.activation?l.activation&&s.updateMainManualOn():s.updateMainManualOff())),(null===(a=n.command)||void 0===a?void 0:a.lowerSeat)&&u&&u.activation!==n.command.lowerSeat.activation&&(u.activation?u.activation&&s.updateLslManualOn():s.updateLslManualOff()),(null===(o=n.command)||void 0===o?void 0:o.upperSeat)&&i&&i.activation!==n.command.upperSeat.activation&&(i.activation?i.activation&&s.updateUslManualOn():s.updateUslManualOff())}));return()=>{"function"==typeof t&&t()}}),[e.store.props]);const{main:u,upperSeat:c,lowerSeat:p,interlocks:d}=n.command||{},m=e=>e.includes(!0,0),f=t=>{var n,a;s.updateAutoManSelection(t),"auto"===t?null===(n=e.store.props)||void 0===n||n.write("command.main.autoManual",!1):"manual"===t&&(null===(a=e.store.props)||void 0===a||a.write("command.main.autoManual",!0))};return a.createElement("div",Object.assign({},i({classes:[`${l.IA_SYMBOL_COMPONENT_COLUMN}`]}),{"data-component":t.COMPONENT_TYPE}),a.createElement("div",{className:`${l.IA_SYMBOL_COMPONENT_ROW}`},a.createElement("div",{className:`${l.IA_SYMBOL_COMPONENT_WRAPPER}`},a.createElement("div",{className:`${l.HMI_COMPONENT_CLASS}-command-valve-mp hmi-command-valve-mp__grid`},a.createElement("label",{className:"main-label"},null==u?void 0:u.label),a.createElement("div",{role:"group",className:"button-group outlined main-auto-manual"},a.createElement("button",{className:"button outlined "+((null==u?void 0:u.autoManual)?"":"selected"),disabled:m((null==d?void 0:d.main)||[]),onClick:()=>f("auto")},"Auto "),a.createElement("button",{className:"button outlined "+((null==u?void 0:u.autoManual)?"selected":""),disabled:m((null==d?void 0:d.main)||[]),onClick:()=>f("manual")},"Manual")),a.createElement("div",{role:"group",className:"button-group outlined main-on-off"},a.createElement("button",{className:"button outlined "+((null==u?void 0:u.activation)?"selected":""),disabled:m((null==d?void 0:d.main)||[])||!(null==u?void 0:u.autoManual),onClick:()=>{var t;s.updateMainManualOn(),null===(t=e.store.props)||void 0===t||t.write("command.main.activation",!0)}},"On "),a.createElement("button",{className:"button outlined "+((null==u?void 0:u.activation)?"":"selected"),disabled:m((null==d?void 0:d.main)||[])||!(null==u?void 0:u.autoManual),onClick:()=>{var t;s.updateMainManualOff(),null===(t=e.store.props)||void 0===t||t.write("command.main.activation",!1)}},"Off")),a.createElement("label",{className:"upper-seat-label"},null==c?void 0:c.label),a.createElement("div",{role:"group",className:"button-group outlined upper-seat-on-off"},a.createElement("button",{className:"button outlined "+((null==c?void 0:c.activation)?"selected":""),disabled:m((null==d?void 0:d.upperSeat)||[])||!(null==u?void 0:u.autoManual),onClick:()=>{var t;s.updateUslManualOn(),null===(t=e.store.props)||void 0===t||t.write("command.upperSeat.activation",!0)}},"On "),a.createElement("button",{className:"button outlined "+((null==c?void 0:c.activation)?"":"selected"),disabled:m((null==d?void 0:d.upperSeat)||[])||!(null==u?void 0:u.autoManual),onClick:()=>{var t;s.updateUslManualOff(),null===(t=e.store.props)||void 0===t||t.write("command.upperSeat.activation",!1)}},"Off")),a.createElement("label",{className:"lower-seat-label"},null==p?void 0:p.label),a.createElement("div",{role:"group",className:"button-group outlined lower-seat-on-off"},a.createElement("button",{className:"button outlined "+((null==p?void 0:p.activation)?"selected":""),disabled:m((null==d?void 0:d.lowerSeat)||[])||!(null==u?void 0:u.autoManual),onClick:()=>{var t;s.updateLslManualOn(),null===(t=e.store.props)||void 0===t||t.write("command.lowerSeat.activation",!0)}},"On "),a.createElement("button",{className:"button outlined "+((null==p?void 0:p.activation)?"":"selected"),disabled:m((null==d?void 0:d.lowerSeat)||[])||!(null==u?void 0:u.autoManual),onClick:()=>{var t;s.updateLslManualOff(),null===(t=e.store.props)||void 0===t||t.write("command.lowerSeat.activation",!1)},value:"true"},"Off"))))))}),((e,t)=>e.props===t.props)),t.CommandValveMpMeta=class{getComponentType(){return t.COMPONENT_TYPE}getViewComponent(){return t.CommandValveMp}getDefaultSize(){return{width:280,height:140}}getPropsReducer(e){return{command:{interlocks:{main:e.readArray("command.interlocks.main"),upperSeat:e.readArray("command.interlocks.upperSeat"),lowerSeat:e.readArray("command.interlocks.lowerSeat")},main:{label:e.readString("commands.main.label",""),autoManual:e.readBoolean("command.main.autoManual",!1),activation:e.readBoolean("command.main.activation",!1)},upperSeat:{label:e.readString("commands.upperSeat.label",""),activation:e.readBoolean("command.upperSeat.activation",!1)},lowerSeat:{label:e.readString("commands.lowerSeat.label",""),activation:e.readBoolean("command.lowerSeat.activation",!1)}}}}}},869:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PumpMeta=t.Pump=t.COMPONENT_TYPE=void 0;const a=n(883),o=n(377),r=n(441),l=n(390);t.COMPONENT_TYPE="hmi.process_objects.Pump";class s extends o.Component{constructor(e){var t;super(e),this.processObject=(null===(t=this.props.props.processObject)||void 0===t?void 0:t.status)||l.pumpInitialStatus,this.status=this.processObject,this.showLabel=this.props.props.showLabel||!1,this.labelPosition=this.props.props.labelPosition||"left",this.onActionPerformed=()=>{this.props.eventsEnabled?(console.log("Valve clicked!"),this.props.componentEvents.fireComponentEvent("onActionPerformed",{})):console.log("Valve is disabled in the design-scope")},this.valveRef=a.createRef()}componentDidMount(){}render(){return a.createElement(r.PumpCompound.Root,{componentProps:this.props,pumpProps:this.props.props,onActionPerformed:this.onActionPerformed},a.createElement(r.PumpCompound.pump,null),a.createElement(r.PumpCompound.popover,{anchorEl:this.valveRef.current}))}}t.Pump=s,t.PumpMeta=class{getComponentType(){return t.COMPONENT_TYPE}getViewComponent(){return s}getDefaultSize(){return{width:36,height:36}}getPropsReducer(e){return{pumpType:e.readString("pumpType","centrifugal"),processObject:{status:{alarm:e.readBoolean("processObject.status.alarm",!1),actFB:e.readBoolean("processObject.status.actFB",!1),deActFB:e.readBoolean("processObject.status.deActFB",!1),itemName:e.readString("processObject.status.itemName",""),manual:e.readBoolean("processObject.status.manual",!1),masked:e.readBoolean("processObject.status.masked",!1),changing:e.readBoolean("processObject.status.changing",!1),locate:e.readBoolean("processObject.status.locate",!1)}},showLabel:e.readBoolean("showLabel",!1),labelPosition:e.readString("labelPosition","top-left")}}}},872:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.StatusValveMpMeta=t.StatusValveMp=t.COMPONENT_TYPE=void 0;const a=n(883),o=n(921);t.COMPONENT_TYPE=o.STATUS_COMPONENT_TYPE,t.StatusValveMp=e=>{const{emit:n}=e,{statusItems:r}=e.props;return a.createElement("div",Object.assign({},n({classes:[`${o.IA_SYMBOL_COMPONENT_COLUMN}`]}),{"data-component":t.COMPONENT_TYPE}),a.createElement("div",{className:`${o.IA_SYMBOL_COMPONENT_ROW}`},a.createElement("div",{className:`${o.IA_SYMBOL_COMPONENT_WRAPPER}`},a.createElement("div",{className:`${o.HMI_COMPONENT_CLASS} status`},a.createElement("ul",{className:"list bordered dense"},r.map(((e,t)=>a.createElement("li",{key:t},a.createElement("label",{className:"checkbox"},a.createElement("div",{className:"text"},a.createElement("p",{className:"x-small"},e.label)),a.createElement("div",{className:"end"},a.createElement("input",{name:"checkbox",id:`checkbox-${t}`,type:"checkbox",checked:e.status,readOnly:!0})))))))))))},t.StatusValveMpMeta=class{getComponentType(){return t.COMPONENT_TYPE}getViewComponent(){return t.StatusValveMp}getDefaultSize(){return{width:240,height:32}}getPropsReducer(e){return console.log(`status ${e.read("status")}`),{statusItems:e.read("status",[{label:"label text",status:!1}])}}}},883:e=>{"use strict";e.exports=t},921:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hxElements=t.HX_COMPONENT_TYPE=t.COMMAND_VALVE_MP_COMPONENT_TYPE=t.PARAMETER_LIST_COMPONENT_TYPE=t.STATUS_COMPONENT_TYPE=t.PUMP_COMPONENT_TYPE=t.VALVE_COMPONENT_TYPE=t.HMI_COMPONENT_CLASS=t.IA_SYMBOL_COMPONENT_WRAPPER=t.IA_SYMBOL_COMPONENT_ROW=t.IA_SYMBOL_COMPONENT_COLUMN=void 0;const a=n(405),o=n(445);t.IA_SYMBOL_COMPONENT_COLUMN="ia_symbolComponent ia_symbolComponent__column",t.IA_SYMBOL_COMPONENT_ROW="ia_symbolComponent__row",t.IA_SYMBOL_COMPONENT_WRAPPER="ia_symbolComponent__wrapper",t.HMI_COMPONENT_CLASS="hmi-component",t.VALVE_COMPONENT_TYPE="hmi.process_objects.Valve",t.PUMP_COMPONENT_TYPE="hmi.process_objects.Pump",t.STATUS_COMPONENT_TYPE="hmi.display.StatusValveMp",t.PARAMETER_LIST_COMPONENT_TYPE="hmi.input.ParameterList",t.COMMAND_VALVE_MP_COMPONENT_TYPE="hmi.input.CommandValveMp",t.HX_COMPONENT_TYPE="hmi.process_objects.HeatExchanger",t.hxElements=[{baseClass:(0,o.getHxModeClassNames)("plate",a.HxModes.heating)},{statusKey:{actFB:{trueString:"activated"}}},{statusKey:{deActFB:{trueString:"deactivated"}}},{statusKey:{alarm:{trueString:"alarm"}}}]},973:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ValveMeta=t.Valve=t.COMPONENT_TYPE=void 0;const a=n(883),o=n(377),r=n(740),l=n(390);t.COMPONENT_TYPE="hmi.process_objects.Valve_mp";class s extends o.Component{constructor(e){super(e),this.processObject=this.props.props.processObject||l.processObjectProps,this.status=this.processObject.status,this.showLabel=this.props.props.showLabel||!1,this.labelPosition=this.props.props.labelPosition||"left",this.onActionPerformed=()=>{this.props.eventsEnabled?(console.log("Valve clicked!"),this.props.componentEvents.fireComponentEvent("onActionPerformed",{})):console.log("Valve is disabled in the design-scope")},this.valveRef=a.createRef()}componentDidMount(){}render(){return a.createElement(r.ValveMpCompound.Root,{componentProps:this.props,valveProps:this.props.props,onActionPerformed:this.onActionPerformed},a.createElement(r.ValveMpCompound.valve,null),a.createElement(r.ValveMpCompound.popover,{anchorEl:this.valveRef.current}))}}t.Valve=s,t.ValveMeta=class{getComponentType(){return t.COMPONENT_TYPE}getViewComponent(){return s}getDefaultSize(){return{width:20,height:40}}getPropsReducer(e){return console.log(`itemName: ${e.readString("processObject.status.itemName")} showLabel ${e.readBoolean("showLabel")}`),{processObject:{status:{alarm:e.readBoolean("processObject.status.alarm",!1),actFB:e.readBoolean("processObject.status.actFB",!1),deActFB:e.readBoolean("processObject.status.deActFB",!1),activatedConfig:e.readNumber("processObject.status.activatedConfig",511),deactivatedConfig:e.readNumber("processObject.status.deactivatedConfig",4095),itemName:e.readString("processObject.status.itemName",""),manual:e.readBoolean("processObject.status.manual",!1),masked:e.readBoolean("processObject.status.masked",!1),changing:e.readBoolean("processObject.status.changing",!1),locate:e.readBoolean("processObject.status.locate",!1),usl:e.readBoolean("processObject.status.usl",!1),lsl:e.readBoolean("processObject.status.lsl",!1)}},showLabel:e.readBoolean("showLabel",!1),labelPosition:e.readString("labelPosition","top-left")}}}},988:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=t.stringToBytes=void 0;const a=n(797),o=n(11);function r(e){e=unescape(encodeURIComponent(e));const t=new Uint8Array(e.length);for(let n=0;n<e.length;++n)t[n]=e.charCodeAt(n);return t}t.stringToBytes=r,t.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",t.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",t.default=function(e,t,n,l,s,i){const u="string"==typeof n?r(n):n,c="string"==typeof l?(0,a.default)(l):l;if("string"==typeof l&&(l=(0,a.default)(l)),16!==l?.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");let p=new Uint8Array(16+u.length);if(p.set(c),p.set(u,c.length),p=t(p),p[6]=15&p[6]|e,p[8]=63&p[8]|128,s){i=i||0;for(let e=0;e<16;++e)s[i+e]=p[e];return s}return(0,o.unsafeStringify)(p)}}},a={};function o(e){var t=a[e];if(void 0!==t)return t.exports;var r=a[e]={exports:{}};return n[e].call(r.exports,r,r.exports,o),r.exports}o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};return(()=>{"use strict";var e=r;Object.defineProperty(e,"__esModule",{value:!0}),e.StatusValveMp=e.CommandValveMp=e.ParameterListComponent=e.HeatExchanger=e.Pump=e.Valve=void 0;const t=o(377),n=o(973);Object.defineProperty(e,"Valve",{enumerable:!0,get:function(){return n.Valve}});const a=o(869);Object.defineProperty(e,"Pump",{enumerable:!0,get:function(){return a.Pump}});const l=o(570);Object.defineProperty(e,"HeatExchanger",{enumerable:!0,get:function(){return l.HeatExchanger}});const s=o(838);Object.defineProperty(e,"ParameterListComponent",{enumerable:!0,get:function(){return s.ParameterListComponent}});const i=o(863);Object.defineProperty(e,"CommandValveMp",{enumerable:!0,get:function(){return i.CommandValveMp}});const u=o(872);Object.defineProperty(e,"StatusValveMp",{enumerable:!0,get:function(){return u.StatusValveMp}}),o(702),[new n.ValveMeta,new a.PumpMeta,new l.HeatExchangerMeta,new s.ParameterListComponentMeta,new i.CommandValveMpMeta,new u.StatusValveMpMeta].forEach((e=>t.ComponentRegistry.register(e)))})(),r})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,