!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("PerspectiveClient"),require("React")):"function"==typeof define&&define.amd?define("HmiComponents",["PerspectiveClient","React"],t):"object"==typeof exports?exports.HmiComponents=t(require("PerspectiveClient"),require("React")):e.HmiComponents=t(e.PerspectiveClient,e.React)}(self,((e,t)=>(()=>{var a={11:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.unsafeStringify=void 0;const n=a(746),o=[];for(let e=0;e<256;++e)o.push((e+256).toString(16).slice(1));function r(e,t=0){return(o[e[t+0]]+o[e[t+1]]+o[e[t+2]]+o[e[t+3]]+"-"+o[e[t+4]]+o[e[t+5]]+"-"+o[e[t+6]]+o[e[t+7]]+"-"+o[e[t+8]]+o[e[t+9]]+"-"+o[e[t+10]]+o[e[t+11]]+o[e[t+12]]+o[e[t+13]]+o[e[t+14]]+o[e[t+15]]).toLowerCase()}t.unsafeStringify=r,t.default=function(e,t=0){const a=r(e,t);if(!(0,n.default)(a))throw TypeError("Stringified UUID is invalid");return a}},76:(e,t,a)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.HeatExchangerCompound=t.useHxContext=t.HxContextProvider=t.COMPONENT_TYPE=void 0;const o=a(883),r=a(535),l=a(152),s=a(506),i=a(445),u=a(921),c=e=>{switch(console.log(`mode: ${e}`),e){case"alarm":return"var(--_error)";case"heating":return"var(--_heating)";case"cooling":return"var(--_cooling)";default:return"lime"}};t.COMPONENT_TYPE=u.HX_COMPONENT_TYPE,n=(0,r.useCreateContext)("HxCompound"),t.HxContextProvider=n[0],t.useHxContext=n[1],t.HeatExchangerCompound={Root:({componentProps:e,itemProps:a,onActionPerformed:n,children:r})=>o.createElement(t.HxContextProvider,{itemProps:a,componentProps:e,onActionPerformed:n},r),plate:()=>{const{itemProps:e,onActionPerformed:a,componentProps:n}=(0,t.useHxContext)("Plate"),r=o.useRef(null),{emit:p}=n,{type:d,locate:m,mode:f}=e,v=(e=>{switch(e){case"plate":return 18;case"tubular":return 15;default:return 0}})(null!=d?d:0);let b=(0,i.buildComponentElements)(v,0);m||(console.log(`locate is: ${m}`),b=b.slice(0,-1)),console.log(`componentItemNames: ${JSON.stringify(b,null,2)}`);const h=`heat-exchanger ${null!=d?d:""}`;return o.createElement("div",Object.assign({ref:r},p({classes:[`${u.IA_SYMBOL_COMPONENT_COLUMN}`]}),{"data-component":t.COMPONENT_TYPE,onClick:a}),o.createElement("div",{className:`${u.IA_SYMBOL_COMPONENT_ROW}`},o.createElement("div",{className:`${u.IA_SYMBOL_COMPONENT_WRAPPER}`},o.createElement("div",{className:`${u.HMI_COMPONENT_CLASS} ${h}`,style:{"--hmi-plate-color":c(null!=f?f:"")}},b.map((({name:e,index:t,key:a})=>o.createElement(l.default,{itemClassName:e+" "+(0,s.getClassNameWithStatus)(t,void 0,u.hxElements,"",v,524287,0,0),key:a})))))))},popover:({anchorEl:e})=>{const{itemProps:a,componentProps:n}=(0,t.useHxContext)("Popover"),{showLabel:r,labelPosition:l,itemName:i}=a;if(!r)return null;const{position:u}=n;let c="itemId popover position-left";return l&&(c=(0,s.getItemIdPositionClassName)(c,l)),o.createElement("div",{className:c,style:{top:u.y,left:u.x}},o.createElement("div",{style:{padding:8}},i))}}},124:e=>{"use strict";var t,a=Object.defineProperty,n=Object.getOwnPropertyDescriptor,o=Object.getOwnPropertyNames,r=Object.prototype.hasOwnProperty,l={};((e,t)=>{for(var n in t)a(e,n,{get:t[n],enumerable:!0})})(l,{Immer:()=>K,applyPatches:()=>le,castDraft:()=>ue,castImmutable:()=>ce,createDraft:()=>se,current:()=>G,enableMapSet:()=>ee,enablePatches:()=>Z,finishDraft:()=>ie,freeze:()=>C,immerable:()=>i,isDraft:()=>d,isDraftable:()=>m,nothing:()=>s,original:()=>b,produce:()=>ae,produceWithPatches:()=>ne,setAutoFreeze:()=>oe,setUseStrictShallowCopy:()=>re}),e.exports=(t=l,((e,t,l,s)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let l of o(t))!r.call(e,l)&&undefined!==l&&a(e,l,{get:()=>t[l],enumerable:!(s=n(t,l))||s.enumerable});return e})(a({},"__esModule",{value:!0}),t));var s=Symbol.for("immer-nothing"),i=Symbol.for("immer-draftable"),u=Symbol.for("immer-state");function c(e,...t){throw new Error(`[Immer] minified error nr: ${e}. Full error at: https://bit.ly/3cXEKWf`)}var p=Object.getPrototypeOf;function d(e){return!!e&&!!e[u]}function m(e){return!!e&&(v(e)||Array.isArray(e)||!!e[i]||!!e.constructor?.[i]||N(e)||_(e))}var f=Object.prototype.constructor.toString();function v(e){if(!e||"object"!=typeof e)return!1;let t=p(e);if(null===t)return!0;let a=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return a===Object||"function"==typeof a&&Function.toString.call(a)===f}function b(e){return d(e)||c(15),e[u].t}function h(e,t){0===P(e)?Reflect.ownKeys(e).forEach((a=>{t(a,e[a],e)})):e.forEach(((a,n)=>t(n,a,e)))}function P(e){let t=e[u];return t?t.o:Array.isArray(e)?1:N(e)?2:_(e)?3:0}function O(e,t){return 2===P(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function g(e,t){return 2===P(e)?e.get(t):e[t]}function M(e,t,a){let n=P(e);2===n?e.set(t,a):3===n?e.add(a):e[t]=a}function N(e){return e instanceof Map}function _(e){return e instanceof Set}function E(e){return e.e||e.t}function y(e,t){if(N(e))return new Map(e);if(_(e))return new Set(e);if(Array.isArray(e))return Array.prototype.slice.call(e);let a=v(e);if(!0===t||"class_only"===t&&!a){let t=Object.getOwnPropertyDescriptors(e);delete t[u];let a=Reflect.ownKeys(t);for(let n=0;n<a.length;n++){let o=a[n],r=t[o];!1===r.writable&&(r.writable=!0,r.configurable=!0),(r.get||r.set)&&(t[o]={configurable:!0,writable:!0,enumerable:r.enumerable,value:e[o]})}return Object.create(p(e),t)}{let t=p(e);if(null!==t&&a)return{...e};let n=Object.create(t);return Object.assign(n,e)}}function C(e,t=!1){return A(e)||d(e)||!m(e)||(P(e)>1&&(e.set=e.add=e.clear=e.delete=S),Object.freeze(e),t&&Object.entries(e).forEach((([e,t])=>C(t,!0)))),e}function S(){c(2)}function A(e){return Object.isFrozen(e)}var w,T={};function x(e){let t=T[e];return t||c(0),t}function I(e,t){T[e]||(T[e]=t)}function j(){return w}function L(e,t){t&&(x("Patches"),e.f=[],e.h=[],e.b=t)}function V(e){U(e),e.a.forEach(B),e.a=null}function U(e){e===w&&(w=e.i)}function R(e){return w=function(e,t){return{a:[],i:e,p:t,P:!0,d:0}}(w,e)}function B(e){let t=e[u];0===t.o||1===t.o?t.x():t.m=!0}function k(e,t){t.d=t.a.length;let a=t.a[0];return void 0!==e&&e!==a?(a[u].s&&(V(t),c(4)),m(e)&&(e=D(t,e),t.i||$(t,e)),t.f&&x("Patches").T(a[u].t,e,t.f,t.h)):e=D(t,a,[]),V(t),t.f&&t.b(t.f,t.h),e!==s?e:void 0}function D(e,t,a){if(A(t))return t;let n=t[u];if(!n)return h(t,((o,r)=>Y(e,n,t,o,r,a))),t;if(n.n!==e)return t;if(!n.s)return $(e,n.t,!0),n.t;if(!n.c){n.c=!0,n.n.d--;let t=n.e,o=t,r=!1;3===n.o&&(o=new Set(t),t.clear(),r=!0),h(o,((o,l)=>Y(e,n,t,o,l,a,r))),$(e,t,!1),a&&e.f&&x("Patches").g(n,a,e.f,e.h)}return n.e}function Y(e,t,a,n,o,r,l){if(d(o)){let l=D(e,o,r&&t&&3!==t.o&&!O(t.r,n)?r.concat(n):void 0);if(M(a,n,l),!d(l))return;e.P=!1}else l&&a.add(o);if(m(o)&&!A(o)){if(!e.p.y&&e.d<1)return;D(e,o),(!t||!t.n.i)&&"symbol"!=typeof n&&Object.prototype.propertyIsEnumerable.call(a,n)&&$(e,o)}}function $(e,t,a=!1){!e.i&&e.p.y&&e.P&&C(t,a)}var H={get(e,t){if(t===u)return e;let a=E(e);if(!O(a,t))return function(e,t,a){let n=z(t,a);return n?"value"in n?n.value:n.get?.call(e.u):void 0}(e,a,t);let n=a[t];return e.c||!m(n)?n:n===W(e.t,t)?(X(e),e.e[t]=J(n,e)):n},has:(e,t)=>t in E(e),ownKeys:e=>Reflect.ownKeys(E(e)),set(e,t,a){let n=z(E(e),t);if(n?.set)return n.set.call(e.u,a),!0;if(!e.s){let n=W(E(e),t),o=n?.[u];if(o&&o.t===a)return e.e[t]=a,e.r[t]=!1,!0;if(function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}(a,n)&&(void 0!==a||O(e.t,t)))return!0;X(e),q(e)}return e.e[t]===a&&(void 0!==a||t in e.e)||Number.isNaN(a)&&Number.isNaN(e.e[t])||(e.e[t]=a,e.r[t]=!0),!0},deleteProperty:(e,t)=>(void 0!==W(e.t,t)||t in e.t?(e.r[t]=!1,X(e),q(e)):delete e.r[t],e.e&&delete e.e[t],!0),getOwnPropertyDescriptor(e,t){let a=E(e),n=Reflect.getOwnPropertyDescriptor(a,t);return n&&{writable:!0,configurable:1!==e.o||"length"!==t,enumerable:n.enumerable,value:a[t]}},defineProperty(){c(11)},getPrototypeOf:e=>p(e.t),setPrototypeOf(){c(12)}},F={};function W(e,t){let a=e[u];return(a?E(a):e)[t]}function z(e,t){if(!(t in e))return;let a=p(e);for(;a;){let e=Object.getOwnPropertyDescriptor(a,t);if(e)return e;a=p(a)}}function q(e){e.s||(e.s=!0,e.i&&q(e.i))}function X(e){e.e||(e.e=y(e.t,e.n.p.S))}h(H,((e,t)=>{F[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),F.deleteProperty=function(e,t){return F.set.call(this,e,t,void 0)},F.set=function(e,t,a){return H.set.call(this,e[0],t,a,e[0])};var K=class{constructor(e){this.y=!0,this.S=!1,this.produce=(e,t,a)=>{if("function"==typeof e&&"function"!=typeof t){let a=t;t=e;let n=this;return function(e=a,...o){return n.produce(e,(e=>t.call(this,e,...o)))}}let n;if("function"!=typeof t&&c(6),void 0!==a&&"function"!=typeof a&&c(7),m(e)){let o=R(this),r=J(e,void 0),l=!0;try{n=t(r),l=!1}finally{l?V(o):U(o)}return L(o,a),k(n,o)}if(!e||"object"!=typeof e){if(n=t(e),void 0===n&&(n=e),n===s&&(n=void 0),this.y&&C(n,!0),a){let t=[],o=[];x("Patches").T(e,n,t,o),a(t,o)}return n}c(1)},this.produceWithPatches=(e,t)=>{if("function"==typeof e)return(t,...a)=>this.produceWithPatches(t,(t=>e(t,...a)));let a,n;return[this.produce(e,t,((e,t)=>{a=e,n=t})),a,n]},"boolean"==typeof e?.autoFreeze&&this.setAutoFreeze(e.autoFreeze),"boolean"==typeof e?.useStrictShallowCopy&&this.setUseStrictShallowCopy(e.useStrictShallowCopy)}createDraft(e){m(e)||c(8),d(e)&&(e=G(e));let t=R(this),a=J(e,void 0);return a[u].l=!0,U(t),a}finishDraft(e,t){let a=e&&e[u];(!a||!a.l)&&c(9);let{n}=a;return L(n,t),k(void 0,n)}setAutoFreeze(e){this.y=e}setUseStrictShallowCopy(e){this.S=e}applyPatches(e,t){let a;for(a=t.length-1;a>=0;a--){let n=t[a];if(0===n.path.length&&"replace"===n.op){e=n.value;break}}a>-1&&(t=t.slice(a+1));let n=x("Patches").A;return d(e)?n(e,t):this.produce(e,(e=>n(e,t)))}};function J(e,t){let a=N(e)?x("MapSet").I(e,t):_(e)?x("MapSet").D(e,t):function(e,t){let a=Array.isArray(e),n={o:a?1:0,n:t?t.n:j(),s:!1,c:!1,r:{},i:t,t:e,u:null,e:null,x:null,l:!1},o=n,r=H;a&&(o=[n],r=F);let{revoke:l,proxy:s}=Proxy.revocable(o,r);return n.u=s,n.x=l,s}(e,t);return(t?t.n:j()).a.push(a),a}function G(e){return d(e)||c(10),Q(e)}function Q(e){if(!m(e)||A(e))return e;let t,a=e[u];if(a){if(!a.s)return a.t;a.c=!0,t=y(e,a.n.p.S)}else t=y(e,!0);return h(t,((e,a)=>{M(t,e,Q(a))})),a&&(a.c=!1),t}function Z(){let e="replace",t="add",a="remove";function n(e){if(!m(e))return e;if(Array.isArray(e))return e.map(n);if(N(e))return new Map(Array.from(e.entries()).map((([e,t])=>[e,n(t)])));if(_(e))return new Set(Array.from(e).map(n));let t=Object.create(p(e));for(let a in e)t[a]=n(e[a]);return O(e,i)&&(t[i]=e[i]),t}function o(e){return d(e)?n(e):e}I("Patches",{A:function(o,r){return r.forEach((r=>{let{path:l,op:s}=r,i=o;for(let e=0;e<l.length-1;e++){let t=P(i),a=l[e];"string"!=typeof a&&"number"!=typeof a&&(a=""+a),(0===t||1===t)&&("__proto__"===a||"constructor"===a)&&c(19),"function"==typeof i&&"prototype"===a&&c(19),i=g(i,a),"object"!=typeof i&&c(18,l.join("/"))}let u=P(i),p=n(r.value),d=l[l.length-1];switch(s){case e:switch(u){case 2:return i.set(d,p);case 3:c(16);default:return i[d]=p}case t:switch(u){case 1:return"-"===d?i.push(p):i.splice(d,0,p);case 2:return i.set(d,p);case 3:return i.add(p);default:return i[d]=p}case a:switch(u){case 1:return i.splice(d,1);case 2:return i.delete(d);case 3:return i.delete(r.value);default:return delete i[d]}default:c(17)}})),o},g:function(n,r,l,s){switch(n.o){case 0:case 2:return function(n,r,l,s){let{t:i,e:u}=n;h(n.r,((n,c)=>{let p=g(i,n),d=g(u,n),m=c?O(i,n)?e:t:a;if(p===d&&m===e)return;let f=r.concat(n);l.push(m===a?{op:m,path:f}:{op:m,path:f,value:d}),s.push(m===t?{op:a,path:f}:m===a?{op:t,path:f,value:o(p)}:{op:e,path:f,value:o(p)})}))}(n,r,l,s);case 1:return function(n,r,l,s){let{t:i,r:u}=n,c=n.e;c.length<i.length&&([i,c]=[c,i],[l,s]=[s,l]);for(let t=0;t<i.length;t++)if(u[t]&&c[t]!==i[t]){let a=r.concat([t]);l.push({op:e,path:a,value:o(c[t])}),s.push({op:e,path:a,value:o(i[t])})}for(let e=i.length;e<c.length;e++){let a=r.concat([e]);l.push({op:t,path:a,value:o(c[e])})}for(let e=c.length-1;i.length<=e;--e){let t=r.concat([e]);s.push({op:a,path:t})}}(n,r,l,s);case 3:return function(e,n,o,r){let{t:l,e:s}=e,i=0;l.forEach((e=>{if(!s.has(e)){let l=n.concat([i]);o.push({op:a,path:l,value:e}),r.unshift({op:t,path:l,value:e})}i++})),i=0,s.forEach((e=>{if(!l.has(e)){let l=n.concat([i]);o.push({op:t,path:l,value:e}),r.unshift({op:a,path:l,value:e})}i++}))}(n,r,l,s)}},T:function(t,a,n,o){n.push({op:e,path:[],value:a===s?void 0:a}),o.push({op:e,path:[],value:t})}})}function ee(){class e extends Map{constructor(e,t){super(),this[u]={o:2,i:t,n:t?t.n:j(),s:!1,c:!1,e:void 0,r:void 0,t:e,u:this,l:!1,m:!1}}get size(){return E(this[u]).size}has(e){return E(this[u]).has(e)}set(e,a){let n=this[u];return o(n),(!E(n).has(e)||E(n).get(e)!==a)&&(t(n),q(n),n.r.set(e,!0),n.e.set(e,a),n.r.set(e,!0)),this}delete(e){if(!this.has(e))return!1;let a=this[u];return o(a),t(a),q(a),a.t.has(e)?a.r.set(e,!1):a.r.delete(e),a.e.delete(e),!0}clear(){let e=this[u];o(e),E(e).size&&(t(e),q(e),e.r=new Map,h(e.t,(t=>{e.r.set(t,!1)})),e.e.clear())}forEach(e,t){E(this[u]).forEach(((a,n,o)=>{e.call(t,this.get(n),n,this)}))}get(e){let a=this[u];o(a);let n=E(a).get(e);if(a.c||!m(n)||n!==a.t.get(e))return n;let r=J(n,a);return t(a),a.e.set(e,r),r}keys(){return E(this[u]).keys()}values(){let e=this.keys();return{[Symbol.iterator]:()=>this.values(),next:()=>{let t=e.next();return t.done?t:{done:!1,value:this.get(t.value)}}}}entries(){let e=this.keys();return{[Symbol.iterator]:()=>this.entries(),next:()=>{let t=e.next();if(t.done)return t;let a=this.get(t.value);return{done:!1,value:[t.value,a]}}}}[Symbol.iterator](){return this.entries()}}function t(e){e.e||(e.r=new Map,e.e=new Map(e.t))}class a extends Set{constructor(e,t){super(),this[u]={o:3,i:t,n:t?t.n:j(),s:!1,c:!1,e:void 0,t:e,u:this,a:new Map,m:!1,l:!1}}get size(){return E(this[u]).size}has(e){let t=this[u];return o(t),t.e?!!(t.e.has(e)||t.a.has(e)&&t.e.has(t.a.get(e))):t.t.has(e)}add(e){let t=this[u];return o(t),this.has(e)||(n(t),q(t),t.e.add(e)),this}delete(e){if(!this.has(e))return!1;let t=this[u];return o(t),n(t),q(t),t.e.delete(e)||!!t.a.has(e)&&t.e.delete(t.a.get(e))}clear(){let e=this[u];o(e),E(e).size&&(n(e),q(e),e.e.clear())}values(){let e=this[u];return o(e),n(e),e.e.values()}entries(){let e=this[u];return o(e),n(e),e.e.entries()}keys(){return this.values()}[Symbol.iterator](){return this.values()}forEach(e,t){let a=this.values(),n=a.next();for(;!n.done;)e.call(t,n.value,n.value,this),n=a.next()}}function n(e){e.e||(e.e=new Set,e.t.forEach((t=>{if(m(t)){let a=J(t,e);e.a.set(t,a),e.e.add(a)}else e.e.add(t)})))}function o(e){e.m&&c(3,JSON.stringify(E(e)))}I("MapSet",{I:function(t,a){return new e(t,a)},D:function(e,t){return new a(e,t)}})}var te=new K,ae=te.produce,ne=te.produceWithPatches.bind(te),oe=te.setAutoFreeze.bind(te),re=te.setUseStrictShallowCopy.bind(te),le=te.applyPatches.bind(te),se=te.createDraft.bind(te),ie=te.finishDraft.bind(te);function ue(e){return e}function ce(e){return e}},152:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=a(883),o=({itemClassName:e,handleClick:t})=>n.createElement("div",{className:e,onClick:t});o.displayName="Item",t.default=o},182:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.version=t.validate=t.v7=t.v6ToV1=t.v6=t.v5=t.v4=t.v3=t.v1ToV6=t.v1=t.stringify=t.parse=t.NIL=t.MAX=void 0;var n=a(196);Object.defineProperty(t,"MAX",{enumerable:!0,get:function(){return n.default}});var o=a(465);Object.defineProperty(t,"NIL",{enumerable:!0,get:function(){return o.default}});var r=a(797);Object.defineProperty(t,"parse",{enumerable:!0,get:function(){return r.default}});var l=a(11);Object.defineProperty(t,"stringify",{enumerable:!0,get:function(){return l.default}});var s=a(425);Object.defineProperty(t,"v1",{enumerable:!0,get:function(){return s.default}});var i=a(568);Object.defineProperty(t,"v1ToV6",{enumerable:!0,get:function(){return i.default}});var u=a(591);Object.defineProperty(t,"v3",{enumerable:!0,get:function(){return u.default}});var c=a(286);Object.defineProperty(t,"v4",{enumerable:!0,get:function(){return c.default}});var p=a(557);Object.defineProperty(t,"v5",{enumerable:!0,get:function(){return p.default}});var d=a(356);Object.defineProperty(t,"v6",{enumerable:!0,get:function(){return d.default}});var m=a(268);Object.defineProperty(t,"v6ToV1",{enumerable:!0,get:function(){return m.default}});var f=a(299);Object.defineProperty(t,"v7",{enumerable:!0,get:function(){return f.default}});var v=a(746);Object.defineProperty(t,"validate",{enumerable:!0,get:function(){return v.default}});var b=a(770);Object.defineProperty(t,"version",{enumerable:!0,get:function(){return b.default}})},196:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="ffffffff-ffff-ffff-ffff-ffffffffffff"},268:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=a(797),o=a(11);t.default=function(e){const t=(a="string"==typeof e?(0,n.default)(e):e,Uint8Array.of((15&a[3])<<4|a[4]>>4&15,(15&a[4])<<4|(240&a[5])>>4,(15&a[5])<<4|15&a[6],a[7],(15&a[1])<<4|(240&a[2])>>4,(15&a[2])<<4|(240&a[3])>>4,16|(240&a[0])>>4,(15&a[0])<<4|(240&a[1])>>4,a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15]));var a;return"string"==typeof e?(0,o.unsafeStringify)(t):t}},286:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=a(779),o=a(291),r=a(11);t.default=function(e,t,a){if(n.default.randomUUID&&!t&&!e)return n.default.randomUUID();const l=(e=e||{}).random??e.rng?.()??(0,o.default)();if(l.length<16)throw new Error("Random bytes length must be >= 16");if(l[6]=15&l[6]|64,l[8]=63&l[8]|128,t){if((a=a||0)<0||a+16>t.length)throw new RangeError(`UUID byte range ${a}:${a+15} is out of buffer bounds`);for(let e=0;e<16;++e)t[a+e]=l[e];return t}return(0,r.unsafeStringify)(l)}},291:(e,t)=>{"use strict";let a;Object.defineProperty(t,"__esModule",{value:!0});const n=new Uint8Array(16);t.default=function(){if(!a){if("undefined"==typeof crypto||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");a=crypto.getRandomValues.bind(crypto)}return a(n)}},299:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateV7State=void 0;const n=a(291),o=a(11),r={};function l(e,t,a){return e.msecs??=-1/0,e.seq??=0,t>e.msecs?(e.seq=a[6]<<23|a[7]<<16|a[8]<<8|a[9],e.msecs=t):(e.seq=e.seq+1|0,0===e.seq&&e.msecs++),e}function s(e,t,a,n,o=0){if(e.length<16)throw new Error("Random bytes length must be >= 16");if(n){if(o<0||o+16>n.length)throw new RangeError(`UUID byte range ${o}:${o+15} is out of buffer bounds`)}else n=new Uint8Array(16),o=0;return t??=Date.now(),a??=127*e[6]<<24|e[7]<<16|e[8]<<8|e[9],n[o++]=t/1099511627776&255,n[o++]=t/4294967296&255,n[o++]=t/16777216&255,n[o++]=t/65536&255,n[o++]=t/256&255,n[o++]=255&t,n[o++]=112|a>>>28&15,n[o++]=a>>>20&255,n[o++]=128|a>>>14&63,n[o++]=a>>>6&255,n[o++]=a<<2&255|3&e[10],n[o++]=e[11],n[o++]=e[12],n[o++]=e[13],n[o++]=e[14],n[o++]=e[15],n}t.updateV7State=l,t.default=function(e,t,a){let i;if(e)i=s(e.random??e.rng?.()??(0,n.default)(),e.msecs,e.seq,t,a);else{const e=Date.now(),o=(0,n.default)();l(r,e,o),i=s(o,r.msecs,r.seq,t,a)}return t??(0,o.unsafeStringify)(i)}},338:(e,t)=>{"use strict";function a(e){return 14+(e+64>>>9<<4)+1}function n(e,t){const a=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(a>>16)<<16|65535&a}function o(e,t,a,o,r,l){return n((s=n(n(t,e),n(o,l)))<<(i=r)|s>>>32-i,a);var s,i}function r(e,t,a,n,r,l,s){return o(t&a|~t&n,e,t,r,l,s)}function l(e,t,a,n,r,l,s){return o(t&n|a&~n,e,t,r,l,s)}function s(e,t,a,n,r,l,s){return o(t^a^n,e,t,r,l,s)}function i(e,t,a,n,r,l,s){return o(a^(t|~n),e,t,r,l,s)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return function(e){const t=new Uint8Array(4*e.length);for(let a=0;a<4*e.length;a++)t[a]=e[a>>2]>>>a%4*8&255;return t}(function(e,t){const o=new Uint32Array(a(t)).fill(0);o.set(e),o[t>>5]|=128<<t%32,o[o.length-1]=t,e=o;let u=1732584193,c=-271733879,p=-1732584194,d=271733878;for(let t=0;t<e.length;t+=16){const a=u,o=c,m=p,f=d;u=r(u,c,p,d,e[t],7,-680876936),d=r(d,u,c,p,e[t+1],12,-389564586),p=r(p,d,u,c,e[t+2],17,606105819),c=r(c,p,d,u,e[t+3],22,-1044525330),u=r(u,c,p,d,e[t+4],7,-176418897),d=r(d,u,c,p,e[t+5],12,1200080426),p=r(p,d,u,c,e[t+6],17,-1473231341),c=r(c,p,d,u,e[t+7],22,-45705983),u=r(u,c,p,d,e[t+8],7,1770035416),d=r(d,u,c,p,e[t+9],12,-1958414417),p=r(p,d,u,c,e[t+10],17,-42063),c=r(c,p,d,u,e[t+11],22,-1990404162),u=r(u,c,p,d,e[t+12],7,1804603682),d=r(d,u,c,p,e[t+13],12,-40341101),p=r(p,d,u,c,e[t+14],17,-1502002290),c=r(c,p,d,u,e[t+15],22,1236535329),u=l(u,c,p,d,e[t+1],5,-165796510),d=l(d,u,c,p,e[t+6],9,-1069501632),p=l(p,d,u,c,e[t+11],14,643717713),c=l(c,p,d,u,e[t],20,-373897302),u=l(u,c,p,d,e[t+5],5,-701558691),d=l(d,u,c,p,e[t+10],9,38016083),p=l(p,d,u,c,e[t+15],14,-660478335),c=l(c,p,d,u,e[t+4],20,-405537848),u=l(u,c,p,d,e[t+9],5,568446438),d=l(d,u,c,p,e[t+14],9,-1019803690),p=l(p,d,u,c,e[t+3],14,-187363961),c=l(c,p,d,u,e[t+8],20,1163531501),u=l(u,c,p,d,e[t+13],5,-1444681467),d=l(d,u,c,p,e[t+2],9,-51403784),p=l(p,d,u,c,e[t+7],14,1735328473),c=l(c,p,d,u,e[t+12],20,-1926607734),u=s(u,c,p,d,e[t+5],4,-378558),d=s(d,u,c,p,e[t+8],11,-2022574463),p=s(p,d,u,c,e[t+11],16,1839030562),c=s(c,p,d,u,e[t+14],23,-35309556),u=s(u,c,p,d,e[t+1],4,-1530992060),d=s(d,u,c,p,e[t+4],11,1272893353),p=s(p,d,u,c,e[t+7],16,-155497632),c=s(c,p,d,u,e[t+10],23,-1094730640),u=s(u,c,p,d,e[t+13],4,681279174),d=s(d,u,c,p,e[t],11,-358537222),p=s(p,d,u,c,e[t+3],16,-722521979),c=s(c,p,d,u,e[t+6],23,76029189),u=s(u,c,p,d,e[t+9],4,-640364487),d=s(d,u,c,p,e[t+12],11,-421815835),p=s(p,d,u,c,e[t+15],16,530742520),c=s(c,p,d,u,e[t+2],23,-995338651),u=i(u,c,p,d,e[t],6,-198630844),d=i(d,u,c,p,e[t+7],10,1126891415),p=i(p,d,u,c,e[t+14],15,-1416354905),c=i(c,p,d,u,e[t+5],21,-57434055),u=i(u,c,p,d,e[t+12],6,1700485571),d=i(d,u,c,p,e[t+3],10,-1894986606),p=i(p,d,u,c,e[t+10],15,-1051523),c=i(c,p,d,u,e[t+1],21,-2054922799),u=i(u,c,p,d,e[t+8],6,1873313359),d=i(d,u,c,p,e[t+15],10,-30611744),p=i(p,d,u,c,e[t+6],15,-1560198380),c=i(c,p,d,u,e[t+13],21,1309151649),u=i(u,c,p,d,e[t+4],6,-145523070),d=i(d,u,c,p,e[t+11],10,-1120210379),p=i(p,d,u,c,e[t+2],15,718787259),c=i(c,p,d,u,e[t+9],21,-343485551),u=n(u,a),c=n(c,o),p=n(p,m),d=n(d,f)}return Uint32Array.of(u,c,p,d)}(function(e){if(0===e.length)return new Uint32Array;const t=new Uint32Array(a(8*e.length)).fill(0);for(let a=0;a<e.length;a++)t[a>>2]|=(255&e[a])<<a%4*8;return t}(e),8*e.length))}},348:(e,t,a)=>{var n=a(407),o=a(883);t.useImmer=function(e){var t=o.useState((function(){return n.freeze("function"==typeof e?e():e,!0)})),a=t[1];return[t[0],o.useCallback((function(e){a("function"==typeof e?n.produce(e):n.freeze(e))}),[])]},t.useImmerReducer=function(e,t,a){var r=o.useMemo((function(){return n.produce(e)}),[e]);return o.useReducer(r,t,a)}},356:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=a(11),o=a(425),r=a(568);t.default=function(e,t,a){e??={},a??=0;let l=(0,o.default)({...e,_v6:!0},new Uint8Array(16));if(l=(0,r.default)(l),t){for(let e=0;e<16;e++)t[a+e]=l[e];return t}return(0,n.unsafeStringify)(l)}},377:t=>{"use strict";t.exports=e},390:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.initialControlState=t.initialOffOnState=t.initialAutoManState=t.parameterInitialState=t.pumpInitialProps=t.pumpInitialStatus=t.valveProps=t.processObjectProps=t.valveStatus=void 0,t.valveStatus={alarm:!1,actFB:!1,deActFB:!0,activatedConfig:7,deactivatedConfig:5,itemName:"VXXX",manual:!1,masked:!1,changing:!1,locate:!1},t.processObjectProps={status:t.valveStatus},t.valveProps={processObject:t.processObjectProps,handleClick:()=>{console.log("Valve clicked")},labelPosition:"left",showLabel:!1},t.pumpInitialStatus={alarm:!1,actFB:!1,deActFB:!1,configuration:7,itemName:"itemName",manual:!1,masked:!1,changing:!1,locate:!1},t.pumpInitialProps={status:t.pumpInitialStatus},t.parameterInitialState=[{label:{text:"label",className:"",tooltipText:"",tooltipPosition:"",tooltipClassName:"",tooltipId:""},input:{type:"text",inputmode:"numeric",placeholder:"Enter a number",editable:!0,pattern:"^[0-9]*[.,]?[0-9]*$",min:0,max:100,decimalPlaces:2,eu:"µC",value:0}}],t.initialAutoManState={auto:!0,manual:!1},t.initialOffOnState={off:!1,on:!1},t.initialControlState={command:{available:{main:!1,upperSeat:!1,lowerSeat:!1},main:{label:"Main",autoManual:!1,activation:!1},upperSeat:{label:"Upper Seat",activation:!1},lowerSeat:{label:"Lower Seat",activation:!1}}}},405:(e,t)=>{"use strict";var a;Object.defineProperty(t,"__esModule",{value:!0}),t.HxItemList=t.HxModes=t.HX_COMPONENT_TYPE=void 0,t.HX_COMPONENT_TYPE="hmi.process_objects.HeatExchanger",function(e){e.alarm="alarm",e.heating="heating",e.cooling="cooling"}(a||(t.HxModes=a={})),t.HxItemList=["item-1","item-2","item-3","item-4","item-5","item-6","item-7","base-1","locate"]},407:(e,t,a)=>{"use strict";e.exports=a(124)},425:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateV1State=void 0;const n=a(291),o=a(11),r={};function l(e,t,a){return e.msecs??=-1/0,e.nsecs??=0,t===e.msecs?(e.nsecs++,e.nsecs>=1e4&&(e.node=void 0,e.nsecs=0)):t>e.msecs?e.nsecs=0:t<e.msecs&&(e.node=void 0),e.node||(e.node=a.slice(10,16),e.node[0]|=1,e.clockseq=16383&(a[8]<<8|a[9])),e.msecs=t,e}function s(e,t,a,n,o,r,l=0){if(e.length<16)throw new Error("Random bytes length must be >= 16");if(r){if(l<0||l+16>r.length)throw new RangeError(`UUID byte range ${l}:${l+15} is out of buffer bounds`)}else r=new Uint8Array(16),l=0;t??=Date.now(),a??=0,n??=16383&(e[8]<<8|e[9]),o??=e.slice(10,16);const s=(1e4*(268435455&(t+=122192928e5))+a)%4294967296;r[l++]=s>>>24&255,r[l++]=s>>>16&255,r[l++]=s>>>8&255,r[l++]=255&s;const i=t/4294967296*1e4&268435455;r[l++]=i>>>8&255,r[l++]=255&i,r[l++]=i>>>24&15|16,r[l++]=i>>>16&255,r[l++]=n>>>8|128,r[l++]=255&n;for(let e=0;e<6;++e)r[l++]=o[e];return r}t.updateV1State=l,t.default=function(e,t,a){let i;const u=e?._v6??!1;if(e){const t=Object.keys(e);1===t.length&&"_v6"===t[0]&&(e=void 0)}if(e)i=s(e.random??e.rng?.()??(0,n.default)(),e.msecs,e.nsecs,e.clockseq,e.node,t,a);else{const e=Date.now(),o=(0,n.default)();l(r,e,o),i=s(o,r.msecs,r.nsecs,u?void 0:r.clockseq,u?void 0:r.node,t,a)}return t??(0,o.unsafeStringify)(i)}},429:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getBoolAtIndex=void 0,t.convertTPValveConfigToHmiValveConfig=function(e){let t,a,n=0;return e>>9&1?(t=9,a=9,n=n&~(1<<a)|(e>>t&1)<<a,t=0,a=0,n=n&~(1<<a)|(e>>t&1)<<a,t=4,a=2,n=n&~(1<<a)|(e>>t&1)<<a,t=6,a=3,n=n&~(1<<a)|(e>>t&1)<<a,t=2,a=1,n=n&~(1<<a)|(e>>t&1)<<a):(t=7,a=3,n=n&~(1<<a)|(e>>t&1)<<a,t=5,a=7,n=n&~(1<<a)|(e>>t&1)<<a,t=3,a=5,n=n&~(1<<a)|(e>>t&1)<<a,t=4,a=6,n=n&~(1<<a)|(e>>t&1)<<a),e>>8&1&&(n|=276),1&e&&(n|=1),e>>1&1&&(n|=2),n>>7&1|n>>6&1|n>>5&1&&(n|=256),n},t.getBoolAtIndex=(e,t)=>Boolean(e>>t&1)},441:(e,t,a)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.PumpCompound=t.usePumpContext=t.PumpContextProvider=t.COMPONENT_TYPE=void 0;const o=a(883),r=a(535),l=a(152),s=a(506),i=a(390),u=a(921);t.COMPONENT_TYPE=u.PUMP_COMPONENT_TYPE,n=(0,r.useCreateContext)("PumpCompound"),t.PumpContextProvider=n[0],t.usePumpContext=n[1],t.PumpCompound={Root:({componentProps:e,pumpProps:a,onActionPerformed:n,children:r})=>o.createElement(t.PumpContextProvider,{pumpProps:a,componentProps:e,onActionPerformed:n},r),pump:()=>{const{pumpProps:e,onActionPerformed:a,componentProps:n}=(0,t.usePumpContext)("Valve"),r=o.useRef(null),{emit:c}=n,{processObject:p,pumpType:d}=e,{status:m}=p||i.pumpInitialProps,f=o.useMemo((()=>(null==m?void 0:m.locate)?s.pumpItemNames:s.pumpItemNames.slice(0,-1)),[null==m?void 0:m.locate]);return o.createElement("div",Object.assign({ref:r},c({classes:[`${u.IA_SYMBOL_COMPONENT_COLUMN}`]}),{"data-component":t.COMPONENT_TYPE,onClick:a}),o.createElement("div",{className:`${u.IA_SYMBOL_COMPONENT_ROW}`},o.createElement("div",{className:`${u.IA_SYMBOL_COMPONENT_WRAPPER}`},o.createElement("div",{className:`${u.HMI_COMPONENT_CLASS} pump`},o.createElement(l.default,{itemClassName:`${(0,s.getPumpStatusClassNames)("base-1 show",m)}`}),o.createElement(l.default,{itemClassName:"base-2 show item"}),o.createElement(l.default,{itemClassName:"base-3 show item"}),f.map((({name:e,index:t,key:a})=>o.createElement(l.default,{itemClassName:e+" "+(0,s.getPumpItemClassName)(t,d||"centrifugal",m),key:a})))))))},popover:({anchorEl:e})=>{const{pumpProps:a,componentProps:n}=(0,t.usePumpContext)("Popover"),{showLabel:r,labelPosition:l,processObject:i}=a,{status:u}=i||{};if(!r)return null;const{position:c}=n;let p="itemId popover position-left";return l&&(p=(0,s.getItemIdPositionClassName)(p,l)),o.createElement("div",{className:p,style:{top:c.y,left:c.x}},o.createElement("div",{style:{padding:8}},null==u?void 0:u.itemName))}}},445:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.buildComponentElements=t.getHxModeClassNames=t.getHxItemClassName=t.hxItemNames=void 0;const n=a(182),o=a(405),r=a(429);t.hxItemNames=o.HxItemList.map(((e,t)=>({key:(0,n.v4)(),name:e,index:t}))),t.getHxItemClassName=(e,t,a)=>{const n=(e=>{switch(e){case"plate":case"tubelar":return 1;default:throw Error(`In getPumpConfiguration() pump type: ${e} not found`)}})(t);let o="";return e<2&&(o=(0,r.getBoolAtIndex)(n,e)?`show item ${t}`:"hide item"),o},t.getHxModeClassNames=(e,t)=>{if(e.includes("show")&&!e.includes("item"))switch(t){case"alarm":e=e.replace("AlarmState","")+" AlarmState";break;case"heating":e=e.replace("heating","")+" heating";break;case"cooling":e=e.replace("cooling","")+" cooling"}return e},t.buildComponentElements=(e,t)=>{let a=[];for(let o=0;o<e+t;o++){let r={key:(0,n.v4)(),name:o<e?`base-${o+1}`:`dynamic-${o+(1-t)}`,index:o};a.push(r)}let o={key:(0,n.v4)(),name:"locate",index:e+t};return a.push(o),a}},465:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="00000000-0000-0000-0000-000000000000"},506:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getPumpStatusClassNames=t.getPumpItemClassName=t.pumpItemNames=t.getItemIdPositionClassName=t.valveMpItemNames=t.getClassNameWithStatus=t.getValveMpItemClassName=void 0;const n=a(429),o=a(542),r=a(182);t.getValveMpItemClassName=(e,t)=>{var a,o;let r="";const l=(0,n.convertTPValveConfigToHmiValveConfig)(null!==(a=null==t?void 0:t.activatedConfig)&&void 0!==a?a:0),s=(0,n.convertTPValveConfigToHmiValveConfig)(null!==(o=null==t?void 0:t.deactivatedConfig)&&void 0!==o?o:0);return console.log(`DeactivatedConfigValue: ${s}`),e<8?r=(0,n.getBoolAtIndex)(l,e)&&(null==t?void 0:t.actFB)||(0,n.getBoolAtIndex)(s,e)&&(null==t?void 0:t.deActFB)?"show item":"hide item":9===e?r="show":8===e?r=(0,n.getBoolAtIndex)(l,e)||(0,n.getBoolAtIndex)(s,e)?"show":"hide":10===e?(0,n.getBoolAtIndex)(l,10)||(0,n.getBoolAtIndex)(s,10)?(r="show item",r=(null==t?void 0:t.usl)?r.replace("activated","")+" activated":r.replace("deactivated","")+" deactivated"):r="hide item":11===e?(0,n.getBoolAtIndex)(l,11)||(0,n.getBoolAtIndex)(s,11)?(r="show item",r=(null==t?void 0:t.lsl)?r.replace("activated","")+" activated":r.replace("deactivated","")+" deactivated"):r="hide item":12===e&&((null==t?void 0:t.locate)?(r=r.replace("small","")+" small",((0,n.getBoolAtIndex)(l,8)||(0,n.getBoolAtIndex)(s,8))&&(r=r.replace("large","")+" large")):r=r.replace("hide item","")+" hide item"),r.includes("show")&&!r.includes("item")&&((null==t?void 0:t.alarm)&&(r=r.replace("alarm","")+" alarm"),(null==t?void 0:t.changing)&&(r=r.replace("changing","")+" changing"),(null==t?void 0:t.manual)&&(r=r.replace("manual","")+" manual"),(null==t?void 0:t.masked)&&!t.alarm&&(r=r.replace("no-alarm-mask","")+" no-alarm-mask"),(null==t?void 0:t.masked)&&(r=r.replace("masked","")+" masked"),(null==t?void 0:t.actFB)&&(r=r.replace("activated","")+" activated"),(null==t?void 0:t.deActFB)&&(r=r.replace("deactivated","")+" deactivated")),r},t.getClassNameWithStatus=(e,t,a,o,r,l,s,i)=>{var u;let c="",p="";if(a&&(null===(u=a[e])||void 0===u?void 0:u.statusKey)&&t){const n=a[e].statusKey,o=Object.keys(n).filter((e=>e in t));for(const e of o){const a=n[e];p+=t[e]?` ${(null==a?void 0:a.trueString)?a.trueString:""}`:` ${(null==a?void 0:a.falseString)?a.falseString:""}`}}if(r&&l){if(e<r){let t=e>0?"item":`${o}`;c=(0,n.getBoolAtIndex)(l,e)?`show ${t} ${p}`:`hide ${t}`}if(s&&i){let t=e-r;e>=r&&e<r+s&&(c=(0,n.getBoolAtIndex)(i,t)?"show item":"hide item")}}return c},t.valveMpItemNames=Object.entries(o.valveMpItemNameEnum).map(((e,t)=>({key:(0,r.v4)(),name:e,value:e[1],index:t}))),t.getItemIdPositionClassName=(e,t)=>{if(!e.includes("itemId popover"))return console.warn("Function getItemIdPositionClassName called when 'itemId popover' not in given className"),e;switch(e="itemId popover",t){case"left":e=e.replace("position-left","")+" position-left";break;case"right":e=e.replace("position-right","")+" position-right";break;case"top-left":e=e.replace("position-top-left","")+" position-top-left";break;case"top-right":e=e.replace("position-top-right","")+" position-top-right";break;case"bottom-left":e=e.replace("position-bottom-left","")+" position-bottom-left";break;case"bottom-right":e=e.replace("position-bottom-right","")+" position-bottom-right"}return e},t.pumpItemNames=o.pumpItemList.map(((e,t)=>({key:(0,r.v4)(),name:e,index:t}))),t.getPumpItemClassName=(e,t,a)=>{const o=(e=>{switch(e){case"centrifugal":case"diaphragm":case"positive-displacement":case"progressive-cavity":return 1;case"gear":case"liquid-ring":case"positive-screw":return 3;default:throw Error(`In getPumpConfiguration() pump type: ${e} not found`)}})(t);let r="";return e<2&&(r=(0,n.getBoolAtIndex)(o,e)?`show item ${t}`:"hide item"),r},t.getPumpStatusClassNames=(e,t)=>(e.includes("show")&&!e.includes("item")&&((null==t?void 0:t.alarm)&&(e=e.replace("alarm","")+" alarm"),(null==t?void 0:t.changing)&&(e=e.replace("changing","")+" changing"),(null==t?void 0:t.manual)&&(e=e.replace("manual","")+" manual"),(null==t?void 0:t.masked)&&!t.alarm&&(e=e.replace("no-alarm-mask","")+" no-alarm-mask"),(null==t?void 0:t.masked)&&(e=e.replace("masked","")+" masked"),(null==t?void 0:t.actFB)&&(e=e.replace("activated","")+" activated"),(null==t?void 0:t.deActFB)&&(e=e.replace("deactivated","")+" deactivated")),e)},511:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ParameterReducer=r,t.paramItemsReducer=function(){const[e,t]=(0,n.useImmerReducer)(r,o.parameterInitialState);return{state:e,reducer:{updateValue:function(e,a){t({type:"UPDATE_VALUE",index:e,value:a})}}}},t.useValveMpCommandReducer=function(){const[e,t]=(0,n.useImmerReducer)(l,o.initialControlState);return{state:e,reducer:{updateAutoManSelection:function(e){t({type:"UPDATE_AUTO_MANUAL",mode:e})},updateMainAvailable:function(e){t({type:"UPDATE_MAIN_AVAIL",value:e})},updateUpperSeatAvailable:function(e){t({type:"UPDATE_UPPERSEAT_AVAIL",value:e})},updateLowerSeatAvailable:function(e){t({type:"UPDATE_LOWERSEAT_AVAIL",value:e})},updateMainManualOn:function(){t({type:"UPDATE_MAIN_MAN_ON"})},updateMainManualOff:function(){t({type:"UPDATE_MAIN_MAN_OFF"})},updateUslManualOn:function(){t({type:"UPDATE_USL_MAN_ON"})},updateUslManualOff:function(){t({type:"UPDATE_USL_MAN_OFF"})},updateLslManualOn:function(){t({type:"UPDATE_LSL_MAN_ON"})},updateLslManualOff:function(){t({type:"UPDATE_LSL_MAN_OFF"})}}}};const n=a(348),o=a(390);function r(e,t){return"UPDATE_VALUE"===t.type?(e[t.index].input.value=t.value,e):e}function l(e,t){var a,n,o,r,l,s,i,u;switch(t.type){case"UPDATE_AUTO_MANUAL":if(null===(a=e.command)||void 0===a?void 0:a.main)if("auto"===t.mode)e.command.main.autoManual=!1,console.log("In Auto");else if("manual"===t.mode)return e.command.main.autoManual=!0,console.log("In Manual"),e;return e;case"UPDATE_MAIN_MAN_ON":return(null===(n=e.command)||void 0===n?void 0:n.main)&&(e.command.main.activation=!0),e;case"UPDATE_MAIN_MAN_OFF":return(null===(o=e.command)||void 0===o?void 0:o.main)&&(e.command.main.activation=!1),e;case"UPDATE_USL_MAN_ON":return(null===(r=e.command)||void 0===r?void 0:r.upperSeat)&&(e.command.upperSeat.activation=!0),e;case"UPDATE_USL_MAN_OFF":return(null===(l=e.command)||void 0===l?void 0:l.upperSeat)&&(e.command.upperSeat.activation=!1),e;case"UPDATE_LSL_MAN_ON":return(null===(s=e.command)||void 0===s?void 0:s.lowerSeat)&&(e.command.lowerSeat.activation=!0),e;case"UPDATE_LSL_MAN_OFF":return(null===(i=e.command)||void 0===i?void 0:i.lowerSeat)&&(e.command.lowerSeat.activation=!1),e;case"UPDATE_MAIN_AVAIL":return(null===(u=e.command)||void 0===u?void 0:u.available)&&t.value&&(e.command.available.main=t.value),e;default:return e}}},535:function(e,t,a){"use strict";var n=this&&this.__rest||function(e,t){var a={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(a[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(a[n[o]]=e[n[o]])}return a};Object.defineProperty(t,"__esModule",{value:!0}),t.useCreateContext=function(e,t){const a=o.createContext(t),r=e=>{const{children:t}=e,r=n(e,["children"]),l=o.useMemo((()=>r),Object.values(r));return o.createElement(a.Provider,{value:l},t)};return r.displayName=e+"Provider",[r,function(n){const r=o.useContext(a);if(r)return r;if(void 0!==t)return t;throw new Error(`\`${n}\` must be used within \`${e}\``)}]};const o=a(883)},542:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hxItemNameEnum=t.pumpItemList=t.valveMpItemNameEnum=t.ValveClassNameEnum=void 0,t.ValveClassNameEnum={AlarmState:"AlarmState",Activated:"Activated",Deactivated:"Deactivated",Manual:"Manual",Masked:"Masked",Changing:"Changing",NoAlarmMask:"NoAlarmMask",Locate:"Locate"},t.valveMpItemNameEnum={V1b1:"v1b1",V1b2:"v1b2",V1b3:"v1b3",V1b4:"v1b4",V2b1:"v2b1",V2b2:"v2b2",V2b3:"v2b3",V2b4:"v2b4",V2:"v2",v1:"v1",usl:"usl",lsl:"lsl",locate:"locate"},t.pumpItemList=["symbol-1","symbol-2","locate"],t.hxItemNameEnum={b1:"base-1",b2:"base-2",b3:"base-3",b4:"base-4",V2b1:"v2b1",V2b2:"v2b2",V2b3:"v2b3",V2b4:"v2b4",V2:"v2",v1:"v1",usl:"usl",lsl:"lsl",locate:"locate"}},557:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=void 0;const n=a(829),o=a(988);var r=a(988);function l(e,t,a,r){return(0,o.default)(80,n.default,e,t,a,r)}Object.defineProperty(t,"DNS",{enumerable:!0,get:function(){return r.DNS}}),Object.defineProperty(t,"URL",{enumerable:!0,get:function(){return r.URL}}),l.DNS=o.DNS,l.URL=o.URL,t.default=l},568:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=a(797),o=a(11);t.default=function(e){const t=(a="string"==typeof e?(0,n.default)(e):e,Uint8Array.of((15&a[6])<<4|a[7]>>4&15,(15&a[7])<<4|(240&a[4])>>4,(15&a[4])<<4|(240&a[5])>>4,(15&a[5])<<4|(240&a[0])>>4,(15&a[0])<<4|(240&a[1])>>4,(15&a[1])<<4|(240&a[2])>>4,96|15&a[2],a[3],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15]));var a;return"string"==typeof e?(0,o.unsafeStringify)(t):t}},570:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HeatExchangerMeta=t.HeatExchanger=t.COMPONENT_TYPE=void 0;const n=a(883),o=a(377),r=a(76);t.COMPONENT_TYPE="hmi.process_objects.HeatExchanger";class l extends o.Component{constructor(e){super(e),this.type=this.props.props.type,this.itemName=this.props.props.itemName,this.mode=this.props.props.mode,this.locate=this.props.props.locate,this.showLabel=this.props.props.showLabel||!1,this.labelPosition=this.props.props.labelPosition||"left",this.onActionPerformed=()=>{this.props.eventsEnabled?(console.log("Valve clicked!"),this.props.componentEvents.fireComponentEvent("onActionPerformed",{})):console.log("Valve is disabled in the design-scope")},this.valveRef=n.createRef()}componentDidMount(){}render(){return n.createElement(r.HeatExchangerCompound.Root,{componentProps:this.props,itemProps:this.props.props,onActionPerformed:this.onActionPerformed},n.createElement(r.HeatExchangerCompound.plate,null),n.createElement(r.HeatExchangerCompound.popover,{anchorEl:this.valveRef.current}))}}t.HeatExchanger=l,t.HeatExchangerMeta=class{getComponentType(){return t.COMPONENT_TYPE}getViewComponent(){return l}getDefaultSize(){return{width:40,height:70}}getPropsReducer(e){return{type:e.readString("type","plate"),mode:e.readString("mode","heating"),itemName:e.readString("itemName",""),locate:e.readBoolean("locate",!1),showLabel:e.readBoolean("showLabel",!1),labelPosition:e.readString("labelPosition","top-left")}}}},591:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=void 0;const n=a(338),o=a(988);var r=a(988);function l(e,t,a,r){return(0,o.default)(48,n.default,e,t,a,r)}Object.defineProperty(t,"DNS",{enumerable:!0,get:function(){return r.DNS}}),Object.defineProperty(t,"URL",{enumerable:!0,get:function(){return r.URL}}),l.DNS=o.DNS,l.URL=o.URL,t.default=l},697:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i},702:(e,t,a)=>{"use strict";a.r(t)},740:(e,t,a)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.ValveMpCompound=t.useValveContext=t.ValveContextProvider=void 0;const o=a(883),r=a(506),l=a(152),s=a(535),i=a(390),u=a(921),c=u.VALVE_COMPONENT_TYPE;n=(0,s.useCreateContext)("ValveMpCompound"),t.ValveContextProvider=n[0],t.useValveContext=n[1],t.ValveMpCompound={Root:({componentProps:e,valveProps:a,onActionPerformed:n,children:r})=>o.createElement(t.ValveContextProvider,{valveProps:a,componentProps:e,onActionPerformed:n},r),valve:()=>{const{valveProps:e,onActionPerformed:a,componentProps:n}=(0,t.useValveContext)("Valve"),s=o.useRef(null),{emit:p}=n,{processObject:d}=e,{status:m}=d||i.processObjectProps;let f=r.valveMpItemNames;return(null==m?void 0:m.locate)||(f=f.slice(0,-1)),o.createElement("div",Object.assign({ref:s},p({classes:[`${u.IA_SYMBOL_COMPONENT_COLUMN}`]}),{"data-component":c,onClick:a}),o.createElement("div",{className:`${u.IA_SYMBOL_COMPONENT_ROW}`},o.createElement("div",{className:`${u.IA_SYMBOL_COMPONENT_WRAPPER}`},o.createElement("div",{className:`${u.HMI_COMPONENT_CLASS} valve__mp`},f.map((({value:e,index:t,key:a})=>o.createElement(l.default,{itemClassName:e+" "+(0,r.getValveMpItemClassName)(t,m),key:a})))))))},popover:({anchorEl:e})=>{const{valveProps:a,componentProps:n}=(0,t.useValveContext)("Popover"),{showLabel:l,labelPosition:s,processObject:u}=a,{status:c}=u||i.processObjectProps;if(!l)return null;const{position:p}=n;let d="itemId popover position-left";return s&&(d=(0,r.getItemIdPositionClassName)(d,s)),o.createElement("div",{className:d,style:{top:p.y,left:p.x}},o.createElement("div",{style:{padding:8}},null==c?void 0:c.itemName))}}},746:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=a(697);t.default=function(e){return"string"==typeof e&&n.default.test(e)}},770:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=a(746);t.default=function(e){if(!(0,n.default)(e))throw TypeError("Invalid UUID");return parseInt(e.slice(14,15),16)}},779:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a="undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto);t.default={randomUUID:a}},797:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=a(746);t.default=function(e){if(!(0,n.default)(e))throw TypeError("Invalid UUID");let t;return Uint8Array.of((t=parseInt(e.slice(0,8),16))>>>24,t>>>16&255,t>>>8&255,255&t,(t=parseInt(e.slice(9,13),16))>>>8,255&t,(t=parseInt(e.slice(14,18),16))>>>8,255&t,(t=parseInt(e.slice(19,23),16))>>>8,255&t,(t=parseInt(e.slice(24,36),16))/1099511627776&255,t/4294967296&255,t>>>24&255,t>>>16&255,t>>>8&255,255&t)}},829:(e,t)=>{"use strict";function a(e,t,a,n){switch(e){case 0:return t&a^~t&n;case 1:case 3:return t^a^n;case 2:return t&a^t&n^a&n}}function n(e,t){return e<<t|e>>>32-t}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){const t=[1518500249,1859775393,2400959708,3395469782],o=[1732584193,4023233417,2562383102,271733878,3285377520],r=new Uint8Array(e.length+1);r.set(e),r[e.length]=128;const l=(e=r).length/4+2,s=Math.ceil(l/16),i=new Array(s);for(let t=0;t<s;++t){const a=new Uint32Array(16);for(let n=0;n<16;++n)a[n]=e[64*t+4*n]<<24|e[64*t+4*n+1]<<16|e[64*t+4*n+2]<<8|e[64*t+4*n+3];i[t]=a}i[s-1][14]=8*(e.length-1)/Math.pow(2,32),i[s-1][14]=Math.floor(i[s-1][14]),i[s-1][15]=8*(e.length-1)&4294967295;for(let e=0;e<s;++e){const r=new Uint32Array(80);for(let t=0;t<16;++t)r[t]=i[e][t];for(let e=16;e<80;++e)r[e]=n(r[e-3]^r[e-8]^r[e-14]^r[e-16],1);let l=o[0],s=o[1],u=o[2],c=o[3],p=o[4];for(let e=0;e<80;++e){const o=Math.floor(e/20),i=n(l,5)+a(o,s,u,c)+p+t[o]+r[e]>>>0;p=c,c=u,u=n(s,30)>>>0,s=l,l=i}o[0]=o[0]+l>>>0,o[1]=o[1]+s>>>0,o[2]=o[2]+u>>>0,o[3]=o[3]+c>>>0,o[4]=o[4]+p>>>0}return Uint8Array.of(o[0]>>24,o[0]>>16,o[0]>>8,o[0],o[1]>>24,o[1]>>16,o[1]>>8,o[1],o[2]>>24,o[2]>>16,o[2]>>8,o[2],o[3]>>24,o[3]>>16,o[3]>>8,o[3],o[4]>>24,o[4]>>16,o[4]>>8,o[4])}},838:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ParameterListComponentMeta=t.ParameterListComponent=t.COMPONENT_TYPE=void 0;const n=a(883),o=a(921),r=[{label:{text:"text"},input:{value:null,placeholder:"Enter a Number"}}];t.COMPONENT_TYPE=o.PARAMETER_LIST_COMPONENT_TYPE,t.ParameterListComponent=e=>{const a=n.useMemo((()=>{const{parameters:t}=e.props||r;return t}),[e.props.parameters]),{emit:l}=e;return n.createElement("div",Object.assign({},l({classes:[`${o.IA_SYMBOL_COMPONENT_COLUMN}`]}),{"data-component":t.COMPONENT_TYPE}),n.createElement("div",{className:`${o.IA_SYMBOL_COMPONENT_ROW}`},n.createElement("div",{className:`${o.IA_SYMBOL_COMPONENT_WRAPPER}`},n.createElement("div",{className:`${o.HMI_COMPONENT_CLASS} parameter-list`},a.map(((t,a)=>{const{label:o,input:r}=t;return n.createElement("label",{key:`${o.text}-parameter${a}`,className:"field small"},n.createElement("span",{className:"label"},o.text),n.createElement("span",{className:"eu"},r.eu),n.createElement("input",{type:"text",id:`${o.text}-parameter${a}`,inputMode:r.inputmode,pattern:r.pattern||"[0-9]*",placeholder:r.placeholder,disabled:!r.editable,min:r.min,max:r.max,value:r.value,onChange:t=>{e.store.props.write(`parameters[${a}].input.value`,t.currentTarget.value)}}))}))))))},t.ParameterListComponentMeta=class{getComponentType(){return t.COMPONENT_TYPE}getDefaultSize(){return{width:240,height:240}}getPropsReducer(e){return{parameters:e.read("parameters",[{label:{text:"label",className:"",tooltipText:"",tooltipPosition:"",tooltipClassName:"",tooltipId:""},input:{type:"text",inputmode:"numeric",placeholder:"Enter a number",editable:!0,pattern:"^[0-9]*[.,]?[0-9]*$",min:0,max:100,decimalPlaces:2,eu:"µC",value:0}}])}}getViewComponent(){return t.ParameterListComponent}}},863:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CommandValveMpMeta=t.CommandValveMp=t.COMPONENT_TYPE=void 0;const n=a(883),o=a(883),r=a(511),l=a(921);t.COMPONENT_TYPE=l.COMMAND_VALVE_MP_COMPONENT_TYPE,t.CommandValveMp=e=>{var a;const{state:s,reducer:i}=(0,r.useValveMpCommandReducer)(),{emit:u}=e;(0,o.useEffect)((()=>{const t=e.store.props.subscribe((e=>{var t,a,n,o;const r=e.read("command"),{main:l,upperSeat:u,lowerSeat:c,available:p}=r;(null===(t=s.command)||void 0===t?void 0:t.available)&&p&&(p.main!==s.command.available.main&&i.updateMainAvailable(!!p.main),p.upperSeat!==s.command.available.upperSeat&&i.updateUpperSeatAvailable(!!p.upperSeat),p.lowerSeat!==s.command.available.lowerSeat&&i.updateLowerSeatAvailable(!!p.lowerSeat)),(null===(a=s.command)||void 0===a?void 0:a.main)&&l&&(l.autoManual!==s.command.main.autoManual&&i.updateAutoManSelection(l.autoManual?"manual":"auto"),l.activation!==s.command.main.activation&&(l.activation?l.activation&&i.updateMainManualOn():i.updateMainManualOff())),(null===(n=s.command)||void 0===n?void 0:n.lowerSeat)&&c&&c.activation!==s.command.lowerSeat.activation&&(c.activation?c.activation&&i.updateLslManualOn():i.updateLslManualOff()),(null===(o=s.command)||void 0===o?void 0:o.upperSeat)&&u&&u.activation!==s.command.upperSeat.activation&&(u.activation?u.activation&&i.updateUslManualOn():i.updateUslManualOff())}));return()=>{"function"==typeof t&&t()}}),[e.store.props]);const{main:c,upperSeat:p,lowerSeat:d,available:m}=null!==(a=s.command)&&void 0!==a?a:{};console.log(`Command Props: ${JSON.stringify(s.command,null,2)}`),console.log(`Main Avail: ${JSON.stringify(null==m?void 0:m.main,null,2)}`),console.log(`Command Props: ${JSON.stringify(null==m?void 0:m.upperSeat,null,2)}`),console.log(`Command Props: ${JSON.stringify(null==m?void 0:m.lowerSeat,null,2)}`);const f=t=>{var a,n;i.updateAutoManSelection(t),"auto"===t?null===(a=e.store.props)||void 0===a||a.write("command.main.autoManual",!1):"manual"===t&&(null===(n=e.store.props)||void 0===n||n.write("command.main.autoManual",!0))};return n.createElement("div",Object.assign({},u({classes:[`${l.IA_SYMBOL_COMPONENT_COLUMN}`]}),{"data-component":t.COMPONENT_TYPE}),n.createElement("div",{className:`${l.IA_SYMBOL_COMPONENT_ROW}`},n.createElement("div",{className:`${l.IA_SYMBOL_COMPONENT_WRAPPER}`},n.createElement("div",{className:`${l.HMI_COMPONENT_CLASS} command-valve-mp`},n.createElement("label",{className:"main-label"},null==c?void 0:c.label),n.createElement("div",{role:"group",className:"button-group outlined main-auto-manual"},n.createElement("button",{className:"button outlined "+((null==c?void 0:c.autoManual)?"":"selected"),disabled:!(null==m?void 0:m.main),onClick:()=>f("auto")},"Auto "),n.createElement("button",{className:"button outlined "+((null==c?void 0:c.autoManual)?"selected":""),disabled:!(null==m?void 0:m.main),onClick:()=>f("manual")},"Manual")),n.createElement("div",{role:"group",className:"button-group outlined main-on-off"},n.createElement("button",{className:"button outlined "+((null==c?void 0:c.activation)?"selected":""),disabled:!(null==m?void 0:m.main)||!(null==c?void 0:c.autoManual),onClick:()=>{var t;i.updateMainManualOn(),null===(t=e.store.props)||void 0===t||t.write("command.main.activation",!0)}},"On "),n.createElement("button",{className:"button outlined "+((null==c?void 0:c.activation)?"":"selected"),disabled:!(null==m?void 0:m.main)||!(null==c?void 0:c.autoManual),onClick:()=>{var t;i.updateMainManualOff(),null===(t=e.store.props)||void 0===t||t.write("command.main.activation",!1)}},"Off")),n.createElement("label",{className:"upper-seat-label"},null==p?void 0:p.label),n.createElement("div",{role:"group",className:"button-group outlined upper-seat-on-off"},n.createElement("button",{className:"button outlined "+((null==p?void 0:p.activation)?"selected":""),disabled:!(null==m?void 0:m.upperSeat)||!(null==c?void 0:c.autoManual),onClick:()=>{var t;i.updateUslManualOn(),null===(t=e.store.props)||void 0===t||t.write("command.upperSeat.activation",!0)}},"On "),n.createElement("button",{className:"button outlined "+((null==p?void 0:p.activation)?"":"selected"),disabled:!(null==m?void 0:m.upperSeat)||!(null==c?void 0:c.autoManual),onClick:()=>{var t;i.updateUslManualOff(),null===(t=e.store.props)||void 0===t||t.write("command.upperSeat.activation",!1)}},"Off")),n.createElement("label",{className:"lower-seat-label"},null==d?void 0:d.label),n.createElement("div",{role:"group",className:"button-group outlined lower-seat-on-off"},n.createElement("button",{className:"button outlined "+((null==d?void 0:d.activation)?"selected":""),disabled:!(null==m?void 0:m.lowerSeat)||!(null==c?void 0:c.autoManual),onClick:()=>{var t;i.updateLslManualOn(),null===(t=e.store.props)||void 0===t||t.write("command.lowerSeat.activation",!0)}},"On "),n.createElement("button",{className:"button outlined "+((null==d?void 0:d.activation)?"":"selected"),disabled:!(null==m?void 0:m.lowerSeat)||!(null==c?void 0:c.autoManual),onClick:()=>{var t;i.updateLslManualOff(),null===(t=e.store.props)||void 0===t||t.write("command.lowerSeat.activation",!1)},value:"true"},"Off"))))))},t.CommandValveMpMeta=class{getComponentType(){return t.COMPONENT_TYPE}getViewComponent(){return t.CommandValveMp}getDefaultSize(){return{width:280,height:140}}getPropsReducer(e){return{command:{available:{main:e.readBoolean("command.available.main"),upperSeat:e.readBoolean("command.available.upperSeat"),lowerSeat:e.readBoolean("command.available.lowerSeat")},main:{label:e.readString("commands.main.label",""),autoManual:e.readBoolean("command.main.autoManual",!1),activation:e.readBoolean("command.main.activation",!1)},upperSeat:{label:e.readString("commands.upperSeat.label",""),activation:e.readBoolean("command.upperSeat.activation",!1)},lowerSeat:{label:e.readString("commands.lowerSeat.label",""),activation:e.readBoolean("command.lowerSeat.activation",!1)}}}}}},869:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PumpMeta=t.Pump=t.COMPONENT_TYPE=void 0;const n=a(883),o=a(377),r=a(441),l=a(390);t.COMPONENT_TYPE="hmi.process_objects.Pump";class s extends o.Component{constructor(e){var t;super(e),this.processObject=(null===(t=this.props.props.processObject)||void 0===t?void 0:t.status)||l.pumpInitialStatus,this.status=this.processObject,this.showLabel=this.props.props.showLabel||!1,this.labelPosition=this.props.props.labelPosition||"left",this.onActionPerformed=()=>{this.props.eventsEnabled?(console.log("Valve clicked!"),this.props.componentEvents.fireComponentEvent("onActionPerformed",{})):console.log("Valve is disabled in the design-scope")},this.valveRef=n.createRef()}componentDidMount(){}render(){return n.createElement(r.PumpCompound.Root,{componentProps:this.props,pumpProps:this.props.props,onActionPerformed:this.onActionPerformed},n.createElement(r.PumpCompound.pump,null),n.createElement(r.PumpCompound.popover,{anchorEl:this.valveRef.current}))}}t.Pump=s,t.PumpMeta=class{getComponentType(){return t.COMPONENT_TYPE}getViewComponent(){return s}getDefaultSize(){return{width:36,height:36}}getPropsReducer(e){return{pumpType:e.readString("pumpType","centrifugal"),processObject:{status:{alarm:e.readBoolean("processObject.status.alarm",!1),actFB:e.readBoolean("processObject.status.actFB",!1),deActFB:e.readBoolean("processObject.status.deActFB",!1),itemName:e.readString("processObject.status.itemName",""),manual:e.readBoolean("processObject.status.manual",!1),masked:e.readBoolean("processObject.status.masked",!1),changing:e.readBoolean("processObject.status.changing",!1),locate:e.readBoolean("processObject.status.locate",!1)}},showLabel:e.readBoolean("showLabel",!1),labelPosition:e.readString("labelPosition","top-left")}}}},872:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.StatusValveMpMeta=t.StatusValveMp=t.COMPONENT_TYPE=void 0;const n=a(883),o=a(921);t.COMPONENT_TYPE=o.STATUS_COMPONENT_TYPE,t.StatusValveMp=e=>{const{emit:a}=e,{statusItems:r}=e.props;return n.createElement("div",Object.assign({},a({classes:[`${o.IA_SYMBOL_COMPONENT_COLUMN}`]}),{"data-component":t.COMPONENT_TYPE}),n.createElement("div",{className:`${o.IA_SYMBOL_COMPONENT_ROW}`},n.createElement("div",{className:`${o.IA_SYMBOL_COMPONENT_WRAPPER}`},n.createElement("div",{className:`${o.HMI_COMPONENT_CLASS} status`},n.createElement("ul",{className:"list bordered dense"},r.map(((e,t)=>n.createElement("li",{key:t},n.createElement("label",{className:"checkbox"},n.createElement("div",{className:"text"},n.createElement("p",{className:"x-small "+(e.lowlight?"low-light":"")},e.label)),n.createElement("div",{className:"end"},n.createElement("input",{name:"checkbox",id:`checkbox-${t}`,type:"checkbox",checked:e.status,readOnly:!0})))))))))))},t.StatusValveMpMeta=class{getComponentType(){return t.COMPONENT_TYPE}getViewComponent(){return t.StatusValveMp}getDefaultSize(){return{width:240,height:32}}getPropsReducer(e){return console.log(`status ${e.read("status")}`),{statusItems:e.read("status",[{label:"label text",status:!1,lowlight:!1},{label:"label text",status:!1,lowlight:!1},{label:"label text",status:!1,lowlight:!1},{label:"label text",status:!1,lowlight:!1},{label:"label text",status:!1,lowlight:!1},{label:"label text",status:!1,lowlight:!1},{label:"label text",status:!1,lowlight:!1},{label:"label text",status:!1,lowlight:!1},{label:"label text",status:!1,lowlight:!1},{label:"label text",status:!1,lowlight:!1},{label:"label text",status:!1,lowlight:!1},{label:"label text",status:!1,lowlight:!1},{label:"label text",status:!1,lowlight:!1},{label:"label text",status:!1,lowlight:!1}])}}}},883:e=>{"use strict";e.exports=t},921:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hxElements=t.HX_COMPONENT_TYPE=t.COMMAND_VALVE_MP_COMPONENT_TYPE=t.PARAMETER_LIST_COMPONENT_TYPE=t.STATUS_COMPONENT_TYPE=t.PUMP_COMPONENT_TYPE=t.VALVE_COMPONENT_TYPE=t.HMI_COMPONENT_CLASS=t.IA_SYMBOL_COMPONENT_WRAPPER=t.IA_SYMBOL_COMPONENT_ROW=t.IA_SYMBOL_COMPONENT_COLUMN=void 0;const n=a(405),o=a(445);t.IA_SYMBOL_COMPONENT_COLUMN="ia_symbolComponent ia_symbolComponent__column",t.IA_SYMBOL_COMPONENT_ROW="ia_symbolComponent__row",t.IA_SYMBOL_COMPONENT_WRAPPER="ia_symbolComponent__wrapper",t.HMI_COMPONENT_CLASS="hmi-component",t.VALVE_COMPONENT_TYPE="hmi.process_objects.Valve",t.PUMP_COMPONENT_TYPE="hmi.process_objects.Pump",t.STATUS_COMPONENT_TYPE="hmi.display.StatusValveMp",t.PARAMETER_LIST_COMPONENT_TYPE="hmi.input.ParameterList",t.COMMAND_VALVE_MP_COMPONENT_TYPE="hmi.input.CommandValveMp",t.HX_COMPONENT_TYPE="hmi.process_objects.HeatExchanger",t.hxElements=[{baseClass:(0,o.getHxModeClassNames)("plate",n.HxModes.heating)},{statusKey:{actFB:{trueString:"activated"}}},{statusKey:{deActFB:{trueString:"deactivated"}}},{statusKey:{alarm:{trueString:"alarm"}}}]},973:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ValveMeta=t.Valve=t.COMPONENT_TYPE=void 0;const n=a(883),o=a(377),r=a(740),l=a(390);t.COMPONENT_TYPE="hmi.process_objects.Valve_mp";class s extends o.Component{constructor(e){super(e),this.processObject=this.props.props.processObject||l.processObjectProps,this.status=this.processObject.status,this.showLabel=this.props.props.showLabel||!1,this.labelPosition=this.props.props.labelPosition||"left",this.onActionPerformed=()=>{this.props.eventsEnabled?(console.log("Valve clicked!"),this.props.componentEvents.fireComponentEvent("onActionPerformed",{})):console.log("Valve is disabled in the design-scope")},this.valveRef=n.createRef()}componentDidMount(){}render(){return n.createElement(r.ValveMpCompound.Root,{componentProps:this.props,valveProps:this.props.props,onActionPerformed:this.onActionPerformed},n.createElement(r.ValveMpCompound.valve,null),n.createElement(r.ValveMpCompound.popover,{anchorEl:this.valveRef.current}))}}t.Valve=s,t.ValveMeta=class{getComponentType(){return t.COMPONENT_TYPE}getViewComponent(){return s}getDefaultSize(){return{width:20,height:40}}getPropsReducer(e){return console.log(`itemName: ${e.readString("processObject.status.itemName")} showLabel ${e.readBoolean("showLabel")}`),{processObject:{status:{alarm:e.readBoolean("processObject.status.alarm",!1),actFB:e.readBoolean("processObject.status.actFB",!1),deActFB:e.readBoolean("processObject.status.deActFB",!1),activatedConfig:e.readNumber("processObject.status.activatedConfig",511),deactivatedConfig:e.readNumber("processObject.status.deactivatedConfig",4095),itemName:e.readString("processObject.status.itemName",""),manual:e.readBoolean("processObject.status.manual",!1),masked:e.readBoolean("processObject.status.masked",!1),changing:e.readBoolean("processObject.status.changing",!1),locate:e.readBoolean("processObject.status.locate",!1),usl:e.readBoolean("processObject.status.usl",!1),lsl:e.readBoolean("processObject.status.lsl",!1)}},showLabel:e.readBoolean("showLabel",!1),labelPosition:e.readString("labelPosition","top-left")}}}},988:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=t.stringToBytes=void 0;const n=a(797),o=a(11);function r(e){e=unescape(encodeURIComponent(e));const t=new Uint8Array(e.length);for(let a=0;a<e.length;++a)t[a]=e.charCodeAt(a);return t}t.stringToBytes=r,t.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",t.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",t.default=function(e,t,a,l,s,i){const u="string"==typeof a?r(a):a,c="string"==typeof l?(0,n.default)(l):l;if("string"==typeof l&&(l=(0,n.default)(l)),16!==l?.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");let p=new Uint8Array(16+u.length);if(p.set(c),p.set(u,c.length),p=t(p),p[6]=15&p[6]|e,p[8]=63&p[8]|128,s){i=i||0;for(let e=0;e<16;++e)s[i+e]=p[e];return s}return(0,o.unsafeStringify)(p)}}},n={};function o(e){var t=n[e];if(void 0!==t)return t.exports;var r=n[e]={exports:{}};return a[e].call(r.exports,r,r.exports,o),r.exports}o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};return(()=>{"use strict";var e=r;Object.defineProperty(e,"__esModule",{value:!0}),e.StatusValveMp=e.CommandValveMp=e.ParameterListComponent=e.HeatExchanger=e.Pump=e.Valve=void 0;const t=o(377),a=o(973);Object.defineProperty(e,"Valve",{enumerable:!0,get:function(){return a.Valve}});const n=o(869);Object.defineProperty(e,"Pump",{enumerable:!0,get:function(){return n.Pump}});const l=o(570);Object.defineProperty(e,"HeatExchanger",{enumerable:!0,get:function(){return l.HeatExchanger}});const s=o(838);Object.defineProperty(e,"ParameterListComponent",{enumerable:!0,get:function(){return s.ParameterListComponent}});const i=o(863);Object.defineProperty(e,"CommandValveMp",{enumerable:!0,get:function(){return i.CommandValveMp}});const u=o(872);Object.defineProperty(e,"StatusValveMp",{enumerable:!0,get:function(){return u.StatusValveMp}}),o(702),[new a.ValveMeta,new n.PumpMeta,new l.HeatExchangerMeta,new s.ParameterListComponentMeta,new i.CommandValveMpMeta,new u.StatusValveMpMeta].forEach((e=>t.ComponentRegistry.register(e)))})(),r})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUN4QyxJQUFJLEVBQUF1QixVQUNKLElBQUksRUFBQUMsU0FDSixJQUFJLEVBQUFDLGtCQUNKLElBQUksRUFBQUMsMkJBQ0osSUFBSSxFQUFBQyxtQkFDSixJQUFJLEVBQUFDLG1CQUtNMWEsU0FBU2dCLEdBQXFCLEVBQUEyWixrQkFBa0JDLFNBQVM1WixJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY2pzLWJyb3dzZXIvc3RyaW5naWZ5LmpzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9zcmMvY29tcG9uZW50cy9wcm9jZXNzLW9iamVjdHMvaGVhdC1leGNoYW5nZXJzL0hlYXRFeGNoYW5nZXJDb21wb3VuZC50c3giLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9pbW1lci9kaXN0L2Nqcy9pbW1lci5janMucHJvZHVjdGlvbi5qcyIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vc3JjL2NvbXBvbmVudHMvcHJvY2Vzcy1vYmplY3RzL3ZhbHZlL2l0ZW0udHN4Iiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2Nqcy1icm93c2VyL2luZGV4LmpzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2Nqcy1icm93c2VyL21heC5qcyIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9janMtYnJvd3Nlci92NlRvVjEuanMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY2pzLWJyb3dzZXIvdjQuanMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY2pzLWJyb3dzZXIvcm5nLmpzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2Nqcy1icm93c2VyL3Y3LmpzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2Nqcy1icm93c2VyL21kNS5qcyIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL3VzZS1pbW1lci9kaXN0L3VzZS1pbW1lci5qcyIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9janMtYnJvd3Nlci92Ni5qcyIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzL2V4dGVybmFsIHVtZCBcIlBlcnNwZWN0aXZlQ2xpZW50XCIiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL3NyYy9hcGkvaW5pdGlhbFN0YXRlLnRzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9zcmMvYXItdHlwZXMvcHJvY2Vzc09iamVjdHMvaGVhdEV4Y2hhbmdlcnMvaHgtdHlwZXMudHMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9pbW1lci9kaXN0L2Nqcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9janMtYnJvd3Nlci92MS5qcyIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vc3JjL3V0aWxzL251bWJlclV0aWwudHMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL3NyYy9jb21wb25lbnRzL3Byb2Nlc3Mtb2JqZWN0cy9wdW1wcy9QdW1wQ29tcG91bmQudHN4Iiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9zcmMvYXItdXRpbHMvcHJvY2Vzc09iamVjdHMvaGVhdEV4Y2hhbmdlcnMvaHgtdXRpbHMudHMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY2pzLWJyb3dzZXIvbmlsLmpzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9zcmMvYXBpL3V0aWxzLnRzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9zcmMvYXBpL2hvb2tzLnRzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9zcmMvdXRpbHMvY3JlYXRlQ29udGV4dC50c3giLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL3NyYy9hcGkvdHlwZXMudHMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY2pzLWJyb3dzZXIvdjUuanMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY2pzLWJyb3dzZXIvdjFUb1Y2LmpzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9zcmMvY29tcG9uZW50cy9IZWF0RXhjaGFuZ2VyLnRzeCIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9janMtYnJvd3Nlci92My5qcyIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9janMtYnJvd3Nlci9yZWdleC5qcyIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vc3JjL2NvbXBvbmVudHMvcHJvY2Vzcy1vYmplY3RzL3ZhbHZlLW1wL1ZhbHZlTXAudHN4Iiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2Nqcy1icm93c2VyL3ZhbGlkYXRlLmpzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2Nqcy1icm93c2VyL3ZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY2pzLWJyb3dzZXIvbmF0aXZlLmpzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2Nqcy1icm93c2VyL3BhcnNlLmpzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2Nqcy1icm93c2VyL3NoYTEuanMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL3NyYy9jb21wb25lbnRzL1BhcmFtZXRlckxpc3QudHN4Iiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9zcmMvY29tcG9uZW50cy9Db21tYW5kVmFsdmVNcC50c3giLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL3NyYy9jb21wb25lbnRzL1B1bXAudHN4Iiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9zcmMvY29tcG9uZW50cy9TdGF0dXNWYWx2ZU1wLnRzeCIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzL2V4dGVybmFsIHVtZCBcIlJlYWN0XCIiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL3NyYy9jb25zdGFudHMudHMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL3NyYy9jb21wb25lbnRzL1ZhbHZlLnRzeCIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9janMtYnJvd3Nlci92MzUuanMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCJQZXJzcGVjdGl2ZUNsaWVudFwiKSwgcmVxdWlyZShcIlJlYWN0XCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwiSG1pQ29tcG9uZW50c1wiLCBbXCJQZXJzcGVjdGl2ZUNsaWVudFwiLCBcIlJlYWN0XCJdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIkhtaUNvbXBvbmVudHNcIl0gPSBmYWN0b3J5KHJlcXVpcmUoXCJQZXJzcGVjdGl2ZUNsaWVudFwiKSwgcmVxdWlyZShcIlJlYWN0XCIpKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJIbWlDb21wb25lbnRzXCJdID0gZmFjdG9yeShyb290W1wiUGVyc3BlY3RpdmVDbGllbnRcIl0sIHJvb3RbXCJSZWFjdFwiXSk7XG59KShzZWxmLCAoX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMzc3X18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzg4M19fKSA9PiB7XG5yZXR1cm4gIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVuc2FmZVN0cmluZ2lmeSA9IHZvaWQgMDtcbmNvbnN0IHZhbGlkYXRlX2pzXzEgPSByZXF1aXJlKFwiLi92YWxpZGF0ZS5qc1wiKTtcbmNvbnN0IGJ5dGVUb0hleCA9IFtdO1xuZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICAgIGJ5dGVUb0hleC5wdXNoKChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zbGljZSgxKSk7XG59XG5mdW5jdGlvbiB1bnNhZmVTdHJpbmdpZnkoYXJyLCBvZmZzZXQgPSAwKSB7XG4gICAgcmV0dXJuIChieXRlVG9IZXhbYXJyW29mZnNldCArIDBdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMV1dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAyXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDNdXSArXG4gICAgICAgICctJyArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNF1dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA1XV0gK1xuICAgICAgICAnLScgK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDZdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgN11dICtcbiAgICAgICAgJy0nICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA4XV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDldXSArXG4gICAgICAgICctJyArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTBdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTFdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTJdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTNdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTRdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTVdXSkudG9Mb3dlckNhc2UoKTtcbn1cbmV4cG9ydHMudW5zYWZlU3RyaW5naWZ5ID0gdW5zYWZlU3RyaW5naWZ5O1xuZnVuY3Rpb24gc3RyaW5naWZ5KGFyciwgb2Zmc2V0ID0gMCkge1xuICAgIGNvbnN0IHV1aWQgPSB1bnNhZmVTdHJpbmdpZnkoYXJyLCBvZmZzZXQpO1xuICAgIGlmICghKDAsIHZhbGlkYXRlX2pzXzEuZGVmYXVsdCkodXVpZCkpIHtcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmdpZmllZCBVVUlEIGlzIGludmFsaWQnKTtcbiAgICB9XG4gICAgcmV0dXJuIHV1aWQ7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBzdHJpbmdpZnk7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgdHlwZSBFbGVtZW50UmVmIH0gZnJvbSBcIi4uLy4uLy4uL2FwaS90eXBlc1wiO1xuaW1wb3J0IHsgdXNlQ3JlYXRlQ29udGV4dCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9jcmVhdGVDb250ZXh0XCI7XG5pbXBvcnQgSXRlbSBmcm9tIFwiLi4vdmFsdmUvaXRlbVwiO1xuaW1wb3J0IHtcblx0Z2V0Q2xhc3NOYW1lV2l0aFN0YXR1cyxcblx0Z2V0SXRlbUlkUG9zaXRpb25DbGFzc05hbWUsXG59IGZyb20gXCIuLi8uLi8uLi9hcGkvdXRpbHNcIjtcbmltcG9ydCB7XG5cdGJ1aWxkQ29tcG9uZW50RWxlbWVudHMsXG5cdC8vIGdldEh4SXRlbUNsYXNzTmFtZSxcblx0Ly8gZ2V0SHhNb2RlQ2xhc3NOYW1lcyxcblx0Ly8gIGh4SXRlbU5hbWVzXG59IGZyb20gXCIuLi8uLi8uLi9hci11dGlscy9wcm9jZXNzT2JqZWN0cy9oZWF0RXhjaGFuZ2Vycy9oeC11dGlsc1wiO1xuaW1wb3J0IHtcblx0dHlwZSBIZWF0RXhjaGFuZ2VyVHlwZXMsXG5cdC8vIEh4TW9kZXMsXG5cdHR5cGUgSHhDb21wb3VuZENvbnRleHRUeXBlLFxuXHR0eXBlIEh4TW9kZXMsXG59IGZyb20gXCIuLi8uLi8uLi9hci10eXBlcy9wcm9jZXNzT2JqZWN0cy9oZWF0RXhjaGFuZ2Vycy9oeC10eXBlc1wiO1xuaW1wb3J0IHtcblx0SE1JX0NPTVBPTkVOVF9DTEFTUyxcblx0SFhfQ09NUE9ORU5UX1RZUEUsXG5cdGh4RWxlbWVudHMsXG5cdElBX1NZTUJPTF9DT01QT05FTlRfQ09MVU1OLFxuXHRJQV9TWU1CT0xfQ09NUE9ORU5UX1JPVyxcblx0SUFfU1lNQk9MX0NPTVBPTkVOVF9XUkFQUEVSLFxufSBmcm9tIFwiLi4vLi4vLi4vY29uc3RhbnRzXCI7XG5cbmNvbnN0IGdldFBsYXRlQ29sb3IgPSAobW9kZTogSHhNb2Rlc1trZXlvZiBIeE1vZGVzXSkgPT4ge1xuXHRjb25zb2xlLmxvZyhgbW9kZTogJHttb2RlfWApO1xuXG5cdHN3aXRjaCAobW9kZSkge1xuXHRcdGNhc2UgXCJhbGFybVwiOlxuXHRcdFx0cmV0dXJuIFwidmFyKC0tX2Vycm9yKVwiO1xuXHRcdGNhc2UgXCJoZWF0aW5nXCI6XG5cdFx0XHRyZXR1cm4gXCJ2YXIoLS1faGVhdGluZylcIjtcblx0XHRjYXNlIFwiY29vbGluZ1wiOlxuXHRcdFx0cmV0dXJuIFwidmFyKC0tX2Nvb2xpbmcpXCI7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiBcImxpbWVcIjtcblx0fVxufTtcbmNvbnN0IGdldEJhc2VJdGVtQ291bnQgPSAodHlwZTogSGVhdEV4Y2hhbmdlclR5cGVzW2tleW9mIEhlYXRFeGNoYW5nZXJUeXBlc10pID0+IHtcblx0XHRzd2l0Y2ggKHR5cGUpIHtcblx0XHRjYXNlIFwicGxhdGVcIjpcblx0XHRcdHJldHVybiAxODtcblx0XHRjYXNlIFwidHVidWxhclwiOlxuXHRcdFx0cmV0dXJuIDE1O1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gMDtcblx0fVxufVxuZXhwb3J0IGNvbnN0IENPTVBPTkVOVF9UWVBFID0gSFhfQ09NUE9ORU5UX1RZUEU7XG5cbmV4cG9ydCBjb25zdCBbSHhDb250ZXh0UHJvdmlkZXIsIHVzZUh4Q29udGV4dF0gPVxuXHR1c2VDcmVhdGVDb250ZXh0PEh4Q29tcG91bmRDb250ZXh0VHlwZT4oXCJIeENvbXBvdW5kXCIpO1xuXG5jb25zdCBSb290ID0gKHtcblx0Y29tcG9uZW50UHJvcHMsXG5cdGl0ZW1Qcm9wcyxcblx0b25BY3Rpb25QZXJmb3JtZWQsXG5cdGNoaWxkcmVuLFxufTogSHhDb21wb3VuZENvbnRleHRUeXBlKSA9PiB7XG5cdHJldHVybiAoXG5cdFx0PEh4Q29udGV4dFByb3ZpZGVyXG5cdFx0XHR7Li4ue1xuXHRcdFx0XHRpdGVtUHJvcHMsXG5cdFx0XHRcdGNvbXBvbmVudFByb3BzLFxuXHRcdFx0XHRvbkFjdGlvblBlcmZvcm1lZCxcblx0XHRcdH19XG5cdFx0PlxuXHRcdFx0e2NoaWxkcmVufVxuXHRcdDwvSHhDb250ZXh0UHJvdmlkZXI+XG5cdCk7XG59O1xuY29uc3QgcGxhdGUgPSAoKSA9PiB7XG5cdGNvbnN0IHsgaXRlbVByb3BzLCBvbkFjdGlvblBlcmZvcm1lZCwgY29tcG9uZW50UHJvcHMgfSA9XG5cdFx0dXNlSHhDb250ZXh0KFwiUGxhdGVcIik7XG5cdGNvbnN0IGVsUmVmOiBFbGVtZW50UmVmID0gUmVhY3QudXNlUmVmPEhUTUxEaXZFbGVtZW50PihudWxsKTtcblx0Y29uc3QgeyBlbWl0IH0gPSBjb21wb25lbnRQcm9wcztcblx0Y29uc3Qge1xuXHRcdHR5cGUsXG5cdFx0bG9jYXRlLFxuXHRcdG1vZGVcblx0fSA9IGl0ZW1Qcm9wcztcblxuXHQvLyBDb21wb25lbnQgQ29uc3RhbnRzXG5cdGNvbnN0IEJBU0VfSVRFTV9DT1VOVCA9IGdldEJhc2VJdGVtQ291bnQodHlwZSA/PyAwKTtcblx0Y29uc3QgQkFTRV9JVEVNX0NPTkZJRyA9IDUyNDI4Nztcblx0Y29uc3QgRFlOQU1JQ19JVEVNX0NPVU5UID0gMDsgLy8gRW5hYmxlIGRpc3BsYXkgb2YgYmFzZSBJdGVtc1xuXHRjb25zdCBEWU5BTUlDX0lURU1fQ09ORklHID0gMDtcblxuXHRsZXQgY29tcG9uZW50SXRlbU5hbWVzID0gYnVpbGRDb21wb25lbnRFbGVtZW50cyhcblx0XHRCQVNFX0lURU1fQ09VTlQsXG5cdFx0RFlOQU1JQ19JVEVNX0NPVU5UXG5cdCk7XG5cblx0aWYgKCFsb2NhdGUpIHtcblx0XHRjb25zb2xlLmxvZyhgbG9jYXRlIGlzOiAke2xvY2F0ZX1gKTtcblxuXHRcdGNvbXBvbmVudEl0ZW1OYW1lcyA9IGNvbXBvbmVudEl0ZW1OYW1lcy5zbGljZSgwLCAtMSk7XG5cdH1cblx0Y29uc29sZS5sb2coXG5cdFx0YGNvbXBvbmVudEl0ZW1OYW1lczogJHtKU09OLnN0cmluZ2lmeShjb21wb25lbnRJdGVtTmFtZXMsIG51bGwsIDIpfWBcblx0KTtcblx0Y29uc3QgY29tcG9uZW50Q2xhc3NOYW1lID0gYGhlYXQtZXhjaGFuZ2VyICR7dHlwZSA/PyBcIlwifWA7XG5cdHJldHVybiAoXG5cdFx0PGRpdlxuXHRcdFx0cmVmPXtlbFJlZn1cblx0XHRcdHsuLi5lbWl0KHtcblx0XHRcdFx0Y2xhc3NlczogW2Ake0lBX1NZTUJPTF9DT01QT05FTlRfQ09MVU1OfWBdLFxuXHRcdFx0fSl9XG5cdFx0XHRkYXRhLWNvbXBvbmVudD17Q09NUE9ORU5UX1RZUEV9XG5cdFx0XHRvbkNsaWNrPXtvbkFjdGlvblBlcmZvcm1lZH1cblx0XHQ+XG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT17YCR7SUFfU1lNQk9MX0NPTVBPTkVOVF9ST1d9YH0+XG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPXtgJHtJQV9TWU1CT0xfQ09NUE9ORU5UX1dSQVBQRVJ9YH0+XG5cdFx0XHRcdFx0PGRpdlxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lPXtgJHtITUlfQ09NUE9ORU5UX0NMQVNTfSAke2NvbXBvbmVudENsYXNzTmFtZX1gfVxuXHRcdFx0XHRcdFx0c3R5bGU9e3sgXCItLWhtaS1wbGF0ZS1jb2xvclwiOiBnZXRQbGF0ZUNvbG9yKG1vZGUgPz8gXCJcIikgfSBhcyBSZWFjdC5DU1NQcm9wZXJ0aWVzfVxuXHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdHsvKiA8SXRlbSBpdGVtQ2xhc3NOYW1lPXtgJHtnZXRIeE1vZGVDbGFzc05hbWVzKFwiYmFzZS0xIHNob3dcIiwgSHhNb2Rlcy5oZWF0aW5nICl9YH0vPiAqL31cblxuXHRcdFx0XHRcdFx0e2NvbXBvbmVudEl0ZW1OYW1lcy5tYXAoKHsgbmFtZSwgaW5kZXgsIGtleSB9KSA9PiAoXG5cdFx0XHRcdFx0XHRcdDxJdGVtXG5cdFx0XHRcdFx0XHRcdFx0aXRlbUNsYXNzTmFtZT17XG5cdFx0XHRcdFx0XHRcdFx0XHRuYW1lICtcblx0XHRcdFx0XHRcdFx0XHRcdFwiIFwiICtcblx0XHRcdFx0XHRcdFx0XHRcdGdldENsYXNzTmFtZVdpdGhTdGF0dXMoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGluZGV4LCAvL2luZGV4XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHVuZGVmaW5lZCwgLy8gc3RhdHVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGh4RWxlbWVudHMsIC8vZWxlbWVudFZhcmlhbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFwiXCIsIC8vYmFzZUNsYXNzTmFtZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRCQVNFX0lURU1fQ09VTlQsIC8vIGJhc2VFbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRCQVNFX0lURU1fQ09ORklHLCAvL2Jhc2VDb25maWdcblx0XHRcdFx0XHRcdFx0XHRcdFx0RFlOQU1JQ19JVEVNX0NPVU5ULCAvL2R5bmFtaWNJdGVtc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHREWU5BTUlDX0lURU1fQ09ORklHIC8vZHluYW1pY0NvbmZpZ1xuXHRcdFx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRrZXk9e2tleX1cblx0XHRcdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHRcdCkpfVxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXHQpO1xufTtcblxuY29uc3QgcG9wb3ZlciA9ICh7IGFuY2hvckVsIH06IHsgYW5jaG9yRWw6IEhUTUxEaXZFbGVtZW50IHwgbnVsbCB9KSA9PiB7XG5cdGNvbnN0IHsgaXRlbVByb3BzLCBjb21wb25lbnRQcm9wcyB9ID0gdXNlSHhDb250ZXh0KFwiUG9wb3ZlclwiKTtcblx0Y29uc3QgeyBzaG93TGFiZWwsIGxhYmVsUG9zaXRpb24sIGl0ZW1OYW1lIH0gPSBpdGVtUHJvcHM7XG5cblx0aWYgKCFzaG93TGFiZWwpIHJldHVybiBudWxsO1xuXHRjb25zdCB7IHBvc2l0aW9uIH0gPSBjb21wb25lbnRQcm9wcztcblx0bGV0IGNsYXNzTmFtZSA9IFwiaXRlbUlkIHBvcG92ZXIgcG9zaXRpb24tbGVmdFwiO1xuXHRpZiAobGFiZWxQb3NpdGlvbikge1xuXHRcdGNsYXNzTmFtZSA9IGdldEl0ZW1JZFBvc2l0aW9uQ2xhc3NOYW1lKGNsYXNzTmFtZSwgbGFiZWxQb3NpdGlvbik7XG5cdH1cblx0cmV0dXJuIChcblx0XHQ8ZGl2XG5cdFx0XHRjbGFzc05hbWU9e2NsYXNzTmFtZX1cblx0XHRcdHN0eWxlPXt7XG5cdFx0XHRcdHRvcDogcG9zaXRpb24ueSxcblx0XHRcdFx0bGVmdDogcG9zaXRpb24ueCxcblx0XHRcdH19XG5cdFx0PlxuXHRcdFx0PGRpdiBzdHlsZT17eyBwYWRkaW5nOiA4IH19PntpdGVtTmFtZX08L2Rpdj5cblx0XHQ8L2Rpdj5cblx0KTtcbn07XG5cbmV4cG9ydCBjb25zdCBIZWF0RXhjaGFuZ2VyQ29tcG91bmQgPSB7XG5cdFJvb3QsXG5cdHBsYXRlLFxuXHRwb3BvdmVyLFxufTtcbiIsIlwidXNlIHN0cmljdFwiO3ZhciBuZT1PYmplY3QuZGVmaW5lUHJvcGVydHk7dmFyIGdlPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7dmFyIGJlPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO3ZhciBUZT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O3ZhciBBZT0oZSx0KT0+e2Zvcih2YXIgciBpbiB0KW5lKGUscix7Z2V0OnRbcl0sZW51bWVyYWJsZTohMH0pfSxJZT0oZSx0LHIsbik9PntpZih0JiZ0eXBlb2YgdD09XCJvYmplY3RcInx8dHlwZW9mIHQ9PVwiZnVuY3Rpb25cIilmb3IobGV0IGkgb2YgYmUodCkpIVRlLmNhbGwoZSxpKSYmaSE9PXImJm5lKGUsaSx7Z2V0OigpPT50W2ldLGVudW1lcmFibGU6IShuPWdlKHQsaSkpfHxuLmVudW1lcmFibGV9KTtyZXR1cm4gZX07dmFyIERlPWU9PkllKG5lKHt9LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUpO3ZhciBCZT17fTtBZShCZSx7SW1tZXI6KCk9PkosYXBwbHlQYXRjaGVzOigpPT5DZSxjYXN0RHJhZnQ6KCk9PmtlLGNhc3RJbW11dGFibGU6KCk9PktlLGNyZWF0ZURyYWZ0OigpPT5SZSxjdXJyZW50OigpPT5yZSxlbmFibGVNYXBTZXQ6KCk9PnhlLGVuYWJsZVBhdGNoZXM6KCk9PlBlLGZpbmlzaERyYWZ0OigpPT52ZSxmcmVlemU6KCk9PkssaW1tZXJhYmxlOigpPT5OLGlzRHJhZnQ6KCk9Pk8saXNEcmFmdGFibGU6KCk9PkEsbm90aGluZzooKT0+aixvcmlnaW5hbDooKT0+bGUscHJvZHVjZTooKT0+RmUscHJvZHVjZVdpdGhQYXRjaGVzOigpPT5OZSxzZXRBdXRvRnJlZXplOigpPT56ZSxzZXRVc2VTdHJpY3RTaGFsbG93Q29weTooKT0+amV9KTttb2R1bGUuZXhwb3J0cz1EZShCZSk7dmFyIGo9U3ltYm9sLmZvcihcImltbWVyLW5vdGhpbmdcIiksTj1TeW1ib2wuZm9yKFwiaW1tZXItZHJhZnRhYmxlXCIpLHU9U3ltYm9sLmZvcihcImltbWVyLXN0YXRlXCIpO2Z1bmN0aW9uIGgoZSwuLi50KXt0aHJvdyBuZXcgRXJyb3IoYFtJbW1lcl0gbWluaWZpZWQgZXJyb3IgbnI6ICR7ZX0uIEZ1bGwgZXJyb3IgYXQ6IGh0dHBzOi8vYml0Lmx5LzNjWEVLV2ZgKX12YXIgej1PYmplY3QuZ2V0UHJvdG90eXBlT2Y7ZnVuY3Rpb24gTyhlKXtyZXR1cm4hIWUmJiEhZVt1XX1mdW5jdGlvbiBBKGUpe3JldHVybiBlP3llKGUpfHxBcnJheS5pc0FycmF5KGUpfHwhIWVbTl18fCEhZS5jb25zdHJ1Y3Rvcj8uW05dfHx2KGUpfHxrKGUpOiExfXZhciBPZT1PYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLnRvU3RyaW5nKCk7ZnVuY3Rpb24geWUoZSl7aWYoIWV8fHR5cGVvZiBlIT1cIm9iamVjdFwiKXJldHVybiExO2xldCB0PXooZSk7aWYodD09PW51bGwpcmV0dXJuITA7bGV0IHI9T2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwodCxcImNvbnN0cnVjdG9yXCIpJiZ0LmNvbnN0cnVjdG9yO3JldHVybiByPT09T2JqZWN0PyEwOnR5cGVvZiByPT1cImZ1bmN0aW9uXCImJkZ1bmN0aW9uLnRvU3RyaW5nLmNhbGwocik9PT1PZX1mdW5jdGlvbiBsZShlKXtyZXR1cm4gTyhlKXx8aCgxNSxlKSxlW3VdLnR9ZnVuY3Rpb24gXyhlLHQpe0MoZSk9PT0wP1JlZmxlY3Qub3duS2V5cyhlKS5mb3JFYWNoKHI9Pnt0KHIsZVtyXSxlKX0pOmUuZm9yRWFjaCgocixuKT0+dChuLHIsZSkpfWZ1bmN0aW9uIEMoZSl7bGV0IHQ9ZVt1XTtyZXR1cm4gdD90Lm86QXJyYXkuaXNBcnJheShlKT8xOnYoZSk/MjprKGUpPzM6MH1mdW5jdGlvbiBSKGUsdCl7cmV0dXJuIEMoZSk9PT0yP2UuaGFzKHQpOk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfWZ1bmN0aW9uIFgoZSx0KXtyZXR1cm4gQyhlKT09PTI/ZS5nZXQodCk6ZVt0XX1mdW5jdGlvbiBRKGUsdCxyKXtsZXQgbj1DKGUpO249PT0yP2Uuc2V0KHQscik6bj09PTM/ZS5hZGQocik6ZVt0XT1yfWZ1bmN0aW9uIHBlKGUsdCl7cmV0dXJuIGU9PT10P2UhPT0wfHwxL2U9PT0xL3Q6ZSE9PWUmJnQhPT10fWZ1bmN0aW9uIHYoZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBNYXB9ZnVuY3Rpb24gayhlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIFNldH1mdW5jdGlvbiBUKGUpe3JldHVybiBlLmV8fGUudH1mdW5jdGlvbiBMKGUsdCl7aWYodihlKSlyZXR1cm4gbmV3IE1hcChlKTtpZihrKGUpKXJldHVybiBuZXcgU2V0KGUpO2lmKEFycmF5LmlzQXJyYXkoZSkpcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGUpO2xldCByPXllKGUpO2lmKHQ9PT0hMHx8dD09PVwiY2xhc3Nfb25seVwiJiYhcil7bGV0IG49T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoZSk7ZGVsZXRlIG5bdV07bGV0IGk9UmVmbGVjdC5vd25LZXlzKG4pO2ZvcihsZXQgZj0wO2Y8aS5sZW5ndGg7ZisrKXtsZXQgbD1pW2ZdLGM9bltsXTtjLndyaXRhYmxlPT09ITEmJihjLndyaXRhYmxlPSEwLGMuY29uZmlndXJhYmxlPSEwKSwoYy5nZXR8fGMuc2V0KSYmKG5bbF09e2NvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCxlbnVtZXJhYmxlOmMuZW51bWVyYWJsZSx2YWx1ZTplW2xdfSl9cmV0dXJuIE9iamVjdC5jcmVhdGUoeihlKSxuKX1lbHNle2xldCBuPXooZSk7aWYobiE9PW51bGwmJnIpcmV0dXJuey4uLmV9O2xldCBpPU9iamVjdC5jcmVhdGUobik7cmV0dXJuIE9iamVjdC5hc3NpZ24oaSxlKX19ZnVuY3Rpb24gSyhlLHQ9ITEpe3JldHVybiAkKGUpfHxPKGUpfHwhQShlKXx8KEMoZSk+MSYmKGUuc2V0PWUuYWRkPWUuY2xlYXI9ZS5kZWxldGU9TWUpLE9iamVjdC5mcmVlemUoZSksdCYmT2JqZWN0LmVudHJpZXMoZSkuZm9yRWFjaCgoW3Isbl0pPT5LKG4sITApKSksZX1mdW5jdGlvbiBNZSgpe2goMil9ZnVuY3Rpb24gJChlKXtyZXR1cm4gT2JqZWN0LmlzRnJvemVuKGUpfXZhciBhZT17fTtmdW5jdGlvbiB3KGUpe2xldCB0PWFlW2VdO3JldHVybiB0fHxoKDAsZSksdH1mdW5jdGlvbiBZKGUsdCl7YWVbZV18fChhZVtlXT10KX12YXIgVTtmdW5jdGlvbiBCKCl7cmV0dXJuIFV9ZnVuY3Rpb24gX2UoZSx0KXtyZXR1cm57YTpbXSxpOmUscDp0LFA6ITAsZDowfX1mdW5jdGlvbiBvZShlLHQpe3QmJih3KFwiUGF0Y2hlc1wiKSxlLmY9W10sZS5oPVtdLGUuYj10KX1mdW5jdGlvbiBWKGUpe1ooZSksZS5hLmZvckVhY2god2UpLGUuYT1udWxsfWZ1bmN0aW9uIFooZSl7ZT09PVUmJihVPWUuaSl9ZnVuY3Rpb24gaWUoZSl7cmV0dXJuIFU9X2UoVSxlKX1mdW5jdGlvbiB3ZShlKXtsZXQgdD1lW3VdO3Qubz09PTB8fHQubz09PTE/dC54KCk6dC5tPSEwfWZ1bmN0aW9uIHNlKGUsdCl7dC5kPXQuYS5sZW5ndGg7bGV0IHI9dC5hWzBdO3JldHVybiBlIT09dm9pZCAwJiZlIT09cj8oclt1XS5zJiYoVih0KSxoKDQpKSxBKGUpJiYoZT1lZSh0LGUpLHQuaXx8dGUodCxlKSksdC5mJiZ3KFwiUGF0Y2hlc1wiKS5UKHJbdV0udCxlLHQuZix0LmgpKTplPWVlKHQscixbXSksVih0KSx0LmYmJnQuYih0LmYsdC5oKSxlIT09aj9lOnZvaWQgMH1mdW5jdGlvbiBlZShlLHQscil7aWYoJCh0KSlyZXR1cm4gdDtsZXQgbj10W3VdO2lmKCFuKXJldHVybiBfKHQsKGksZik9PmRlKGUsbix0LGksZixyKSksdDtpZihuLm4hPT1lKXJldHVybiB0O2lmKCFuLnMpcmV0dXJuIHRlKGUsbi50LCEwKSxuLnQ7aWYoIW4uYyl7bi5jPSEwLG4ubi5kLS07bGV0IGk9bi5lLGY9aSxsPSExO24ubz09PTMmJihmPW5ldyBTZXQoaSksaS5jbGVhcigpLGw9ITApLF8oZiwoYyxiKT0+ZGUoZSxuLGksYyxiLHIsbCkpLHRlKGUsaSwhMSksciYmZS5mJiZ3KFwiUGF0Y2hlc1wiKS5nKG4scixlLmYsZS5oKX1yZXR1cm4gbi5lfWZ1bmN0aW9uIGRlKGUsdCxyLG4saSxmLGwpe2lmKE8oaSkpe2xldCBjPWYmJnQmJnQubyE9PTMmJiFSKHQucixuKT9mLmNvbmNhdChuKTp2b2lkIDAsYj1lZShlLGksYyk7aWYoUShyLG4sYiksTyhiKSllLlA9ITE7ZWxzZSByZXR1cm59ZWxzZSBsJiZyLmFkZChpKTtpZihBKGkpJiYhJChpKSl7aWYoIWUucC55JiZlLmQ8MSlyZXR1cm47ZWUoZSxpKSwoIXR8fCF0Lm4uaSkmJnR5cGVvZiBuIT1cInN5bWJvbFwiJiZPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocixuKSYmdGUoZSxpKX19ZnVuY3Rpb24gdGUoZSx0LHI9ITEpeyFlLmkmJmUucC55JiZlLlAmJksodCxyKX1mdW5jdGlvbiBoZShlLHQpe2xldCByPUFycmF5LmlzQXJyYXkoZSksbj17bzpyPzE6MCxuOnQ/dC5uOkIoKSxzOiExLGM6ITEscjp7fSxpOnQsdDplLHU6bnVsbCxlOm51bGwseDpudWxsLGw6ITF9LGk9bixmPXVlO3ImJihpPVtuXSxmPXEpO2xldHtyZXZva2U6bCxwcm94eTpjfT1Qcm94eS5yZXZvY2FibGUoaSxmKTtyZXR1cm4gbi51PWMsbi54PWwsY312YXIgdWU9e2dldChlLHQpe2lmKHQ9PT11KXJldHVybiBlO2xldCByPVQoZSk7aWYoIVIocix0KSlyZXR1cm4gRWUoZSxyLHQpO2xldCBuPXJbdF07cmV0dXJuIGUuY3x8IUEobik/bjpuPT09Y2UoZS50LHQpPyhmZShlKSxlLmVbdF09VyhuLGUpKTpufSxoYXMoZSx0KXtyZXR1cm4gdCBpbiBUKGUpfSxvd25LZXlzKGUpe3JldHVybiBSZWZsZWN0Lm93bktleXMoVChlKSl9LHNldChlLHQscil7bGV0IG49bWUoVChlKSx0KTtpZihuPy5zZXQpcmV0dXJuIG4uc2V0LmNhbGwoZS51LHIpLCEwO2lmKCFlLnMpe2xldCBpPWNlKFQoZSksdCksZj1pPy5bdV07aWYoZiYmZi50PT09cilyZXR1cm4gZS5lW3RdPXIsZS5yW3RdPSExLCEwO2lmKHBlKHIsaSkmJihyIT09dm9pZCAwfHxSKGUudCx0KSkpcmV0dXJuITA7ZmUoZSksRShlKX1yZXR1cm4gZS5lW3RdPT09ciYmKHIhPT12b2lkIDB8fHQgaW4gZS5lKXx8TnVtYmVyLmlzTmFOKHIpJiZOdW1iZXIuaXNOYU4oZS5lW3RdKXx8KGUuZVt0XT1yLGUuclt0XT0hMCksITB9LGRlbGV0ZVByb3BlcnR5KGUsdCl7cmV0dXJuIGNlKGUudCx0KSE9PXZvaWQgMHx8dCBpbiBlLnQ/KGUuclt0XT0hMSxmZShlKSxFKGUpKTpkZWxldGUgZS5yW3RdLGUuZSYmZGVsZXRlIGUuZVt0XSwhMH0sZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsdCl7bGV0IHI9VChlKSxuPVJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHIsdCk7cmV0dXJuIG4mJnt3cml0YWJsZTohMCxjb25maWd1cmFibGU6ZS5vIT09MXx8dCE9PVwibGVuZ3RoXCIsZW51bWVyYWJsZTpuLmVudW1lcmFibGUsdmFsdWU6clt0XX19LGRlZmluZVByb3BlcnR5KCl7aCgxMSl9LGdldFByb3RvdHlwZU9mKGUpe3JldHVybiB6KGUudCl9LHNldFByb3RvdHlwZU9mKCl7aCgxMil9fSxxPXt9O18odWUsKGUsdCk9PntxW2VdPWZ1bmN0aW9uKCl7cmV0dXJuIGFyZ3VtZW50c1swXT1hcmd1bWVudHNbMF1bMF0sdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSk7cS5kZWxldGVQcm9wZXJ0eT1mdW5jdGlvbihlLHQpe3JldHVybiBxLnNldC5jYWxsKHRoaXMsZSx0LHZvaWQgMCl9O3Euc2V0PWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdWUuc2V0LmNhbGwodGhpcyxlWzBdLHQscixlWzBdKX07ZnVuY3Rpb24gY2UoZSx0KXtsZXQgcj1lW3VdO3JldHVybihyP1Qocik6ZSlbdF19ZnVuY3Rpb24gRWUoZSx0LHIpe2xldCBuPW1lKHQscik7cmV0dXJuIG4/XCJ2YWx1ZVwiaW4gbj9uLnZhbHVlOm4uZ2V0Py5jYWxsKGUudSk6dm9pZCAwfWZ1bmN0aW9uIG1lKGUsdCl7aWYoISh0IGluIGUpKXJldHVybjtsZXQgcj16KGUpO2Zvcig7cjspe2xldCBuPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iocix0KTtpZihuKXJldHVybiBuO3I9eihyKX19ZnVuY3Rpb24gRShlKXtlLnN8fChlLnM9ITAsZS5pJiZFKGUuaSkpfWZ1bmN0aW9uIGZlKGUpe2UuZXx8KGUuZT1MKGUudCxlLm4ucC5TKSl9dmFyIEo9Y2xhc3N7Y29uc3RydWN0b3IodCl7dGhpcy55PSEwO3RoaXMuUz0hMTt0aGlzLnByb2R1Y2U9KHQscixuKT0+e2lmKHR5cGVvZiB0PT1cImZ1bmN0aW9uXCImJnR5cGVvZiByIT1cImZ1bmN0aW9uXCIpe2xldCBmPXI7cj10O2xldCBsPXRoaXM7cmV0dXJuIGZ1bmN0aW9uKGI9ZiwuLi5hKXtyZXR1cm4gbC5wcm9kdWNlKGIsbz0+ci5jYWxsKHRoaXMsbywuLi5hKSl9fXR5cGVvZiByIT1cImZ1bmN0aW9uXCImJmgoNiksbiE9PXZvaWQgMCYmdHlwZW9mIG4hPVwiZnVuY3Rpb25cIiYmaCg3KTtsZXQgaTtpZihBKHQpKXtsZXQgZj1pZSh0aGlzKSxsPVcodCx2b2lkIDApLGM9ITA7dHJ5e2k9cihsKSxjPSExfWZpbmFsbHl7Yz9WKGYpOlooZil9cmV0dXJuIG9lKGYsbiksc2UoaSxmKX1lbHNlIGlmKCF0fHx0eXBlb2YgdCE9XCJvYmplY3RcIil7aWYoaT1yKHQpLGk9PT12b2lkIDAmJihpPXQpLGk9PT1qJiYoaT12b2lkIDApLHRoaXMueSYmSyhpLCEwKSxuKXtsZXQgZj1bXSxsPVtdO3coXCJQYXRjaGVzXCIpLlQodCxpLGYsbCksbihmLGwpfXJldHVybiBpfWVsc2UgaCgxLHQpfTt0aGlzLnByb2R1Y2VXaXRoUGF0Y2hlcz0odCxyKT0+e2lmKHR5cGVvZiB0PT1cImZ1bmN0aW9uXCIpcmV0dXJuKGwsLi4uYyk9PnRoaXMucHJvZHVjZVdpdGhQYXRjaGVzKGwsYj0+dChiLC4uLmMpKTtsZXQgbixpO3JldHVyblt0aGlzLnByb2R1Y2UodCxyLChsLGMpPT57bj1sLGk9Y30pLG4saV19O3R5cGVvZiB0Py5hdXRvRnJlZXplPT1cImJvb2xlYW5cIiYmdGhpcy5zZXRBdXRvRnJlZXplKHQuYXV0b0ZyZWV6ZSksdHlwZW9mIHQ/LnVzZVN0cmljdFNoYWxsb3dDb3B5PT1cImJvb2xlYW5cIiYmdGhpcy5zZXRVc2VTdHJpY3RTaGFsbG93Q29weSh0LnVzZVN0cmljdFNoYWxsb3dDb3B5KX1jcmVhdGVEcmFmdCh0KXtBKHQpfHxoKDgpLE8odCkmJih0PXJlKHQpKTtsZXQgcj1pZSh0aGlzKSxuPVcodCx2b2lkIDApO3JldHVybiBuW3VdLmw9ITAsWihyKSxufWZpbmlzaERyYWZ0KHQscil7bGV0IG49dCYmdFt1XTsoIW58fCFuLmwpJiZoKDkpO2xldHtuOml9PW47cmV0dXJuIG9lKGksciksc2Uodm9pZCAwLGkpfXNldEF1dG9GcmVlemUodCl7dGhpcy55PXR9c2V0VXNlU3RyaWN0U2hhbGxvd0NvcHkodCl7dGhpcy5TPXR9YXBwbHlQYXRjaGVzKHQscil7bGV0IG47Zm9yKG49ci5sZW5ndGgtMTtuPj0wO24tLSl7bGV0IGY9cltuXTtpZihmLnBhdGgubGVuZ3RoPT09MCYmZi5vcD09PVwicmVwbGFjZVwiKXt0PWYudmFsdWU7YnJlYWt9fW4+LTEmJihyPXIuc2xpY2UobisxKSk7bGV0IGk9dyhcIlBhdGNoZXNcIikuQTtyZXR1cm4gTyh0KT9pKHQscik6dGhpcy5wcm9kdWNlKHQsZj0+aShmLHIpKX19O2Z1bmN0aW9uIFcoZSx0KXtsZXQgcj12KGUpP3coXCJNYXBTZXRcIikuSShlLHQpOmsoZSk/dyhcIk1hcFNldFwiKS5EKGUsdCk6aGUoZSx0KTtyZXR1cm4odD90Lm46QigpKS5hLnB1c2gocikscn1mdW5jdGlvbiByZShlKXtyZXR1cm4gTyhlKXx8aCgxMCxlKSxTZShlKX1mdW5jdGlvbiBTZShlKXtpZighQShlKXx8JChlKSlyZXR1cm4gZTtsZXQgdD1lW3VdLHI7aWYodCl7aWYoIXQucylyZXR1cm4gdC50O3QuYz0hMCxyPUwoZSx0Lm4ucC5TKX1lbHNlIHI9TChlLCEwKTtyZXR1cm4gXyhyLChuLGkpPT57UShyLG4sU2UoaSkpfSksdCYmKHQuYz0hMSkscn1mdW5jdGlvbiBQZSgpe2xldCB0PVwicmVwbGFjZVwiLHI9XCJhZGRcIixuPVwicmVtb3ZlXCI7ZnVuY3Rpb24gaShzLFMsbSx4KXtzd2l0Y2gocy5vKXtjYXNlIDA6Y2FzZSAyOnJldHVybiBsKHMsUyxtLHgpO2Nhc2UgMTpyZXR1cm4gZihzLFMsbSx4KTtjYXNlIDM6cmV0dXJuIGMocyxTLG0seCl9fWZ1bmN0aW9uIGYocyxTLG0seCl7bGV0e3Q6SSxyOlB9PXMsZz1zLmU7Zy5sZW5ndGg8SS5sZW5ndGgmJihbSSxnXT1bZyxJXSxbbSx4XT1beCxtXSk7Zm9yKGxldCB5PTA7eTxJLmxlbmd0aDt5KyspaWYoUFt5XSYmZ1t5XSE9PUlbeV0pe2xldCBkPVMuY29uY2F0KFt5XSk7bS5wdXNoKHtvcDp0LHBhdGg6ZCx2YWx1ZTpwKGdbeV0pfSkseC5wdXNoKHtvcDp0LHBhdGg6ZCx2YWx1ZTpwKElbeV0pfSl9Zm9yKGxldCB5PUkubGVuZ3RoO3k8Zy5sZW5ndGg7eSsrKXtsZXQgZD1TLmNvbmNhdChbeV0pO20ucHVzaCh7b3A6cixwYXRoOmQsdmFsdWU6cChnW3ldKX0pfWZvcihsZXQgeT1nLmxlbmd0aC0xO0kubGVuZ3RoPD15Oy0teSl7bGV0IGQ9Uy5jb25jYXQoW3ldKTt4LnB1c2goe29wOm4scGF0aDpkfSl9fWZ1bmN0aW9uIGwocyxTLG0seCl7bGV0e3Q6SSxlOlB9PXM7XyhzLnIsKGcseSk9PntsZXQgZD1YKEksZyksSD1YKFAsZyksRj15P1IoSSxnKT90OnI6bjtpZihkPT09SCYmRj09PXQpcmV0dXJuO2xldCBEPVMuY29uY2F0KGcpO20ucHVzaChGPT09bj97b3A6RixwYXRoOkR9OntvcDpGLHBhdGg6RCx2YWx1ZTpIfSkseC5wdXNoKEY9PT1yP3tvcDpuLHBhdGg6RH06Rj09PW4/e29wOnIscGF0aDpELHZhbHVlOnAoZCl9OntvcDp0LHBhdGg6RCx2YWx1ZTpwKGQpfSl9KX1mdW5jdGlvbiBjKHMsUyxtLHgpe2xldHt0OkksZTpQfT1zLGc9MDtJLmZvckVhY2goeT0+e2lmKCFQLmhhcyh5KSl7bGV0IGQ9Uy5jb25jYXQoW2ddKTttLnB1c2goe29wOm4scGF0aDpkLHZhbHVlOnl9KSx4LnVuc2hpZnQoe29wOnIscGF0aDpkLHZhbHVlOnl9KX1nKyt9KSxnPTAsUC5mb3JFYWNoKHk9PntpZighSS5oYXMoeSkpe2xldCBkPVMuY29uY2F0KFtnXSk7bS5wdXNoKHtvcDpyLHBhdGg6ZCx2YWx1ZTp5fSkseC51bnNoaWZ0KHtvcDpuLHBhdGg6ZCx2YWx1ZTp5fSl9ZysrfSl9ZnVuY3Rpb24gYihzLFMsbSx4KXttLnB1c2goe29wOnQscGF0aDpbXSx2YWx1ZTpTPT09aj92b2lkIDA6U30pLHgucHVzaCh7b3A6dCxwYXRoOltdLHZhbHVlOnN9KX1mdW5jdGlvbiBhKHMsUyl7cmV0dXJuIFMuZm9yRWFjaChtPT57bGV0e3BhdGg6eCxvcDpJfT1tLFA9cztmb3IobGV0IEg9MDtIPHgubGVuZ3RoLTE7SCsrKXtsZXQgRj1DKFApLEQ9eFtIXTt0eXBlb2YgRCE9XCJzdHJpbmdcIiYmdHlwZW9mIEQhPVwibnVtYmVyXCImJihEPVwiXCIrRCksKEY9PT0wfHxGPT09MSkmJihEPT09XCJfX3Byb3RvX19cInx8RD09PVwiY29uc3RydWN0b3JcIikmJmgoMTYrMyksdHlwZW9mIFA9PVwiZnVuY3Rpb25cIiYmRD09PVwicHJvdG90eXBlXCImJmgoMTYrMyksUD1YKFAsRCksdHlwZW9mIFAhPVwib2JqZWN0XCImJmgoMTYrMix4LmpvaW4oXCIvXCIpKX1sZXQgZz1DKFApLHk9byhtLnZhbHVlKSxkPXhbeC5sZW5ndGgtMV07c3dpdGNoKEkpe2Nhc2UgdDpzd2l0Y2goZyl7Y2FzZSAyOnJldHVybiBQLnNldChkLHkpO2Nhc2UgMzpoKDE2KTtkZWZhdWx0OnJldHVybiBQW2RdPXl9Y2FzZSByOnN3aXRjaChnKXtjYXNlIDE6cmV0dXJuIGQ9PT1cIi1cIj9QLnB1c2goeSk6UC5zcGxpY2UoZCwwLHkpO2Nhc2UgMjpyZXR1cm4gUC5zZXQoZCx5KTtjYXNlIDM6cmV0dXJuIFAuYWRkKHkpO2RlZmF1bHQ6cmV0dXJuIFBbZF09eX1jYXNlIG46c3dpdGNoKGcpe2Nhc2UgMTpyZXR1cm4gUC5zcGxpY2UoZCwxKTtjYXNlIDI6cmV0dXJuIFAuZGVsZXRlKGQpO2Nhc2UgMzpyZXR1cm4gUC5kZWxldGUobS52YWx1ZSk7ZGVmYXVsdDpyZXR1cm4gZGVsZXRlIFBbZF19ZGVmYXVsdDpoKDE2KzEsSSl9fSksc31mdW5jdGlvbiBvKHMpe2lmKCFBKHMpKXJldHVybiBzO2lmKEFycmF5LmlzQXJyYXkocykpcmV0dXJuIHMubWFwKG8pO2lmKHYocykpcmV0dXJuIG5ldyBNYXAoQXJyYXkuZnJvbShzLmVudHJpZXMoKSkubWFwKChbbSx4XSk9PlttLG8oeCldKSk7aWYoayhzKSlyZXR1cm4gbmV3IFNldChBcnJheS5mcm9tKHMpLm1hcChvKSk7bGV0IFM9T2JqZWN0LmNyZWF0ZSh6KHMpKTtmb3IobGV0IG0gaW4gcylTW21dPW8oc1ttXSk7cmV0dXJuIFIocyxOKSYmKFNbTl09c1tOXSksU31mdW5jdGlvbiBwKHMpe3JldHVybiBPKHMpP28ocyk6c31ZKFwiUGF0Y2hlc1wiLHtBOmEsZzppLFQ6Yn0pfWZ1bmN0aW9uIHhlKCl7Y2xhc3MgZSBleHRlbmRzIE1hcHtjb25zdHJ1Y3RvcihhLG8pe3N1cGVyKCk7dGhpc1t1XT17bzoyLGk6byxuOm8/by5uOkIoKSxzOiExLGM6ITEsZTp2b2lkIDAscjp2b2lkIDAsdDphLHU6dGhpcyxsOiExLG06ITF9fWdldCBzaXplKCl7cmV0dXJuIFQodGhpc1t1XSkuc2l6ZX1oYXMoYSl7cmV0dXJuIFQodGhpc1t1XSkuaGFzKGEpfXNldChhLG8pe2xldCBwPXRoaXNbdV07cmV0dXJuIGwocCksKCFUKHApLmhhcyhhKXx8VChwKS5nZXQoYSkhPT1vKSYmKHIocCksRShwKSxwLnIuc2V0KGEsITApLHAuZS5zZXQoYSxvKSxwLnIuc2V0KGEsITApKSx0aGlzfWRlbGV0ZShhKXtpZighdGhpcy5oYXMoYSkpcmV0dXJuITE7bGV0IG89dGhpc1t1XTtyZXR1cm4gbChvKSxyKG8pLEUobyksby50LmhhcyhhKT9vLnIuc2V0KGEsITEpOm8uci5kZWxldGUoYSksby5lLmRlbGV0ZShhKSwhMH1jbGVhcigpe2xldCBhPXRoaXNbdV07bChhKSxUKGEpLnNpemUmJihyKGEpLEUoYSksYS5yPW5ldyBNYXAsXyhhLnQsbz0+e2Euci5zZXQobywhMSl9KSxhLmUuY2xlYXIoKSl9Zm9yRWFjaChhLG8pe2xldCBwPXRoaXNbdV07VChwKS5mb3JFYWNoKChzLFMsbSk9PnthLmNhbGwobyx0aGlzLmdldChTKSxTLHRoaXMpfSl9Z2V0KGEpe2xldCBvPXRoaXNbdV07bChvKTtsZXQgcD1UKG8pLmdldChhKTtpZihvLmN8fCFBKHApfHxwIT09by50LmdldChhKSlyZXR1cm4gcDtsZXQgcz1XKHAsbyk7cmV0dXJuIHIobyksby5lLnNldChhLHMpLHN9a2V5cygpe3JldHVybiBUKHRoaXNbdV0pLmtleXMoKX12YWx1ZXMoKXtsZXQgYT10aGlzLmtleXMoKTtyZXR1cm57W1N5bWJvbC5pdGVyYXRvcl06KCk9PnRoaXMudmFsdWVzKCksbmV4dDooKT0+e2xldCBvPWEubmV4dCgpO3JldHVybiBvLmRvbmU/bzp7ZG9uZTohMSx2YWx1ZTp0aGlzLmdldChvLnZhbHVlKX19fX1lbnRyaWVzKCl7bGV0IGE9dGhpcy5rZXlzKCk7cmV0dXJue1tTeW1ib2wuaXRlcmF0b3JdOigpPT50aGlzLmVudHJpZXMoKSxuZXh0OigpPT57bGV0IG89YS5uZXh0KCk7aWYoby5kb25lKXJldHVybiBvO2xldCBwPXRoaXMuZ2V0KG8udmFsdWUpO3JldHVybntkb25lOiExLHZhbHVlOltvLnZhbHVlLHBdfX19fVsodSxTeW1ib2wuaXRlcmF0b3IpXSgpe3JldHVybiB0aGlzLmVudHJpZXMoKX19ZnVuY3Rpb24gdChjLGIpe3JldHVybiBuZXcgZShjLGIpfWZ1bmN0aW9uIHIoYyl7Yy5lfHwoYy5yPW5ldyBNYXAsYy5lPW5ldyBNYXAoYy50KSl9Y2xhc3MgbiBleHRlbmRzIFNldHtjb25zdHJ1Y3RvcihhLG8pe3N1cGVyKCk7dGhpc1t1XT17bzozLGk6byxuOm8/by5uOkIoKSxzOiExLGM6ITEsZTp2b2lkIDAsdDphLHU6dGhpcyxhOm5ldyBNYXAsbTohMSxsOiExfX1nZXQgc2l6ZSgpe3JldHVybiBUKHRoaXNbdV0pLnNpemV9aGFzKGEpe2xldCBvPXRoaXNbdV07cmV0dXJuIGwobyksby5lPyEhKG8uZS5oYXMoYSl8fG8uYS5oYXMoYSkmJm8uZS5oYXMoby5hLmdldChhKSkpOm8udC5oYXMoYSl9YWRkKGEpe2xldCBvPXRoaXNbdV07cmV0dXJuIGwobyksdGhpcy5oYXMoYSl8fChmKG8pLEUobyksby5lLmFkZChhKSksdGhpc31kZWxldGUoYSl7aWYoIXRoaXMuaGFzKGEpKXJldHVybiExO2xldCBvPXRoaXNbdV07cmV0dXJuIGwobyksZihvKSxFKG8pLG8uZS5kZWxldGUoYSl8fChvLmEuaGFzKGEpP28uZS5kZWxldGUoby5hLmdldChhKSk6ITEpfWNsZWFyKCl7bGV0IGE9dGhpc1t1XTtsKGEpLFQoYSkuc2l6ZSYmKGYoYSksRShhKSxhLmUuY2xlYXIoKSl9dmFsdWVzKCl7bGV0IGE9dGhpc1t1XTtyZXR1cm4gbChhKSxmKGEpLGEuZS52YWx1ZXMoKX1lbnRyaWVzKCl7bGV0IGE9dGhpc1t1XTtyZXR1cm4gbChhKSxmKGEpLGEuZS5lbnRyaWVzKCl9a2V5cygpe3JldHVybiB0aGlzLnZhbHVlcygpfVsodSxTeW1ib2wuaXRlcmF0b3IpXSgpe3JldHVybiB0aGlzLnZhbHVlcygpfWZvckVhY2goYSxvKXtsZXQgcD10aGlzLnZhbHVlcygpLHM9cC5uZXh0KCk7Zm9yKDshcy5kb25lOylhLmNhbGwobyxzLnZhbHVlLHMudmFsdWUsdGhpcykscz1wLm5leHQoKX19ZnVuY3Rpb24gaShjLGIpe3JldHVybiBuZXcgbihjLGIpfWZ1bmN0aW9uIGYoYyl7Yy5lfHwoYy5lPW5ldyBTZXQsYy50LmZvckVhY2goYj0+e2lmKEEoYikpe2xldCBhPVcoYixjKTtjLmEuc2V0KGIsYSksYy5lLmFkZChhKX1lbHNlIGMuZS5hZGQoYil9KSl9ZnVuY3Rpb24gbChjKXtjLm0mJmgoMyxKU09OLnN0cmluZ2lmeShUKGMpKSl9WShcIk1hcFNldFwiLHtJOnQsRDppfSl9dmFyIE09bmV3IEosRmU9TS5wcm9kdWNlLE5lPU0ucHJvZHVjZVdpdGhQYXRjaGVzLmJpbmQoTSksemU9TS5zZXRBdXRvRnJlZXplLmJpbmQoTSksamU9TS5zZXRVc2VTdHJpY3RTaGFsbG93Q29weS5iaW5kKE0pLENlPU0uYXBwbHlQYXRjaGVzLmJpbmQoTSksUmU9TS5jcmVhdGVEcmFmdC5iaW5kKE0pLHZlPU0uZmluaXNoRHJhZnQuYmluZChNKTtmdW5jdGlvbiBrZShlKXtyZXR1cm4gZX1mdW5jdGlvbiBLZShlKXtyZXR1cm4gZX0wJiYobW9kdWxlLmV4cG9ydHM9e0ltbWVyLGFwcGx5UGF0Y2hlcyxjYXN0RHJhZnQsY2FzdEltbXV0YWJsZSxjcmVhdGVEcmFmdCxjdXJyZW50LGVuYWJsZU1hcFNldCxlbmFibGVQYXRjaGVzLGZpbmlzaERyYWZ0LGZyZWV6ZSxpbW1lcmFibGUsaXNEcmFmdCxpc0RyYWZ0YWJsZSxub3RoaW5nLG9yaWdpbmFsLHByb2R1Y2UscHJvZHVjZVdpdGhQYXRjaGVzLHNldEF1dG9GcmVlemUsc2V0VXNlU3RyaWN0U2hhbGxvd0NvcHl9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWltbWVyLmNqcy5wcm9kdWN0aW9uLmpzLm1hcCIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuLy9pbXBvcnQgXCIuL2l0ZW0ubW9kdWxlLmNzc1wiO1xuXG5pbnRlcmZhY2UgSXRlbVByb3BzIHtcblx0aXRlbUNsYXNzTmFtZTogc3RyaW5nO1xuXHRoYW5kbGVDbGljaz86IChldmVudDogUmVhY3QuTW91c2VFdmVudDxIVE1MRGl2RWxlbWVudCwgTW91c2VFdmVudD4pID0+IHZvaWQ7XG59XG4vLyBjb25zdCBiaXQgPSAobjogbnVtYmVyLCBpOiBudW1iZXIpOiBudW1iZXIgPT4ge1xuLy8gXHRyZXR1cm4gKG4gPj4gaSkgJiAxO1xuLy8gfTtcbmNvbnN0IEl0ZW06IFJlYWN0LkZDPEl0ZW1Qcm9wcz4gPSAoeyBpdGVtQ2xhc3NOYW1lLCBoYW5kbGVDbGljayB9KTogUmVhY3QuUmVhY3RFbGVtZW50ID0+IHtcblx0cmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtpdGVtQ2xhc3NOYW1lfVxuXHRvbkNsaWNrPXtoYW5kbGVDbGlja30+PC9kaXY+O1xufTtcbkl0ZW0uZGlzcGxheU5hbWUgPSBcIkl0ZW1cIjtcbmV4cG9ydCBkZWZhdWx0IEl0ZW07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudmVyc2lvbiA9IGV4cG9ydHMudmFsaWRhdGUgPSBleHBvcnRzLnY3ID0gZXhwb3J0cy52NlRvVjEgPSBleHBvcnRzLnY2ID0gZXhwb3J0cy52NSA9IGV4cG9ydHMudjQgPSBleHBvcnRzLnYzID0gZXhwb3J0cy52MVRvVjYgPSBleHBvcnRzLnYxID0gZXhwb3J0cy5zdHJpbmdpZnkgPSBleHBvcnRzLnBhcnNlID0gZXhwb3J0cy5OSUwgPSBleHBvcnRzLk1BWCA9IHZvaWQgMDtcbnZhciBtYXhfanNfMSA9IHJlcXVpcmUoXCIuL21heC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1BWFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWF4X2pzXzEuZGVmYXVsdDsgfSB9KTtcbnZhciBuaWxfanNfMSA9IHJlcXVpcmUoXCIuL25pbC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5JTFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmlsX2pzXzEuZGVmYXVsdDsgfSB9KTtcbnZhciBwYXJzZV9qc18xID0gcmVxdWlyZShcIi4vcGFyc2UuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwYXJzZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcGFyc2VfanNfMS5kZWZhdWx0OyB9IH0pO1xudmFyIHN0cmluZ2lmeV9qc18xID0gcmVxdWlyZShcIi4vc3RyaW5naWZ5LmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic3RyaW5naWZ5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzdHJpbmdpZnlfanNfMS5kZWZhdWx0OyB9IH0pO1xudmFyIHYxX2pzXzEgPSByZXF1aXJlKFwiLi92MS5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInYxXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2MV9qc18xLmRlZmF1bHQ7IH0gfSk7XG52YXIgdjFUb1Y2X2pzXzEgPSByZXF1aXJlKFwiLi92MVRvVjYuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ2MVRvVjZcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHYxVG9WNl9qc18xLmRlZmF1bHQ7IH0gfSk7XG52YXIgdjNfanNfMSA9IHJlcXVpcmUoXCIuL3YzLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidjNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHYzX2pzXzEuZGVmYXVsdDsgfSB9KTtcbnZhciB2NF9qc18xID0gcmVxdWlyZShcIi4vdjQuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ2NFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdjRfanNfMS5kZWZhdWx0OyB9IH0pO1xudmFyIHY1X2pzXzEgPSByZXF1aXJlKFwiLi92NS5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInY1XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2NV9qc18xLmRlZmF1bHQ7IH0gfSk7XG52YXIgdjZfanNfMSA9IHJlcXVpcmUoXCIuL3Y2LmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidjZcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHY2X2pzXzEuZGVmYXVsdDsgfSB9KTtcbnZhciB2NlRvVjFfanNfMSA9IHJlcXVpcmUoXCIuL3Y2VG9WMS5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInY2VG9WMVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdjZUb1YxX2pzXzEuZGVmYXVsdDsgfSB9KTtcbnZhciB2N19qc18xID0gcmVxdWlyZShcIi4vdjcuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ2N1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdjdfanNfMS5kZWZhdWx0OyB9IH0pO1xudmFyIHZhbGlkYXRlX2pzXzEgPSByZXF1aXJlKFwiLi92YWxpZGF0ZS5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInZhbGlkYXRlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2YWxpZGF0ZV9qc18xLmRlZmF1bHQ7IH0gfSk7XG52YXIgdmVyc2lvbl9qc18xID0gcmVxdWlyZShcIi4vdmVyc2lvbi5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInZlcnNpb25cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZlcnNpb25fanNfMS5kZWZhdWx0OyB9IH0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHQgPSAnZmZmZmZmZmYtZmZmZi1mZmZmLWZmZmYtZmZmZmZmZmZmZmZmJztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgcGFyc2VfanNfMSA9IHJlcXVpcmUoXCIuL3BhcnNlLmpzXCIpO1xuY29uc3Qgc3RyaW5naWZ5X2pzXzEgPSByZXF1aXJlKFwiLi9zdHJpbmdpZnkuanNcIik7XG5mdW5jdGlvbiB2NlRvVjEodXVpZCkge1xuICAgIGNvbnN0IHY2Qnl0ZXMgPSB0eXBlb2YgdXVpZCA9PT0gJ3N0cmluZycgPyAoMCwgcGFyc2VfanNfMS5kZWZhdWx0KSh1dWlkKSA6IHV1aWQ7XG4gICAgY29uc3QgdjFCeXRlcyA9IF92NlRvVjEodjZCeXRlcyk7XG4gICAgcmV0dXJuIHR5cGVvZiB1dWlkID09PSAnc3RyaW5nJyA/ICgwLCBzdHJpbmdpZnlfanNfMS51bnNhZmVTdHJpbmdpZnkpKHYxQnl0ZXMpIDogdjFCeXRlcztcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHY2VG9WMTtcbmZ1bmN0aW9uIF92NlRvVjEodjZCeXRlcykge1xuICAgIHJldHVybiBVaW50OEFycmF5Lm9mKCgodjZCeXRlc1szXSAmIDB4MGYpIDw8IDQpIHwgKCh2NkJ5dGVzWzRdID4+IDQpICYgMHgwZiksICgodjZCeXRlc1s0XSAmIDB4MGYpIDw8IDQpIHwgKCh2NkJ5dGVzWzVdICYgMHhmMCkgPj4gNCksICgodjZCeXRlc1s1XSAmIDB4MGYpIDw8IDQpIHwgKHY2Qnl0ZXNbNl0gJiAweDBmKSwgdjZCeXRlc1s3XSwgKCh2NkJ5dGVzWzFdICYgMHgwZikgPDwgNCkgfCAoKHY2Qnl0ZXNbMl0gJiAweGYwKSA+PiA0KSwgKCh2NkJ5dGVzWzJdICYgMHgwZikgPDwgNCkgfCAoKHY2Qnl0ZXNbM10gJiAweGYwKSA+PiA0KSwgMHgxMCB8ICgodjZCeXRlc1swXSAmIDB4ZjApID4+IDQpLCAoKHY2Qnl0ZXNbMF0gJiAweDBmKSA8PCA0KSB8ICgodjZCeXRlc1sxXSAmIDB4ZjApID4+IDQpLCB2NkJ5dGVzWzhdLCB2NkJ5dGVzWzldLCB2NkJ5dGVzWzEwXSwgdjZCeXRlc1sxMV0sIHY2Qnl0ZXNbMTJdLCB2NkJ5dGVzWzEzXSwgdjZCeXRlc1sxNF0sIHY2Qnl0ZXNbMTVdKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgbmF0aXZlX2pzXzEgPSByZXF1aXJlKFwiLi9uYXRpdmUuanNcIik7XG5jb25zdCBybmdfanNfMSA9IHJlcXVpcmUoXCIuL3JuZy5qc1wiKTtcbmNvbnN0IHN0cmluZ2lmeV9qc18xID0gcmVxdWlyZShcIi4vc3RyaW5naWZ5LmpzXCIpO1xuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgICBpZiAobmF0aXZlX2pzXzEuZGVmYXVsdC5yYW5kb21VVUlEICYmICFidWYgJiYgIW9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZV9qc18xLmRlZmF1bHQucmFuZG9tVVVJRCgpO1xuICAgIH1cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBjb25zdCBybmRzID0gb3B0aW9ucy5yYW5kb20gPz8gb3B0aW9ucy5ybmc/LigpID8/ICgwLCBybmdfanNfMS5kZWZhdWx0KSgpO1xuICAgIGlmIChybmRzLmxlbmd0aCA8IDE2KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUmFuZG9tIGJ5dGVzIGxlbmd0aCBtdXN0IGJlID49IDE2Jyk7XG4gICAgfVxuICAgIHJuZHNbNl0gPSAocm5kc1s2XSAmIDB4MGYpIHwgMHg0MDtcbiAgICBybmRzWzhdID0gKHJuZHNbOF0gJiAweDNmKSB8IDB4ODA7XG4gICAgaWYgKGJ1Zikge1xuICAgICAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcbiAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMTYgPiBidWYubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgVVVJRCBieXRlIHJhbmdlICR7b2Zmc2V0fToke29mZnNldCArIDE1fSBpcyBvdXQgb2YgYnVmZmVyIGJvdW5kc2ApO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgICAgICAgYnVmW29mZnNldCArIGldID0gcm5kc1tpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnVmO1xuICAgIH1cbiAgICByZXR1cm4gKDAsIHN0cmluZ2lmeV9qc18xLnVuc2FmZVN0cmluZ2lmeSkocm5kcyk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSB2NDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xubGV0IGdldFJhbmRvbVZhbHVlcztcbmNvbnN0IHJuZHM4ID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuZnVuY3Rpb24gcm5nKCkge1xuICAgIGlmICghZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY3J5cHRvID09PSAndW5kZWZpbmVkJyB8fCAhY3J5cHRvLmdldFJhbmRvbVZhbHVlcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKCkgbm90IHN1cHBvcnRlZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZCNnZXRyYW5kb212YWx1ZXMtbm90LXN1cHBvcnRlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGdldFJhbmRvbVZhbHVlcyA9IGNyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChjcnlwdG8pO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0UmFuZG9tVmFsdWVzKHJuZHM4KTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHJuZztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51cGRhdGVWN1N0YXRlID0gdm9pZCAwO1xuY29uc3Qgcm5nX2pzXzEgPSByZXF1aXJlKFwiLi9ybmcuanNcIik7XG5jb25zdCBzdHJpbmdpZnlfanNfMSA9IHJlcXVpcmUoXCIuL3N0cmluZ2lmeS5qc1wiKTtcbmNvbnN0IF9zdGF0ZSA9IHt9O1xuZnVuY3Rpb24gdjcob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgICBsZXQgYnl0ZXM7XG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgYnl0ZXMgPSB2N0J5dGVzKG9wdGlvbnMucmFuZG9tID8/IG9wdGlvbnMucm5nPy4oKSA/PyAoMCwgcm5nX2pzXzEuZGVmYXVsdCkoKSwgb3B0aW9ucy5tc2Vjcywgb3B0aW9ucy5zZXEsIGJ1Ziwgb2Zmc2V0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgIGNvbnN0IHJuZHMgPSAoMCwgcm5nX2pzXzEuZGVmYXVsdCkoKTtcbiAgICAgICAgdXBkYXRlVjdTdGF0ZShfc3RhdGUsIG5vdywgcm5kcyk7XG4gICAgICAgIGJ5dGVzID0gdjdCeXRlcyhybmRzLCBfc3RhdGUubXNlY3MsIF9zdGF0ZS5zZXEsIGJ1Ziwgb2Zmc2V0KTtcbiAgICB9XG4gICAgcmV0dXJuIGJ1ZiA/PyAoMCwgc3RyaW5naWZ5X2pzXzEudW5zYWZlU3RyaW5naWZ5KShieXRlcyk7XG59XG5mdW5jdGlvbiB1cGRhdGVWN1N0YXRlKHN0YXRlLCBub3csIHJuZHMpIHtcbiAgICBzdGF0ZS5tc2VjcyA/Pz0gLUluZmluaXR5O1xuICAgIHN0YXRlLnNlcSA/Pz0gMDtcbiAgICBpZiAobm93ID4gc3RhdGUubXNlY3MpIHtcbiAgICAgICAgc3RhdGUuc2VxID0gKHJuZHNbNl0gPDwgMjMpIHwgKHJuZHNbN10gPDwgMTYpIHwgKHJuZHNbOF0gPDwgOCkgfCBybmRzWzldO1xuICAgICAgICBzdGF0ZS5tc2VjcyA9IG5vdztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHN0YXRlLnNlcSA9IChzdGF0ZS5zZXEgKyAxKSB8IDA7XG4gICAgICAgIGlmIChzdGF0ZS5zZXEgPT09IDApIHtcbiAgICAgICAgICAgIHN0YXRlLm1zZWNzKys7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0YXRlO1xufVxuZXhwb3J0cy51cGRhdGVWN1N0YXRlID0gdXBkYXRlVjdTdGF0ZTtcbmZ1bmN0aW9uIHY3Qnl0ZXMocm5kcywgbXNlY3MsIHNlcSwgYnVmLCBvZmZzZXQgPSAwKSB7XG4gICAgaWYgKHJuZHMubGVuZ3RoIDwgMTYpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSYW5kb20gYnl0ZXMgbGVuZ3RoIG11c3QgYmUgPj0gMTYnKTtcbiAgICB9XG4gICAgaWYgKCFidWYpIHtcbiAgICAgICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuICAgICAgICBvZmZzZXQgPSAwO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMTYgPiBidWYubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgVVVJRCBieXRlIHJhbmdlICR7b2Zmc2V0fToke29mZnNldCArIDE1fSBpcyBvdXQgb2YgYnVmZmVyIGJvdW5kc2ApO1xuICAgICAgICB9XG4gICAgfVxuICAgIG1zZWNzID8/PSBEYXRlLm5vdygpO1xuICAgIHNlcSA/Pz0gKChybmRzWzZdICogMHg3ZikgPDwgMjQpIHwgKHJuZHNbN10gPDwgMTYpIHwgKHJuZHNbOF0gPDwgOCkgfCBybmRzWzldO1xuICAgIGJ1ZltvZmZzZXQrK10gPSAobXNlY3MgLyAweDEwMDAwMDAwMDAwKSAmIDB4ZmY7XG4gICAgYnVmW29mZnNldCsrXSA9IChtc2VjcyAvIDB4MTAwMDAwMDAwKSAmIDB4ZmY7XG4gICAgYnVmW29mZnNldCsrXSA9IChtc2VjcyAvIDB4MTAwMDAwMCkgJiAweGZmO1xuICAgIGJ1ZltvZmZzZXQrK10gPSAobXNlY3MgLyAweDEwMDAwKSAmIDB4ZmY7XG4gICAgYnVmW29mZnNldCsrXSA9IChtc2VjcyAvIDB4MTAwKSAmIDB4ZmY7XG4gICAgYnVmW29mZnNldCsrXSA9IG1zZWNzICYgMHhmZjtcbiAgICBidWZbb2Zmc2V0KytdID0gMHg3MCB8ICgoc2VxID4+PiAyOCkgJiAweDBmKTtcbiAgICBidWZbb2Zmc2V0KytdID0gKHNlcSA+Pj4gMjApICYgMHhmZjtcbiAgICBidWZbb2Zmc2V0KytdID0gMHg4MCB8ICgoc2VxID4+PiAxNCkgJiAweDNmKTtcbiAgICBidWZbb2Zmc2V0KytdID0gKHNlcSA+Pj4gNikgJiAweGZmO1xuICAgIGJ1ZltvZmZzZXQrK10gPSAoKHNlcSA8PCAyKSAmIDB4ZmYpIHwgKHJuZHNbMTBdICYgMHgwMyk7XG4gICAgYnVmW29mZnNldCsrXSA9IHJuZHNbMTFdO1xuICAgIGJ1ZltvZmZzZXQrK10gPSBybmRzWzEyXTtcbiAgICBidWZbb2Zmc2V0KytdID0gcm5kc1sxM107XG4gICAgYnVmW29mZnNldCsrXSA9IHJuZHNbMTRdO1xuICAgIGJ1ZltvZmZzZXQrK10gPSBybmRzWzE1XTtcbiAgICByZXR1cm4gYnVmO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gdjc7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIG1kNShieXRlcykge1xuICAgIGNvbnN0IHdvcmRzID0gdWludDhUb1VpbnQzMihieXRlcyk7XG4gICAgY29uc3QgbWQ1Qnl0ZXMgPSB3b3Jkc1RvTWQ1KHdvcmRzLCBieXRlcy5sZW5ndGggKiA4KTtcbiAgICByZXR1cm4gdWludDMyVG9VaW50OChtZDVCeXRlcyk7XG59XG5mdW5jdGlvbiB1aW50MzJUb1VpbnQ4KGlucHV0KSB7XG4gICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShpbnB1dC5sZW5ndGggKiA0KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aCAqIDQ7IGkrKykge1xuICAgICAgICBieXRlc1tpXSA9IChpbnB1dFtpID4+IDJdID4+PiAoKGkgJSA0KSAqIDgpKSAmIDB4ZmY7XG4gICAgfVxuICAgIHJldHVybiBieXRlcztcbn1cbmZ1bmN0aW9uIGdldE91dHB1dExlbmd0aChpbnB1dExlbmd0aDgpIHtcbiAgICByZXR1cm4gKCgoaW5wdXRMZW5ndGg4ICsgNjQpID4+PiA5KSA8PCA0KSArIDE0ICsgMTtcbn1cbmZ1bmN0aW9uIHdvcmRzVG9NZDUoeCwgbGVuKSB7XG4gICAgY29uc3QgeHBhZCA9IG5ldyBVaW50MzJBcnJheShnZXRPdXRwdXRMZW5ndGgobGVuKSkuZmlsbCgwKTtcbiAgICB4cGFkLnNldCh4KTtcbiAgICB4cGFkW2xlbiA+PiA1XSB8PSAweDgwIDw8IGxlbiAlIDMyO1xuICAgIHhwYWRbeHBhZC5sZW5ndGggLSAxXSA9IGxlbjtcbiAgICB4ID0geHBhZDtcbiAgICBsZXQgYSA9IDE3MzI1ODQxOTM7XG4gICAgbGV0IGIgPSAtMjcxNzMzODc5O1xuICAgIGxldCBjID0gLTE3MzI1ODQxOTQ7XG4gICAgbGV0IGQgPSAyNzE3MzM4Nzg7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSArPSAxNikge1xuICAgICAgICBjb25zdCBvbGRhID0gYTtcbiAgICAgICAgY29uc3Qgb2xkYiA9IGI7XG4gICAgICAgIGNvbnN0IG9sZGMgPSBjO1xuICAgICAgICBjb25zdCBvbGRkID0gZDtcbiAgICAgICAgYSA9IG1kNWZmKGEsIGIsIGMsIGQsIHhbaV0sIDcsIC02ODA4NzY5MzYpO1xuICAgICAgICBkID0gbWQ1ZmYoZCwgYSwgYiwgYywgeFtpICsgMV0sIDEyLCAtMzg5NTY0NTg2KTtcbiAgICAgICAgYyA9IG1kNWZmKGMsIGQsIGEsIGIsIHhbaSArIDJdLCAxNywgNjA2MTA1ODE5KTtcbiAgICAgICAgYiA9IG1kNWZmKGIsIGMsIGQsIGEsIHhbaSArIDNdLCAyMiwgLTEwNDQ1MjUzMzApO1xuICAgICAgICBhID0gbWQ1ZmYoYSwgYiwgYywgZCwgeFtpICsgNF0sIDcsIC0xNzY0MTg4OTcpO1xuICAgICAgICBkID0gbWQ1ZmYoZCwgYSwgYiwgYywgeFtpICsgNV0sIDEyLCAxMjAwMDgwNDI2KTtcbiAgICAgICAgYyA9IG1kNWZmKGMsIGQsIGEsIGIsIHhbaSArIDZdLCAxNywgLTE0NzMyMzEzNDEpO1xuICAgICAgICBiID0gbWQ1ZmYoYiwgYywgZCwgYSwgeFtpICsgN10sIDIyLCAtNDU3MDU5ODMpO1xuICAgICAgICBhID0gbWQ1ZmYoYSwgYiwgYywgZCwgeFtpICsgOF0sIDcsIDE3NzAwMzU0MTYpO1xuICAgICAgICBkID0gbWQ1ZmYoZCwgYSwgYiwgYywgeFtpICsgOV0sIDEyLCAtMTk1ODQxNDQxNyk7XG4gICAgICAgIGMgPSBtZDVmZihjLCBkLCBhLCBiLCB4W2kgKyAxMF0sIDE3LCAtNDIwNjMpO1xuICAgICAgICBiID0gbWQ1ZmYoYiwgYywgZCwgYSwgeFtpICsgMTFdLCAyMiwgLTE5OTA0MDQxNjIpO1xuICAgICAgICBhID0gbWQ1ZmYoYSwgYiwgYywgZCwgeFtpICsgMTJdLCA3LCAxODA0NjAzNjgyKTtcbiAgICAgICAgZCA9IG1kNWZmKGQsIGEsIGIsIGMsIHhbaSArIDEzXSwgMTIsIC00MDM0MTEwMSk7XG4gICAgICAgIGMgPSBtZDVmZihjLCBkLCBhLCBiLCB4W2kgKyAxNF0sIDE3LCAtMTUwMjAwMjI5MCk7XG4gICAgICAgIGIgPSBtZDVmZihiLCBjLCBkLCBhLCB4W2kgKyAxNV0sIDIyLCAxMjM2NTM1MzI5KTtcbiAgICAgICAgYSA9IG1kNWdnKGEsIGIsIGMsIGQsIHhbaSArIDFdLCA1LCAtMTY1Nzk2NTEwKTtcbiAgICAgICAgZCA9IG1kNWdnKGQsIGEsIGIsIGMsIHhbaSArIDZdLCA5LCAtMTA2OTUwMTYzMik7XG4gICAgICAgIGMgPSBtZDVnZyhjLCBkLCBhLCBiLCB4W2kgKyAxMV0sIDE0LCA2NDM3MTc3MTMpO1xuICAgICAgICBiID0gbWQ1Z2coYiwgYywgZCwgYSwgeFtpXSwgMjAsIC0zNzM4OTczMDIpO1xuICAgICAgICBhID0gbWQ1Z2coYSwgYiwgYywgZCwgeFtpICsgNV0sIDUsIC03MDE1NTg2OTEpO1xuICAgICAgICBkID0gbWQ1Z2coZCwgYSwgYiwgYywgeFtpICsgMTBdLCA5LCAzODAxNjA4Myk7XG4gICAgICAgIGMgPSBtZDVnZyhjLCBkLCBhLCBiLCB4W2kgKyAxNV0sIDE0LCAtNjYwNDc4MzM1KTtcbiAgICAgICAgYiA9IG1kNWdnKGIsIGMsIGQsIGEsIHhbaSArIDRdLCAyMCwgLTQwNTUzNzg0OCk7XG4gICAgICAgIGEgPSBtZDVnZyhhLCBiLCBjLCBkLCB4W2kgKyA5XSwgNSwgNTY4NDQ2NDM4KTtcbiAgICAgICAgZCA9IG1kNWdnKGQsIGEsIGIsIGMsIHhbaSArIDE0XSwgOSwgLTEwMTk4MDM2OTApO1xuICAgICAgICBjID0gbWQ1Z2coYywgZCwgYSwgYiwgeFtpICsgM10sIDE0LCAtMTg3MzYzOTYxKTtcbiAgICAgICAgYiA9IG1kNWdnKGIsIGMsIGQsIGEsIHhbaSArIDhdLCAyMCwgMTE2MzUzMTUwMSk7XG4gICAgICAgIGEgPSBtZDVnZyhhLCBiLCBjLCBkLCB4W2kgKyAxM10sIDUsIC0xNDQ0NjgxNDY3KTtcbiAgICAgICAgZCA9IG1kNWdnKGQsIGEsIGIsIGMsIHhbaSArIDJdLCA5LCAtNTE0MDM3ODQpO1xuICAgICAgICBjID0gbWQ1Z2coYywgZCwgYSwgYiwgeFtpICsgN10sIDE0LCAxNzM1MzI4NDczKTtcbiAgICAgICAgYiA9IG1kNWdnKGIsIGMsIGQsIGEsIHhbaSArIDEyXSwgMjAsIC0xOTI2NjA3NzM0KTtcbiAgICAgICAgYSA9IG1kNWhoKGEsIGIsIGMsIGQsIHhbaSArIDVdLCA0LCAtMzc4NTU4KTtcbiAgICAgICAgZCA9IG1kNWhoKGQsIGEsIGIsIGMsIHhbaSArIDhdLCAxMSwgLTIwMjI1NzQ0NjMpO1xuICAgICAgICBjID0gbWQ1aGgoYywgZCwgYSwgYiwgeFtpICsgMTFdLCAxNiwgMTgzOTAzMDU2Mik7XG4gICAgICAgIGIgPSBtZDVoaChiLCBjLCBkLCBhLCB4W2kgKyAxNF0sIDIzLCAtMzUzMDk1NTYpO1xuICAgICAgICBhID0gbWQ1aGgoYSwgYiwgYywgZCwgeFtpICsgMV0sIDQsIC0xNTMwOTkyMDYwKTtcbiAgICAgICAgZCA9IG1kNWhoKGQsIGEsIGIsIGMsIHhbaSArIDRdLCAxMSwgMTI3Mjg5MzM1Myk7XG4gICAgICAgIGMgPSBtZDVoaChjLCBkLCBhLCBiLCB4W2kgKyA3XSwgMTYsIC0xNTU0OTc2MzIpO1xuICAgICAgICBiID0gbWQ1aGgoYiwgYywgZCwgYSwgeFtpICsgMTBdLCAyMywgLTEwOTQ3MzA2NDApO1xuICAgICAgICBhID0gbWQ1aGgoYSwgYiwgYywgZCwgeFtpICsgMTNdLCA0LCA2ODEyNzkxNzQpO1xuICAgICAgICBkID0gbWQ1aGgoZCwgYSwgYiwgYywgeFtpXSwgMTEsIC0zNTg1MzcyMjIpO1xuICAgICAgICBjID0gbWQ1aGgoYywgZCwgYSwgYiwgeFtpICsgM10sIDE2LCAtNzIyNTIxOTc5KTtcbiAgICAgICAgYiA9IG1kNWhoKGIsIGMsIGQsIGEsIHhbaSArIDZdLCAyMywgNzYwMjkxODkpO1xuICAgICAgICBhID0gbWQ1aGgoYSwgYiwgYywgZCwgeFtpICsgOV0sIDQsIC02NDAzNjQ0ODcpO1xuICAgICAgICBkID0gbWQ1aGgoZCwgYSwgYiwgYywgeFtpICsgMTJdLCAxMSwgLTQyMTgxNTgzNSk7XG4gICAgICAgIGMgPSBtZDVoaChjLCBkLCBhLCBiLCB4W2kgKyAxNV0sIDE2LCA1MzA3NDI1MjApO1xuICAgICAgICBiID0gbWQ1aGgoYiwgYywgZCwgYSwgeFtpICsgMl0sIDIzLCAtOTk1MzM4NjUxKTtcbiAgICAgICAgYSA9IG1kNWlpKGEsIGIsIGMsIGQsIHhbaV0sIDYsIC0xOTg2MzA4NDQpO1xuICAgICAgICBkID0gbWQ1aWkoZCwgYSwgYiwgYywgeFtpICsgN10sIDEwLCAxMTI2ODkxNDE1KTtcbiAgICAgICAgYyA9IG1kNWlpKGMsIGQsIGEsIGIsIHhbaSArIDE0XSwgMTUsIC0xNDE2MzU0OTA1KTtcbiAgICAgICAgYiA9IG1kNWlpKGIsIGMsIGQsIGEsIHhbaSArIDVdLCAyMSwgLTU3NDM0MDU1KTtcbiAgICAgICAgYSA9IG1kNWlpKGEsIGIsIGMsIGQsIHhbaSArIDEyXSwgNiwgMTcwMDQ4NTU3MSk7XG4gICAgICAgIGQgPSBtZDVpaShkLCBhLCBiLCBjLCB4W2kgKyAzXSwgMTAsIC0xODk0OTg2NjA2KTtcbiAgICAgICAgYyA9IG1kNWlpKGMsIGQsIGEsIGIsIHhbaSArIDEwXSwgMTUsIC0xMDUxNTIzKTtcbiAgICAgICAgYiA9IG1kNWlpKGIsIGMsIGQsIGEsIHhbaSArIDFdLCAyMSwgLTIwNTQ5MjI3OTkpO1xuICAgICAgICBhID0gbWQ1aWkoYSwgYiwgYywgZCwgeFtpICsgOF0sIDYsIDE4NzMzMTMzNTkpO1xuICAgICAgICBkID0gbWQ1aWkoZCwgYSwgYiwgYywgeFtpICsgMTVdLCAxMCwgLTMwNjExNzQ0KTtcbiAgICAgICAgYyA9IG1kNWlpKGMsIGQsIGEsIGIsIHhbaSArIDZdLCAxNSwgLTE1NjAxOTgzODApO1xuICAgICAgICBiID0gbWQ1aWkoYiwgYywgZCwgYSwgeFtpICsgMTNdLCAyMSwgMTMwOTE1MTY0OSk7XG4gICAgICAgIGEgPSBtZDVpaShhLCBiLCBjLCBkLCB4W2kgKyA0XSwgNiwgLTE0NTUyMzA3MCk7XG4gICAgICAgIGQgPSBtZDVpaShkLCBhLCBiLCBjLCB4W2kgKyAxMV0sIDEwLCAtMTEyMDIxMDM3OSk7XG4gICAgICAgIGMgPSBtZDVpaShjLCBkLCBhLCBiLCB4W2kgKyAyXSwgMTUsIDcxODc4NzI1OSk7XG4gICAgICAgIGIgPSBtZDVpaShiLCBjLCBkLCBhLCB4W2kgKyA5XSwgMjEsIC0zNDM0ODU1NTEpO1xuICAgICAgICBhID0gc2FmZUFkZChhLCBvbGRhKTtcbiAgICAgICAgYiA9IHNhZmVBZGQoYiwgb2xkYik7XG4gICAgICAgIGMgPSBzYWZlQWRkKGMsIG9sZGMpO1xuICAgICAgICBkID0gc2FmZUFkZChkLCBvbGRkKTtcbiAgICB9XG4gICAgcmV0dXJuIFVpbnQzMkFycmF5Lm9mKGEsIGIsIGMsIGQpO1xufVxuZnVuY3Rpb24gdWludDhUb1VpbnQzMihpbnB1dCkge1xuICAgIGlmIChpbnB1dC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50MzJBcnJheSgpO1xuICAgIH1cbiAgICBjb25zdCBvdXRwdXQgPSBuZXcgVWludDMyQXJyYXkoZ2V0T3V0cHV0TGVuZ3RoKGlucHV0Lmxlbmd0aCAqIDgpKS5maWxsKDApO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgb3V0cHV0W2kgPj4gMl0gfD0gKGlucHV0W2ldICYgMHhmZikgPDwgKChpICUgNCkgKiA4KTtcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbn1cbmZ1bmN0aW9uIHNhZmVBZGQoeCwgeSkge1xuICAgIGNvbnN0IGxzdyA9ICh4ICYgMHhmZmZmKSArICh5ICYgMHhmZmZmKTtcbiAgICBjb25zdCBtc3cgPSAoeCA+PiAxNikgKyAoeSA+PiAxNikgKyAobHN3ID4+IDE2KTtcbiAgICByZXR1cm4gKG1zdyA8PCAxNikgfCAobHN3ICYgMHhmZmZmKTtcbn1cbmZ1bmN0aW9uIGJpdFJvdGF0ZUxlZnQobnVtLCBjbnQpIHtcbiAgICByZXR1cm4gKG51bSA8PCBjbnQpIHwgKG51bSA+Pj4gKDMyIC0gY250KSk7XG59XG5mdW5jdGlvbiBtZDVjbW4ocSwgYSwgYiwgeCwgcywgdCkge1xuICAgIHJldHVybiBzYWZlQWRkKGJpdFJvdGF0ZUxlZnQoc2FmZUFkZChzYWZlQWRkKGEsIHEpLCBzYWZlQWRkKHgsIHQpKSwgcyksIGIpO1xufVxuZnVuY3Rpb24gbWQ1ZmYoYSwgYiwgYywgZCwgeCwgcywgdCkge1xuICAgIHJldHVybiBtZDVjbW4oKGIgJiBjKSB8ICh+YiAmIGQpLCBhLCBiLCB4LCBzLCB0KTtcbn1cbmZ1bmN0aW9uIG1kNWdnKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcbiAgICByZXR1cm4gbWQ1Y21uKChiICYgZCkgfCAoYyAmIH5kKSwgYSwgYiwgeCwgcywgdCk7XG59XG5mdW5jdGlvbiBtZDVoaChhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XG4gICAgcmV0dXJuIG1kNWNtbihiIF4gYyBeIGQsIGEsIGIsIHgsIHMsIHQpO1xufVxuZnVuY3Rpb24gbWQ1aWkoYSwgYiwgYywgZCwgeCwgcywgdCkge1xuICAgIHJldHVybiBtZDVjbW4oYyBeIChiIHwgfmQpLCBhLCBiLCB4LCBzLCB0KTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IG1kNTtcbiIsInZhciBlPXJlcXVpcmUoXCJpbW1lclwiKSxyPXJlcXVpcmUoXCJyZWFjdFwiKTtleHBvcnRzLnVzZUltbWVyPWZ1bmN0aW9uKHUpe3ZhciBuPXIudXNlU3RhdGUoZnVuY3Rpb24oKXtyZXR1cm4gZS5mcmVlemUoXCJmdW5jdGlvblwiPT10eXBlb2YgdT91KCk6dSwhMCl9KSx0PW5bMV07cmV0dXJuW25bMF0sci51c2VDYWxsYmFjayhmdW5jdGlvbihyKXt0KFwiZnVuY3Rpb25cIj09dHlwZW9mIHI/ZS5wcm9kdWNlKHIpOmUuZnJlZXplKHIpKX0sW10pXX0sZXhwb3J0cy51c2VJbW1lclJlZHVjZXI9ZnVuY3Rpb24odSxuLHQpe3ZhciBvPXIudXNlTWVtbyhmdW5jdGlvbigpe3JldHVybiBlLnByb2R1Y2UodSl9LFt1XSk7cmV0dXJuIHIudXNlUmVkdWNlcihvLG4sdCl9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlLWltbWVyLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBzdHJpbmdpZnlfanNfMSA9IHJlcXVpcmUoXCIuL3N0cmluZ2lmeS5qc1wiKTtcbmNvbnN0IHYxX2pzXzEgPSByZXF1aXJlKFwiLi92MS5qc1wiKTtcbmNvbnN0IHYxVG9WNl9qc18xID0gcmVxdWlyZShcIi4vdjFUb1Y2LmpzXCIpO1xuZnVuY3Rpb24gdjYob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgICBvcHRpb25zID8/PSB7fTtcbiAgICBvZmZzZXQgPz89IDA7XG4gICAgbGV0IGJ5dGVzID0gKDAsIHYxX2pzXzEuZGVmYXVsdCkoeyAuLi5vcHRpb25zLCBfdjY6IHRydWUgfSwgbmV3IFVpbnQ4QXJyYXkoMTYpKTtcbiAgICBieXRlcyA9ICgwLCB2MVRvVjZfanNfMS5kZWZhdWx0KShieXRlcyk7XG4gICAgaWYgKGJ1Zikge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgICAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9IGJ5dGVzW2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidWY7XG4gICAgfVxuICAgIHJldHVybiAoMCwgc3RyaW5naWZ5X2pzXzEudW5zYWZlU3RyaW5naWZ5KShieXRlcyk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSB2NjtcbiIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMzc3X187IiwiLyoqXG4gKiBUaGUgcHVycG9zZSBvZiBpbml0aWFsU3RhdGVzLnRzIGlzIHRvIHByb3ZpZGUgaW5pdGlhbCBzdGF0ZSBmb3IgY29tcG9uZW50IHByb3BzXG4gKi9cbi8vIGluaXRpYWxTdGF0ZS50c1xuXG5cbmltcG9ydCB7IENvbW1hbmRWYWx2ZU1wUHJvcHMsIFBhcmFtSXRlbSB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbmV4cG9ydCBjb25zdCB2YWx2ZVN0YXR1cyA9IHtcblx0YWxhcm06IGZhbHNlLFxuXHRhY3RGQjogZmFsc2UsXG5cdGRlQWN0RkI6IHRydWUsXG5cdGFjdGl2YXRlZENvbmZpZzogNyxcblx0ZGVhY3RpdmF0ZWRDb25maWc6IDUsXG5cdGl0ZW1OYW1lOiBcIlZYWFhcIixcblx0bWFudWFsOiBmYWxzZSxcblx0bWFza2VkOiBmYWxzZSxcblx0Y2hhbmdpbmc6IGZhbHNlLFxuXHRsb2NhdGU6IGZhbHNlLFxufTtcblxuZXhwb3J0IGNvbnN0IHByb2Nlc3NPYmplY3RQcm9wcyA9IHtcblx0c3RhdHVzOiB2YWx2ZVN0YXR1cyxcbn07XG5leHBvcnQgY29uc3QgdmFsdmVQcm9wcyA9IHtcblx0cHJvY2Vzc09iamVjdDogcHJvY2Vzc09iamVjdFByb3BzLFxuXHRoYW5kbGVDbGljazogKCkgPT4ge1xuXHRcdGNvbnNvbGUubG9nKFwiVmFsdmUgY2xpY2tlZFwiKTtcblx0fSxcblx0bGFiZWxQb3NpdGlvbjogXCJsZWZ0XCIsXG5cdHNob3dMYWJlbDogZmFsc2UsXG59O1xuZXhwb3J0IGNvbnN0IHB1bXBJbml0aWFsU3RhdHVzID0ge1xuXHRhbGFybTogZmFsc2UsXG5cdGFjdEZCOiBmYWxzZSxcblx0ZGVBY3RGQjogZmFsc2UsXG5cdGNvbmZpZ3VyYXRpb246IDcsXG5cdGl0ZW1OYW1lOiBcIml0ZW1OYW1lXCIsXG5cdG1hbnVhbDogZmFsc2UsXG5cdG1hc2tlZDogZmFsc2UsXG5cdGNoYW5naW5nOiBmYWxzZSxcblx0bG9jYXRlOiBmYWxzZSxcbn1cblxuZXhwb3J0IGNvbnN0IHB1bXBJbml0aWFsUHJvcHMgPSB7XG5cdHN0YXR1czogcHVtcEluaXRpYWxTdGF0dXMsXG59XG5leHBvcnQgY29uc3QgcGFyYW1ldGVySW5pdGlhbFN0YXRlID0gW1xuXHR7XG5cdFx0bGFiZWw6IHtcblx0XHRcdHRleHQ6IFwibGFiZWxcIixcblx0XHRcdGNsYXNzTmFtZTogXCJcIixcblx0XHRcdHRvb2x0aXBUZXh0OiBcIlwiLFxuXHRcdFx0dG9vbHRpcFBvc2l0aW9uOiBcIlwiLFxuXHRcdFx0dG9vbHRpcENsYXNzTmFtZTogXCJcIixcblx0XHRcdHRvb2x0aXBJZDogXCJcIixcblx0XHR9LFxuXHRcdGlucHV0OiB7XG5cdFx0XHR0eXBlOiBcInRleHRcIixcblx0XHRcdGlucHV0bW9kZTogXCJudW1lcmljXCIsXG5cdFx0XHRwbGFjZWhvbGRlcjogXCJFbnRlciBhIG51bWJlclwiLFxuXHRcdFx0ZWRpdGFibGU6IHRydWUsXG5cdFx0XHRwYXR0ZXJuOiBcIl5bMC05XSpbLixdP1swLTldKiRcIixcblx0XHRcdG1pbjogMCxcblx0XHRcdG1heDogMTAwLFxuXHRcdFx0ZGVjaW1hbFBsYWNlczogMixcblx0XHRcdGV1OiBcIlxcdTAwQjVDXCIsXG5cdFx0XHR2YWx1ZTogMCxcblx0XHR9LFxuXHR9IGFzIFBhcmFtSXRlbSxcbl07XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsQXV0b01hblN0YXRlID0ge1xuXHRhdXRvOiB0cnVlLFxuXHRtYW51YWw6IGZhbHNlLFxufTtcbmV4cG9ydCBjb25zdCBpbml0aWFsT2ZmT25TdGF0ZSA9IHtcblx0b2ZmOiBmYWxzZSxcblx0b246IGZhbHNlLFxufTtcbmV4cG9ydCBjb25zdCBpbml0aWFsQ29udHJvbFN0YXRlID0ge1xuXHRjb21tYW5kOiB7XG5cdFx0YXZhaWxhYmxlOiB7XG5cdFx0XHRtYWluOiBmYWxzZSxcblx0XHRcdHVwcGVyU2VhdDogZmFsc2UsXG5cdFx0XHRsb3dlclNlYXQ6IGZhbHNlXG5cdFx0fSxcblx0XHRtYWluOiB7XG5cdFx0XHRsYWJlbDogXCJNYWluXCIsXG5cdFx0XHRhdXRvTWFudWFsOiBmYWxzZSxcblx0XHRcdGFjdGl2YXRpb246IGZhbHNlLFxuXHRcdH0sXG5cdFx0dXBwZXJTZWF0OiB7XG5cdFx0XHRsYWJlbDogXCJVcHBlciBTZWF0XCIsXG5cdFx0XHRhY3RpdmF0aW9uOiBmYWxzZSxcblx0XHR9LFxuXHRcdGxvd2VyU2VhdDoge1xuXHRcdFx0bGFiZWw6IFwiTG93ZXIgU2VhdFwiLFxuXHRcdFx0YWN0aXZhdGlvbjogZmFsc2UsXG5cdFx0fVxuXHR9XG59IGFzIENvbW1hbmRWYWx2ZU1wUHJvcHM7XG4iLCIvKipcbiAqIEhNSSBDb21wb25lbnQgLSBIZWF0IEV4Y2hhbmdlciB0eXBlcyBkZWZzXG4gKi9cblxuaW1wb3J0IHR5cGUgeyBDb21wb25lbnRQcm9wcyB9IGZyb20gXCJAaW5kdWN0aXZlYXV0b21hdGlvbi9wZXJzcGVjdGl2ZS1jbGllbnRcIjtcbmltcG9ydCB0eXBlIHsgUmVhY3ROb2RlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgdHlwZSB7IEl0ZW1JZFBvc2l0aW9uVHlwZSB9IGZyb20gXCIuLi8uLi8uLi9hcGkvdHlwZXNcIjtcblxuZXhwb3J0IGNvbnN0IEhYX0NPTVBPTkVOVF9UWVBFID0gXCJobWkucHJvY2Vzc19vYmplY3RzLkhlYXRFeGNoYW5nZXJcIjtcblxuY29uc3QgSGVhdEV4Y2hhbmdlclR5cGVzID0gW1xuXHRcInBsYXRlXCIsXG5cdFwidHVidWxhclwiLFxuXTtcbmV4cG9ydCB0eXBlIEhlYXRFeGNoYW5nZXJUeXBlcyA9ICh0eXBlb2YgSGVhdEV4Y2hhbmdlclR5cGVzKVtudW1iZXJdO1xuZXhwb3J0IGVudW0gSHhNb2RlcyB7XG5cdGFsYXJtID0gXCJhbGFybVwiLFxuXHRoZWF0aW5nID0gXCJoZWF0aW5nXCIsXG5cdGNvb2xpbmcgPSBcImNvb2xpbmdcIixcbn07XG5cblxuZXhwb3J0IHR5cGUgSHhQcm9wcyA9IHtcblx0dHlwZT86IEhlYXRFeGNoYW5nZXJUeXBlcztcblx0aXRlbU5hbWU/OiBzdHJpbmc7XG5cdG1vZGU/OiBIeE1vZGVzW2tleW9mIEh4TW9kZXNdO1xuXHRsb2NhdGU/OiBib29sZWFuO1xuXHRzaG93TGFiZWw/OiBib29sZWFuO1xuXHRsYWJlbFBvc2l0aW9uPzogSXRlbUlkUG9zaXRpb25UeXBlXG59XG5cbmV4cG9ydCBjb25zdCBIeEl0ZW1MaXN0ID0gW1xuXHRcIml0ZW0tMVwiLFxuXHRcIml0ZW0tMlwiLFxuXHRcIml0ZW0tM1wiLFxuXHRcIml0ZW0tNFwiLFxuXHRcIml0ZW0tNVwiLFxuXHRcIml0ZW0tNlwiLFxuXHRcIml0ZW0tN1wiLFxuXHRcImJhc2UtMVwiLFxuXHRcImxvY2F0ZVwiLFxuXVxuZXhwb3J0IHR5cGUgSHhJdGVtcyA9ICh0eXBlb2YgSHhJdGVtTGlzdClbbnVtYmVyXTtcblxuZXhwb3J0IHR5cGUgSHhDb21wb3VuZENvbnRleHRUeXBlID0ge1xuXHRjb21wb25lbnRQcm9wczogQ29tcG9uZW50UHJvcHM8YW55LCBhbnk+O1xuXHRpdGVtUHJvcHM6IEh4UHJvcHM7XG5cdG9uQWN0aW9uUGVyZm9ybWVkOiAoKSA9PiB2b2lkO1xuXHRjaGlsZHJlbjogUmVhY3ROb2RlO1xufTtcbiIsIlxuJ3VzZSBzdHJpY3QnXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9pbW1lci5janMucHJvZHVjdGlvbi5qcycpXG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vaW1tZXIuY2pzLmRldmVsb3BtZW50LmpzJylcbn0iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXBkYXRlVjFTdGF0ZSA9IHZvaWQgMDtcbmNvbnN0IHJuZ19qc18xID0gcmVxdWlyZShcIi4vcm5nLmpzXCIpO1xuY29uc3Qgc3RyaW5naWZ5X2pzXzEgPSByZXF1aXJlKFwiLi9zdHJpbmdpZnkuanNcIik7XG5jb25zdCBfc3RhdGUgPSB7fTtcbmZ1bmN0aW9uIHYxKG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gICAgbGV0IGJ5dGVzO1xuICAgIGNvbnN0IGlzVjYgPSBvcHRpb25zPy5fdjYgPz8gZmFsc2U7XG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uc0tleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgICAgICAgaWYgKG9wdGlvbnNLZXlzLmxlbmd0aCA9PT0gMSAmJiBvcHRpb25zS2V5c1swXSA9PT0gJ192NicpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgYnl0ZXMgPSB2MUJ5dGVzKG9wdGlvbnMucmFuZG9tID8/IG9wdGlvbnMucm5nPy4oKSA/PyAoMCwgcm5nX2pzXzEuZGVmYXVsdCkoKSwgb3B0aW9ucy5tc2Vjcywgb3B0aW9ucy5uc2Vjcywgb3B0aW9ucy5jbG9ja3NlcSwgb3B0aW9ucy5ub2RlLCBidWYsIG9mZnNldCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICBjb25zdCBybmRzID0gKDAsIHJuZ19qc18xLmRlZmF1bHQpKCk7XG4gICAgICAgIHVwZGF0ZVYxU3RhdGUoX3N0YXRlLCBub3csIHJuZHMpO1xuICAgICAgICBieXRlcyA9IHYxQnl0ZXMocm5kcywgX3N0YXRlLm1zZWNzLCBfc3RhdGUubnNlY3MsIGlzVjYgPyB1bmRlZmluZWQgOiBfc3RhdGUuY2xvY2tzZXEsIGlzVjYgPyB1bmRlZmluZWQgOiBfc3RhdGUubm9kZSwgYnVmLCBvZmZzZXQpO1xuICAgIH1cbiAgICByZXR1cm4gYnVmID8/ICgwLCBzdHJpbmdpZnlfanNfMS51bnNhZmVTdHJpbmdpZnkpKGJ5dGVzKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVYxU3RhdGUoc3RhdGUsIG5vdywgcm5kcykge1xuICAgIHN0YXRlLm1zZWNzID8/PSAtSW5maW5pdHk7XG4gICAgc3RhdGUubnNlY3MgPz89IDA7XG4gICAgaWYgKG5vdyA9PT0gc3RhdGUubXNlY3MpIHtcbiAgICAgICAgc3RhdGUubnNlY3MrKztcbiAgICAgICAgaWYgKHN0YXRlLm5zZWNzID49IDEwMDAwKSB7XG4gICAgICAgICAgICBzdGF0ZS5ub2RlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgc3RhdGUubnNlY3MgPSAwO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKG5vdyA+IHN0YXRlLm1zZWNzKSB7XG4gICAgICAgIHN0YXRlLm5zZWNzID0gMDtcbiAgICB9XG4gICAgZWxzZSBpZiAobm93IDwgc3RhdGUubXNlY3MpIHtcbiAgICAgICAgc3RhdGUubm9kZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKCFzdGF0ZS5ub2RlKSB7XG4gICAgICAgIHN0YXRlLm5vZGUgPSBybmRzLnNsaWNlKDEwLCAxNik7XG4gICAgICAgIHN0YXRlLm5vZGVbMF0gfD0gMHgwMTtcbiAgICAgICAgc3RhdGUuY2xvY2tzZXEgPSAoKHJuZHNbOF0gPDwgOCkgfCBybmRzWzldKSAmIDB4M2ZmZjtcbiAgICB9XG4gICAgc3RhdGUubXNlY3MgPSBub3c7XG4gICAgcmV0dXJuIHN0YXRlO1xufVxuZXhwb3J0cy51cGRhdGVWMVN0YXRlID0gdXBkYXRlVjFTdGF0ZTtcbmZ1bmN0aW9uIHYxQnl0ZXMocm5kcywgbXNlY3MsIG5zZWNzLCBjbG9ja3NlcSwgbm9kZSwgYnVmLCBvZmZzZXQgPSAwKSB7XG4gICAgaWYgKHJuZHMubGVuZ3RoIDwgMTYpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSYW5kb20gYnl0ZXMgbGVuZ3RoIG11c3QgYmUgPj0gMTYnKTtcbiAgICB9XG4gICAgaWYgKCFidWYpIHtcbiAgICAgICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuICAgICAgICBvZmZzZXQgPSAwO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMTYgPiBidWYubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgVVVJRCBieXRlIHJhbmdlICR7b2Zmc2V0fToke29mZnNldCArIDE1fSBpcyBvdXQgb2YgYnVmZmVyIGJvdW5kc2ApO1xuICAgICAgICB9XG4gICAgfVxuICAgIG1zZWNzID8/PSBEYXRlLm5vdygpO1xuICAgIG5zZWNzID8/PSAwO1xuICAgIGNsb2Nrc2VxID8/PSAoKHJuZHNbOF0gPDwgOCkgfCBybmRzWzldKSAmIDB4M2ZmZjtcbiAgICBub2RlID8/PSBybmRzLnNsaWNlKDEwLCAxNik7XG4gICAgbXNlY3MgKz0gMTIyMTkyOTI4MDAwMDA7XG4gICAgY29uc3QgdGwgPSAoKG1zZWNzICYgMHhmZmZmZmZmKSAqIDEwMDAwICsgbnNlY3MpICUgMHgxMDAwMDAwMDA7XG4gICAgYnVmW29mZnNldCsrXSA9ICh0bCA+Pj4gMjQpICYgMHhmZjtcbiAgICBidWZbb2Zmc2V0KytdID0gKHRsID4+PiAxNikgJiAweGZmO1xuICAgIGJ1ZltvZmZzZXQrK10gPSAodGwgPj4+IDgpICYgMHhmZjtcbiAgICBidWZbb2Zmc2V0KytdID0gdGwgJiAweGZmO1xuICAgIGNvbnN0IHRtaCA9ICgobXNlY3MgLyAweDEwMDAwMDAwMCkgKiAxMDAwMCkgJiAweGZmZmZmZmY7XG4gICAgYnVmW29mZnNldCsrXSA9ICh0bWggPj4+IDgpICYgMHhmZjtcbiAgICBidWZbb2Zmc2V0KytdID0gdG1oICYgMHhmZjtcbiAgICBidWZbb2Zmc2V0KytdID0gKCh0bWggPj4+IDI0KSAmIDB4ZikgfCAweDEwO1xuICAgIGJ1ZltvZmZzZXQrK10gPSAodG1oID4+PiAxNikgJiAweGZmO1xuICAgIGJ1ZltvZmZzZXQrK10gPSAoY2xvY2tzZXEgPj4+IDgpIHwgMHg4MDtcbiAgICBidWZbb2Zmc2V0KytdID0gY2xvY2tzZXEgJiAweGZmO1xuICAgIGZvciAobGV0IG4gPSAwOyBuIDwgNjsgKytuKSB7XG4gICAgICAgIGJ1ZltvZmZzZXQrK10gPSBub2RlW25dO1xuICAgIH1cbiAgICByZXR1cm4gYnVmO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gdjE7XG4iLCIvKipcbiAqIFV0aWxpdHkgZnVuY3Rpb25zIGZvciBudW1iZXJzXG4gKi9cblxuLyoqXG4gKiBVc2luZyB0aGUgYmluYXJ5IHJlcHJlc2VudGF0aW9uIG9mIG4sIGFuIEludGVnZXIsIHJldHVybnMgdGhlIGJvb2xlYW5cbiAqIHZhbHVlIGF0IGluZGV4LCBpLlxuICogQHBhcmFtIG4gYSBudW1iZXIgaXMgaW1wbGljaXR5IGNvbnZlcnRlciB0byBhIDMyYml0IGludGVnZXIsIGJ5IHRoZSBiaXR3aXNlIG9wZXJhdG9yc1xuICogQHBhcmFtIGkgaXMgYSBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBiaXQgcG9zaXRpb24gdG8gYmUgdGVzdGVkXG4gKiBAcmV0dXJucyB0aGUgYm9vbGVhbiB2YWx1ZSBvZiB0aGUgYml0IGF0IGluZGV4IGkuXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRCb29sQXRJbmRleCA9IChuOiBudW1iZXIsIGk6IG51bWJlcik6IGJvb2xlYW4gPT4ge1xuXHRyZXR1cm4gQm9vbGVhbigobiA+PiBpKSAmIDEpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRUUFZhbHZlQ29uZmlnVG9IbWlWYWx2ZUNvbmZpZyhuOiBudW1iZXIpIHtcblx0Ly8gYml0IDkgaXMgdHJ1ZSAtIGJ1dHRlcmZseSB2YWx2ZVxuXHRsZXQgbmV3Q29uZmlnID0wO1xuXHRsZXQgdHAsIGhtaTtcblx0Ly8gbiBhdCBpbmRleCA5IGlzIHRydWVcblx0aWYgKChuID4+IDkpICYgMSkge1xuXHRcdC8vIFRQIGJpdCAwID0gSG1pIGJpdCAwXG5cdFx0dHA9OTsgaG1pPTlcblx0XHRuZXdDb25maWcgPSAobmV3Q29uZmlnICYgfigxIDw8IGhtaSkpIHwgKCgobiA+PiB0cCkgJiAxKSA8PCBobWkpO1xuXHRcdC8vIFRQIGJpdCAwID0gSG1pIGJpdCAwXG5cdFx0dHA9MDsgaG1pPTBcblx0XHRuZXdDb25maWcgPSAobmV3Q29uZmlnICYgfigxIDw8IGhtaSkpIHwgKCgobiA+PiB0cCkgJiAxKSA8PCBobWkpO1xuXHRcdC8vIFRQIGJpdCA0ID0gSG1pIGJpdCAyXG5cdFx0dHA9NDsgaG1pPTJcblx0XHRuZXdDb25maWcgPSAobmV3Q29uZmlnICYgfigxIDw8IGhtaSkpIHwgKCgobiA+PiB0cCkgJiAxKSA8PCBobWkpO1xuXG5cdFx0Ly8gVFAgYml0IDYgPSBIbWkgYml0IDNcblx0XHR0cD02OyBobWk9M1xuXHRcdG5ld0NvbmZpZyA9IChuZXdDb25maWcgJiB+KDEgPDwgaG1pKSkgfCAoKChuID4+IHRwKSAmIDEpIDw8IGhtaSk7XG5cdFx0Ly8gVFAgYml0IDIgPSBIbWkgYml0IDFcblx0XHR0cD0yOyBobWk9MVxuXHRcdG5ld0NvbmZpZyA9IChuZXdDb25maWcgJiB+KDEgPDwgaG1pKSkgfCAoKChuID4+IHRwKSAmIDEpIDw8IGhtaSk7XG5cblxuXHR9IGVsc2Uge1xuXHRcdC8vIFRQIGJpdCA3ID0gSG1pIGJpdCAzXG5cdFx0dHA9NzsgaG1pPTNcblx0XHRuZXdDb25maWcgPSAobmV3Q29uZmlnICYgfigxIDw8IGhtaSkpIHwgKCgobiA+PiB0cCkgJiAxKSA8PCBobWkpO1xuXHRcdC8vIFRQIGJpdCA1ID0gSG1pIGJpdCA3XG5cdFx0dHA9NTsgaG1pPTdcblx0XHRuZXdDb25maWcgPSAobmV3Q29uZmlnICYgfigxIDw8IGhtaSkpIHwgKCgobiA+PiB0cCkgJiAxKSA8PCBobWkpO1xuXG5cdFx0Ly8gVFAgYml0IDMgPSBIbWkgYml0IDVcblx0XHR0cD0zOyBobWk9NVxuXHRcdG5ld0NvbmZpZyA9IChuZXdDb25maWcgJiB+KDEgPDwgaG1pKSkgfCAoKChuID4+IHRwKSAmIDEpIDw8IGhtaSk7XG5cdFx0Ly8gVFAgYml0IDQgPSBIbWkgYml0IDZcblx0XHR0cD00OyBobWk9NlxuXHRcdG5ld0NvbmZpZyA9IChuZXdDb25maWcgJiB+KDEgPDwgaG1pKSkgfCAoKChuID4+IHRwKSAmIDEpIDw8IGhtaSk7XG5cblx0fVxuXHQvLyBuIGF0IGluZGV4IDggaXMgdHJ1ZVxuXHQvLyBzZXQgYml0cyAyIGFuZCA0XG5cdGlmKChuID4+IDgpICYgMSl7XG5cdFx0bmV3Q29uZmlnID0gbmV3Q29uZmlnIHwgKDEgPDwgMiApIHwgKDEgPDwgNCkgfCAoMSA8PCA4KVxuXHR9XG5cdGlmKChuID4+IDApICYgMSl7XG5cdFx0bmV3Q29uZmlnID0gbmV3Q29uZmlnIHwgKDEgPDwgMCApXG5cdH1cblx0aWYoKG4gPj4gMSkgJiAxKXtcblx0XHRuZXdDb25maWcgPSBuZXdDb25maWcgfCAoMSA8PCAxIClcblx0fVxuXHQvLyBpZiBhbnkgb2YgYml0cyA3ICwgNiwgJiA1IGFyZSB0cnVlIHNldCBiaXQgOFxuXHRpZigoKG5ld0NvbmZpZyA+PiA3KSAmIDEpIHwgKChuZXdDb25maWcgPj4gNikgJiAxKSB8ICgobmV3Q29uZmlnID4+IDUpICYgMSkgKXtcblx0XHRuZXdDb25maWcgPSBuZXdDb25maWcgfCAoMSA8PCA4IClcblx0fVxuXHRyZXR1cm4gbmV3Q29uZmlnXG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHtcblx0dHlwZSBFbGVtZW50UmVmLFxuXHR0eXBlIFB1bXBDb21wb3VuZENvbnRleHRUeXBlLFxuXHR0eXBlIFB1bXBDb21wb3VuZFJvb3RQcm9wcyxcbn0gZnJvbSBcIi4uLy4uLy4uL2FwaS90eXBlc1wiO1xuaW1wb3J0IHsgdXNlQ3JlYXRlQ29udGV4dCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9jcmVhdGVDb250ZXh0XCI7XG5pbXBvcnQgSXRlbSBmcm9tIFwiLi4vdmFsdmUvaXRlbVwiO1xuaW1wb3J0IHtcblx0Z2V0SXRlbUlkUG9zaXRpb25DbGFzc05hbWUsXG5cdGdldFB1bXBJdGVtQ2xhc3NOYW1lLFxuXHRnZXRQdW1wU3RhdHVzQ2xhc3NOYW1lcyxcblx0cHVtcEl0ZW1OYW1lcyxcbn0gZnJvbSBcIi4uLy4uLy4uL2FwaS91dGlsc1wiO1xuaW1wb3J0IHsgcHVtcEluaXRpYWxQcm9wcyB9IGZyb20gXCIuLi8uLi8uLi9hcGkvaW5pdGlhbFN0YXRlXCI7XG5pbXBvcnQge1xuXHRITUlfQ09NUE9ORU5UX0NMQVNTLFxuXHRJQV9TWU1CT0xfQ09NUE9ORU5UX0NPTFVNTixcblx0SUFfU1lNQk9MX0NPTVBPTkVOVF9ST1csXG5cdElBX1NZTUJPTF9DT01QT05FTlRfV1JBUFBFUixcblx0UFVNUF9DT01QT05FTlRfVFlQRSxcbn0gZnJvbSBcIi4uLy4uLy4uL2NvbnN0YW50c1wiO1xuXG5leHBvcnQgY29uc3QgQ09NUE9ORU5UX1RZUEUgPSBQVU1QX0NPTVBPTkVOVF9UWVBFO1xuXG5leHBvcnQgY29uc3QgW1B1bXBDb250ZXh0UHJvdmlkZXIsIHVzZVB1bXBDb250ZXh0XSA9XG5cdHVzZUNyZWF0ZUNvbnRleHQ8UHVtcENvbXBvdW5kQ29udGV4dFR5cGU+KFwiUHVtcENvbXBvdW5kXCIpO1xuXG5jb25zdCBSb290ID0gKHtcblx0Y29tcG9uZW50UHJvcHMsXG5cdHB1bXBQcm9wcyxcblx0b25BY3Rpb25QZXJmb3JtZWQsXG5cdGNoaWxkcmVuLFxufTogUHVtcENvbXBvdW5kUm9vdFByb3BzKSA9PiB7XG5cdHJldHVybiAoXG5cdFx0PFB1bXBDb250ZXh0UHJvdmlkZXJcblx0XHRcdHsuLi57XG5cdFx0XHRcdHB1bXBQcm9wcyxcblx0XHRcdFx0Y29tcG9uZW50UHJvcHMsXG5cdFx0XHRcdG9uQWN0aW9uUGVyZm9ybWVkLFxuXHRcdFx0fX1cblx0XHQ+XG5cdFx0XHR7Y2hpbGRyZW59XG5cdFx0PC9QdW1wQ29udGV4dFByb3ZpZGVyPlxuXHQpO1xufTtcbmNvbnN0IHB1bXAgPSAoKSA9PiB7XG5cdGNvbnN0IHsgcHVtcFByb3BzLCBvbkFjdGlvblBlcmZvcm1lZCwgY29tcG9uZW50UHJvcHMgfSA9XG5cdFx0dXNlUHVtcENvbnRleHQoXCJWYWx2ZVwiKTtcblx0Y29uc3QgZWxSZWY6IEVsZW1lbnRSZWYgPSBSZWFjdC51c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xuXHRjb25zdCB7IGVtaXQgfSA9IGNvbXBvbmVudFByb3BzO1xuXHRjb25zdCB7IHByb2Nlc3NPYmplY3QsIHB1bXBUeXBlIH0gPSBwdW1wUHJvcHM7XG5cdGNvbnN0IHsgc3RhdHVzIH0gPSBwcm9jZXNzT2JqZWN0IHx8IHB1bXBJbml0aWFsUHJvcHM7XG5cblx0Ly8gaWYgbm90IGxvY2F0ZSwgdHJpbSBsYXN0IGl0ZW0gZnJvbSB2YWx2ZU1wSXRlbU5hbWVzXG5cdGNvbnN0IGNvbXBvbmVudEl0ZW1OYW1lcyA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuXHRcdGlmICghc3RhdHVzPy5sb2NhdGUpIHtcblx0XHRcdHJldHVybiBwdW1wSXRlbU5hbWVzLnNsaWNlKDAsIC0xKTtcblx0XHR9XG5cdFx0cmV0dXJuIHB1bXBJdGVtTmFtZXM7XG5cdH0sIFtzdGF0dXM/LmxvY2F0ZV0pO1xuXG5cdGNvbnN0IGNvbXBvbmVudENsYXNzTmFtZSA9IFwicHVtcFwiO1xuXG5cdHJldHVybiAoXG5cdFx0PGRpdlxuXHRcdFx0cmVmPXtlbFJlZn1cblx0XHRcdHsuLi5lbWl0KHtcblx0XHRcdFx0Y2xhc3NlczogW2Ake0lBX1NZTUJPTF9DT01QT05FTlRfQ09MVU1OfWBdLFxuXHRcdFx0fSl9XG5cdFx0XHRkYXRhLWNvbXBvbmVudD17Q09NUE9ORU5UX1RZUEV9XG5cdFx0XHRvbkNsaWNrPXtvbkFjdGlvblBlcmZvcm1lZH1cblx0XHQ+XG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT17YCR7SUFfU1lNQk9MX0NPTVBPTkVOVF9ST1d9YH0+XG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPXtgJHtJQV9TWU1CT0xfQ09NUE9ORU5UX1dSQVBQRVJ9YH0+XG5cdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9e2Ake0hNSV9DT01QT05FTlRfQ0xBU1N9ICR7Y29tcG9uZW50Q2xhc3NOYW1lfWB9PlxuXHRcdFx0XHRcdFx0PEl0ZW1cblx0XHRcdFx0XHRcdFx0aXRlbUNsYXNzTmFtZT17YCR7Z2V0UHVtcFN0YXR1c0NsYXNzTmFtZXMoXG5cdFx0XHRcdFx0XHRcdFx0XCJiYXNlLTEgc2hvd1wiLFxuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c1xuXHRcdFx0XHRcdFx0XHQpfWB9XG5cdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0PEl0ZW0gaXRlbUNsYXNzTmFtZT17XCJiYXNlLTIgc2hvdyBpdGVtXCJ9IC8+XG5cdFx0XHRcdFx0XHQ8SXRlbSBpdGVtQ2xhc3NOYW1lPXtcImJhc2UtMyBzaG93IGl0ZW1cIn0gLz5cblxuXHRcdFx0XHRcdFx0e2NvbXBvbmVudEl0ZW1OYW1lcy5tYXAoKHsgbmFtZSwgaW5kZXgsIGtleSB9KSA9PiAoXG5cdFx0XHRcdFx0XHRcdDxJdGVtXG5cdFx0XHRcdFx0XHRcdFx0aXRlbUNsYXNzTmFtZT17XG5cdFx0XHRcdFx0XHRcdFx0XHRuYW1lICtcblx0XHRcdFx0XHRcdFx0XHRcdFwiIFwiICtcblx0XHRcdFx0XHRcdFx0XHRcdGdldFB1bXBJdGVtQ2xhc3NOYW1lKGluZGV4LCBwdW1wVHlwZSB8fCBcImNlbnRyaWZ1Z2FsXCIsIHN0YXR1cylcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0a2V5PXtrZXl9XG5cdFx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0XHQpKX1cblx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblx0KTtcbn07XG5cbmNvbnN0IHBvcG92ZXIgPSAoeyBhbmNob3JFbCB9OiB7IGFuY2hvckVsOiBIVE1MRGl2RWxlbWVudCB8IG51bGwgfSkgPT4ge1xuXHRjb25zdCB7IHB1bXBQcm9wcywgY29tcG9uZW50UHJvcHMgfSA9IHVzZVB1bXBDb250ZXh0KFwiUG9wb3ZlclwiKTtcblx0Y29uc3QgeyBzaG93TGFiZWwsIGxhYmVsUG9zaXRpb24sIHByb2Nlc3NPYmplY3QgfSA9IHB1bXBQcm9wcztcblx0Y29uc3QgeyBzdGF0dXMgfSA9IHByb2Nlc3NPYmplY3QgfHwge307XG5cdGlmICghc2hvd0xhYmVsKSByZXR1cm4gbnVsbDtcblx0Y29uc3QgeyBwb3NpdGlvbiB9ID0gY29tcG9uZW50UHJvcHM7XG5cdGxldCBjbGFzc05hbWUgPSBcIml0ZW1JZCBwb3BvdmVyIHBvc2l0aW9uLWxlZnRcIjtcblx0aWYgKGxhYmVsUG9zaXRpb24pIHtcblx0XHRjbGFzc05hbWUgPSBnZXRJdGVtSWRQb3NpdGlvbkNsYXNzTmFtZShjbGFzc05hbWUsIGxhYmVsUG9zaXRpb24pO1xuXHR9XG5cdHJldHVybiAoXG5cdFx0PGRpdlxuXHRcdFx0Y2xhc3NOYW1lPXtjbGFzc05hbWV9XG5cdFx0XHRzdHlsZT17e1xuXHRcdFx0XHR0b3A6IHBvc2l0aW9uLnksXG5cdFx0XHRcdGxlZnQ6IHBvc2l0aW9uLngsXG5cdFx0XHR9fVxuXHRcdD5cblx0XHRcdDxkaXYgc3R5bGU9e3sgcGFkZGluZzogOCB9fT57c3RhdHVzPy5pdGVtTmFtZX08L2Rpdj5cblx0XHQ8L2Rpdj5cblx0KTtcbn07XG5cbmV4cG9ydCBjb25zdCBQdW1wQ29tcG91bmQgPSB7XG5cdFJvb3QsXG5cdHB1bXAsXG5cdHBvcG92ZXIsXG59O1xuIiwiLyoqXG4gKiBITUkgQ29tcG9uZW50IC0gSGVhdCBFeGNoYW5nZXIgLSBQbGF0ZSBVdGlsaXR5IGZ1bmN0aW9uc1xuICovXG5pbXBvcnQge3Y0IGFzIHV1aWR2NCB9IGZyb20gJ3V1aWQnO1xuaW1wb3J0IHsgSHhJdGVtTGlzdCwgdHlwZSBIZWF0RXhjaGFuZ2VyVHlwZXMsIHR5cGUgSHhNb2RlcyB9IGZyb20gJy4uLy4uLy4uL2FyLXR5cGVzL3Byb2Nlc3NPYmplY3RzL2hlYXRFeGNoYW5nZXJzL2h4LXR5cGVzJ1xuaW1wb3J0IHsgZ2V0Qm9vbEF0SW5kZXggfSBmcm9tICcuLi8uLi8uLi91dGlscy9udW1iZXJVdGlsJztcbmV4cG9ydCBjb25zdCBoeEl0ZW1OYW1lcyA9IEh4SXRlbUxpc3QubWFwKFxuXHQoa2V5LCBpbmRleCkgPT4ge1xuXHRcdC8vIGNvbnNvbGUubG9nKGBJbiBidWlsZCBJdGVtTmFtZXMgbmFtZSAke2tleX0gaW5kZXggJHtpbmRleH1gKTtcblx0XHRyZXR1cm4ge1xuXHRcdFx0a2V5OiB1dWlkdjQoKSxcblx0XHRcdG5hbWU6IGtleSxcblx0XHRcdGluZGV4OiBpbmRleCxcblx0XHR9O1xuXHR9XG4pO1xuXG5jb25zdCBnZXRIeENvbmZpZ3VyYXRpb24gPSAodHlwZTogSGVhdEV4Y2hhbmdlclR5cGVzKTpudW1iZXIgPT57XG5cdHN3aXRjaCAodHlwZSl7XG5cdFx0Y2FzZSBcInBsYXRlXCI6XG5cdFx0XHRyZXR1cm4gMVxuXHRcdGNhc2UgXCJ0dWJlbGFyXCI6XG5cdFx0XHRyZXR1cm4gMVxuXHRcdGRlZmF1bHQ6XG5cdFx0XHR0aHJvdyBFcnJvcihgSW4gZ2V0UHVtcENvbmZpZ3VyYXRpb24oKSBwdW1wIHR5cGU6ICR7dHlwZX0gbm90IGZvdW5kYClcblx0fVxufVxuXG5cbmV4cG9ydCBjb25zdCBnZXRIeEl0ZW1DbGFzc05hbWUgPSAoXG5cdGluZGV4OiBudW1iZXIsXG5cdHR5cGU6IEhlYXRFeGNoYW5nZXJUeXBlcyxcblx0bW9kZT86IEh4TW9kZXNba2V5b2YgSHhNb2Rlc10sXG5cdCk6IHN0cmluZyA9PiB7XG5cdGNvbnN0IGNvbmZpZ3VyYXRpb24gPSBnZXRIeENvbmZpZ3VyYXRpb24odHlwZSlcblx0bGV0IGNsYXNzTmFtZSA9IFwiXCI7XG5cdC8vIEhhbmRsZSB0aGUgZmFjdCB0aGF0IEFjdGl2YXRlZENvbmZpZyBhbmQgRGVhY3RpdmF0ZWRDb25maWcgYXJlIG9wdGlvbmFsIGFuZCBtYXliZSB1bmRlZmluZWRcblx0aWYgKGluZGV4IDwgMikge1xuXHRcdGlmIChnZXRCb29sQXRJbmRleChjb25maWd1cmF0aW9uLCBpbmRleCkpIHtcblx0XHRcdGNsYXNzTmFtZSA9IGBzaG93IGl0ZW0gJHt0eXBlfWA7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNsYXNzTmFtZSA9IFwiaGlkZSBpdGVtXCI7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBjbGFzc05hbWU7XG59XG5leHBvcnQgY29uc3QgZ2V0SHhNb2RlQ2xhc3NOYW1lcyA9IChjbGFzc05hbWU6IHN0cmluZywgbW9kZTogSHhNb2Rlc1trZXlvZiBIeE1vZGVzXSk9Pntcblx0Ly8gQWRkaXRpb25zIHRvIHRoZSBjbGFzc05hbWVcblxuXHRpZiAoY2xhc3NOYW1lLmluY2x1ZGVzKFwic2hvd1wiKSAmJiAhY2xhc3NOYW1lLmluY2x1ZGVzKFwiaXRlbVwiKSkge1xuXG5cdFx0c3dpdGNoIChtb2RlKSB7XG5cdFx0XHRjYXNlIFwiYWxhcm1cIjpcblx0XHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lLnJlcGxhY2UoXCJBbGFybVN0YXRlXCIsIFwiXCIpICsgXCIgQWxhcm1TdGF0ZVwiO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJoZWF0aW5nXCI6XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwiaGVhdGluZ1wiLCBcIlwiKSArIFwiIGhlYXRpbmdcIjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwiY29vbGluZ1wiOlxuXHRcdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcImNvb2xpbmdcIiwgXCJcIikgKyBcIiBjb29saW5nXCI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRyZXR1cm4gY2xhc3NOYW1lO1xufTtcblxuZXhwb3J0IGNvbnN0IGJ1aWxkQ29tcG9uZW50RWxlbWVudHMgPSAoXG5cdGJhc2VFbGVtZW50czogbnVtYmVyLFxuXHRkeW5hbWljRWxlbWVudHM6IG51bWJlclxuKSA9PiB7XG5cdGxldCB2YWx1ZT1bXTtcblx0Zm9yIChsZXQgaT0wOyBpPCBiYXNlRWxlbWVudHMrZHluYW1pY0VsZW1lbnRzOyBpKyspe1xuXHRcdGxldCBpdGVtID0ge1xuXHRcdFx0a2V5OiB1dWlkdjQoKSxcblx0XHRcdG5hbWU6IGkgPCBiYXNlRWxlbWVudHMgPyBgYmFzZS0ke2krMX1gIDogYGR5bmFtaWMtJHtpKygxLWR5bmFtaWNFbGVtZW50cyl9YCxcblx0XHRcdGluZGV4OiBpXG5cdFx0fTtcblx0XHR2YWx1ZS5wdXNoKGl0ZW0pO1xuXHR9XG5cdGxldCBpdGVtID0ge1xuXHRcdGtleTogdXVpZHY0KCksXG5cdFx0bmFtZTogXCJsb2NhdGVcIixcblx0XHRpbmRleDogYmFzZUVsZW1lbnRzK2R5bmFtaWNFbGVtZW50c1xuXHR9O1xuXHQvLyBsb2NhdGUgYWx3YXlzIGxhc3QgZWxlbWVudFxuXHR2YWx1ZS5wdXNoKGl0ZW0pXG5cdHJldHVybiB2YWx1ZVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHQgPSAnMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwJztcbiIsImltcG9ydCB7IGNvbnZlcnRUUFZhbHZlQ29uZmlnVG9IbWlWYWx2ZUNvbmZpZywgZ2V0Qm9vbEF0SW5kZXggfSBmcm9tIFwiLi4vdXRpbHMvbnVtYmVyVXRpbFwiO1xuaW1wb3J0IHtcblx0SXRlbUlkUG9zaXRpb25UeXBlLFxuXHQvLyBJdGVtTmFtZUVudW0sXG5cdHB1bXBJdGVtTGlzdCxcblx0dmFsdmVNcEl0ZW1OYW1lRW51bSxcblx0dHlwZSBQdW1wU3RhdGUsXG5cdHR5cGUgUHVtcFR5cGUsXG5cdHR5cGUgU3RhdHVzTGlrZSxcblx0dHlwZSBWYWx2ZVN0YXRlLFxufSBmcm9tIFwiLi4vYXBpL3R5cGVzXCI7XG5pbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tIFwidXVpZFwiO1xuLyoqXG4gKiBUaGlzIGlzIGEgdXRpbGl0eSBmdW5jdGlvbiBmb3IgdGhlIGNvbXBvbmVudCBcInByb2Nlc3Mtb2JqZWN0L1ZhbHZlRkNcIlxuICpcbiAqIEBwYXJhbSBpbmRleDogbnVtYmVyIHRoZSBpbmRleCBvZiBhbiBkeW5hbWljIHZpc3VhbCBlbGVtZW50IFwiaXRlbVwiIHdpdGhpbiB0aGUgVmFsdmUgY29tcG9uZW50XG4gKiBAcGFyYW0gdmFsdmVTdGF0dXM/OlZhbHZlU3RhdHVzIHRoZSBzdGF0dXMgcmVwcmVzZW50aW5nIHBoeXNpY2FsIHByb2Nlc3MgdmFsdmVcbiAqIEByZXR1cm5zIGNsYXNzTmFtZTpzdHJpbmcgcmV0dXJucyBhZGRpdGlvbmFsIGNsYXNzbmFtZXMgZm9yIGFuIHZpc3VhbCBlbGVtZW50IG9mIHRoZSB2YWx2ZSBjb21wb25lbnQuXG4gKlxuICogUmV0dXJuZWQgY2xhc3NuYW1lcyBhcmU7XG4gKiBcdGhpZGUgLSB0aGlzIGhpZGVzIHRoZSBpdGVtXG4gKiBcdHNob3cgLVxuICovXG5cbmV4cG9ydCBjb25zdCBnZXRWYWx2ZU1wSXRlbUNsYXNzTmFtZSA9IChcblx0aW5kZXg6IG51bWJlcixcblx0dmFsdmVTdGF0dXM/OiBWYWx2ZVN0YXRlXG4pOiBzdHJpbmcgPT4ge1xuXHRsZXQgY2xhc3NOYW1lID0gXCJcIjtcblx0Ly8gSGFuZGxlIHRoZSBmYWN0IHRoYXQgQWN0aXZhdGVkQ29uZmlnIGFuZCBEZWFjdGl2YXRlZENvbmZpZyBhcmUgb3B0aW9uYWwgYW5kIG1heWJlIHVuZGVmaW5lZFxuXHRjb25zdCBBY3RpdmF0ZWRDb25maWdWYWx1ZSA9IGNvbnZlcnRUUFZhbHZlQ29uZmlnVG9IbWlWYWx2ZUNvbmZpZyh2YWx2ZVN0YXR1cz8uYWN0aXZhdGVkQ29uZmlnID8/IDApO1xuXHRjb25zdCBEZWFjdGl2YXRlZENvbmZpZ1ZhbHVlID0gY29udmVydFRQVmFsdmVDb25maWdUb0htaVZhbHZlQ29uZmlnKHZhbHZlU3RhdHVzPy5kZWFjdGl2YXRlZENvbmZpZyA/PyAwKTtcblxuXHRjb25zb2xlLmxvZyhgRGVhY3RpdmF0ZWRDb25maWdWYWx1ZTogJHtEZWFjdGl2YXRlZENvbmZpZ1ZhbHVlfWApO1xuXG5cdGlmIChpbmRleCA8IDgpIHtcblx0XHRpZiAoXG5cdFx0XHQoZ2V0Qm9vbEF0SW5kZXgoQWN0aXZhdGVkQ29uZmlnVmFsdWUsIGluZGV4KSAmJiB2YWx2ZVN0YXR1cz8uYWN0RkIpIHx8XG5cdFx0XHQoZ2V0Qm9vbEF0SW5kZXgoRGVhY3RpdmF0ZWRDb25maWdWYWx1ZSwgaW5kZXgpICYmIHZhbHZlU3RhdHVzPy5kZUFjdEZCKVxuXHRcdCkge1xuXHRcdFx0Y2xhc3NOYW1lID0gXCJzaG93IGl0ZW1cIjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y2xhc3NOYW1lID0gXCJoaWRlIGl0ZW1cIjtcblx0XHR9XG5cdH0gZWxzZSBpZiAoaW5kZXggPT09IDkpIHtcblx0XHRjbGFzc05hbWUgPSBcInNob3dcIjtcblx0fSBlbHNlIGlmIChpbmRleCA9PT0gOCkge1xuXHRcdGlmIChcblx0XHRcdGdldEJvb2xBdEluZGV4KEFjdGl2YXRlZENvbmZpZ1ZhbHVlLCBpbmRleCkgfHxcblx0XHRcdGdldEJvb2xBdEluZGV4KERlYWN0aXZhdGVkQ29uZmlnVmFsdWUsIGluZGV4KVxuXHRcdCkge1xuXHRcdFx0Y2xhc3NOYW1lID0gXCJzaG93XCI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNsYXNzTmFtZSA9IFwiaGlkZVwiO1xuXHRcdH1cblx0fSBlbHNlIGlmIChpbmRleCA9PT0gMTApIHtcblx0XHRpZiAoXG5cdFx0XHRnZXRCb29sQXRJbmRleChBY3RpdmF0ZWRDb25maWdWYWx1ZSwgMTApIHx8XG5cdFx0XHRnZXRCb29sQXRJbmRleChEZWFjdGl2YXRlZENvbmZpZ1ZhbHVlLCAxMClcblx0XHQpIHtcblx0XHRcdGNsYXNzTmFtZSA9IFwic2hvdyBpdGVtXCI7XG5cdFx0XHRpZiAodmFsdmVTdGF0dXM/LnVzbCkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcImFjdGl2YXRlZFwiLCBcIlwiKSArIFwiIGFjdGl2YXRlZFwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lLnJlcGxhY2UoXCJkZWFjdGl2YXRlZFwiLCBcIlwiKSArIFwiIGRlYWN0aXZhdGVkXCI7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNsYXNzTmFtZSA9IFwiaGlkZSBpdGVtXCI7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKGluZGV4ID09PSAxMSkge1xuXHRcdGlmIChcblx0XHRcdGdldEJvb2xBdEluZGV4KEFjdGl2YXRlZENvbmZpZ1ZhbHVlLCAxMSkgfHxcblx0XHRcdGdldEJvb2xBdEluZGV4KERlYWN0aXZhdGVkQ29uZmlnVmFsdWUsIDExKVxuXHRcdCkge1xuXHRcdFx0Y2xhc3NOYW1lID0gXCJzaG93IGl0ZW1cIjtcblx0XHRcdGlmICh2YWx2ZVN0YXR1cz8ubHNsKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwiYWN0aXZhdGVkXCIsIFwiXCIpICsgXCIgYWN0aXZhdGVkXCI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcImRlYWN0aXZhdGVkXCIsIFwiXCIpICsgXCIgZGVhY3RpdmF0ZWRcIjtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y2xhc3NOYW1lID0gXCJoaWRlIGl0ZW1cIjtcblx0XHR9XG5cdH0gZWxzZSBpZiAoaW5kZXggPT09IDEyKSB7XG5cdFx0aWYgKHZhbHZlU3RhdHVzPy5sb2NhdGUpIHtcblx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwic21hbGxcIiwgXCJcIikgKyBcIiBzbWFsbFwiO1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRnZXRCb29sQXRJbmRleChBY3RpdmF0ZWRDb25maWdWYWx1ZSwgOCkgfHxcblx0XHRcdFx0Z2V0Qm9vbEF0SW5kZXgoRGVhY3RpdmF0ZWRDb25maWdWYWx1ZSwgOClcblx0XHRcdCkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcImxhcmdlXCIsIFwiXCIpICsgXCIgbGFyZ2VcIjtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lLnJlcGxhY2UoXCJoaWRlIGl0ZW1cIiwgXCJcIikgKyBcIiBoaWRlIGl0ZW1cIjtcblx0XHR9XG5cdH1cblx0Ly8gQWRkaXRpb25zIHRvIHRoZSBjbGFzc05hbWVcblxuXHRpZiAoY2xhc3NOYW1lLmluY2x1ZGVzKFwic2hvd1wiKSAmJiAhY2xhc3NOYW1lLmluY2x1ZGVzKFwiaXRlbVwiKSkge1xuXHRcdC8vIGNvbnNvbGUubG9nKFwiaW5kZXhcIiwgaW5kZXgsIGNsYXNzTmFtZSk7XG5cdFx0aWYgKHZhbHZlU3RhdHVzPy5hbGFybSkge1xuXHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lLnJlcGxhY2UoXCJhbGFybVwiLCBcIlwiKSArIFwiIGFsYXJtXCI7XG5cdFx0fVxuXHRcdGlmICh2YWx2ZVN0YXR1cz8uY2hhbmdpbmcpIHtcblx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwiY2hhbmdpbmdcIiwgXCJcIikgKyBcIiBjaGFuZ2luZ1wiO1xuXHRcdH1cblx0XHRpZiAodmFsdmVTdGF0dXM/Lm1hbnVhbCkge1xuXHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lLnJlcGxhY2UoXCJtYW51YWxcIiwgXCJcIikgKyBcIiBtYW51YWxcIjtcblx0XHR9XG5cdFx0aWYgKHZhbHZlU3RhdHVzPy5tYXNrZWQgJiYgIXZhbHZlU3RhdHVzLmFsYXJtKSB7XG5cdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcIm5vLWFsYXJtLW1hc2tcIiwgXCJcIikgKyBcIiBuby1hbGFybS1tYXNrXCI7XG5cdFx0fVxuXHRcdGlmICh2YWx2ZVN0YXR1cz8ubWFza2VkKSB7XG5cdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcIm1hc2tlZFwiLCBcIlwiKSArIFwiIG1hc2tlZFwiO1xuXHRcdH1cblx0XHRpZiAodmFsdmVTdGF0dXM/LmFjdEZCKSB7XG5cdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcImFjdGl2YXRlZFwiLCBcIlwiKSArIFwiIGFjdGl2YXRlZFwiO1xuXHRcdH1cblx0XHRpZiAodmFsdmVTdGF0dXM/LmRlQWN0RkIpIHtcblx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwiZGVhY3RpdmF0ZWRcIiwgXCJcIikgKyBcIiBkZWFjdGl2YXRlZFwiO1xuXHRcdH1cblx0fVxuXHQvLyBjb25zb2xlLmxvZyhcImluZGV4XCIsIGluZGV4LCBjbGFzc05hbWUpO1xuXG5cdHJldHVybiBjbGFzc05hbWU7IC8vIGRlZmF1bHQgcmV0dXJuIHZhbHVlIGlmIG5vIG90aGVyIGNvbmRpdGlvbiBpcyBtZXRcbn07XG4vKipcbiAqIEZ1bmN0aW9uIGdldENsYXNzTmFtZVdpdGhTdGF0dXMuXG4gKiBUaGlzIGlzIGEgdXRpbGl0eSBmdW5jdGlvbiB3aGljaCBnZW5lcmF0ZXMgY3NzIGNsYXNzTmFtZXMgZm9yIGVhY2hcbiAqIGVsZW1lbnQgaW4gYSBobWktY29tcG9uZW50IHN5bWJvbC5cbiAqIEluIHRoZSBET00gdHJlZSBiYXNlIGVsZW1lbnRzIHdpbGwgaGF2ZSBhIGNsYXNzIHN1Y2ggYXMgXCJiYXNlLTEgdG8gblwiXG4gKiB3aXRoIGR5bmFtaWNJdGVtcyBoYXZpbmcgYSBjbGFzcyBzdWNoIGFzIFwiZHluYW1pYy0xIHRvIG5cIlxuICogQHBhcmFtIGluZGV4OiBudW1iZXIgOiBBcnJheSBpbmRleCBzdGFydGluZyBhdCB6ZXJvXG4gKiBAcGFyYW0gc3RhdHVzOiBTIDogQSBTdGF0dXNMaWtlIG9iamVjdFxuICogQHBhcmFtIHR5cGU6IHN0cmluZzpcbiAqIEBwYXJhbSBiYXNlRWxlbWVudHM6IG51bWJlciA6XG4gKiBAcGFyYW0gYmFzZUNvbmZpZzogbnVtYmVyIDpcbiAqIEBwYXJhbSBkeW5hbWljSXRlbXM6IG51bWJlciA6XG4gKiBAcGFyYW0gZHluYW1pY0NvbmZpZzogbnVtYmVyIDpcbiAqZWxlbWVudFZhcmlhbnRzID0gW1xuIFx0e1xuIFx0c3RhdHVzS2V5OiBzdHJpbmcsXG4gXHRhZGRpdGlvbmFsQ2xhc3M6IHN0cmluZ1xuXHR9XG4gXVxuICovXG5leHBvcnQgdHlwZSBFbGVtZW50VmFyaWFudCA9IHtcblx0c3RhdHVzS2V5PzogSG1pU3RhdHVzO1xuXHRhZGRpdGlvbmFsQ2xhc3M/OiBzdHJpbmc7XG5cdGJhc2VDbGFzcz86IHN0cmluZztcbn07XG5leHBvcnQgdHlwZSBFbGVtZW50VmFyaWFudExpc3QgPSBFbGVtZW50VmFyaWFudFtdO1xuZXhwb3J0IHR5cGUgYm9vbFN0cmluZyA9IHtcblx0dHJ1ZVN0cmluZz86IHN0cmluZztcblx0ZmFsc2VTdHJpbmc/OiBzdHJpbmc7XG59XG5leHBvcnQgdHlwZSBIbWlTdGF0dXMgPSB7XG5cdGFsYXJtPzogYm9vbFN0cmluZztcblx0YWN0RkI/OiBib29sU3RyaW5nO1xuXHRkZUFjdEZCPzogYm9vbFN0cmluZztcblx0bWFudWFsPzogYm9vbFN0cmluZztcblx0bWFza2VkPzogYm9vbFN0cmluZztcblx0Y2hhbmdpbmc/OiBib29sU3RyaW5nO1xuXHRsb2NhdGU/OiBib29sU3RyaW5nO1xuXHRhY3RpdmF0ZWQ/OiBib29sU3RyaW5nO1xuXHR1c2w/OiBib29sU3RyaW5nO1xuXHRsc2w/OiBib29sU3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgZ2V0Q2xhc3NOYW1lV2l0aFN0YXR1cyA9IDxTIGV4dGVuZHMgU3RhdHVzTGlrZT4oXG5cdGluZGV4OiBudW1iZXIsXG5cdHN0YXR1cz86IFMsXG5cdGVsZW1lbnRWYXJpYW50cz86IEVsZW1lbnRWYXJpYW50TGlzdCxcblx0YmFzZUNsYXNzTmFtZT86IHN0cmluZyxcblx0YmFzZUVsZW1lbnRzPzogbnVtYmVyLFxuXHRiYXNlQ29uZmlnPzogbnVtYmVyLFxuXHRkeW5hbWljSXRlbXM/OiBudW1iZXIsXG5cdGR5bmFtaWNDb25maWc/OiBudW1iZXJcbik6IHN0cmluZyA9PiB7XG5cdGxldCBjbGFzc05hbWUgPSBcIlwiO1xuXHRsZXQgYWRkaXRpb25hbENsYXNzID0gXCJcIjtcblxuXG5pZiAoZWxlbWVudFZhcmlhbnRzICYmIGVsZW1lbnRWYXJpYW50c1tpbmRleF0/LnN0YXR1c0tleSAmJiBzdGF0dXMpIHtcbiAgY29uc3Qgc3RhdHVzS2V5T2JqID0gZWxlbWVudFZhcmlhbnRzW2luZGV4XS5zdGF0dXNLZXk7XG4gIC8vIEdldCBrZXlzIGZyb20gc3RhdHVzS2V5T2JqIHRoYXQgYXJlIGFsc28gaW4gc3RhdHVzXG4gIGNvbnN0IG1hdGNoaW5nS2V5cyA9IE9iamVjdC5rZXlzKHN0YXR1c0tleU9iaikuZmlsdGVyKFxuICAgIChrZXkpID0+IGtleSBpbiBzdGF0dXNcbiAgKSBhcyAoa2V5b2YgdHlwZW9mIHN0YXR1c0tleU9iaiAmIGtleW9mIHR5cGVvZiBzdGF0dXMpW107XG5cbiAgZm9yIChjb25zdCBrZXkgb2YgbWF0Y2hpbmdLZXlzKSB7XG4gICAgLy8gTm93IHlvdSBjYW4gc2FmZWx5IGFjY2VzcyBib3RoIHN0YXR1c0tleU9ialtrZXldIGFuZCBzdGF0dXNba2V5XVxuICAgIGNvbnN0IGtleVN0YXR1c1ZhbHVlID0gc3RhdHVzS2V5T2JqW2tleV07XG4gICAgY29uc3Qgc3RhdHVzVmFsdWUgPSBzdGF0dXNba2V5XTtcbiAgICBpZiAoc3RhdHVzVmFsdWUpe1xuXHRcdGFkZGl0aW9uYWxDbGFzcyArPSBgICR7a2V5U3RhdHVzVmFsdWU/LnRydWVTdHJpbmcgPyBrZXlTdGF0dXNWYWx1ZS50cnVlU3RyaW5nIDogXCJcIn1gXG5cdH1lbHNle1xuXHRcdGFkZGl0aW9uYWxDbGFzcyArPSBgICR7a2V5U3RhdHVzVmFsdWU/LmZhbHNlU3RyaW5nID8ga2V5U3RhdHVzVmFsdWUuZmFsc2VTdHJpbmcgOiBcIlwifWBcblx0fVxuICB9XG59XG5cdC8vIEJhc2UgRWxlbWVudHNcblx0aWYgKGJhc2VFbGVtZW50cyAmJiBiYXNlQ29uZmlnKSB7XG5cdFx0aWYgKGluZGV4IDwgYmFzZUVsZW1lbnRzKSB7XG5cdFx0XHRsZXQgaXRlbVN0cmluZyA9IGluZGV4ID4gMCA/IFwiaXRlbVwiIDpgJHtiYXNlQ2xhc3NOYW1lfWA7XG5cdFx0XHRpZiAoZ2V0Qm9vbEF0SW5kZXgoYmFzZUNvbmZpZywgaW5kZXgpKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGBzaG93ICR7aXRlbVN0cmluZ30gJHthZGRpdGlvbmFsQ2xhc3N9YDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGBoaWRlICR7aXRlbVN0cmluZ31gO1xuXHRcdFx0fVxuXHRcdH1cblx0XHQvLyBEeW5hbWljIEl0ZW1zXG5cdFx0aWYgKGR5bmFtaWNJdGVtcyAmJiBkeW5hbWljQ29uZmlnKSB7XG5cdFx0XHRsZXQgZHluYW1JbmRleCA9IGluZGV4IC0gYmFzZUVsZW1lbnRzO1xuXHRcdFx0aWYgKGluZGV4ID49IGJhc2VFbGVtZW50cyAmJiBpbmRleCA8IGJhc2VFbGVtZW50cyArIGR5bmFtaWNJdGVtcykge1xuXHRcdFx0XHRpZiAoZ2V0Qm9vbEF0SW5kZXgoZHluYW1pY0NvbmZpZywgZHluYW1JbmRleCkpIHtcblx0XHRcdFx0XHRjbGFzc05hbWUgPSBgc2hvdyBpdGVtYDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjbGFzc05hbWUgPSBgaGlkZSBpdGVtYDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gY2xhc3NOYW1lXG59O1xuLyoqXG4gKiBAcmV0dXJucyBBcnJheSBvZiBpdGVtTmFtZShzKSBmb3IgZWFjaCB2aXN1YWwgZWxlbWVudCBvZiBhIHZhbHZlIGNvbXBvbmVudFxuICovXG4vLyBleHBvcnQgY29uc3QgaXRlbU5hbWVzID0gT2JqZWN0LmVudHJpZXMoSXRlbU5hbWVFbnVtKS5tYXAoKGtleSwgaW5kZXgpID0+IHtcbi8vIFx0cmV0dXJuIHtcbi8vIFx0XHRrZXk6IHV1aWR2NCgpLFxuLy8gXHRcdG5hbWU6IGtleSxcbi8vIFx0XHR2YWx1ZToga2V5WzFdLFxuLy8gXHRcdGluZGV4OiBpbmRleCxcbi8vIFx0fTtcbi8vIH0pO1xuZXhwb3J0IGNvbnN0IHZhbHZlTXBJdGVtTmFtZXMgPSBPYmplY3QuZW50cmllcyh2YWx2ZU1wSXRlbU5hbWVFbnVtKS5tYXAoXG5cdChrZXksIGluZGV4KSA9PiB7XG5cdFx0Ly8gY29uc29sZS5sb2coYEluIGJ1aWxkIEl0ZW1OYW1lcyBuYW1lICR7a2V5fSBpbmRleCAke2luZGV4fWApO1xuXHRcdHJldHVybiB7XG5cdFx0XHRrZXk6IHV1aWR2NCgpLFxuXHRcdFx0bmFtZToga2V5LFxuXHRcdFx0dmFsdWU6IGtleVsxXSxcblx0XHRcdGluZGV4OiBpbmRleCxcblx0XHR9O1xuXHR9XG4pO1xuXG5cblxuZXhwb3J0IGNvbnN0IGdldEl0ZW1JZFBvc2l0aW9uQ2xhc3NOYW1lID0gKFxuXHRjbGFzc05hbWU6IHN0cmluZyxcblx0aXRlbUlkUG9zaXRpb246IEl0ZW1JZFBvc2l0aW9uVHlwZVxuKTogSXRlbUlkUG9zaXRpb25UeXBlID0+IHtcblx0Ly8gQ2hlY2sgY2xhc3NOYW1lIGluY2x1ZGVzICdpdGVtSWQgcG9wb3ZlcicsIGlmIG5vdCByZXR1cm4gY2xhc3NOYW1lIGFuZCB3YXJuXG5cdGlmICghY2xhc3NOYW1lLmluY2x1ZGVzKFwiaXRlbUlkIHBvcG92ZXJcIikpIHtcblx0XHRjb25zb2xlLndhcm4oXG5cdFx0XHRcIkZ1bmN0aW9uIGdldEl0ZW1JZFBvc2l0aW9uQ2xhc3NOYW1lIGNhbGxlZCB3aGVuICdpdGVtSWQgcG9wb3Zlcicgbm90IGluIGdpdmVuIGNsYXNzTmFtZVwiXG5cdFx0KTtcblx0XHRyZXR1cm4gY2xhc3NOYW1lO1xuXHR9XG5cdC8vIE92ZXIgd3JpdGUgZ2l2ZW4gY2xhc3NOYW1lXG5cdGNsYXNzTmFtZSA9IFwiaXRlbUlkIHBvcG92ZXJcIjtcblx0c3dpdGNoIChpdGVtSWRQb3NpdGlvbikge1xuXHRcdGNhc2UgXCJsZWZ0XCI6XG5cdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcInBvc2l0aW9uLWxlZnRcIiwgXCJcIikgKyBcIiBwb3NpdGlvbi1sZWZ0XCI7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwicmlnaHRcIjpcblx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwicG9zaXRpb24tcmlnaHRcIiwgXCJcIikgKyBcIiBwb3NpdGlvbi1yaWdodFwiO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBcInRvcC1sZWZ0XCI6XG5cdFx0XHRjbGFzc05hbWUgPVxuXHRcdFx0XHRjbGFzc05hbWUucmVwbGFjZShcInBvc2l0aW9uLXRvcC1sZWZ0XCIsIFwiXCIpICsgXCIgcG9zaXRpb24tdG9wLWxlZnRcIjtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJ0b3AtcmlnaHRcIjpcblx0XHRcdGNsYXNzTmFtZSA9XG5cdFx0XHRcdGNsYXNzTmFtZS5yZXBsYWNlKFwicG9zaXRpb24tdG9wLXJpZ2h0XCIsIFwiXCIpICsgXCIgcG9zaXRpb24tdG9wLXJpZ2h0XCI7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwiYm90dG9tLWxlZnRcIjpcblx0XHRcdGNsYXNzTmFtZSA9XG5cdFx0XHRcdGNsYXNzTmFtZS5yZXBsYWNlKFwicG9zaXRpb24tYm90dG9tLWxlZnRcIiwgXCJcIikgKyBcIiBwb3NpdGlvbi1ib3R0b20tbGVmdFwiO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBcImJvdHRvbS1yaWdodFwiOlxuXHRcdFx0Y2xhc3NOYW1lID1cblx0XHRcdFx0Y2xhc3NOYW1lLnJlcGxhY2UoXCJwb3NpdGlvbi1ib3R0b20tcmlnaHRcIiwgXCJcIikgK1xuXHRcdFx0XHRcIiBwb3NpdGlvbi1ib3R0b20tcmlnaHRcIjtcblx0XHRcdGJyZWFrO1xuXG5cdFx0ZGVmYXVsdDpcblx0XHRcdGJyZWFrO1xuXHR9XG5cblx0cmV0dXJuIGNsYXNzTmFtZTtcbn07XG5cbmV4cG9ydCBjb25zdCBwdW1wSXRlbU5hbWVzID0gcHVtcEl0ZW1MaXN0Lm1hcCgoa2V5LCBpbmRleCkgPT4ge1xuXHQvLyBjb25zb2xlLmxvZyhgSW4gYnVpbGQgSXRlbU5hbWVzIG5hbWUgJHtrZXl9IGluZGV4ICR7aW5kZXh9YCk7XG5cdHJldHVybiB7XG5cdFx0a2V5OiB1dWlkdjQoKSxcblx0XHRuYW1lOiBrZXksXG5cdFx0aW5kZXg6IGluZGV4LFxuXHR9O1xufSk7XG5jb25zdCBnZXRQdW1wQ29uZmlndXJhdGlvbiA9IChwdW1wVHlwZTogUHVtcFR5cGUpOiBudW1iZXIgPT4ge1xuXHRzd2l0Y2ggKHB1bXBUeXBlKSB7XG5cdFx0Y2FzZSBcImNlbnRyaWZ1Z2FsXCI6XG5cdFx0XHRyZXR1cm4gMTtcblx0XHRjYXNlIFwiZGlhcGhyYWdtXCI6XG5cdFx0XHRyZXR1cm4gMTtcblx0XHRjYXNlIFwicG9zaXRpdmUtZGlzcGxhY2VtZW50XCI6XG5cdFx0XHRyZXR1cm4gMTtcblx0XHRjYXNlIFwicHJvZ3Jlc3NpdmUtY2F2aXR5XCI6XG5cdFx0XHRyZXR1cm4gMTtcblx0XHRjYXNlIFwiZ2VhclwiOlxuXHRcdFx0cmV0dXJuIDM7XG5cdFx0Y2FzZSBcImxpcXVpZC1yaW5nXCI6XG5cdFx0XHRyZXR1cm4gMztcblx0XHRjYXNlIFwicG9zaXRpdmUtc2NyZXdcIjpcblx0XHRcdHJldHVybiAzO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHR0aHJvdyBFcnJvcihgSW4gZ2V0UHVtcENvbmZpZ3VyYXRpb24oKSBwdW1wIHR5cGU6ICR7cHVtcFR5cGV9IG5vdCBmb3VuZGApO1xuXHR9XG59O1xuZXhwb3J0IGNvbnN0IGdldFB1bXBJdGVtQ2xhc3NOYW1lID0gKFxuXHRpbmRleDogbnVtYmVyLFxuXHRwdW1wVHlwZTogUHVtcFR5cGUsXG5cdHN0YXR1cz86IFB1bXBTdGF0ZVxuKTogc3RyaW5nID0+IHtcblx0Y29uc3QgY29uZmlndXJhdGlvbiA9IGdldFB1bXBDb25maWd1cmF0aW9uKHB1bXBUeXBlKTtcblx0bGV0IGNsYXNzTmFtZSA9IFwiXCI7XG5cdC8vIEhhbmRsZSB0aGUgZmFjdCB0aGF0IEFjdGl2YXRlZENvbmZpZyBhbmQgRGVhY3RpdmF0ZWRDb25maWcgYXJlIG9wdGlvbmFsIGFuZCBtYXliZSB1bmRlZmluZWRcblx0aWYgKGluZGV4IDwgMikge1xuXHRcdGlmIChnZXRCb29sQXRJbmRleChjb25maWd1cmF0aW9uLCBpbmRleCkpIHtcblx0XHRcdGNsYXNzTmFtZSA9IGBzaG93IGl0ZW0gJHtwdW1wVHlwZX1gO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjbGFzc05hbWUgPSBcImhpZGUgaXRlbVwiO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gY2xhc3NOYW1lO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFB1bXBTdGF0dXNDbGFzc05hbWVzID0gKFxuXHRjbGFzc05hbWU6IHN0cmluZyxcblx0c3RhdHVzOiBQdW1wU3RhdGVcbikgPT4ge1xuXHQvLyBBZGRpdGlvbnMgdG8gdGhlIGNsYXNzTmFtZVxuXHQvLyBjb25zb2xlLmxvZyhgc3RhdHVzOiAke0pTT04uc3RyaW5naWZ5KHN0YXR1cyxudWxsLCAyKX1gKTtcblxuXHRpZiAoY2xhc3NOYW1lLmluY2x1ZGVzKFwic2hvd1wiKSAmJiAhY2xhc3NOYW1lLmluY2x1ZGVzKFwiaXRlbVwiKSkge1xuXHRcdGlmIChzdGF0dXM/LmFsYXJtKSB7XG5cdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcImFsYXJtXCIsIFwiXCIpICsgXCIgYWxhcm1cIjtcblx0XHR9XG5cdFx0aWYgKHN0YXR1cz8uY2hhbmdpbmcpIHtcblx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwiY2hhbmdpbmdcIiwgXCJcIikgKyBcIiBjaGFuZ2luZ1wiO1xuXHRcdH1cblx0XHRpZiAoc3RhdHVzPy5tYW51YWwpIHtcblx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwibWFudWFsXCIsIFwiXCIpICsgXCIgbWFudWFsXCI7XG5cdFx0fVxuXHRcdGlmIChzdGF0dXM/Lm1hc2tlZCAmJiAhc3RhdHVzLmFsYXJtKSB7XG5cdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcIm5vLWFsYXJtLW1hc2tcIiwgXCJcIikgKyBcIiBuby1hbGFybS1tYXNrXCI7XG5cdFx0fVxuXHRcdGlmIChzdGF0dXM/Lm1hc2tlZCkge1xuXHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lLnJlcGxhY2UoXCJtYXNrZWRcIiwgXCJcIikgKyBcIiBtYXNrZWRcIjtcblx0XHR9XG5cdFx0aWYgKHN0YXR1cz8uYWN0RkIpIHtcblx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwiYWN0aXZhdGVkXCIsIFwiXCIpICsgXCIgYWN0aXZhdGVkXCI7XG5cdFx0fVxuXHRcdGlmIChzdGF0dXM/LmRlQWN0RkIpIHtcblx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwiZGVhY3RpdmF0ZWRcIiwgXCJcIikgKyBcIiBkZWFjdGl2YXRlZFwiO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gY2xhc3NOYW1lO1xufTtcbiIsImltcG9ydCB7IHVzZUltbWVyUmVkdWNlciB9IGZyb20gXCJ1c2UtaW1tZXJcIjtcblxuaW1wb3J0IHtcblx0aW5pdGlhbENvbnRyb2xTdGF0ZSxcblx0cGFyYW1ldGVySW5pdGlhbFN0YXRlLFxufSBmcm9tIFwiLi9pbml0aWFsU3RhdGVcIjtcbmltcG9ydCB0eXBlIHtcblx0Q29tbWFuZFZhbHZlTXBQcm9wcyxcblx0UGFyYW1ldGVyQWN0aW9uLFxuXHRQYXJhbUl0ZW0sXG5cdFVzZVBhcmFtZXRlclJlZHVjZXIsXG5cdFVzZVZhbHZlTXBDb21tYW5kUmVkdWNlcixcblx0VmFsdmVNcENvbW1hbmRBY3Rpb24sXG59IGZyb20gXCIuL3R5cGVzXCI7XG5cblxuLyoqXG4gKiAgVXBkYXRlIGEgcGFyYW1ldGVyIGl0ZW0gaW4gYSBsaXN0IG9mIHBhcmFtZXRlciBpdGVtc1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBQYXJhbWV0ZXJSZWR1Y2VyKFxuXHRkcmFmdDogUGFyYW1JdGVtW10sXG5cdGFjdGlvbjogUGFyYW1ldGVyQWN0aW9uXG4pOiBQYXJhbUl0ZW1bXSB7XG5cdHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcblx0XHRjYXNlIFwiVVBEQVRFX1ZBTFVFXCI6XG5cdFx0XHRkcmFmdFthY3Rpb24uaW5kZXhdLmlucHV0LnZhbHVlID0gYWN0aW9uLnZhbHVlO1xuXHRcdFx0cmV0dXJuIGRyYWZ0O1xuXHRcdGRlZmF1bHQ6IC8vICNUT0RPIEFkZCBtb3JlIHJlZHVjZXIgY2FzZSBzdGF0ZW1lbnRzXG5cdFx0XHRyZXR1cm4gZHJhZnQ7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcmFtSXRlbXNSZWR1Y2VyKCk6IFVzZVBhcmFtZXRlclJlZHVjZXIge1xuXHRjb25zdCBbc3RhdGUsIGRpc3BhdGNoXSA9IHVzZUltbWVyUmVkdWNlcihcblx0XHRQYXJhbWV0ZXJSZWR1Y2VyLFxuXHRcdHBhcmFtZXRlckluaXRpYWxTdGF0ZVxuXHQpO1xuXG5cdGZ1bmN0aW9uIHVwZGF0ZVZhbHVlKGluZGV4OiBudW1iZXIsIHZhbHVlOiBudW1iZXIpIHtcblx0XHRkaXNwYXRjaCh7IHR5cGU6IFwiVVBEQVRFX1ZBTFVFXCIsIGluZGV4OiBpbmRleCwgdmFsdWU6IHZhbHVlIH0pO1xuXHR9XG5cdC8vIEFkZCBtb3JlIGRpc3BhdGNoIGZ1bmN0aW9ucyBoZXJlXG5cdGNvbnN0IHVzZVBhcmFtZXRlclJlZHVjZXIgPSB7XG5cdFx0c3RhdGUsXG5cdFx0cmVkdWNlcjoge1xuXHRcdFx0dXBkYXRlVmFsdWUsXG5cdFx0fSxcblx0fTtcblx0cmV0dXJuIHVzZVBhcmFtZXRlclJlZHVjZXI7XG59XG5mdW5jdGlvbiB2YWx2ZU1wUmVkdWNlcihcblx0ZHJhZnQ6IENvbW1hbmRWYWx2ZU1wUHJvcHMsXG5cdGFjdGlvbjogVmFsdmVNcENvbW1hbmRBY3Rpb25cbik6IENvbW1hbmRWYWx2ZU1wUHJvcHMge1xuXHRzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG5cdFx0Y2FzZSBcIlVQREFURV9BVVRPX01BTlVBTFwiOlxuXHRcdFx0aWYgKGRyYWZ0LmNvbW1hbmQ/Lm1haW4pIHtcblx0XHRcdFx0aWYgKGFjdGlvbi5tb2RlID09PSBcImF1dG9cIikge1xuXHRcdFx0XHRcdGRyYWZ0LmNvbW1hbmQubWFpbi5hdXRvTWFudWFsID0gZmFsc2U7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coYEluIEF1dG9gKTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKGFjdGlvbi5tb2RlID09PSBcIm1hbnVhbFwiKSB7XG5cdFx0XHRcdFx0ZHJhZnQuY29tbWFuZC5tYWluLmF1dG9NYW51YWwgPSB0cnVlO1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKGBJbiBNYW51YWxgKTtcblx0XHRcdFx0XHRyZXR1cm4gZHJhZnQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBkcmFmdDtcblx0XHRjYXNlIFwiVVBEQVRFX01BSU5fTUFOX09OXCI6XG5cdFx0XHRpZiAoZHJhZnQuY29tbWFuZD8ubWFpbikge1xuXHRcdFx0XHRkcmFmdC5jb21tYW5kLm1haW4uYWN0aXZhdGlvbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZHJhZnQ7XG5cdFx0Y2FzZSBcIlVQREFURV9NQUlOX01BTl9PRkZcIjpcblx0XHRcdGlmIChkcmFmdC5jb21tYW5kPy5tYWluKSB7XG5cdFx0XHRcdGRyYWZ0LmNvbW1hbmQubWFpbi5hY3RpdmF0aW9uID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZHJhZnQ7XG5cdFx0Y2FzZSBcIlVQREFURV9VU0xfTUFOX09OXCI6XG5cdFx0XHRpZiAoZHJhZnQuY29tbWFuZD8udXBwZXJTZWF0KSB7XG5cdFx0XHRcdGRyYWZ0LmNvbW1hbmQudXBwZXJTZWF0LmFjdGl2YXRpb24gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGRyYWZ0O1xuXHRcdGNhc2UgXCJVUERBVEVfVVNMX01BTl9PRkZcIjpcblx0XHRcdGlmIChkcmFmdC5jb21tYW5kPy51cHBlclNlYXQpIHtcblx0XHRcdFx0ZHJhZnQuY29tbWFuZC51cHBlclNlYXQuYWN0aXZhdGlvbiA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGRyYWZ0O1xuXHRcdGNhc2UgXCJVUERBVEVfTFNMX01BTl9PTlwiOlxuXHRcdFx0aWYgKGRyYWZ0LmNvbW1hbmQ/Lmxvd2VyU2VhdCkge1xuXHRcdFx0XHRkcmFmdC5jb21tYW5kLmxvd2VyU2VhdC5hY3RpdmF0aW9uID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBkcmFmdDtcblx0XHRjYXNlIFwiVVBEQVRFX0xTTF9NQU5fT0ZGXCI6XG5cdFx0XHRpZiAoZHJhZnQuY29tbWFuZD8ubG93ZXJTZWF0KSB7XG5cdFx0XHRcdGRyYWZ0LmNvbW1hbmQubG93ZXJTZWF0LmFjdGl2YXRpb24gPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBkcmFmdDtcblx0XHRjYXNlIFwiVVBEQVRFX01BSU5fQVZBSUxcIjpcblx0XHRcdGlmIChkcmFmdC5jb21tYW5kPy5hdmFpbGFibGUpIHtcblx0XHRcdFx0aWYoYWN0aW9uLnZhbHVlKVxuXHRcdFx0XHRkcmFmdC5jb21tYW5kLmF2YWlsYWJsZS5tYWluID0gYWN0aW9uLnZhbHVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGRyYWZ0O1xuXG5cdFx0ZGVmYXVsdDogLy8gI1RPRE8gQWRkIG1vcmUgcmVkdWNlciBjYXNlIHN0YXRlbWVudHNcblx0XHRcdHJldHVybiBkcmFmdDtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlVmFsdmVNcENvbW1hbmRSZWR1Y2VyKCk6IFVzZVZhbHZlTXBDb21tYW5kUmVkdWNlciB7XG5cdGNvbnN0IFtzdGF0ZSwgZGlzcGF0Y2hdID0gdXNlSW1tZXJSZWR1Y2VyKFxuXHRcdHZhbHZlTXBSZWR1Y2VyLFxuXHRcdGluaXRpYWxDb250cm9sU3RhdGVcblx0KTtcblxuXHRmdW5jdGlvbiB1cGRhdGVNYWluQXZhaWxhYmxlKHZhbHVlOiBib29sZWFuKSB7XG5cdFx0ZGlzcGF0Y2goeyB0eXBlOiBcIlVQREFURV9NQUlOX0FWQUlMXCIsIHZhbHVlIH0pO1xuXHR9XG5cdGZ1bmN0aW9uIHVwZGF0ZVVwcGVyU2VhdEF2YWlsYWJsZSh2YWx1ZTogYm9vbGVhbikge1xuXHRcdGRpc3BhdGNoKHsgdHlwZTogXCJVUERBVEVfVVBQRVJTRUFUX0FWQUlMXCIsIHZhbHVlIH0pO1xuXHR9XG5cdGZ1bmN0aW9uIHVwZGF0ZUxvd2VyU2VhdEF2YWlsYWJsZSh2YWx1ZTogYm9vbGVhbikge1xuXHRcdGRpc3BhdGNoKHsgdHlwZTogXCJVUERBVEVfTE9XRVJTRUFUX0FWQUlMXCIsIHZhbHVlIH0pO1xuXHR9XG5cdGZ1bmN0aW9uIHVwZGF0ZUF1dG9NYW5TZWxlY3Rpb24obW9kZTogXCJhdXRvXCIgfCBcIm1hbnVhbFwiKSB7XG5cdFx0ZGlzcGF0Y2goeyB0eXBlOiBcIlVQREFURV9BVVRPX01BTlVBTFwiLCBtb2RlIH0pO1xuXHR9XG5cdGZ1bmN0aW9uIHVwZGF0ZU1haW5NYW51YWxPbigpIHtcblx0XHRkaXNwYXRjaCh7IHR5cGU6IFwiVVBEQVRFX01BSU5fTUFOX09OXCIgfSk7XG5cdH1cblx0ZnVuY3Rpb24gdXBkYXRlTWFpbk1hbnVhbE9mZigpIHtcblx0XHRkaXNwYXRjaCh7IHR5cGU6IFwiVVBEQVRFX01BSU5fTUFOX09GRlwiIH0pO1xuXHR9XG5cdGZ1bmN0aW9uIHVwZGF0ZVVzbE1hbnVhbE9uKCkge1xuXHRcdGRpc3BhdGNoKHsgdHlwZTogXCJVUERBVEVfVVNMX01BTl9PTlwiIH0pO1xuXHR9XG5cdGZ1bmN0aW9uIHVwZGF0ZVVzbE1hbnVhbE9mZigpIHtcblx0XHRkaXNwYXRjaCh7IHR5cGU6IFwiVVBEQVRFX1VTTF9NQU5fT0ZGXCIgfSk7XG5cdH1cblx0ZnVuY3Rpb24gdXBkYXRlTHNsTWFudWFsT24oKSB7XG5cdFx0ZGlzcGF0Y2goeyB0eXBlOiBcIlVQREFURV9MU0xfTUFOX09OXCIgfSk7XG5cdH1cblx0ZnVuY3Rpb24gdXBkYXRlTHNsTWFudWFsT2ZmKCkge1xuXHRcdGRpc3BhdGNoKHsgdHlwZTogXCJVUERBVEVfTFNMX01BTl9PRkZcIiB9KTtcblx0fVxuXG5cdGNvbnN0IHVzZUNvbW1hbmRzVmFsdmVNcFJlZHVjZXIgPSB7XG5cdFx0c3RhdGUsXG5cdFx0cmVkdWNlcjoge1xuXHRcdFx0dXBkYXRlQXV0b01hblNlbGVjdGlvbixcblx0XHRcdHVwZGF0ZU1haW5BdmFpbGFibGUsXG5cdFx0XHR1cGRhdGVVcHBlclNlYXRBdmFpbGFibGUsXG5cdFx0XHR1cGRhdGVMb3dlclNlYXRBdmFpbGFibGUsXG5cdFx0XHR1cGRhdGVNYWluTWFudWFsT24sXG5cdFx0XHR1cGRhdGVNYWluTWFudWFsT2ZmLFxuXHRcdFx0dXBkYXRlVXNsTWFudWFsT24sXG5cdFx0XHR1cGRhdGVVc2xNYW51YWxPZmYsXG5cdFx0XHR1cGRhdGVMc2xNYW51YWxPbixcblx0XHRcdHVwZGF0ZUxzbE1hbnVhbE9mZixcblx0XHR9LFxuXHR9O1xuXG5cdHJldHVybiB1c2VDb21tYW5kc1ZhbHZlTXBSZWR1Y2VyO1xufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VDcmVhdGVDb250ZXh0PENvbnRleHRWYWx1ZVR5cGUgZXh0ZW5kcyBvYmplY3QgfCBudWxsPihcbiAgcm9vdENvbXBvbmVudE5hbWU6IHN0cmluZyxcbiAgZGVmYXVsdENvbnRleHQ/OiBDb250ZXh0VmFsdWVUeXBlXG4pIHtcbiAgY29uc3QgQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8Q29udGV4dFZhbHVlVHlwZSB8IHVuZGVmaW5lZD4oXG4gICAgZGVmYXVsdENvbnRleHRcbiAgKTtcblxuICBjb25zdCBQcm92aWRlcjogUmVhY3QuRkM8Q29udGV4dFZhbHVlVHlwZSAmIHsgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZSB9PiA9IChcbiAgICBwcm9wc1xuICApID0+IHtcbiAgICBjb25zdCB7IGNoaWxkcmVuLCAuLi5jb250ZXh0IH0gPSBwcm9wcztcbiAgICAvLyBPbmx5IHJlLW1lbW9pemUgd2hlbiBwcm9wIHZhbHVlcyBjaGFuZ2VcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gICAgY29uc3QgdmFsdWUgPSBSZWFjdC51c2VNZW1vKFxuICAgICAgKCkgPT4gY29udGV4dCxcbiAgICAgIE9iamVjdC52YWx1ZXMoY29udGV4dClcbiAgICApIGFzIENvbnRleHRWYWx1ZVR5cGU7XG4gICAgcmV0dXJuIDxDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt2YWx1ZX0+e2NoaWxkcmVufTwvQ29udGV4dC5Qcm92aWRlcj47XG4gIH07XG5cbiAgUHJvdmlkZXIuZGlzcGxheU5hbWUgPSByb290Q29tcG9uZW50TmFtZSArIFwiUHJvdmlkZXJcIjtcblxuICBmdW5jdGlvbiB1c2VDb250ZXh0KGNvbnN1bWVyTmFtZTogc3RyaW5nKSB7XG4gICAgY29uc3QgY29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoQ29udGV4dCk7XG4gICAgaWYgKGNvbnRleHQpIHJldHVybiBjb250ZXh0O1xuICAgIGlmIChkZWZhdWx0Q29udGV4dCAhPT0gdW5kZWZpbmVkKSByZXR1cm4gZGVmYXVsdENvbnRleHQ7XG4gICAgLy8gaWYgYSBkZWZhdWx0Q29udGV4dCB3YXNuJ3Qgc3BlY2lmaWVkLCBpdCdzIGEgcmVxdWlyZWQgY29udGV4dC5cbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgXFxgJHtjb25zdW1lck5hbWV9XFxgIG11c3QgYmUgdXNlZCB3aXRoaW4gXFxgJHtyb290Q29tcG9uZW50TmFtZX1cXGBgXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBbUHJvdmlkZXIsIHVzZUNvbnRleHRdIGFzIGNvbnN0O1xufVxuIiwiaW1wb3J0IHR5cGUgeyBSZWFjdE5vZGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB0eXBlIHsgQ29tcG9uZW50UHJvcHMgfSBmcm9tIFwiQGluZHVjdGl2ZWF1dG9tYXRpb24vcGVyc3BlY3RpdmUtY2xpZW50XCI7XG5cblxuZXhwb3J0IHR5cGUgRWxlbWVudFJlZiA9IFJlYWN0LlJlZk9iamVjdDxIVE1MRGl2RWxlbWVudD47XG5leHBvcnQgdHlwZSBWYWx2ZVN0YXRlID0ge1xuXHRhbGFybT86IGJvb2xlYW47XG5cdGFjdEZCOiBib29sZWFuO1xuXHRkZUFjdEZCOiBib29sZWFuO1xuXHR1c2w/OiBib29sZWFuO1xuXHRsc2w/OiBib29sZWFuO1xuXHRhY3RpdmF0ZWRDb25maWc6IG51bWJlcjtcblx0ZGVhY3RpdmF0ZWRDb25maWc6IG51bWJlcjtcblx0aXRlbU5hbWU6IHN0cmluZztcblx0bWFudWFsOiBib29sZWFuO1xuXHRtYXNrZWQ6IGJvb2xlYW47XG5cdGNoYW5naW5nOiBib29sZWFuO1xuXHRsb2NhdGU6IGJvb2xlYW47XG59O1xuZXhwb3J0IHR5cGUgU3RhdHVzTGlrZSA9IHtcblx0Y29uZmlndXJhdGlvbj86bnVtYmVyXG4gICAgYWN0aXZhdGVkQ29uZmlnPzogbnVtYmVyO1xuICAgIGRlYWN0aXZhdGVkQ29uZmlnPzogbnVtYmVyO1xuICAgIGFjdEZCPzogYm9vbGVhbjtcbiAgICBkZUFjdEZCPzogYm9vbGVhbjtcbiAgICB1c2w/OiBib29sZWFuO1xuICAgIGxzbD86IGJvb2xlYW47XG4gICAgbG9jYXRlPzogYm9vbGVhbjtcbiAgICBhbGFybT86IGJvb2xlYW47XG4gICAgY2hhbmdpbmc/OiBib29sZWFuO1xuICAgIG1hbnVhbD86IGJvb2xlYW47XG4gICAgbWFza2VkPzogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCB0eXBlIFZhbHZlQ29tcG91bmRDb250ZXh0VHlwZSA9IHtcblx0Y29tcG9uZW50UHJvcHM6IENvbXBvbmVudFByb3BzPGFueSwgYW55Pjtcblx0dmFsdmVQcm9wczogVmFsdmVQcm9wcztcblx0b25BY3Rpb25QZXJmb3JtZWQ6ICgpID0+IHZvaWQ7XG5cdGNoaWxkcmVuOiBSZWFjdE5vZGU7XG59O1xuZXhwb3J0IHR5cGUgVmFsdmVDb21wb3VuZFJvb3RQcm9wcyA9IHtcblx0Y29tcG9uZW50UHJvcHM6IENvbXBvbmVudFByb3BzPGFueSwgYW55Pjtcblx0dmFsdmVQcm9wczogVmFsdmVQcm9wcztcblx0b25BY3Rpb25QZXJmb3JtZWQ6ICgpID0+IHZvaWQ7XG5cdGNoaWxkcmVuOiBSZWFjdE5vZGU7XG59O1xuXG5leHBvcnQgdHlwZSBQdW1wU3RhdGUgPSB7XG5cdGFsYXJtOiBib29sZWFuO1xuXHRhY3RGQjogYm9vbGVhbjtcblx0ZGVBY3RGQjogYm9vbGVhbjtcblx0aXRlbU5hbWU6IHN0cmluZztcblx0bWFudWFsOiBib29sZWFuO1xuXHRtYXNrZWQ6IGJvb2xlYW47XG5cdGNoYW5naW5nOiBib29sZWFuO1xuXHRsb2NhdGU6IGJvb2xlYW47XG59O1xuXG5leHBvcnQgdHlwZSBQdW1wQ29tcG91bmRDb250ZXh0VHlwZSA9IHtcblx0Y29tcG9uZW50UHJvcHM6IENvbXBvbmVudFByb3BzPGFueSwgYW55Pjtcblx0cHVtcFByb3BzOiBQdW1wUHJvcHM7XG5cdG9uQWN0aW9uUGVyZm9ybWVkOiAoKSA9PiB2b2lkO1xuXHRjaGlsZHJlbjogUmVhY3ROb2RlO1xufTtcbmV4cG9ydCB0eXBlIFB1bXBDb21wb3VuZFJvb3RQcm9wcyA9IHtcblx0Y29tcG9uZW50UHJvcHM6IENvbXBvbmVudFByb3BzPGFueSwgYW55Pjtcblx0cHVtcFByb3BzOiBQdW1wUHJvcHM7XG5cdG9uQWN0aW9uUGVyZm9ybWVkOiAoKSA9PiB2b2lkO1xuXHRjaGlsZHJlbjogUmVhY3ROb2RlO1xufTtcbi8qKlxuICogRGVmaW5lIHRoZSBzaGFwZSBvZiB0aGUgUGFyYW1ldGVyQWN0aW9uIHR5cGVcbiAqIEBVc2VhZ2UgdXNlUGFyYW1ldGVyUmVkdWNlclxuICovXG5leHBvcnQgdHlwZSBQYXJhbWV0ZXJBY3Rpb24gPSB7XG5cdHR5cGU6IFwiVVBEQVRFX1ZBTFVFXCI7XG5cdHZhbHVlOiBudW1iZXI7XG5cdGluZGV4OiBudW1iZXI7XG59O1xuXG5leHBvcnQgdHlwZSBQYXJhbWV0ZXJSZWR1Y2VyID0gKFxuXHRzdGF0ZTogUGFyYW1JdGVtIHwgUGFyYW1JdGVtW10sXG5cdGFjdGlvbjogUGFyYW1ldGVyQWN0aW9uXG4pID0+IFZhbHZlU3RhdGU7XG5cbmV4cG9ydCB0eXBlIFVzZVBhcmFtZXRlclJlZHVjZXIgPSB7XG5cdHN0YXRlOiBQYXJhbUl0ZW1bXTtcblx0cmVkdWNlcjoge1xuXHRcdHVwZGF0ZVZhbHVlOiAodmFsdWU6IG51bWJlciwgaW5kZXg6IG51bWJlcikgPT4gdm9pZDtcblx0XHQvL2FkZCBtb3JlIGhhbmRsZXJzIGFzIG5lZWRlZFxuXHR9O1xufTtcbmV4cG9ydCB0eXBlIFBhcmFtTGFiZWwgPSB7XG5cdHRleHQ6IHN0cmluZztcblx0Y2xhc3NOYW1lPzogc3RyaW5nO1xuXHR0b29sdGlwVGV4dD86IHN0cmluZztcblx0dG9vbHRpcFBvc2l0aW9uPzogc3RyaW5nO1xuXHR0b29sdGlwQ2xhc3NOYW1lPzogc3RyaW5nO1xuXHR0b29sdGlwSWQ/OiBzdHJpbmc7XG59O1xuZXhwb3J0IHR5cGUgUGFyYW1JbnB1dCA9IHtcblx0dHlwZTogc3RyaW5nO1xuXHRpbnB1dG1vZGU6XG5cdFx0fCBcIm5vbmVcIlxuXHRcdHwgXCJ0ZXh0XCJcblx0XHR8IFwidGVsXCJcblx0XHR8IFwidXJsXCJcblx0XHR8IFwiZW1haWxcIlxuXHRcdHwgXCJudW1lcmljXCJcblx0XHR8IFwiZGVjaW1hbFwiXG5cdFx0fCBcInNlYXJjaFwiXG5cdFx0fCB1bmRlZmluZWQ7XG5cdHBsYWNlaG9sZGVyOiBzdHJpbmc7XG5cdGVkaXRhYmxlOiBib29sZWFuO1xuXHRwYXR0ZXJuOiBzdHJpbmc7XG5cdG1pbjogbnVtYmVyO1xuXHRtYXg6IG51bWJlcjtcblx0ZGVjaW1hbFBsYWNlczogbnVtYmVyO1xuXHQvLyBwYXR0ZXJuOiBcIl5bMC05XSpbLixdP1swLTldKiRcIiBmb3IgZGVjaW1hbCBudW1iZXJzXG5cdC8vIHBhdHRlcm46IFwiXlswLTldKiRcIiBmb3IgaW50ZWdlcnNcblx0ZXU6IHN0cmluZztcblx0dmFsdWU6IG51bWJlcjtcbn07XG4vLyB0eXBlIFBhcmFtc0hlYWRlciA9IHtcbi8vIFx0bGFiZWw6IHN0cmluZ1xuLy8gfVxuZXhwb3J0IHR5cGUgUGFyYW1JdGVtID0ge1xuXHRsYWJlbDogUGFyYW1MYWJlbDtcblx0aW5wdXQ6IFBhcmFtSW5wdXQ7XG59O1xuZXhwb3J0IHR5cGUgUGFyYW1ldGVyc0xpc3RTdGF0ZSA9IHtcblx0cGFyYW1ldGVyczogUGFyYW1JdGVtW107XG59O1xuXG5leHBvcnQgY29uc3QgVmFsdmVDbGFzc05hbWVFbnVtID0ge1xuXHRBbGFybVN0YXRlOiBcIkFsYXJtU3RhdGVcIixcblx0QWN0aXZhdGVkOiBcIkFjdGl2YXRlZFwiLFxuXHREZWFjdGl2YXRlZDogXCJEZWFjdGl2YXRlZFwiLFxuXHRNYW51YWw6IFwiTWFudWFsXCIsXG5cdE1hc2tlZDogXCJNYXNrZWRcIixcblx0Q2hhbmdpbmc6IFwiQ2hhbmdpbmdcIixcblx0Tm9BbGFybU1hc2s6IFwiTm9BbGFybU1hc2tcIixcblx0TG9jYXRlOiBcIkxvY2F0ZVwiLFxufTtcbmV4cG9ydCB0eXBlIFZhbHZlQ2xhc3NOYW1lRW51bSA9XG5cdCh0eXBlb2YgVmFsdmVDbGFzc05hbWVFbnVtKVtrZXlvZiB0eXBlb2YgVmFsdmVDbGFzc05hbWVFbnVtXTtcblxuZXhwb3J0IGNvbnN0IHZhbHZlTXBJdGVtTmFtZUVudW0gPSB7XG5cdFYxYjE6IFwidjFiMVwiLCAvLyBpbmRleCAwXG5cdFYxYjI6IFwidjFiMlwiLCAvLyBpbmRleCAxXG5cdFYxYjM6IFwidjFiM1wiLCAvLyBpbmRleCAyXG5cdFYxYjQ6IFwidjFiNFwiLCAvLyBpbmRleCAzXG5cdFYyYjE6IFwidjJiMVwiLCAvLyBpbmRleCA0XG5cdFYyYjI6IFwidjJiMlwiLCAvLyBpbmRleCA1XG5cdFYyYjM6IFwidjJiM1wiLCAvLyBpbmRleCA2XG5cdFYyYjQ6IFwidjJiNFwiLCAvLyBpbmRleCA3XG5cdFYyOiBcInYyXCIsIC8vIGluZGV4IDhcblx0djE6IFwidjFcIiwgLy8gaW5kZXggOVxuXHR1c2w6IFwidXNsXCIsIC8vIGluZGV4IDEwIHVwcGVyLXNlYXQtbGlmdFxuXHRsc2w6IFwibHNsXCIsIC8vIGluZGV4IDExIGxvd2VyLXNlYXQtbGlmdFxuXHRsb2NhdGU6IFwibG9jYXRlXCIsIC8vIGluZGV4IDEyIGxvY2F0ZSBhbmltYXRpb25cbn07XG5leHBvcnQgdHlwZSB2YWx2ZU1wSXRlbU5hbWVFbnVtID1cblx0KHR5cGVvZiB2YWx2ZU1wSXRlbU5hbWVFbnVtKVtrZXlvZiB0eXBlb2YgdmFsdmVNcEl0ZW1OYW1lRW51bV07XG5cblxuXG5jb25zdCBWYWx2ZVN0YXRlRW51bSA9IHtcblx0YWxhcm06IFwiYWxhcm1cIixcblx0bWFudWFsOiBcIm1hbnVhbFwiLFxuXHRtYXNrZWQ6IFwibWFza2VkXCIsXG59O1xuZXhwb3J0IHR5cGUgVmFsdmVTdGF0ZUVudW0gPVxuXHQodHlwZW9mIFZhbHZlU3RhdGVFbnVtKVtrZXlvZiB0eXBlb2YgVmFsdmVTdGF0ZUVudW1dO1xuXG5jb25zdCBpdGVtSWRQb3NpdGlvbnMgPSBbXG5cdFwicmlnaHRcIixcblx0XCJsZWZ0XCIsXG5cdFwidG9wLWxlZnRcIixcblx0XCJ0b3AtcmlnaHRcIixcblx0XCJib3R0b20tbGVmdFwiLFxuXHRcImJvdHRvbS1yaWdodFwiLFxuXTtcblxuZXhwb3J0IHR5cGUgSXRlbUlkUG9zaXRpb25UeXBlID0gKHR5cGVvZiBpdGVtSWRQb3NpdGlvbnMpW251bWJlcl07XG5leHBvcnQgdHlwZSBQcm9jZXNzT2JqZWN0ID0ge1xuXHRzdGF0dXM6IFZhbHZlU3RhdGU7XG59O1xuZXhwb3J0IHR5cGUgUHVtcCA9IHtcblx0c3RhdHVzOiBQdW1wU3RhdGU7XG59O1xuZXhwb3J0IHR5cGUgVmFsdmVQcm9wcyA9IHtcblx0cHJvY2Vzc09iamVjdD86IFByb2Nlc3NPYmplY3Q7XG5cdGxhYmVsUG9zaXRpb24/OiBJdGVtSWRQb3NpdGlvblR5cGU7XG5cdHNob3dMYWJlbD86IGJvb2xlYW47XG5cdGhhbmRsZUNsaWNrPzogKCkgPT4gdm9pZDtcbn07XG5jb25zdCBwdW1wVHlwZXM9IFtcblx0XCJjZW50cmlmdWdhbFwiLFxuXHRcImRpYXBocmFnbVwiLFxuXHRcImdlYXJcIixcblx0XCJsaXF1aWQtcmluZ1wiLFxuXHRcInBvc2l0aXZlLWRpc3BsYWNlbWVudFwiLFxuXHRcInBvc2l0aXZlLXNjcmV3XCIsXG5cdFwicHJvZ3Jlc3NpdmUtY2F2aXR5XCIsXG5dXG5leHBvcnQgdHlwZSBQdW1wVHlwZSA9ICh0eXBlb2YgcHVtcFR5cGVzKVtudW1iZXJdO1xuZXhwb3J0IHR5cGUgUHVtcFByb3BzID0ge1xuXHRwdW1wVHlwZT86IFB1bXBUeXBlO1xuXHRwcm9jZXNzT2JqZWN0PzogUHVtcDtcblx0bGFiZWxQb3NpdGlvbj86IEl0ZW1JZFBvc2l0aW9uVHlwZTtcblx0c2hvd0xhYmVsPzogYm9vbGVhbjtcblx0aGFuZGxlQ2xpY2s/OiAoKSA9PiB2b2lkO1xufTtcbmV4cG9ydCBjb25zdCBwdW1wSXRlbUxpc3QgPSBbXG5cdFwic3ltYm9sLTFcIixcblx0XCJzeW1ib2wtMlwiLFxuIFx0XCJsb2NhdGVcIixcbl1cbmV4cG9ydCB0eXBlIFB1bXBJdGVtTGlzdCA9ICh0eXBlb2YgcHVtcEl0ZW1MaXN0KVtudW1iZXJdO1xuXG5leHBvcnQgdHlwZSBJdGVtRGF0YSA9IHtcblx0a2V5OiBzdHJpbmc7XG5cdHZhbHVlOiBzdHJpbmc7XG5cdHByb3BzOiBWYWx2ZVN0YXRlO1xufTtcblxuZXhwb3J0IHR5cGUgaXRlbU5hbWVQcm9wcyA9IHtcblx0a2V5OiBzdHJpbmc7XG5cdG5hbWU6IFtzdHJpbmcsIHN0cmluZ107XG5cdHZhbHVlOiBzdHJpbmc7XG5cdGluZGV4OiBudW1iZXI7XG59O1xuZXhwb3J0IHR5cGUgQ29tbWFuZFZhbHZlTXBQcm9wcyA9IHtcblx0Y29tbWFuZD86IHtcblx0XHRhdmFpbGFibGU/OiB7XG5cdFx0XHRtYWluOiBib29sZWFuO1xuXHRcdFx0dXBwZXJTZWF0PzogYm9vbGVhbjtcblx0XHRcdGxvd2VyU2VhdD86IGJvb2xlYW47XG5cdFx0fTtcblx0XHRtYWluPzoge1xuXHRcdFx0bGFiZWw6IHN0cmluZztcblx0XHRcdGF1dG9NYW51YWw6IGJvb2xlYW47XG5cdFx0XHRhY3RpdmF0aW9uOiBib29sZWFuO1xuXHRcdH07XG5cdFx0dXBwZXJTZWF0Pzoge1xuXHRcdFx0bGFiZWw6IHN0cmluZztcblx0XHRcdGFjdGl2YXRpb246IGJvb2xlYW47XG5cdFx0fTtcblx0XHRsb3dlclNlYXQ/OiB7XG5cdFx0XHRsYWJlbDogc3RyaW5nO1xuXHRcdFx0YWN0aXZhdGlvbjogYm9vbGVhbjtcblx0XHR9O1xuXHR9O1xufTtcblxuZXhwb3J0IHR5cGUgQ29tbWFuZHNWYWx2ZU1wQ29tcG91bmRDb250ZXh0VHlwZSA9IHtcblx0Y29tcG9uZW50UHJvcHM6IENvbXBvbmVudFByb3BzPGFueSwgYW55Pjtcblx0dXNlUmVkdWNlcjogVXNlVmFsdmVNcENvbW1hbmRSZWR1Y2VyO1xuXHRjaGlsZHJlbjogUmVhY3ROb2RlO1xufTtcbmV4cG9ydCB0eXBlIENvbW1hbmRzVmFsdmVNcENvbXBvdW5kUm9vdFByb3BzID0ge1xuXHRjb21wb25lbnRQcm9wczogQ29tcG9uZW50UHJvcHM8YW55LCBhbnk+O1xuXHRjb21tYW5kOiBDb21tYW5kVmFsdmVNcFByb3BzO1xuXHRjaGlsZHJlbjogUmVhY3ROb2RlO1xufTtcbi8qKlxuICogRGVmaW5lIHRoZSBzaGFwZSBvZiB0aGUgVmFsdmVBY3Rpb24gdHlwZVxuICogQFVzZWFnZSB1c2VWYWx2ZVJlZHVjZXJcbiAqL1xuZXhwb3J0IHR5cGUgVmFsdmVNcENvbW1hbmRBY3Rpb24gPVxuXHR8IHsgdHlwZTogXCJVUERBVEVfQVVUT19NQU5VQUxcIjsgbW9kZTogXCJhdXRvXCIgfCBcIm1hbnVhbFwiIH1cblx0fCB7IHR5cGU6IFwiVVBEQVRFX01BSU5fQVZBSUxcIjsgdmFsdWU6IGJvb2xlYW4gfVxuXHR8IHsgdHlwZTogXCJVUERBVEVfVVBQRVJTRUFUX0FWQUlMXCI7IHZhbHVlOiBib29sZWFuIH1cblx0fCB7IHR5cGU6IFwiVVBEQVRFX0xPV0VSU0VBVF9BVkFJTFwiOyB2YWx1ZTogYm9vbGVhbiB9XG5cdHwgeyB0eXBlOiBcIlVQREFURV9NQUlOX01BTl9PTlwiIH1cblx0fCB7IHR5cGU6IFwiVVBEQVRFX01BSU5fTUFOX09GRlwiIH1cblx0fCB7IHR5cGU6IFwiVVBEQVRFX1VTTF9NQU5fT05cIiB9XG5cdHwgeyB0eXBlOiBcIlVQREFURV9VU0xfTUFOX09GRlwiIH1cblx0fCB7IHR5cGU6IFwiVVBEQVRFX0xTTF9NQU5fT05cIiB9XG5cdHwgeyB0eXBlOiBcIlVQREFURV9MU0xfTUFOX09GRlwiIH07XG5leHBvcnQgdHlwZSBWYWx2ZU1wQ29tbWFuZFJlZHVjZXIgPSAoXG5cdHN0YXRlOiBDb21tYW5kVmFsdmVNcFByb3BzLFxuXHRhY3Rpb246IFZhbHZlTXBDb21tYW5kQWN0aW9uXG4pID0+IFZhbHZlU3RhdGU7XG5cbmV4cG9ydCB0eXBlIFVzZVZhbHZlTXBDb21tYW5kUmVkdWNlciA9IHtcblx0c3RhdGU6IENvbW1hbmRWYWx2ZU1wUHJvcHM7XG5cdHJlZHVjZXI6IHtcblx0XHR1cGRhdGVBdXRvTWFuU2VsZWN0aW9uOiAobW9kZTogXCJhdXRvXCIgfCBcIm1hbnVhbFwiKSA9PiB2b2lkO1xuXHRcdHVwZGF0ZU1haW5BdmFpbGFibGU6ICh2YWx1ZTogYm9vbGVhbikgPT4gdm9pZDtcblx0XHR1cGRhdGVVcHBlclNlYXRBdmFpbGFibGU6ICh2YWx1ZTogYm9vbGVhbikgPT4gdm9pZDtcblx0XHR1cGRhdGVMb3dlclNlYXRBdmFpbGFibGU6ICh2YWx1ZTogYm9vbGVhbikgPT4gdm9pZDtcblx0XHR1cGRhdGVNYWluTWFudWFsT246ICgpID0+IHZvaWQ7XG5cdFx0dXBkYXRlTWFpbk1hbnVhbE9mZjogKCkgPT4gdm9pZDtcblx0XHR1cGRhdGVVc2xNYW51YWxPbjogKCkgPT4gdm9pZDtcblx0XHR1cGRhdGVVc2xNYW51YWxPZmY6ICgpID0+IHZvaWQ7XG5cdFx0dXBkYXRlTHNsTWFudWFsT246ICgpID0+IHZvaWQ7XG5cdFx0dXBkYXRlTHNsTWFudWFsT2ZmOiAoKSA9PiB2b2lkO1xuXHRcdC8vYWRkIG1vcmUgaGFuZGxlcnMgYXMgbmVlZGVkXG5cdH07XG59O1xuZXhwb3J0IGNvbnN0IGh4SXRlbU5hbWVFbnVtID0ge1xuXHRiMTogXCJiYXNlLTFcIiwgLy8gaW5kZXggMFxuXHRiMjogXCJiYXNlLTJcIiwgLy8gaW5kZXggMVxuXHRiMzogXCJiYXNlLTNcIiwgLy8gaW5kZXggMlxuXHRiNDogXCJiYXNlLTRcIiwgLy8gaW5kZXggM1xuXHRWMmIxOiBcInYyYjFcIiwgLy8gaW5kZXggNFxuXHRWMmIyOiBcInYyYjJcIiwgLy8gaW5kZXggNVxuXHRWMmIzOiBcInYyYjNcIiwgLy8gaW5kZXggNlxuXHRWMmI0OiBcInYyYjRcIiwgLy8gaW5kZXggN1xuXHRWMjogXCJ2MlwiLCAvLyBpbmRleCA4XG5cdHYxOiBcInYxXCIsIC8vIGluZGV4IDlcblx0dXNsOiBcInVzbFwiLCAvLyBpbmRleCAxMCB1cHBlci1zZWF0LWxpZnRcblx0bHNsOiBcImxzbFwiLCAvLyBpbmRleCAxMSBsb3dlci1zZWF0LWxpZnRcblx0bG9jYXRlOiBcImxvY2F0ZVwiLCAvLyBpbmRleCAxMiBsb2NhdGUgYW5pbWF0aW9uXG59O1xuZXhwb3J0IHR5cGUgSHhJdGVtTmFtZUVudW0gPVxuXHQodHlwZW9mIGh4SXRlbU5hbWVFbnVtKVtrZXlvZiB0eXBlb2YgaHhJdGVtTmFtZUVudW1dO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlVSTCA9IGV4cG9ydHMuRE5TID0gdm9pZCAwO1xuY29uc3Qgc2hhMV9qc18xID0gcmVxdWlyZShcIi4vc2hhMS5qc1wiKTtcbmNvbnN0IHYzNV9qc18xID0gcmVxdWlyZShcIi4vdjM1LmpzXCIpO1xudmFyIHYzNV9qc18yID0gcmVxdWlyZShcIi4vdjM1LmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRE5TXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2MzVfanNfMi5ETlM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJVUkxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHYzNV9qc18yLlVSTDsgfSB9KTtcbmZ1bmN0aW9uIHY1KHZhbHVlLCBuYW1lc3BhY2UsIGJ1Ziwgb2Zmc2V0KSB7XG4gICAgcmV0dXJuICgwLCB2MzVfanNfMS5kZWZhdWx0KSgweDUwLCBzaGExX2pzXzEuZGVmYXVsdCwgdmFsdWUsIG5hbWVzcGFjZSwgYnVmLCBvZmZzZXQpO1xufVxudjUuRE5TID0gdjM1X2pzXzEuRE5TO1xudjUuVVJMID0gdjM1X2pzXzEuVVJMO1xuZXhwb3J0cy5kZWZhdWx0ID0gdjU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHBhcnNlX2pzXzEgPSByZXF1aXJlKFwiLi9wYXJzZS5qc1wiKTtcbmNvbnN0IHN0cmluZ2lmeV9qc18xID0gcmVxdWlyZShcIi4vc3RyaW5naWZ5LmpzXCIpO1xuZnVuY3Rpb24gdjFUb1Y2KHV1aWQpIHtcbiAgICBjb25zdCB2MUJ5dGVzID0gdHlwZW9mIHV1aWQgPT09ICdzdHJpbmcnID8gKDAsIHBhcnNlX2pzXzEuZGVmYXVsdCkodXVpZCkgOiB1dWlkO1xuICAgIGNvbnN0IHY2Qnl0ZXMgPSBfdjFUb1Y2KHYxQnl0ZXMpO1xuICAgIHJldHVybiB0eXBlb2YgdXVpZCA9PT0gJ3N0cmluZycgPyAoMCwgc3RyaW5naWZ5X2pzXzEudW5zYWZlU3RyaW5naWZ5KSh2NkJ5dGVzKSA6IHY2Qnl0ZXM7XG59XG5leHBvcnRzLmRlZmF1bHQgPSB2MVRvVjY7XG5mdW5jdGlvbiBfdjFUb1Y2KHYxQnl0ZXMpIHtcbiAgICByZXR1cm4gVWludDhBcnJheS5vZigoKHYxQnl0ZXNbNl0gJiAweDBmKSA8PCA0KSB8ICgodjFCeXRlc1s3XSA+PiA0KSAmIDB4MGYpLCAoKHYxQnl0ZXNbN10gJiAweDBmKSA8PCA0KSB8ICgodjFCeXRlc1s0XSAmIDB4ZjApID4+IDQpLCAoKHYxQnl0ZXNbNF0gJiAweDBmKSA8PCA0KSB8ICgodjFCeXRlc1s1XSAmIDB4ZjApID4+IDQpLCAoKHYxQnl0ZXNbNV0gJiAweDBmKSA8PCA0KSB8ICgodjFCeXRlc1swXSAmIDB4ZjApID4+IDQpLCAoKHYxQnl0ZXNbMF0gJiAweDBmKSA8PCA0KSB8ICgodjFCeXRlc1sxXSAmIDB4ZjApID4+IDQpLCAoKHYxQnl0ZXNbMV0gJiAweDBmKSA8PCA0KSB8ICgodjFCeXRlc1syXSAmIDB4ZjApID4+IDQpLCAweDYwIHwgKHYxQnl0ZXNbMl0gJiAweDBmKSwgdjFCeXRlc1szXSwgdjFCeXRlc1s4XSwgdjFCeXRlc1s5XSwgdjFCeXRlc1sxMF0sIHYxQnl0ZXNbMTFdLCB2MUJ5dGVzWzEyXSwgdjFCeXRlc1sxM10sIHYxQnl0ZXNbMTRdLCB2MUJ5dGVzWzE1XSk7XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IEl0ZW1JZFBvc2l0aW9uVHlwZX0gZnJvbSBcIi4uL2FwaS90eXBlc1wiO1xuXG5pbXBvcnQge1xuXHRDb21wb25lbnQsXG5cdFByb3BlcnR5VHJlZSxcbn0gZnJvbSBcIkBpbmR1Y3RpdmVhdXRvbWF0aW9uL3BlcnNwZWN0aXZlLWNsaWVudFwiO1xuaW1wb3J0IHR5cGUge1xuXHRDb21wb25lbnRQcm9wcyxcblx0Q29tcG9uZW50TWV0YSxcblx0UENvbXBvbmVudCxcblx0U2l6ZU9iamVjdCxcbn0gZnJvbSBcIkBpbmR1Y3RpdmVhdXRvbWF0aW9uL3BlcnNwZWN0aXZlLWNsaWVudFwiOyAvLydAaW5kdWN0aXZlYXV0b21hdGlvbi9wZXJzcGVjdGl2ZS1jbGllbnQnO1xuaW1wb3J0IHR5cGUgeyBIeFByb3BzIH0gZnJvbSBcIi4uL2FyLXR5cGVzL3Byb2Nlc3NPYmplY3RzL2hlYXRFeGNoYW5nZXJzL2h4LXR5cGVzXCI7XG5pbXBvcnQgeyBIZWF0RXhjaGFuZ2VyQ29tcG91bmQgfSBmcm9tIFwiLi9wcm9jZXNzLW9iamVjdHMvaGVhdC1leGNoYW5nZXJzL0hlYXRFeGNoYW5nZXJDb21wb3VuZFwiO1xuXG5leHBvcnQgY29uc3QgQ09NUE9ORU5UX1RZUEUgPSBcImhtaS5wcm9jZXNzX29iamVjdHMuSGVhdEV4Y2hhbmdlclwiO1xuXG4vKipcbiAqIFZhbHZlIGNvbXBvbmVudCBjbGFzcy5cbiAqIEV4dGVuZHMgdGhlIGJhc2UgQ29tcG9uZW50IGNsYXNzIGZyb20gUGVyc3BlY3RpdmUsIHR5cGVkIHdpdGggVmFsdmVQcm9wcy5cbiAqIFByb3ZpZGVzIGEgY3VzdG9taXphYmxlIHZhbHZlIHdpdGggcHJvcGVyIGhhbmRsaW5nIG9mIGRlc2lnbmVyL3ByZXZpZXcgbW9kZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBIZWF0RXhjaGFuZ2VyIGV4dGVuZHMgQ29tcG9uZW50PENvbXBvbmVudFByb3BzPEh4UHJvcHM+LCBhbnk+IHtcblx0dmFsdmVSZWY6IFJlYWN0LlJlZk9iamVjdDxIVE1MRGl2RWxlbWVudD47XG5cblx0Y29uc3RydWN0b3IocHJvcHM6IENvbXBvbmVudFByb3BzPEh4UHJvcHM+KSB7XG5cdFx0c3VwZXIocHJvcHMpO1xuXHRcdHRoaXMudmFsdmVSZWYgPSBSZWFjdC5jcmVhdGVSZWY8SFRNTERpdkVsZW1lbnQ+KCk7XG5cdH1cblxuXHQvLyBUaGlzIGlzIGEgbGlmZWN5Y2xlIG1ldGhvZCB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgZmlyc3QgbW91bnRlZCB0byB0aGUgRE9NLlxuXHRjb21wb25lbnREaWRNb3VudCgpOiB2b2lkIHtcblx0XHQvLyBObyBuZWVkIHRvIGluaXRpYWxpemUgdmFsdmVSZWYgaGVyZVxuXHR9XG5cdHR5cGUgPSB0aGlzLnByb3BzLnByb3BzLnR5cGU7XG5cdGl0ZW1OYW1lID0gdGhpcy5wcm9wcy5wcm9wcy5pdGVtTmFtZTtcblx0bW9kZSA9IHRoaXMucHJvcHMucHJvcHMubW9kZTtcblx0bG9jYXRlID0gdGhpcy5wcm9wcy5wcm9wcy5sb2NhdGU7XG5cdHNob3dMYWJlbDogYm9vbGVhbiA9IHRoaXMucHJvcHMucHJvcHMuc2hvd0xhYmVsIHx8IGZhbHNlO1xuXHRsYWJlbFBvc2l0aW9uOiBJdGVtSWRQb3NpdGlvblR5cGUgPSB0aGlzLnByb3BzLnByb3BzLmxhYmVsUG9zaXRpb24gfHwgXCJsZWZ0XCI7XG5cblx0LyoqXG5cdCAqIEhhbmRsZXIgZm9yIHRoZSBjb21wb25lbnQncyBhY3Rpb24gZXZlbnQuXG5cdCAqL1xuXHRvbkFjdGlvblBlcmZvcm1lZCA9ICgpID0+IHtcblx0XHQvLyBJZiB0aGUgZGVzaWduZXIgaXMgaW4gXCJkZXNpZ25cIiBtb2RlLCBkb24ndCBkbyBhbnl0aGluZ1xuXHRcdGlmICghdGhpcy5wcm9wcy5ldmVudHNFbmFibGVkKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhcIlZhbHZlIGlzIGRpc2FibGVkIGluIHRoZSBkZXNpZ24tc2NvcGVcIik7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGNvbnNvbGUubG9nKFwiVmFsdmUgY2xpY2tlZCFcIik7XG5cdFx0dGhpcy5wcm9wcy5jb21wb25lbnRFdmVudHMuZmlyZUNvbXBvbmVudEV2ZW50KFwib25BY3Rpb25QZXJmb3JtZWRcIiwge30pO1xuXHR9O1xuXG5cdHJlbmRlcigpIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0Ly8gPGRpdj5UaGlzIGlzIFZhbHZlPC9kaXY+XG5cdFx0XHQ8SGVhdEV4Y2hhbmdlckNvbXBvdW5kLlJvb3Rcblx0XHRcdFx0Y29tcG9uZW50UHJvcHM9e3RoaXMucHJvcHN9XG5cdFx0XHRcdGl0ZW1Qcm9wcz17dGhpcy5wcm9wcy5wcm9wc31cblx0XHRcdFx0b25BY3Rpb25QZXJmb3JtZWQ9e3RoaXMub25BY3Rpb25QZXJmb3JtZWR9XG5cdFx0XHQ+XG5cdFx0XHRcdDxIZWF0RXhjaGFuZ2VyQ29tcG91bmQucGxhdGUgLz5cblx0XHRcdFx0PEhlYXRFeGNoYW5nZXJDb21wb3VuZC5wb3BvdmVyIGFuY2hvckVsPXt0aGlzLnZhbHZlUmVmLmN1cnJlbnR9IC8+XG5cdFx0XHQ8L0hlYXRFeGNoYW5nZXJDb21wb3VuZC5Sb290PlxuXHRcdCk7XG5cdH1cbn1cbi8vIFRoaXMgaXMgdGhlIGFjdHVhbCB0aGluZyB0aGF0IGdldHMgcmVnaXN0ZXJlZCB3aXRoIHRoZSBjb21wb25lbnQgcmVnaXN0cnkuXG5leHBvcnQgY2xhc3MgSGVhdEV4Y2hhbmdlck1ldGEgaW1wbGVtZW50cyBDb21wb25lbnRNZXRhIHtcblx0Z2V0Q29tcG9uZW50VHlwZSgpOiBzdHJpbmcge1xuXHRcdHJldHVybiBDT01QT05FTlRfVFlQRTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcmV0dXJucyBUaGUgUmVhY3QgY29tcG9uZW50IGNsYXNzLlxuXHQgKi9cblx0Z2V0Vmlld0NvbXBvbmVudCgpOiBQQ29tcG9uZW50IHtcblx0XHRyZXR1cm4gSGVhdEV4Y2hhbmdlcjtcblx0fVxuXG5cdGdldERlZmF1bHRTaXplKCk6IFNpemVPYmplY3Qge1xuXHRcdHJldHVybiB7XG5cdFx0XHR3aWR0aDogNDAsXG5cdFx0XHRoZWlnaHQ6IDcwLFxuXHRcdH07XG5cdH1cblxuXHQvLyBJbnZva2VkIHdoZW4gYW4gdXBkYXRlIHRvIHRoZSBQcm9wZXJ0eVRyZWUgaGFzIG9jY3VycmVkLFxuXHQvLyBlZmZlY3RpdmVseSBtYXBwaW5nIHRoZSB2YWx2ZVN0YXR1cyBvZiB0aGUgdHJlZSB0byBjb21wb25lbnQgcHJvcHMuXG5cdGdldFByb3BzUmVkdWNlcih0cmVlOiBQcm9wZXJ0eVRyZWUpOiBIeFByb3BzIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0dHlwZTogdHJlZS5yZWFkU3RyaW5nKFwidHlwZVwiLCBcInBsYXRlXCIpLFxuXHRcdFx0bW9kZTogdHJlZS5yZWFkU3RyaW5nKFwibW9kZVwiLCBcImhlYXRpbmdcIiksXG5cdFx0XHRpdGVtTmFtZTogdHJlZS5yZWFkU3RyaW5nKFwiaXRlbU5hbWVcIiwgXCJcIiksXG5cdFx0XHRsb2NhdGU6IHRyZWUucmVhZEJvb2xlYW4oXCJsb2NhdGVcIiwgZmFsc2UpLFxuXHRcdFx0c2hvd0xhYmVsOiB0cmVlLnJlYWRCb29sZWFuKFwic2hvd0xhYmVsXCIsIGZhbHNlKSxcblx0XHRcdGxhYmVsUG9zaXRpb246IHRyZWUucmVhZFN0cmluZyhcImxhYmVsUG9zaXRpb25cIiwgXCJ0b3AtbGVmdFwiKSxcblx0XHR9O1xuXHR9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVVJMID0gZXhwb3J0cy5ETlMgPSB2b2lkIDA7XG5jb25zdCBtZDVfanNfMSA9IHJlcXVpcmUoXCIuL21kNS5qc1wiKTtcbmNvbnN0IHYzNV9qc18xID0gcmVxdWlyZShcIi4vdjM1LmpzXCIpO1xudmFyIHYzNV9qc18yID0gcmVxdWlyZShcIi4vdjM1LmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRE5TXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2MzVfanNfMi5ETlM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJVUkxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHYzNV9qc18yLlVSTDsgfSB9KTtcbmZ1bmN0aW9uIHYzKHZhbHVlLCBuYW1lc3BhY2UsIGJ1Ziwgb2Zmc2V0KSB7XG4gICAgcmV0dXJuICgwLCB2MzVfanNfMS5kZWZhdWx0KSgweDMwLCBtZDVfanNfMS5kZWZhdWx0LCB2YWx1ZSwgbmFtZXNwYWNlLCBidWYsIG9mZnNldCk7XG59XG52My5ETlMgPSB2MzVfanNfMS5ETlM7XG52My5VUkwgPSB2MzVfanNfMS5VUkw7XG5leHBvcnRzLmRlZmF1bHQgPSB2MztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gL14oPzpbMC05YS1mXXs4fS1bMC05YS1mXXs0fS1bMS04XVswLTlhLWZdezN9LVs4OWFiXVswLTlhLWZdezN9LVswLTlhLWZdezEyfXwwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDB8ZmZmZmZmZmYtZmZmZi1mZmZmLWZmZmYtZmZmZmZmZmZmZmZmKSQvaTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHR5cGUge1xuXHRWYWx2ZUNvbXBvdW5kQ29udGV4dFR5cGUsXG5cdFZhbHZlQ29tcG91bmRSb290UHJvcHMsXG59IGZyb20gXCIuLi8uLi8uLi9hcGkvdHlwZXNcIjtcbi8vIGltcG9ydCB7IHVzZVZhbHZlUmVkdWNlciB9IGZyb20gXCIuLi8uLi8uLi9hcGkvaG9va3NcIjtcbmltcG9ydCB7XG5cdGdldEl0ZW1JZFBvc2l0aW9uQ2xhc3NOYW1lLFxuXHRnZXRWYWx2ZU1wSXRlbUNsYXNzTmFtZSxcblx0dmFsdmVNcEl0ZW1OYW1lcyxcbn0gZnJvbSBcIi4uLy4uLy4uL2FwaS91dGlsc1wiO1xuaW1wb3J0IEl0ZW0gZnJvbSBcIi4uL3ZhbHZlL2l0ZW1cIjtcbmltcG9ydCB7IHVzZUNyZWF0ZUNvbnRleHQgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvY3JlYXRlQ29udGV4dFwiO1xuaW1wb3J0IHsgcHJvY2Vzc09iamVjdFByb3BzIH0gZnJvbSBcIi4uLy4uLy4uL2FwaS9pbml0aWFsU3RhdGVcIjtcbmltcG9ydCB7XG5cdEhNSV9DT01QT05FTlRfQ0xBU1MsXG5cdElBX1NZTUJPTF9DT01QT05FTlRfQ09MVU1OLFxuXHRJQV9TWU1CT0xfQ09NUE9ORU5UX1JPVyxcblx0SUFfU1lNQk9MX0NPTVBPTkVOVF9XUkFQUEVSLFxuXHRWQUxWRV9DT01QT05FTlRfVFlQRSxcbn0gZnJvbSBcIi4uLy4uLy4uL2NvbnN0YW50c1wiO1xuXG4vLyBpbXBvcnQgJy4vdmFsdmUtbXAubW9kdWxlLmNzcydcbi8vIGltcG9ydCB7dmFsdmVTdGF0dXN9IGZyb20gJy4uLy4uL2FwaS9pbml0aWFsU3RhdGUnXG5jb25zdCBDT01QT05FTlRfVFlQRSA9IFZBTFZFX0NPTVBPTkVOVF9UWVBFO1xuXG4vLyBpbXBvcnQge3ZhbHZlU3RhdHVzfSBmcm9tICcuL2luaXRpYWxTdGF0ZSdcblxuZXhwb3J0IGNvbnN0IFtWYWx2ZUNvbnRleHRQcm92aWRlciwgdXNlVmFsdmVDb250ZXh0XSA9XG5cdHVzZUNyZWF0ZUNvbnRleHQ8VmFsdmVDb21wb3VuZENvbnRleHRUeXBlPihcIlZhbHZlTXBDb21wb3VuZFwiKTtcblxuY29uc3QgUm9vdCA9ICh7XG5cdGNvbXBvbmVudFByb3BzLFxuXHR2YWx2ZVByb3BzLFxuXHRvbkFjdGlvblBlcmZvcm1lZCxcblx0Y2hpbGRyZW4sXG59OiBWYWx2ZUNvbXBvdW5kUm9vdFByb3BzKSA9PiB7XG5cdHJldHVybiAoXG5cdFx0PFZhbHZlQ29udGV4dFByb3ZpZGVyXG5cdFx0XHR7Li4ue1xuXHRcdFx0XHR2YWx2ZVByb3BzLFxuXHRcdFx0XHRjb21wb25lbnRQcm9wcyxcblx0XHRcdFx0b25BY3Rpb25QZXJmb3JtZWQsXG5cdFx0XHR9fVxuXHRcdD5cblx0XHRcdHtjaGlsZHJlbn1cblx0XHQ8L1ZhbHZlQ29udGV4dFByb3ZpZGVyPlxuXHQpO1xufTtcbmNvbnN0IHZhbHZlID0gKCkgPT4ge1xuXHRjb25zdCB7IHZhbHZlUHJvcHMsIG9uQWN0aW9uUGVyZm9ybWVkLCBjb21wb25lbnRQcm9wcyB9ID1cblx0XHR1c2VWYWx2ZUNvbnRleHQoXCJWYWx2ZVwiKTtcblx0Y29uc3QgdmFsdmVSZWYgPSBSZWFjdC51c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xuXHRjb25zdCB7IGVtaXQgfSA9IGNvbXBvbmVudFByb3BzO1xuXHRjb25zdCB7IHByb2Nlc3NPYmplY3QgfSA9IHZhbHZlUHJvcHM7XG5cdGNvbnN0IHsgc3RhdHVzIH0gPSBwcm9jZXNzT2JqZWN0IHx8IHByb2Nlc3NPYmplY3RQcm9wcztcblx0Ly8gY29uc3QgaW5Db29yZCA9IHBvc2l0aW9uPy54ID8/IGZhbHNlO1xuXHQvLyBpZiBub3QgbG9jYXRlLCB0cmltIGxhc3QgaXRlbSBmcm9tIHZhbHZlTXBJdGVtTmFtZXNcblx0bGV0IGNvbXBvbmVudEl0ZW1OYW1lcyA9IHZhbHZlTXBJdGVtTmFtZXM7XG5cdGlmICghc3RhdHVzPy5sb2NhdGUpIHtcblx0XHRjb21wb25lbnRJdGVtTmFtZXMgPSBjb21wb25lbnRJdGVtTmFtZXMuc2xpY2UoMCwgLTEpO1xuXHR9XG5cdGNvbnN0IGNvbXBvbmVudENsYXNzTmFtZSA9IFwidmFsdmVfX21wXCI7XG5cdC8vIGlmICghaW5Db29yZCkge1xuXHRcdHJldHVybiAoXG5cdFx0XHQ8ZGl2XG5cdFx0XHRcdHJlZj17dmFsdmVSZWZ9XG5cdFx0XHRcdHsuLi5lbWl0KHtcblx0XHRcdFx0XHRjbGFzc2VzOiBbYCR7SUFfU1lNQk9MX0NPTVBPTkVOVF9DT0xVTU59YF0sXG5cdFx0XHRcdH0pfVxuXHRcdFx0XHRkYXRhLWNvbXBvbmVudD17Q09NUE9ORU5UX1RZUEV9XG5cdFx0XHRcdG9uQ2xpY2s9e29uQWN0aW9uUGVyZm9ybWVkfVxuXHRcdFx0PlxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT17YCR7SUFfU1lNQk9MX0NPTVBPTkVOVF9ST1d9YH0+XG5cdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9e2Ake0lBX1NZTUJPTF9DT01QT05FTlRfV1JBUFBFUn1gfT5cblx0XHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPXtgJHtITUlfQ09NUE9ORU5UX0NMQVNTfSAke2NvbXBvbmVudENsYXNzTmFtZX1gfT5cblx0XHRcdFx0XHRcdFx0e2NvbXBvbmVudEl0ZW1OYW1lcy5tYXAoKHsgdmFsdWUsIGluZGV4LCBrZXkgfSkgPT4gKFxuXHRcdFx0XHRcdFx0XHRcdC8vIGNvbnNvbGUubG9nKFxuXHRcdFx0XHRcdFx0XHRcdC8vIFx0YHJlLXJlbmRlcmVkICxrZXkgJHtrZXl9IHZhbHVlICR7dmFsdWV9IGluZGV4ICR7aW5kZXh9YFxuXHRcdFx0XHRcdFx0XHRcdC8vICksXG5cdFx0XHRcdFx0XHRcdFx0PEl0ZW1cblx0XHRcdFx0XHRcdFx0XHRcdGl0ZW1DbGFzc05hbWU9e1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR2YWx1ZSArIFwiIFwiICsgZ2V0VmFsdmVNcEl0ZW1DbGFzc05hbWUoaW5kZXgsIHN0YXR1cylcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdGtleT17a2V5fVxuXHRcdFx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0XHRcdCkpfVxuXHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0PC9kaXY+XG5cdFx0KTtcblxuIH07XG5cbmNvbnN0IHBvcG92ZXIgPSAoeyBhbmNob3JFbCB9OiB7IGFuY2hvckVsOiBIVE1MRGl2RWxlbWVudCB8IG51bGwgfSkgPT4ge1xuXHRjb25zdCB7IHZhbHZlUHJvcHMsIGNvbXBvbmVudFByb3BzIH0gPSB1c2VWYWx2ZUNvbnRleHQoXCJQb3BvdmVyXCIpO1xuXHRjb25zdCB7IHNob3dMYWJlbCwgbGFiZWxQb3NpdGlvbiwgcHJvY2Vzc09iamVjdCB9ID0gdmFsdmVQcm9wcztcblx0Y29uc3QgeyBzdGF0dXMgfSA9IHByb2Nlc3NPYmplY3QgfHwgcHJvY2Vzc09iamVjdFByb3BzO1xuXHRpZiAoIXNob3dMYWJlbCkgcmV0dXJuIG51bGw7XG5cdGNvbnN0IHsgcG9zaXRpb24gfSA9IGNvbXBvbmVudFByb3BzO1xuXHRsZXQgY2xhc3NOYW1lID0gXCJpdGVtSWQgcG9wb3ZlciBwb3NpdGlvbi1sZWZ0XCI7XG5cdGlmIChsYWJlbFBvc2l0aW9uKSB7XG5cdFx0Y2xhc3NOYW1lID0gZ2V0SXRlbUlkUG9zaXRpb25DbGFzc05hbWUoY2xhc3NOYW1lLCBsYWJlbFBvc2l0aW9uKTtcblx0fVxuXHRyZXR1cm4gKFxuXHRcdDxkaXZcblx0XHRcdGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuXHRcdFx0c3R5bGU9e3tcblx0XHRcdFx0dG9wOiBwb3NpdGlvbi55LFxuXHRcdFx0XHRsZWZ0OiBwb3NpdGlvbi54LFxuXHRcdFx0fX1cblx0XHQ+XG5cdFx0XHQ8ZGl2IHN0eWxlPXt7IHBhZGRpbmc6IDggfX0+e3N0YXR1cz8uaXRlbU5hbWV9PC9kaXY+XG5cdFx0PC9kaXY+XG5cdCk7XG59O1xuXG5leHBvcnQgY29uc3QgVmFsdmVNcENvbXBvdW5kID0ge1xuXHRSb290LFxuXHR2YWx2ZSxcblx0cG9wb3Zlcixcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHJlZ2V4X2pzXzEgPSByZXF1aXJlKFwiLi9yZWdleC5qc1wiKTtcbmZ1bmN0aW9uIHZhbGlkYXRlKHV1aWQpIHtcbiAgICByZXR1cm4gdHlwZW9mIHV1aWQgPT09ICdzdHJpbmcnICYmIHJlZ2V4X2pzXzEuZGVmYXVsdC50ZXN0KHV1aWQpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gdmFsaWRhdGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHZhbGlkYXRlX2pzXzEgPSByZXF1aXJlKFwiLi92YWxpZGF0ZS5qc1wiKTtcbmZ1bmN0aW9uIHZlcnNpb24odXVpZCkge1xuICAgIGlmICghKDAsIHZhbGlkYXRlX2pzXzEuZGVmYXVsdCkodXVpZCkpIHtcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbnZhbGlkIFVVSUQnKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlSW50KHV1aWQuc2xpY2UoMTQsIDE1KSwgMTYpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gdmVyc2lvbjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgcmFuZG9tVVVJRCA9IHR5cGVvZiBjcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIGNyeXB0by5yYW5kb21VVUlEICYmIGNyeXB0by5yYW5kb21VVUlELmJpbmQoY3J5cHRvKTtcbmV4cG9ydHMuZGVmYXVsdCA9IHsgcmFuZG9tVVVJRCB9O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB2YWxpZGF0ZV9qc18xID0gcmVxdWlyZShcIi4vdmFsaWRhdGUuanNcIik7XG5mdW5jdGlvbiBwYXJzZSh1dWlkKSB7XG4gICAgaWYgKCEoMCwgdmFsaWRhdGVfanNfMS5kZWZhdWx0KSh1dWlkKSkge1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ0ludmFsaWQgVVVJRCcpO1xuICAgIH1cbiAgICBsZXQgdjtcbiAgICByZXR1cm4gVWludDhBcnJheS5vZigodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMCwgOCksIDE2KSkgPj4+IDI0LCAodiA+Pj4gMTYpICYgMHhmZiwgKHYgPj4+IDgpICYgMHhmZiwgdiAmIDB4ZmYsICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSg5LCAxMyksIDE2KSkgPj4+IDgsIHYgJiAweGZmLCAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMTQsIDE4KSwgMTYpKSA+Pj4gOCwgdiAmIDB4ZmYsICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgxOSwgMjMpLCAxNikpID4+PiA4LCB2ICYgMHhmZiwgKCh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgyNCwgMzYpLCAxNikpIC8gMHgxMDAwMDAwMDAwMCkgJiAweGZmLCAodiAvIDB4MTAwMDAwMDAwKSAmIDB4ZmYsICh2ID4+PiAyNCkgJiAweGZmLCAodiA+Pj4gMTYpICYgMHhmZiwgKHYgPj4+IDgpICYgMHhmZiwgdiAmIDB4ZmYpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gcGFyc2U7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIGYocywgeCwgeSwgeikge1xuICAgIHN3aXRjaCAocykge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICByZXR1cm4gKHggJiB5KSBeICh+eCAmIHopO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICByZXR1cm4geCBeIHkgXiB6O1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICByZXR1cm4gKHggJiB5KSBeICh4ICYgeikgXiAoeSAmIHopO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICByZXR1cm4geCBeIHkgXiB6O1xuICAgIH1cbn1cbmZ1bmN0aW9uIFJPVEwoeCwgbikge1xuICAgIHJldHVybiAoeCA8PCBuKSB8ICh4ID4+PiAoMzIgLSBuKSk7XG59XG5mdW5jdGlvbiBzaGExKGJ5dGVzKSB7XG4gICAgY29uc3QgSyA9IFsweDVhODI3OTk5LCAweDZlZDllYmExLCAweDhmMWJiY2RjLCAweGNhNjJjMWQ2XTtcbiAgICBjb25zdCBIID0gWzB4Njc0NTIzMDEsIDB4ZWZjZGFiODksIDB4OThiYWRjZmUsIDB4MTAzMjU0NzYsIDB4YzNkMmUxZjBdO1xuICAgIGNvbnN0IG5ld0J5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYnl0ZXMubGVuZ3RoICsgMSk7XG4gICAgbmV3Qnl0ZXMuc2V0KGJ5dGVzKTtcbiAgICBuZXdCeXRlc1tieXRlcy5sZW5ndGhdID0gMHg4MDtcbiAgICBieXRlcyA9IG5ld0J5dGVzO1xuICAgIGNvbnN0IGwgPSBieXRlcy5sZW5ndGggLyA0ICsgMjtcbiAgICBjb25zdCBOID0gTWF0aC5jZWlsKGwgLyAxNik7XG4gICAgY29uc3QgTSA9IG5ldyBBcnJheShOKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IE47ICsraSkge1xuICAgICAgICBjb25zdCBhcnIgPSBuZXcgVWludDMyQXJyYXkoMTYpO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDE2OyArK2opIHtcbiAgICAgICAgICAgIGFycltqXSA9XG4gICAgICAgICAgICAgICAgKGJ5dGVzW2kgKiA2NCArIGogKiA0XSA8PCAyNCkgfFxuICAgICAgICAgICAgICAgICAgICAoYnl0ZXNbaSAqIDY0ICsgaiAqIDQgKyAxXSA8PCAxNikgfFxuICAgICAgICAgICAgICAgICAgICAoYnl0ZXNbaSAqIDY0ICsgaiAqIDQgKyAyXSA8PCA4KSB8XG4gICAgICAgICAgICAgICAgICAgIGJ5dGVzW2kgKiA2NCArIGogKiA0ICsgM107XG4gICAgICAgIH1cbiAgICAgICAgTVtpXSA9IGFycjtcbiAgICB9XG4gICAgTVtOIC0gMV1bMTRdID0gKChieXRlcy5sZW5ndGggLSAxKSAqIDgpIC8gTWF0aC5wb3coMiwgMzIpO1xuICAgIE1bTiAtIDFdWzE0XSA9IE1hdGguZmxvb3IoTVtOIC0gMV1bMTRdKTtcbiAgICBNW04gLSAxXVsxNV0gPSAoKGJ5dGVzLmxlbmd0aCAtIDEpICogOCkgJiAweGZmZmZmZmZmO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTjsgKytpKSB7XG4gICAgICAgIGNvbnN0IFcgPSBuZXcgVWludDMyQXJyYXkoODApO1xuICAgICAgICBmb3IgKGxldCB0ID0gMDsgdCA8IDE2OyArK3QpIHtcbiAgICAgICAgICAgIFdbdF0gPSBNW2ldW3RdO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IHQgPSAxNjsgdCA8IDgwOyArK3QpIHtcbiAgICAgICAgICAgIFdbdF0gPSBST1RMKFdbdCAtIDNdIF4gV1t0IC0gOF0gXiBXW3QgLSAxNF0gXiBXW3QgLSAxNl0sIDEpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBhID0gSFswXTtcbiAgICAgICAgbGV0IGIgPSBIWzFdO1xuICAgICAgICBsZXQgYyA9IEhbMl07XG4gICAgICAgIGxldCBkID0gSFszXTtcbiAgICAgICAgbGV0IGUgPSBIWzRdO1xuICAgICAgICBmb3IgKGxldCB0ID0gMDsgdCA8IDgwOyArK3QpIHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBNYXRoLmZsb29yKHQgLyAyMCk7XG4gICAgICAgICAgICBjb25zdCBUID0gKFJPVEwoYSwgNSkgKyBmKHMsIGIsIGMsIGQpICsgZSArIEtbc10gKyBXW3RdKSA+Pj4gMDtcbiAgICAgICAgICAgIGUgPSBkO1xuICAgICAgICAgICAgZCA9IGM7XG4gICAgICAgICAgICBjID0gUk9UTChiLCAzMCkgPj4+IDA7XG4gICAgICAgICAgICBiID0gYTtcbiAgICAgICAgICAgIGEgPSBUO1xuICAgICAgICB9XG4gICAgICAgIEhbMF0gPSAoSFswXSArIGEpID4+PiAwO1xuICAgICAgICBIWzFdID0gKEhbMV0gKyBiKSA+Pj4gMDtcbiAgICAgICAgSFsyXSA9IChIWzJdICsgYykgPj4+IDA7XG4gICAgICAgIEhbM10gPSAoSFszXSArIGQpID4+PiAwO1xuICAgICAgICBIWzRdID0gKEhbNF0gKyBlKSA+Pj4gMDtcbiAgICB9XG4gICAgcmV0dXJuIFVpbnQ4QXJyYXkub2YoSFswXSA+PiAyNCwgSFswXSA+PiAxNiwgSFswXSA+PiA4LCBIWzBdLCBIWzFdID4+IDI0LCBIWzFdID4+IDE2LCBIWzFdID4+IDgsIEhbMV0sIEhbMl0gPj4gMjQsIEhbMl0gPj4gMTYsIEhbMl0gPj4gOCwgSFsyXSwgSFszXSA+PiAyNCwgSFszXSA+PiAxNiwgSFszXSA+PiA4LCBIWzNdLCBIWzRdID4+IDI0LCBIWzRdID4+IDE2LCBIWzRdID4+IDgsIEhbNF0pO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gc2hhMTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgUHJvcGVydHlUcmVlIH0gZnJvbSBcIkBpbmR1Y3RpdmVhdXRvbWF0aW9uL3BlcnNwZWN0aXZlLWNsaWVudFwiO1xuaW1wb3J0IHR5cGUge1xuXHRDb21wb25lbnRQcm9wcyxcblx0Q29tcG9uZW50TWV0YSxcblx0UENvbXBvbmVudCxcblx0U2l6ZU9iamVjdCxcbn0gZnJvbSBcIkBpbmR1Y3RpdmVhdXRvbWF0aW9uL3BlcnNwZWN0aXZlLWNsaWVudFwiO1xuXG4vLyBpbXBvcnQgeyB1c2VDcmVhdGVDb250ZXh0IH0gZnJvbSBcInNyYy91dGlscy9jcmVhdGVDb250ZXh0XCI7XG5pbXBvcnQgeyBQYXJhbWV0ZXJzTGlzdFN0YXRlLCBQYXJhbUl0ZW0gfSBmcm9tIFwiLi4vYXBpL3R5cGVzXCI7XG5pbXBvcnQge1xuXHRQQVJBTUVURVJfTElTVF9DT01QT05FTlRfVFlQRSxcblx0SE1JX0NPTVBPTkVOVF9DTEFTUyxcblx0SUFfU1lNQk9MX0NPTVBPTkVOVF9DT0xVTU4sXG5cdElBX1NZTUJPTF9DT01QT05FTlRfUk9XLFxuXHRJQV9TWU1CT0xfQ09NUE9ORU5UX1dSQVBQRVIsXG59IGZyb20gXCIuLi9jb25zdGFudHNcIjtcblxudHlwZSBQYXJhbWV0ZXJzTGlzdENvbXBvbmVudFByb3BzID0ge1xuXHRwYXJhbWV0ZXJzOiBQYXJhbUl0ZW1bXTtcbn07XG5jb25zdCBpbml0UGFyYW1ldGVycyA9IFtcblx0e1xuXHRcdGxhYmVsOiB7XG5cdFx0XHR0ZXh0OiBcInRleHRcIixcblx0XHR9LFxuXHRcdGlucHV0OiB7XG5cdFx0XHR2YWx1ZTogbnVsbCxcblx0XHRcdHBsYWNlaG9sZGVyOiBcIkVudGVyIGEgTnVtYmVyXCIsXG5cdFx0fSxcblx0fSxcbl07XG5cbmV4cG9ydCBjb25zdCBDT01QT05FTlRfVFlQRSA9IFBBUkFNRVRFUl9MSVNUX0NPTVBPTkVOVF9UWVBFO1xuXG5leHBvcnQgY29uc3QgUGFyYW1ldGVyTGlzdENvbXBvbmVudCA9IChcblx0cHJvcHM6IENvbXBvbmVudFByb3BzPFBhcmFtZXRlcnNMaXN0Q29tcG9uZW50UHJvcHM+XG4pID0+IHtcblx0Y29uc3QgdHJhbnNmb3JtZWRQcm9wcyA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuXHRcdGNvbnN0IHsgcGFyYW1ldGVycyB9ID0gcHJvcHMucHJvcHMgfHwgaW5pdFBhcmFtZXRlcnM7XG5cdFx0cmV0dXJuIHBhcmFtZXRlcnM7XG5cdH0sIFtwcm9wcy5wcm9wcy5wYXJhbWV0ZXJzXSk7XG5cdGNvbnN0IHsgZW1pdCB9ID0gcHJvcHM7XG5cdGNvbnN0IGNvbXBvbmVudENsYXNzTmFtZSA9IFwicGFyYW1ldGVyLWxpc3RcIjtcblxuXHRyZXR1cm4gKFxuXHRcdDxkaXZcblx0XHRcdHsuLi5lbWl0KHtcblx0XHRcdFx0Y2xhc3NlczogW2Ake0lBX1NZTUJPTF9DT01QT05FTlRfQ09MVU1OfWBdLFxuXHRcdFx0fSl9XG5cdFx0XHRkYXRhLWNvbXBvbmVudD17Q09NUE9ORU5UX1RZUEV9XG5cdFx0PlxuXHRcdFx0PGRpdiBjbGFzc05hbWU9e2Ake0lBX1NZTUJPTF9DT01QT05FTlRfUk9XfWB9PlxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT17YCR7SUFfU1lNQk9MX0NPTVBPTkVOVF9XUkFQUEVSfWB9PlxuXHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPXtgJHtITUlfQ09NUE9ORU5UX0NMQVNTfSAke2NvbXBvbmVudENsYXNzTmFtZX1gfT5cblx0XHRcdFx0XHRcdHt0cmFuc2Zvcm1lZFByb3BzLm1hcCgocGFyYW06IFBhcmFtSXRlbSwgaW5kZXg6IG51bWJlcikgPT4ge1xuXHRcdFx0XHRcdFx0XHRjb25zdCB7IGxhYmVsLCBpbnB1dCB9ID0gcGFyYW07XG5cdFx0XHRcdFx0XHRcdHJldHVybiAoXG5cdFx0XHRcdFx0XHRcdFx0PGxhYmVsXG5cdFx0XHRcdFx0XHRcdFx0XHRrZXk9e2Ake2xhYmVsLnRleHR9LXBhcmFtZXRlciR7aW5kZXh9YH1cblx0XHRcdFx0XHRcdFx0XHRcdGNsYXNzTmFtZT1cImZpZWxkIHNtYWxsXCJcblx0XHRcdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8c3BhbiBjbGFzc05hbWU9XCJsYWJlbFwiPntsYWJlbC50ZXh0fTwvc3Bhbj5cblx0XHRcdFx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT1cImV1XCI+e2lucHV0LmV1fTwvc3Bhbj5cblx0XHRcdFx0XHRcdFx0XHRcdDxpbnB1dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlPVwidGV4dFwiXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlkPXtgJHtsYWJlbC50ZXh0fS1wYXJhbWV0ZXIke2luZGV4fWB9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlucHV0TW9kZT17aW5wdXQuaW5wdXRtb2RlfVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRwYXR0ZXJuPXtpbnB1dC5wYXR0ZXJuIHx8IFwiWzAtOV0qXCJ9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHBsYWNlaG9sZGVyPXtpbnB1dC5wbGFjZWhvbGRlcn1cblx0XHRcdFx0XHRcdFx0XHRcdFx0ZGlzYWJsZWQ9eyFpbnB1dC5lZGl0YWJsZX1cblx0XHRcdFx0XHRcdFx0XHRcdFx0bWluPXtpbnB1dC5taW59XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG1heD17aW5wdXQubWF4fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR2YWx1ZT17aW5wdXQudmFsdWV9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG9uQ2hhbmdlPXsoZSkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb3BzLnN0b3JlLnByb3BzLndyaXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YHBhcmFtZXRlcnNbJHtpbmRleH1dLmlucHV0LnZhbHVlYCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGUuY3VycmVudFRhcmdldC52YWx1ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gdXBkYXRlVmFsdWUocGFyc2VGbG9hdChwYXJzZUZsb2F0KGUudGFyZ2V0LnZhbHVlKS50b0ZpeGVkKDIpKSwgaW5kZXgpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9fVxuXHRcdFx0XHRcdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHRcdFx0XHQ8L2xhYmVsPlxuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0fSl9XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cdCk7XG59O1xuXG5leHBvcnQgY2xhc3MgUGFyYW1ldGVyTGlzdENvbXBvbmVudE1ldGEgaW1wbGVtZW50cyBDb21wb25lbnRNZXRhIHtcblx0Z2V0Q29tcG9uZW50VHlwZSgpOiBzdHJpbmcge1xuXHRcdHJldHVybiBDT01QT05FTlRfVFlQRTtcblx0fVxuXG5cdGdldERlZmF1bHRTaXplKCk6IFNpemVPYmplY3Qge1xuXHRcdHJldHVybiB7XG5cdFx0XHR3aWR0aDogMjQwLFxuXHRcdFx0aGVpZ2h0OiAyNDAsXG5cdFx0fTtcblx0fVxuXG5cdGdldFByb3BzUmVkdWNlcih0cmVlOiBQcm9wZXJ0eVRyZWUpOiBQYXJhbWV0ZXJzTGlzdFN0YXRlIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0cGFyYW1ldGVyczogdHJlZS5yZWFkKFwicGFyYW1ldGVyc1wiLCBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDoge1xuXHRcdFx0XHRcdFx0dGV4dDogXCJsYWJlbFwiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lOiBcIlwiLFxuXHRcdFx0XHRcdFx0dG9vbHRpcFRleHQ6IFwiXCIsXG5cdFx0XHRcdFx0XHR0b29sdGlwUG9zaXRpb246IFwiXCIsXG5cdFx0XHRcdFx0XHR0b29sdGlwQ2xhc3NOYW1lOiBcIlwiLFxuXHRcdFx0XHRcdFx0dG9vbHRpcElkOiBcIlwiLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0aW5wdXQ6IHtcblx0XHRcdFx0XHRcdHR5cGU6IFwidGV4dFwiLFxuXHRcdFx0XHRcdFx0aW5wdXRtb2RlOiBcIm51bWVyaWNcIixcblx0XHRcdFx0XHRcdHBsYWNlaG9sZGVyOiBcIkVudGVyIGEgbnVtYmVyXCIsXG5cdFx0XHRcdFx0XHRlZGl0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRcdHBhdHRlcm46IFwiXlswLTldKlsuLF0/WzAtOV0qJFwiLFxuXHRcdFx0XHRcdFx0bWluOiAwLFxuXHRcdFx0XHRcdFx0bWF4OiAxMDAsXG5cdFx0XHRcdFx0XHRkZWNpbWFsUGxhY2VzOiAyLFxuXHRcdFx0XHRcdFx0ZXU6IFwiXFx1MDBCNUNcIixcblx0XHRcdFx0XHRcdHZhbHVlOiAwLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH0sXG5cdFx0XHRdKSxcblx0XHR9O1xuXHR9XG5cblx0Z2V0Vmlld0NvbXBvbmVudCgpOiBQQ29tcG9uZW50IHtcblx0XHRyZXR1cm4gUGFyYW1ldGVyTGlzdENvbXBvbmVudCBhcyBQQ29tcG9uZW50O1xuXHR9XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHR5cGUgQ29tbWFuZFZhbHZlTXBQcm9wcyB9IGZyb20gXCIuLi9hcGkvdHlwZXNcIjtcbi8vIGltcG9ydCB7IEljb25BdXRvLCBJY29uSGFuZENsaWNrIH0gZnJvbSAnLi4vdXRpbHMvaWNvbnMnO1xuaW1wb3J0IHsgUHJvcGVydHlUcmVlIH0gZnJvbSBcIkBpbmR1Y3RpdmVhdXRvbWF0aW9uL3BlcnNwZWN0aXZlLWNsaWVudFwiO1xuaW1wb3J0IHR5cGUge1xuXHRDb21wb25lbnRQcm9wcyxcblx0Q29tcG9uZW50TWV0YSxcblx0UENvbXBvbmVudCxcblx0U2l6ZU9iamVjdCxcbn0gZnJvbSBcIkBpbmR1Y3RpdmVhdXRvbWF0aW9uL3BlcnNwZWN0aXZlLWNsaWVudFwiOyAvLydAaW5kdWN0aXZlYXV0b21hdGlvbi9wZXJzcGVjdGl2ZS1jbGllbnQnO1xuLy8gaW1wb3J0IHsgaW5pdGlhbENvbnRyb2xTdGF0ZSB9IGZyb20gXCIuLi9hcGkvaW5pdGlhbFN0YXRlXCI7XG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVZhbHZlTXBDb21tYW5kUmVkdWNlciB9IGZyb20gXCIuLi9hcGkvaG9va3NcIjtcbmltcG9ydCB7XG5cdEhNSV9DT01QT05FTlRfQ0xBU1MsXG5cdElBX1NZTUJPTF9DT01QT05FTlRfQ09MVU1OLFxuXHRJQV9TWU1CT0xfQ09NUE9ORU5UX1JPVyxcblx0SUFfU1lNQk9MX0NPTVBPTkVOVF9XUkFQUEVSLFxuXHRDT01NQU5EX1ZBTFZFX01QX0NPTVBPTkVOVF9UWVBFLFxufSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5cbmV4cG9ydCBjb25zdCBDT01QT05FTlRfVFlQRSA9IENPTU1BTkRfVkFMVkVfTVBfQ09NUE9ORU5UX1RZUEU7XG5cbi8vIGNvbnN0IGFyZUVxdWFsID0gKFxuLy8gXHRwcmV2UHJvcHM6IENvbXBvbmVudFByb3BzPENvbW1hbmRWYWx2ZU1wUHJvcHM+LFxuLy8gXHRuZXh0UHJvcHM6IENvbXBvbmVudFByb3BzPENvbW1hbmRWYWx2ZU1wUHJvcHM+XG4vLyApID0+IHtcbi8vIFx0Ly8gcmV0dXJuIHRydWUgaWYgcHJvcHMgYXJlIGVxdWFsLCBmYWxzZSBpZiByZS1yZW5kZXIgaXMgbmVlZGVkXG4vLyBcdHJldHVybiBwcmV2UHJvcHMucHJvcHMgPT09IG5leHRQcm9wcy5wcm9wcztcbi8vIH07XG5cbi8qKlxuICogVmFsdmUgY29tcG9uZW50IGNsYXNzLlxuICogRXh0ZW5kcyB0aGUgYmFzZSBDb21wb25lbnQgY2xhc3MgZnJvbSBQZXJzcGVjdGl2ZSwgdHlwZWQgd2l0aCBWYWx2ZVByb3BzLlxuICogUHJvdmlkZXMgYSBjdXN0b21pemFibGUgdmFsdmUgd2l0aCBwcm9wZXIgaGFuZGxpbmcgb2YgZGVzaWduZXIvcHJldmlldyBtb2Rlcy5cblxuICovXG5leHBvcnQgY29uc3QgQ29tbWFuZFZhbHZlTXAgPVxuXHQocHJvcHM6IENvbXBvbmVudFByb3BzPENvbW1hbmRWYWx2ZU1wUHJvcHM+KSA9PiB7XG5cdFx0Y29uc3QgeyBzdGF0ZSwgcmVkdWNlciB9ID0gdXNlVmFsdmVNcENvbW1hbmRSZWR1Y2VyKCk7XG5cdFx0Y29uc3QgeyBlbWl0IH0gPSBwcm9wcztcblxuXHRcdHVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0XHQvLyBTdWJzY3JpYmUgdG8gY2hhbmdlcyBvbiB0aGUgXCJjb21tYW5kXCIgcHJvcGVydHlcblx0XHRcdGNvbnN0IHVuc3Vic2NyaWJlID0gcHJvcHMuc3RvcmUucHJvcHMuc3Vic2NyaWJlKCh0cmVlOiBQcm9wZXJ0eVRyZWUpID0+IHtcblx0XHRcdFx0Ly8gVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgd2hlbmV2ZXIgXCJjb21tYW5kXCIgY2hhbmdlc1xuXHRcdFx0XHRjb25zdCBjb21tYW5kID0gdHJlZS5yZWFkKFwiY29tbWFuZFwiKTtcblx0XHRcdFx0Y29uc3QgeyBtYWluLCB1cHBlclNlYXQsIGxvd2VyU2VhdCAsIGF2YWlsYWJsZX0gPSBjb21tYW5kO1xuXHRcdFx0XHQvLyBZb3UgY2FuIHVwZGF0ZSBsb2NhbCBzdGF0ZSBvciBwZXJmb3JtIG90aGVyIGFjdGlvbnMgaGVyZVxuXHRcdFx0XHQvLyBVcGRhdGUgYXZhaWxhYmxlIHN0YXRlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoc3RhdGUuY29tbWFuZD8uYXZhaWxhYmxlICYmIGF2YWlsYWJsZSkge1xuXHRcdFx0XHRcdGlmIChhdmFpbGFibGUubWFpbiAhPT0gc3RhdGUuY29tbWFuZC5hdmFpbGFibGUubWFpbikge1xuXHRcdFx0XHRcdFx0cmVkdWNlci51cGRhdGVNYWluQXZhaWxhYmxlKFxuXHRcdFx0XHRcdFx0XHRhdmFpbGFibGUubWFpbiA/IHRydWUgOiBmYWxzZVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGF2YWlsYWJsZS51cHBlclNlYXQgIT09IHN0YXRlLmNvbW1hbmQuYXZhaWxhYmxlLnVwcGVyU2VhdCkge1xuXHRcdFx0XHRcdFx0cmVkdWNlci51cGRhdGVVcHBlclNlYXRBdmFpbGFibGUoXG5cdFx0XHRcdFx0XHRcdGF2YWlsYWJsZS51cHBlclNlYXQgPyB0cnVlIDogZmFsc2Vcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChhdmFpbGFibGUubG93ZXJTZWF0ICE9PSBzdGF0ZS5jb21tYW5kLmF2YWlsYWJsZS5sb3dlclNlYXQpIHtcblx0XHRcdFx0XHRcdHJlZHVjZXIudXBkYXRlTG93ZXJTZWF0QXZhaWxhYmxlKFxuXHRcdFx0XHRcdFx0XHRhdmFpbGFibGUubG93ZXJTZWF0ID8gdHJ1ZSA6IGZhbHNlXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH1cblxuXG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHN0YXRlLmNvbW1hbmQ/Lm1haW4gJiYgbWFpbikge1xuXHRcdFx0XHRcdGlmIChtYWluLmF1dG9NYW51YWwgIT09IHN0YXRlLmNvbW1hbmQubWFpbi5hdXRvTWFudWFsKSB7XG5cdFx0XHRcdFx0XHRyZWR1Y2VyLnVwZGF0ZUF1dG9NYW5TZWxlY3Rpb24oXG5cdFx0XHRcdFx0XHRcdCFtYWluLmF1dG9NYW51YWwgPyBcImF1dG9cIiA6IFwibWFudWFsXCJcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChtYWluLmFjdGl2YXRpb24gIT09IHN0YXRlLmNvbW1hbmQubWFpbi5hY3RpdmF0aW9uKSB7XG5cdFx0XHRcdFx0XHRpZiAoIW1haW4uYWN0aXZhdGlvbikge1xuXHRcdFx0XHRcdFx0XHRyZWR1Y2VyLnVwZGF0ZU1haW5NYW51YWxPZmYoKTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAobWFpbi5hY3RpdmF0aW9uKSB7XG5cdFx0XHRcdFx0XHRcdHJlZHVjZXIudXBkYXRlTWFpbk1hbnVhbE9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVXBkYXRlIGxvd2VyU2VhdCBzdGF0ZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKHN0YXRlLmNvbW1hbmQ/Lmxvd2VyU2VhdCAmJiBsb3dlclNlYXQpIHtcblx0XHRcdFx0XHRpZiAobG93ZXJTZWF0LmFjdGl2YXRpb24gIT09IHN0YXRlLmNvbW1hbmQubG93ZXJTZWF0LmFjdGl2YXRpb24pIHtcblx0XHRcdFx0XHRcdGlmICghbG93ZXJTZWF0LmFjdGl2YXRpb24pIHtcblx0XHRcdFx0XHRcdFx0cmVkdWNlci51cGRhdGVMc2xNYW51YWxPZmYoKTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAobG93ZXJTZWF0LmFjdGl2YXRpb24pIHtcblx0XHRcdFx0XHRcdFx0cmVkdWNlci51cGRhdGVMc2xNYW51YWxPbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBVcGRhdGUgdXBwZXJTZWF0IHN0YXRlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoc3RhdGUuY29tbWFuZD8udXBwZXJTZWF0ICYmIHVwcGVyU2VhdCkge1xuXHRcdFx0XHRcdGlmICh1cHBlclNlYXQuYWN0aXZhdGlvbiAhPT0gc3RhdGUuY29tbWFuZC51cHBlclNlYXQuYWN0aXZhdGlvbikge1xuXHRcdFx0XHRcdFx0aWYgKCF1cHBlclNlYXQuYWN0aXZhdGlvbikge1xuXHRcdFx0XHRcdFx0XHRyZWR1Y2VyLnVwZGF0ZVVzbE1hbnVhbE9mZigpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICh1cHBlclNlYXQuYWN0aXZhdGlvbikge1xuXHRcdFx0XHRcdFx0XHRyZWR1Y2VyLnVwZGF0ZVVzbE1hbnVhbE9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gQ2xlYW51cCBzdWJzY3JpcHRpb24gb24gdW5tb3VudFxuXHRcdFx0cmV0dXJuICgpID0+IHtcblx0XHRcdFx0aWYgKHR5cGVvZiB1bnN1YnNjcmliZSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0dW5zdWJzY3JpYmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9LCBbcHJvcHMuc3RvcmUucHJvcHNdKTtcblx0XHRjb25zdCB7IG1haW4sIHVwcGVyU2VhdCwgbG93ZXJTZWF0LCBhdmFpbGFibGUgfSA9IHN0YXRlLmNvbW1hbmQgPz8ge307XG5cblx0XHQvLyBjb25zdCBpc0ludGVybG9ja2VkID0gKGludGVybG9ja3M6IGJvb2xlYW5bXSk6IGJvb2xlYW4gPT4ge1xuXHRcdFx0Ly8gXHRyZXR1cm4gaW50ZXJsb2Nrcy5pbmNsdWRlcyh0cnVlLCAwKTtcblx0XHRcdC8vIH07XG5cdFx0Y29uc29sZS5sb2coYENvbW1hbmQgUHJvcHM6ICR7SlNPTi5zdHJpbmdpZnkoc3RhdGUuY29tbWFuZCxudWxsLDIpfWApXG5cdFx0Y29uc29sZS5sb2coYE1haW4gQXZhaWw6ICR7SlNPTi5zdHJpbmdpZnkoYXZhaWxhYmxlPy5tYWluLG51bGwsMil9YClcblx0XHRjb25zb2xlLmxvZyhgQ29tbWFuZCBQcm9wczogJHtKU09OLnN0cmluZ2lmeShhdmFpbGFibGU/LnVwcGVyU2VhdCxudWxsLDIpfWApXG5cdFx0Y29uc29sZS5sb2coYENvbW1hbmQgUHJvcHM6ICR7SlNPTi5zdHJpbmdpZnkoYXZhaWxhYmxlPy5sb3dlclNlYXQsbnVsbCwyKX1gKVxuXG5cdFx0Y29uc3QgaGFuZGxlTWFpbkF1dG9NYW51YWxTZWxlY3Rpb24gPSAobW9kZTogXCJhdXRvXCIgfCBcIm1hbnVhbFwiKTogdm9pZCA9PiB7XG5cdFx0XHRyZWR1Y2VyLnVwZGF0ZUF1dG9NYW5TZWxlY3Rpb24obW9kZSk7XG5cdFx0XHRpZiAobW9kZSA9PT0gXCJhdXRvXCIpIHtcblx0XHRcdFx0cHJvcHMuc3RvcmUucHJvcHM/LndyaXRlKFwiY29tbWFuZC5tYWluLmF1dG9NYW51YWxcIiwgZmFsc2UpOyAvLyBmYWxzZSA9IGF1dG9cblx0XHRcdH0gZWxzZSBpZiAobW9kZSA9PT0gXCJtYW51YWxcIikge1xuXHRcdFx0XHRwcm9wcy5zdG9yZS5wcm9wcz8ud3JpdGUoXCJjb21tYW5kLm1haW4uYXV0b01hbnVhbFwiLCB0cnVlKTsgLy8gdHJ1ZSA9IG1hbnVhbFxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRjb25zdCBoYW5kbGVNYWluTWFudWFsT24gPSAoKSA9PiB7XG5cdFx0XHRyZWR1Y2VyLnVwZGF0ZU1haW5NYW51YWxPbigpO1xuXHRcdFx0cHJvcHMuc3RvcmUucHJvcHM/LndyaXRlKFwiY29tbWFuZC5tYWluLmFjdGl2YXRpb25cIiwgdHJ1ZSk7XG5cdFx0fTtcblx0XHRjb25zdCBoYW5kbGVNYWluTWFudWFsT2ZmID0gKCkgPT4ge1xuXHRcdFx0cmVkdWNlci51cGRhdGVNYWluTWFudWFsT2ZmKCk7XG5cdFx0XHRwcm9wcy5zdG9yZS5wcm9wcz8ud3JpdGUoXCJjb21tYW5kLm1haW4uYWN0aXZhdGlvblwiLCBmYWxzZSk7XG5cdFx0fTtcblx0XHRjb25zdCBoYW5kbGVVc2xNYW51YWxPbiA9ICgpID0+IHtcblx0XHRcdHJlZHVjZXIudXBkYXRlVXNsTWFudWFsT24oKTtcblx0XHRcdHByb3BzLnN0b3JlLnByb3BzPy53cml0ZShcImNvbW1hbmQudXBwZXJTZWF0LmFjdGl2YXRpb25cIiwgdHJ1ZSk7XG5cdFx0fTtcblx0XHRjb25zdCBoYW5kbGVVc2xNYW51YWxPZmYgPSAoKSA9PiB7XG5cdFx0XHRyZWR1Y2VyLnVwZGF0ZVVzbE1hbnVhbE9mZigpO1xuXHRcdFx0cHJvcHMuc3RvcmUucHJvcHM/LndyaXRlKFwiY29tbWFuZC51cHBlclNlYXQuYWN0aXZhdGlvblwiLCBmYWxzZSk7XG5cdFx0fTtcblx0XHRjb25zdCBoYW5kbGVMc2xNYW51YWxPbiA9ICgpID0+IHtcblx0XHRcdHJlZHVjZXIudXBkYXRlTHNsTWFudWFsT24oKTtcblx0XHRcdHByb3BzLnN0b3JlLnByb3BzPy53cml0ZShcImNvbW1hbmQubG93ZXJTZWF0LmFjdGl2YXRpb25cIiwgdHJ1ZSk7XG5cdFx0fTtcblx0XHRjb25zdCBoYW5kbGVMc2xNYW51YWxPZmYgPSAoKSA9PiB7XG5cdFx0XHRyZWR1Y2VyLnVwZGF0ZUxzbE1hbnVhbE9mZigpO1xuXHRcdFx0cHJvcHMuc3RvcmUucHJvcHM/LndyaXRlKFwiY29tbWFuZC5sb3dlclNlYXQuYWN0aXZhdGlvblwiLCBmYWxzZSk7XG5cdFx0fTtcblx0XHRjb25zdCBjb21wb25lbnRDbGFzc05hbWUgPSBcImNvbW1hbmQtdmFsdmUtbXBcIjtcblx0XHRyZXR1cm4gKFxuXHRcdFx0PGRpdlxuXHRcdFx0XHR7Li4uZW1pdCh7XG5cdFx0XHRcdFx0Y2xhc3NlczogW2Ake0lBX1NZTUJPTF9DT01QT05FTlRfQ09MVU1OfWBdLFxuXHRcdFx0XHR9KX1cblx0XHRcdFx0ZGF0YS1jb21wb25lbnQ9e0NPTVBPTkVOVF9UWVBFfVxuXHRcdFx0PlxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT17YCR7SUFfU1lNQk9MX0NPTVBPTkVOVF9ST1d9YH0+XG5cdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9e2Ake0lBX1NZTUJPTF9DT01QT05FTlRfV1JBUFBFUn1gfT5cblx0XHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPXtgJHtITUlfQ09NUE9ORU5UX0NMQVNTfSAke2NvbXBvbmVudENsYXNzTmFtZX1gfT5cblx0XHRcdFx0XHRcdFx0PGxhYmVsIGNsYXNzTmFtZT1cIm1haW4tbGFiZWxcIj57bWFpbj8ubGFiZWx9PC9sYWJlbD5cblx0XHRcdFx0XHRcdFx0PGRpdlxuXHRcdFx0XHRcdFx0XHRcdHJvbGU9XCJncm91cFwiXG5cdFx0XHRcdFx0XHRcdFx0Y2xhc3NOYW1lPVwiYnV0dG9uLWdyb3VwIG91dGxpbmVkIG1haW4tYXV0by1tYW51YWxcIlxuXHRcdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdFx0XHRcdFx0Y2xhc3NOYW1lPXtgYnV0dG9uIG91dGxpbmVkICR7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCFtYWluPy5hdXRvTWFudWFsID8gXCJzZWxlY3RlZFwiIDogXCJcIlxuXHRcdFx0XHRcdFx0XHRcdFx0fWB9XG5cdFx0XHRcdFx0XHRcdFx0XHRkaXNhYmxlZD17IWF2YWlsYWJsZT8ubWFpbn1cblx0XHRcdFx0XHRcdFx0XHRcdG9uQ2xpY2s9eygpID0+IGhhbmRsZU1haW5BdXRvTWFudWFsU2VsZWN0aW9uKFwiYXV0b1wiKX1cblx0XHRcdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdFx0XHRBdXRvIHsvKiA8SWNvbkF1dG8gLz4gKi99XG5cdFx0XHRcdFx0XHRcdFx0PC9idXR0b24+XG5cdFx0XHRcdFx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdFx0XHRcdFx0Y2xhc3NOYW1lPXtgYnV0dG9uIG91dGxpbmVkICR7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG1haW4/LmF1dG9NYW51YWwgPyBcInNlbGVjdGVkXCIgOiBcIlwiXG5cdFx0XHRcdFx0XHRcdFx0XHR9YH1cblx0XHRcdFx0XHRcdFx0XHRcdGRpc2FibGVkPXshYXZhaWxhYmxlPy5tYWlufVxuXHRcdFx0XHRcdFx0XHRcdFx0b25DbGljaz17KCkgPT4gaGFuZGxlTWFpbkF1dG9NYW51YWxTZWxlY3Rpb24oXCJtYW51YWxcIil9XG5cdFx0XHRcdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0XHRcdFx0TWFudWFsXG5cdFx0XHRcdFx0XHRcdFx0XHR7LyogPEljb25IYW5kQ2xpY2sgLz4gKi99XG5cdFx0XHRcdFx0XHRcdFx0PC9idXR0b24+XG5cdFx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdFx0XHQ8ZGl2IHJvbGU9XCJncm91cFwiIGNsYXNzTmFtZT1cImJ1dHRvbi1ncm91cCBvdXRsaW5lZCBtYWluLW9uLW9mZlwiPlxuXHRcdFx0XHRcdFx0XHRcdDxidXR0b25cblx0XHRcdFx0XHRcdFx0XHRcdGNsYXNzTmFtZT17YGJ1dHRvbiBvdXRsaW5lZCAke1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRtYWluPy5hY3RpdmF0aW9uID8gXCJzZWxlY3RlZFwiIDogXCJcIlxuXHRcdFx0XHRcdFx0XHRcdFx0fWB9XG5cdFx0XHRcdFx0XHRcdFx0XHRkaXNhYmxlZD17XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCFhdmFpbGFibGU/Lm1haW4gfHwgIW1haW4/LmF1dG9NYW51YWxcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdG9uQ2xpY2s9e2hhbmRsZU1haW5NYW51YWxPbn1cblx0XHRcdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdFx0XHRPbiB7LyogPEljb25BdXRvIC8+ICovfVxuXHRcdFx0XHRcdFx0XHRcdDwvYnV0dG9uPlxuXHRcdFx0XHRcdFx0XHRcdDxidXR0b25cblx0XHRcdFx0XHRcdFx0XHRcdGNsYXNzTmFtZT17YGJ1dHRvbiBvdXRsaW5lZCAke1xuXHRcdFx0XHRcdFx0XHRcdFx0XHQhbWFpbj8uYWN0aXZhdGlvbiA/IFwic2VsZWN0ZWRcIiA6IFwiXCJcblx0XHRcdFx0XHRcdFx0XHRcdH1gfVxuXHRcdFx0XHRcdFx0XHRcdFx0ZGlzYWJsZWQ9e1xuXHRcdFx0XHRcdFx0XHRcdFx0XHQhYXZhaWxhYmxlPy5tYWluIHx8ICFtYWluPy5hdXRvTWFudWFsXG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkNsaWNrPXtoYW5kbGVNYWluTWFudWFsT2ZmfVxuXHRcdFx0XHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdFx0XHRcdE9mZlxuXHRcdFx0XHRcdFx0XHRcdFx0ey8qIDxJY29uSGFuZENsaWNrIC8+ICovfVxuXHRcdFx0XHRcdFx0XHRcdDwvYnV0dG9uPlxuXHRcdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHRcdFx0PGxhYmVsIGNsYXNzTmFtZT1cInVwcGVyLXNlYXQtbGFiZWxcIj57dXBwZXJTZWF0Py5sYWJlbH08L2xhYmVsPlxuXHRcdFx0XHRcdFx0XHQ8ZGl2XG5cdFx0XHRcdFx0XHRcdFx0cm9sZT1cImdyb3VwXCJcblx0XHRcdFx0XHRcdFx0XHRjbGFzc05hbWU9XCJidXR0b24tZ3JvdXAgb3V0bGluZWQgdXBwZXItc2VhdC1vbi1vZmZcIlxuXHRcdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdFx0XHRcdFx0Y2xhc3NOYW1lPXtgYnV0dG9uIG91dGxpbmVkICR7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHVwcGVyU2VhdD8uYWN0aXZhdGlvbiA/IFwic2VsZWN0ZWRcIiA6IFwiXCJcblx0XHRcdFx0XHRcdFx0XHRcdH1gfVxuXHRcdFx0XHRcdFx0XHRcdFx0ZGlzYWJsZWQ9e1xuXHRcdFx0XHRcdFx0XHRcdFx0XHQhYXZhaWxhYmxlPy51cHBlclNlYXQgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0IW1haW4/LmF1dG9NYW51YWxcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdG9uQ2xpY2s9e2hhbmRsZVVzbE1hbnVhbE9ufVxuXHRcdFx0XHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdFx0XHRcdE9uIHsvKiA8SWNvbkF1dG8gLz4gKi99XG5cdFx0XHRcdFx0XHRcdFx0PC9idXR0b24+XG5cdFx0XHRcdFx0XHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRcdFx0XHRcdFx0Y2xhc3NOYW1lPXtgYnV0dG9uIG91dGxpbmVkICR7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCF1cHBlclNlYXQ/LmFjdGl2YXRpb24gPyBcInNlbGVjdGVkXCIgOiBcIlwiXG5cdFx0XHRcdFx0XHRcdFx0XHR9YH1cblx0XHRcdFx0XHRcdFx0XHRcdGRpc2FibGVkPXtcblx0XHRcdFx0XHRcdFx0XHRcdFx0IWF2YWlsYWJsZT8udXBwZXJTZWF0IHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCFtYWluPy5hdXRvTWFudWFsXG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkNsaWNrPXtoYW5kbGVVc2xNYW51YWxPZmZ9XG5cdFx0XHRcdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0XHRcdFx0T2ZmXG5cdFx0XHRcdFx0XHRcdFx0XHR7LyogPEljb25IYW5kQ2xpY2sgLz4gKi99XG5cdFx0XHRcdFx0XHRcdFx0PC9idXR0b24+XG5cdFx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdFx0XHQ8bGFiZWwgY2xhc3NOYW1lPVwibG93ZXItc2VhdC1sYWJlbFwiPntsb3dlclNlYXQ/LmxhYmVsfTwvbGFiZWw+XG5cdFx0XHRcdFx0XHRcdDxkaXZcblx0XHRcdFx0XHRcdFx0XHRyb2xlPVwiZ3JvdXBcIlxuXHRcdFx0XHRcdFx0XHRcdGNsYXNzTmFtZT1cImJ1dHRvbi1ncm91cCBvdXRsaW5lZCBsb3dlci1zZWF0LW9uLW9mZlwiXG5cdFx0XHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdFx0XHRcdFx0XHRjbGFzc05hbWU9e2BidXR0b24gb3V0bGluZWQgJHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0bG93ZXJTZWF0Py5hY3RpdmF0aW9uID8gXCJzZWxlY3RlZFwiIDogXCJcIlxuXHRcdFx0XHRcdFx0XHRcdFx0fWB9XG5cdFx0XHRcdFx0XHRcdFx0XHRkaXNhYmxlZD17XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCFhdmFpbGFibGU/Lmxvd2VyU2VhdCB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQhbWFpbj8uYXV0b01hbnVhbFxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0b25DbGljaz17aGFuZGxlTHNsTWFudWFsT259XG5cdFx0XHRcdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0XHRcdFx0T24gey8qIDxJY29uQXV0byAvPiAqL31cblx0XHRcdFx0XHRcdFx0XHQ8L2J1dHRvbj5cblx0XHRcdFx0XHRcdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdFx0XHRcdFx0XHRjbGFzc05hbWU9e2BidXR0b24gb3V0bGluZWQgJHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0IWxvd2VyU2VhdD8uYWN0aXZhdGlvbiA/IFwic2VsZWN0ZWRcIiA6IFwiXCJcblx0XHRcdFx0XHRcdFx0XHRcdH1gfVxuXHRcdFx0XHRcdFx0XHRcdFx0ZGlzYWJsZWQ9e1xuXHRcdFx0XHRcdFx0XHRcdFx0XHQhYXZhaWxhYmxlPy5sb3dlclNlYXQgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0IW1haW4/LmF1dG9NYW51YWxcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdG9uQ2xpY2s9e2hhbmRsZUxzbE1hbnVhbE9mZn1cblx0XHRcdFx0XHRcdFx0XHRcdHZhbHVlPXtcInRydWVcIn1cblx0XHRcdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdFx0XHRPZmZcblx0XHRcdFx0XHRcdFx0XHRcdHsvKiA8SWNvbkhhbmRDbGljayAvPiAqL31cblx0XHRcdFx0XHRcdFx0XHQ8L2J1dHRvbj5cblx0XHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHQpO1xuXHR9XG5cblxuLy8gVGhpcyBpcyB0aGUgYWN0dWFsIHRoaW5nIHRoYXQgZ2V0cyByZWdpc3RlcmVkIHdpdGggdGhlIGNvbXBvbmVudCByZWdpc3RyeS5cbmV4cG9ydCBjbGFzcyBDb21tYW5kVmFsdmVNcE1ldGEgaW1wbGVtZW50cyBDb21wb25lbnRNZXRhIHtcblx0Z2V0Q29tcG9uZW50VHlwZSgpOiBzdHJpbmcge1xuXHRcdHJldHVybiBDT01QT05FTlRfVFlQRTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcmV0dXJucyBUaGUgUmVhY3QgY29tcG9uZW50IGNsYXNzLlxuXHQgKi9cblx0Z2V0Vmlld0NvbXBvbmVudCgpOiBQQ29tcG9uZW50IHtcblx0XHRyZXR1cm4gQ29tbWFuZFZhbHZlTXA7XG5cdH1cblxuXHRnZXREZWZhdWx0U2l6ZSgpOiBTaXplT2JqZWN0IHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0d2lkdGg6IDI4MCxcblx0XHRcdGhlaWdodDogMTQwLFxuXHRcdH07XG5cdH1cblxuXHQvLyBJbnZva2VkIHdoZW4gYW4gdXBkYXRlIHRvIHRoZSBQcm9wZXJ0eVRyZWUgaGFzIG9jY3VycmVkLFxuXHQvLyBlZmZlY3RpdmVseSBtYXBwaW5nIHRoZSB2YWx2ZVN0YXR1cyBvZiB0aGUgdHJlZSB0byBjb21wb25lbnQgcHJvcHMuXG5cdGdldFByb3BzUmVkdWNlcih0cmVlOiBQcm9wZXJ0eVRyZWUpOiBDb21tYW5kVmFsdmVNcFByb3BzIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Y29tbWFuZDoge1xuXHRcdFx0XHRhdmFpbGFibGU6IHtcblx0XHRcdFx0XHRtYWluOiB0cmVlLnJlYWRCb29sZWFuKFwiY29tbWFuZC5hdmFpbGFibGUubWFpblwiLCksXG5cdFx0XHRcdFx0dXBwZXJTZWF0OiB0cmVlLnJlYWRCb29sZWFuKFwiY29tbWFuZC5hdmFpbGFibGUudXBwZXJTZWF0XCIpLFxuXHRcdFx0XHRcdGxvd2VyU2VhdDogdHJlZS5yZWFkQm9vbGVhbihcImNvbW1hbmQuYXZhaWxhYmxlLmxvd2VyU2VhdFwiKSxcblx0XHRcdFx0fSxcblx0XHRcdFx0bWFpbjoge1xuXHRcdFx0XHRcdGxhYmVsOiB0cmVlLnJlYWRTdHJpbmcoXCJjb21tYW5kcy5tYWluLmxhYmVsXCIsIFwiXCIpLFxuXHRcdFx0XHRcdGF1dG9NYW51YWw6IHRyZWUucmVhZEJvb2xlYW4oXCJjb21tYW5kLm1haW4uYXV0b01hbnVhbFwiLCBmYWxzZSksXG5cdFx0XHRcdFx0YWN0aXZhdGlvbjogdHJlZS5yZWFkQm9vbGVhbihcImNvbW1hbmQubWFpbi5hY3RpdmF0aW9uXCIsIGZhbHNlKSxcblx0XHRcdFx0fSxcblx0XHRcdFx0dXBwZXJTZWF0OiB7XG5cdFx0XHRcdFx0bGFiZWw6IHRyZWUucmVhZFN0cmluZyhcImNvbW1hbmRzLnVwcGVyU2VhdC5sYWJlbFwiLCBcIlwiKSxcblx0XHRcdFx0XHRhY3RpdmF0aW9uOiB0cmVlLnJlYWRCb29sZWFuKFwiY29tbWFuZC51cHBlclNlYXQuYWN0aXZhdGlvblwiLCBmYWxzZSksXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGxvd2VyU2VhdDoge1xuXHRcdFx0XHRcdGxhYmVsOiB0cmVlLnJlYWRTdHJpbmcoXCJjb21tYW5kcy5sb3dlclNlYXQubGFiZWxcIiwgXCJcIiksXG5cdFx0XHRcdFx0YWN0aXZhdGlvbjogdHJlZS5yZWFkQm9vbGVhbihcImNvbW1hbmQubG93ZXJTZWF0LmFjdGl2YXRpb25cIiwgZmFsc2UpLFxuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHR9O1xuXHR9XG59XG5cbi8qKlxuICpcbmdldFByb3BzUmVkdWNlcih0cmVlOiBQcm9wZXJ0eVRyZWUpOiBNeVByb3BUeXBlIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAvLyB3aWxsIGdpdmUgdGhlIHByb3BlcnR5IHRyZWUgYXMgYSBwbGFpbiBqcyBvYmplY3QsIGluc3RlYWQgb2YgYW4gaW5zdGFuY2Ugb2YgUHJvcGVydHlUcmVlXG4gICAgICAgIC8vIHRoaXMgd291bGQgbGV0IHlvdSByZWFkIHRoZSB2YWx1ZSBvZiB0aGUgdHJlZSB2aWEgYHRoaXMucHJvcHMucHJvcHMuanNvbmAuICBTYW1lIHJlc3VsdCBvY2N1cnMgaWZcbiAgICAgICAgLy8gY2FsbGluZyB0cmVlLnJlYWQoKSwgd2l0aG91dCBwYXNzaW5nIGEgcGF0aCBwYXJhbWV0ZXIuXG4gICAgICAganNvbjogdHJlZS50b1BsYWluT2JqZWN0KClcblxuXG4gICAgICAgLy8gSWYgeW91IGhhZCB0byB3cml0ZSB0byB0aGUgdHJlZSdzICdkYXRhJyBub2RlLCBwYXNzaW5nIGluIGEgY2FsbGJhY2sgZnVuY3Rpb24gaW5zdGVhZCBvZiB0aGUgYWN0dWFsXG4gICAgICAgLy8gUHJvcGVydHlUcmVlIHdpbGwgc2ltcGxpZnkgdW5pdCB0ZXN0YWJpbGl0eSBvZiB5b3VyIGNvbXBvbmVudCBvdXRzaWRlIG9mIHBlcnNwZWN0aXZlJ3MgZW52aXJvbm1lbnQuXG4gICAgICAgLy8gWW91IHdvdWxkIGNhbGwgdGhpcyB2aWEgdGhpcy5wcm9wcy5wcm9wcy53cml0ZURhdGEoc29tZU5ld0RhdGEpXG4gICAgICAgd3JpdGVEYXRhOiAobmV3SnNvbikgLT4gdHJlZS53cml0ZShcImRhdGFcIiwgbmV3SnNvbilcbiAgICB9XG59XG4gKi9cbiIsIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtcblx0SXRlbUlkUG9zaXRpb25UeXBlLFxuXHR0eXBlIFB1bXBQcm9wcyxcblx0dHlwZSBQdW1wU3RhdGUsXG59IGZyb20gXCIuLi9hcGkvdHlwZXNcIjtcblxuaW1wb3J0IHtcblx0Q29tcG9uZW50LFxuXHRQcm9wZXJ0eVRyZWUsXG59IGZyb20gXCJAaW5kdWN0aXZlYXV0b21hdGlvbi9wZXJzcGVjdGl2ZS1jbGllbnRcIjtcbmltcG9ydCB0eXBlIHtcblx0Q29tcG9uZW50UHJvcHMsXG5cdENvbXBvbmVudE1ldGEsXG5cdFBDb21wb25lbnQsXG5cdFNpemVPYmplY3QsXG59IGZyb20gXCJAaW5kdWN0aXZlYXV0b21hdGlvbi9wZXJzcGVjdGl2ZS1jbGllbnRcIjsgLy8nQGluZHVjdGl2ZWF1dG9tYXRpb24vcGVyc3BlY3RpdmUtY2xpZW50JztcbmltcG9ydCB7IFB1bXBDb21wb3VuZCB9IGZyb20gXCIuLi9jb21wb25lbnRzL3Byb2Nlc3Mtb2JqZWN0cy9wdW1wcy9QdW1wQ29tcG91bmRcIjtcbmltcG9ydCB7IHB1bXBJbml0aWFsU3RhdHVzIH0gZnJvbSBcIi4uL2FwaS9pbml0aWFsU3RhdGVcIjtcblxuZXhwb3J0IGNvbnN0IENPTVBPTkVOVF9UWVBFID0gXCJobWkucHJvY2Vzc19vYmplY3RzLlB1bXBcIjtcblxuLyoqXG4gKiBWYWx2ZSBjb21wb25lbnQgY2xhc3MuXG4gKiBFeHRlbmRzIHRoZSBiYXNlIENvbXBvbmVudCBjbGFzcyBmcm9tIFBlcnNwZWN0aXZlLCB0eXBlZCB3aXRoIFZhbHZlUHJvcHMuXG4gKiBQcm92aWRlcyBhIGN1c3RvbWl6YWJsZSB2YWx2ZSB3aXRoIHByb3BlciBoYW5kbGluZyBvZiBkZXNpZ25lci9wcmV2aWV3IG1vZGVzLlxuICovXG5leHBvcnQgY2xhc3MgUHVtcCBleHRlbmRzIENvbXBvbmVudDxDb21wb25lbnRQcm9wczxQdW1wUHJvcHM+LCBhbnk+IHtcblx0dmFsdmVSZWY6IFJlYWN0LlJlZk9iamVjdDxIVE1MRGl2RWxlbWVudD47XG5cblx0Y29uc3RydWN0b3IocHJvcHM6IENvbXBvbmVudFByb3BzPFB1bXBQcm9wcz4pIHtcblx0XHRzdXBlcihwcm9wcyk7XG5cdFx0dGhpcy52YWx2ZVJlZiA9IFJlYWN0LmNyZWF0ZVJlZjxIVE1MRGl2RWxlbWVudD4oKTtcblx0fVxuXG5cdC8vIFRoaXMgaXMgYSBsaWZlY3ljbGUgbWV0aG9kIHRoYXQgaXMgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBmaXJzdCBtb3VudGVkIHRvIHRoZSBET00uXG5cdGNvbXBvbmVudERpZE1vdW50KCk6IHZvaWQge1xuXHRcdC8vIE5vIG5lZWQgdG8gaW5pdGlhbGl6ZSB2YWx2ZVJlZiBoZXJlXG5cdH1cblx0cHJvY2Vzc09iamVjdDogUHVtcFN0YXRlID1cblx0XHR0aGlzLnByb3BzLnByb3BzLnByb2Nlc3NPYmplY3Q/LnN0YXR1cyB8fCBwdW1wSW5pdGlhbFN0YXR1cztcblx0c3RhdHVzOiBQdW1wU3RhdGUgPSB0aGlzLnByb2Nlc3NPYmplY3Q7XG5cdHNob3dMYWJlbDogYm9vbGVhbiA9IHRoaXMucHJvcHMucHJvcHMuc2hvd0xhYmVsIHx8IGZhbHNlO1xuXHRsYWJlbFBvc2l0aW9uOiBJdGVtSWRQb3NpdGlvblR5cGUgPSB0aGlzLnByb3BzLnByb3BzLmxhYmVsUG9zaXRpb24gfHwgXCJsZWZ0XCI7XG5cblx0LyoqXG5cdCAqIEhhbmRsZXIgZm9yIHRoZSBjb21wb25lbnQncyBhY3Rpb24gZXZlbnQuXG5cdCAqL1xuXHRvbkFjdGlvblBlcmZvcm1lZCA9ICgpID0+IHtcblx0XHQvLyBJZiB0aGUgZGVzaWduZXIgaXMgaW4gXCJkZXNpZ25cIiBtb2RlLCBkb24ndCBkbyBhbnl0aGluZ1xuXHRcdGlmICghdGhpcy5wcm9wcy5ldmVudHNFbmFibGVkKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhcIlZhbHZlIGlzIGRpc2FibGVkIGluIHRoZSBkZXNpZ24tc2NvcGVcIik7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGNvbnNvbGUubG9nKFwiVmFsdmUgY2xpY2tlZCFcIik7XG5cdFx0dGhpcy5wcm9wcy5jb21wb25lbnRFdmVudHMuZmlyZUNvbXBvbmVudEV2ZW50KFwib25BY3Rpb25QZXJmb3JtZWRcIiwge30pO1xuXHR9O1xuXG5cdHJlbmRlcigpIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0Ly8gPGRpdj5UaGlzIGlzIFZhbHZlPC9kaXY+XG5cdFx0XHQ8UHVtcENvbXBvdW5kLlJvb3Rcblx0XHRcdFx0Y29tcG9uZW50UHJvcHM9e3RoaXMucHJvcHN9XG5cdFx0XHRcdHB1bXBQcm9wcz17dGhpcy5wcm9wcy5wcm9wc31cblx0XHRcdFx0b25BY3Rpb25QZXJmb3JtZWQ9e3RoaXMub25BY3Rpb25QZXJmb3JtZWR9XG5cdFx0XHQ+XG5cdFx0XHRcdDxQdW1wQ29tcG91bmQucHVtcCAvPlxuXHRcdFx0XHQ8UHVtcENvbXBvdW5kLnBvcG92ZXIgYW5jaG9yRWw9e3RoaXMudmFsdmVSZWYuY3VycmVudH0gLz5cblx0XHRcdDwvUHVtcENvbXBvdW5kLlJvb3Q+XG5cdFx0KTtcblx0fVxufVxuLy8gVGhpcyBpcyB0aGUgYWN0dWFsIHRoaW5nIHRoYXQgZ2V0cyByZWdpc3RlcmVkIHdpdGggdGhlIGNvbXBvbmVudCByZWdpc3RyeS5cbmV4cG9ydCBjbGFzcyBQdW1wTWV0YSBpbXBsZW1lbnRzIENvbXBvbmVudE1ldGEge1xuXHRnZXRDb21wb25lbnRUeXBlKCk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIENPTVBPTkVOVF9UWVBFO1xuXHR9XG5cblx0LyoqXG5cdCAqIEByZXR1cm5zIFRoZSBSZWFjdCBjb21wb25lbnQgY2xhc3MuXG5cdCAqL1xuXHRnZXRWaWV3Q29tcG9uZW50KCk6IFBDb21wb25lbnQge1xuXHRcdHJldHVybiBQdW1wO1xuXHR9XG5cblx0Z2V0RGVmYXVsdFNpemUoKTogU2l6ZU9iamVjdCB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHdpZHRoOiAzNixcblx0XHRcdGhlaWdodDogMzYsXG5cdFx0fTtcblx0fVxuXG5cdC8vIEludm9rZWQgd2hlbiBhbiB1cGRhdGUgdG8gdGhlIFByb3BlcnR5VHJlZSBoYXMgb2NjdXJyZWQsXG5cdC8vIGVmZmVjdGl2ZWx5IG1hcHBpbmcgdGhlIHZhbHZlU3RhdHVzIG9mIHRoZSB0cmVlIHRvIGNvbXBvbmVudCBwcm9wcy5cblx0Z2V0UHJvcHNSZWR1Y2VyKHRyZWU6IFByb3BlcnR5VHJlZSk6IFB1bXBQcm9wcyB7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0cHVtcFR5cGU6IHRyZWUucmVhZFN0cmluZyhcInB1bXBUeXBlXCIsIFwiY2VudHJpZnVnYWxcIiksXG5cdFx0XHRwcm9jZXNzT2JqZWN0OiB7XG5cdFx0XHRcdHN0YXR1czoge1xuXHRcdFx0XHRcdGFsYXJtOiB0cmVlLnJlYWRCb29sZWFuKFwicHJvY2Vzc09iamVjdC5zdGF0dXMuYWxhcm1cIiwgZmFsc2UpLFxuXHRcdFx0XHRcdGFjdEZCOiB0cmVlLnJlYWRCb29sZWFuKFwicHJvY2Vzc09iamVjdC5zdGF0dXMuYWN0RkJcIiwgZmFsc2UpLFxuXHRcdFx0XHRcdGRlQWN0RkI6IHRyZWUucmVhZEJvb2xlYW4oXCJwcm9jZXNzT2JqZWN0LnN0YXR1cy5kZUFjdEZCXCIsIGZhbHNlKSxcblx0XHRcdFx0XHRpdGVtTmFtZTogdHJlZS5yZWFkU3RyaW5nKFwicHJvY2Vzc09iamVjdC5zdGF0dXMuaXRlbU5hbWVcIiwgXCJcIiksXG5cdFx0XHRcdFx0bWFudWFsOiB0cmVlLnJlYWRCb29sZWFuKFwicHJvY2Vzc09iamVjdC5zdGF0dXMubWFudWFsXCIsIGZhbHNlKSxcblx0XHRcdFx0XHRtYXNrZWQ6IHRyZWUucmVhZEJvb2xlYW4oXCJwcm9jZXNzT2JqZWN0LnN0YXR1cy5tYXNrZWRcIiwgZmFsc2UpLFxuXHRcdFx0XHRcdGNoYW5naW5nOiB0cmVlLnJlYWRCb29sZWFuKFwicHJvY2Vzc09iamVjdC5zdGF0dXMuY2hhbmdpbmdcIiwgZmFsc2UpLFxuXHRcdFx0XHRcdGxvY2F0ZTogdHJlZS5yZWFkQm9vbGVhbihcInByb2Nlc3NPYmplY3Quc3RhdHVzLmxvY2F0ZVwiLCBmYWxzZSksXG5cdFx0XHRcdH0sXG5cdFx0XHR9LFxuXHRcdFx0c2hvd0xhYmVsOiB0cmVlLnJlYWRCb29sZWFuKFwic2hvd0xhYmVsXCIsIGZhbHNlKSxcblx0XHRcdGxhYmVsUG9zaXRpb246IHRyZWUucmVhZFN0cmluZyhcImxhYmVsUG9zaXRpb25cIiwgXCJ0b3AtbGVmdFwiKSxcblx0XHR9O1xuXHR9XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB0eXBlIHsgU3RhdHVzUHJvcHMgfSBmcm9tIFwiLi4vYXItdHlwZXMvc3RhdHVzXCI7XG5pbXBvcnQgdHlwZSB7XG5cdENvbXBvbmVudFByb3BzLFxuXHRDb21wb25lbnRNZXRhLFxuXHRQQ29tcG9uZW50LFxuXHRTaXplT2JqZWN0LFxuXHRQcm9wZXJ0eVRyZWUsXG59IGZyb20gXCJAaW5kdWN0aXZlYXV0b21hdGlvbi9wZXJzcGVjdGl2ZS1jbGllbnRcIjsgLy8nQGluZHVjdGl2ZWF1dG9tYXRpb24vcGVyc3BlY3RpdmUtY2xpZW50JztcbmltcG9ydCB7XG5cdEhNSV9DT01QT05FTlRfQ0xBU1MsXG5cdElBX1NZTUJPTF9DT01QT05FTlRfQ09MVU1OLFxuXHRJQV9TWU1CT0xfQ09NUE9ORU5UX1JPVyxcblx0SUFfU1lNQk9MX0NPTVBPTkVOVF9XUkFQUEVSLFxuXHRTVEFUVVNfQ09NUE9ORU5UX1RZUEUsXG59IGZyb20gXCIuLi9jb25zdGFudHNcIjtcblxuZXhwb3J0IGNvbnN0IENPTVBPTkVOVF9UWVBFID0gU1RBVFVTX0NPTVBPTkVOVF9UWVBFO1xuXG5leHBvcnQgY29uc3QgU3RhdHVzVmFsdmVNcCA9IChwcm9wczogQ29tcG9uZW50UHJvcHM8U3RhdHVzUHJvcHM+KSA9PiB7XG5cdGNvbnN0IHsgZW1pdCB9ID0gcHJvcHM7XG5cdGNvbnN0IHsgc3RhdHVzSXRlbXMgfSA9IHByb3BzLnByb3BzO1xuXHRjb25zdCBjb21wb25lbnRDbGFzc05hbWUgPSBcInN0YXR1c1wiO1xuXG5cdHJldHVybiAoXG5cdFx0PGRpdlxuXHRcdFx0ey4uLmVtaXQoe1xuXHRcdFx0XHRjbGFzc2VzOiBbYCR7SUFfU1lNQk9MX0NPTVBPTkVOVF9DT0xVTU59YF0sXG5cdFx0XHR9KX1cblx0XHRcdGRhdGEtY29tcG9uZW50PXtDT01QT05FTlRfVFlQRX1cblx0XHQ+XG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT17YCR7SUFfU1lNQk9MX0NPTVBPTkVOVF9ST1d9YH0+XG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPXtgJHtJQV9TWU1CT0xfQ09NUE9ORU5UX1dSQVBQRVJ9YH0+XG5cdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9e2Ake0hNSV9DT01QT05FTlRfQ0xBU1N9ICR7Y29tcG9uZW50Q2xhc3NOYW1lfWB9PlxuXHRcdFx0XHRcdFx0PHVsIGNsYXNzTmFtZT1cImxpc3QgYm9yZGVyZWQgZGVuc2VcIj5cblx0XHRcdFx0XHRcdFx0e3N0YXR1c0l0ZW1zLm1hcCgoaXRlbSwgaW5kZXgpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHRcdFx0XHRcdFx0PGxpIGtleT17aW5kZXh9PlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8bGFiZWwgY2xhc3NOYW1lPVwiY2hlY2tib3hcIj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cInRleHRcIj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxwIGNsYXNzTmFtZT17YHgtc21hbGwgJHtpdGVtLmxvd2xpZ2h0ID8gXCJsb3ctbGlnaHRcIjogXCJcIn1gfT57aXRlbS5sYWJlbH08L3A+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJlbmRcIj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdDxpbnB1dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRuYW1lPVwiY2hlY2tib3hcIlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZD17YGNoZWNrYm94LSR7aW5kZXh9YH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZT1cImNoZWNrYm94XCJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2hlY2tlZD17aXRlbS5zdGF0dXN9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlYWRPbmx5PXt0cnVlfVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHRcdFx0XHRcdFx0PC9sYWJlbD5cblx0XHRcdFx0XHRcdFx0XHRcdDwvbGk+XG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fSl9XG5cdFx0XHRcdFx0XHQ8L3VsPlxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXHQpO1xufTtcbi8vIFRoaXMgaXMgdGhlIGFjdHVhbCB0aGluZyB0aGF0IGdldHMgcmVnaXN0ZXJlZCB3aXRoIHRoZSBjb21wb25lbnQgcmVnaXN0cnkuXG5leHBvcnQgY2xhc3MgU3RhdHVzVmFsdmVNcE1ldGEgaW1wbGVtZW50cyBDb21wb25lbnRNZXRhIHtcblx0Z2V0Q29tcG9uZW50VHlwZSgpOiBzdHJpbmcge1xuXHRcdHJldHVybiBDT01QT05FTlRfVFlQRTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcmV0dXJucyBUaGUgUmVhY3QgY29tcG9uZW50IGNsYXNzLlxuXHQgKi9cblx0Z2V0Vmlld0NvbXBvbmVudCgpOiBQQ29tcG9uZW50IHtcblx0XHRyZXR1cm4gU3RhdHVzVmFsdmVNcCBhcyB1bmtub3duIGFzIFBDb21wb25lbnQ7XG5cdH1cblxuXHRnZXREZWZhdWx0U2l6ZSgpOiBTaXplT2JqZWN0IHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0d2lkdGg6IDI0MCxcblx0XHRcdGhlaWdodDogMzIsXG5cdFx0fTtcblx0fVxuXG5cdC8vIEludm9rZWQgd2hlbiBhbiB1cGRhdGUgdG8gdGhlIFByb3BlcnR5VHJlZSBoYXMgb2NjdXJyZWQsXG5cdC8vIGVmZmVjdGl2ZWx5IG1hcHBpbmcgdGhlIHZhbHZlU3RhdHVzIG9mIHRoZSB0cmVlIHRvIGNvbXBvbmVudCBwcm9wcy5cblx0Z2V0UHJvcHNSZWR1Y2VyKHRyZWU6IFByb3BlcnR5VHJlZSk6IFN0YXR1c1Byb3BzIHtcblx0XHRjb25zb2xlLmxvZyhgc3RhdHVzICR7dHJlZS5yZWFkKGBzdGF0dXNgKX1gKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRzdGF0dXNJdGVtczogdHJlZS5yZWFkKFwic3RhdHVzXCIsIFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiBgbGFiZWwgdGV4dGAsXG5cdFx0XHRcdFx0c3RhdHVzOiBmYWxzZSxcblx0XHRcdFx0XHRsb3dsaWdodDogZmFsc2UsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogYGxhYmVsIHRleHRgLFxuXHRcdFx0XHRcdHN0YXR1czogZmFsc2UsXG5cdFx0XHRcdFx0bG93bGlnaHQ6IGZhbHNlLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IGBsYWJlbCB0ZXh0YCxcblx0XHRcdFx0XHRzdGF0dXM6IGZhbHNlLFxuXHRcdFx0XHRcdGxvd2xpZ2h0OiBmYWxzZSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiBgbGFiZWwgdGV4dGAsXG5cdFx0XHRcdFx0c3RhdHVzOiBmYWxzZSxcblx0XHRcdFx0XHRsb3dsaWdodDogZmFsc2UsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogYGxhYmVsIHRleHRgLFxuXHRcdFx0XHRcdHN0YXR1czogZmFsc2UsXG5cdFx0XHRcdFx0bG93bGlnaHQ6IGZhbHNlLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IGBsYWJlbCB0ZXh0YCxcblx0XHRcdFx0XHRzdGF0dXM6IGZhbHNlLFxuXHRcdFx0XHRcdGxvd2xpZ2h0OiBmYWxzZSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiBgbGFiZWwgdGV4dGAsXG5cdFx0XHRcdFx0c3RhdHVzOiBmYWxzZSxcblx0XHRcdFx0XHRsb3dsaWdodDogZmFsc2UsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogYGxhYmVsIHRleHRgLFxuXHRcdFx0XHRcdHN0YXR1czogZmFsc2UsXG5cdFx0XHRcdFx0bG93bGlnaHQ6IGZhbHNlLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IGBsYWJlbCB0ZXh0YCxcblx0XHRcdFx0XHRzdGF0dXM6IGZhbHNlLFxuXHRcdFx0XHRcdGxvd2xpZ2h0OiBmYWxzZSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiBgbGFiZWwgdGV4dGAsXG5cdFx0XHRcdFx0c3RhdHVzOiBmYWxzZSxcblx0XHRcdFx0XHRsb3dsaWdodDogZmFsc2UsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogYGxhYmVsIHRleHRgLFxuXHRcdFx0XHRcdHN0YXR1czogZmFsc2UsXG5cdFx0XHRcdFx0bG93bGlnaHQ6IGZhbHNlLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGFiZWw6IGBsYWJlbCB0ZXh0YCxcblx0XHRcdFx0XHRzdGF0dXM6IGZhbHNlLFxuXHRcdFx0XHRcdGxvd2xpZ2h0OiBmYWxzZSxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhYmVsOiBgbGFiZWwgdGV4dGAsXG5cdFx0XHRcdFx0c3RhdHVzOiBmYWxzZSxcblx0XHRcdFx0XHRsb3dsaWdodDogZmFsc2UsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsYWJlbDogYGxhYmVsIHRleHRgLFxuXHRcdFx0XHRcdHN0YXR1czogZmFsc2UsXG5cdFx0XHRcdFx0bG93bGlnaHQ6IGZhbHNlLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSksXG5cdFx0fTtcblx0fVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX184ODNfXzsiLCJpbXBvcnQgdHlwZSB7IEVsZW1lbnRWYXJpYW50TGlzdCB9IGZyb20gXCIuL2FwaS91dGlsc1wiO1xuaW1wb3J0IHsgSHhNb2RlcyB9IGZyb20gXCIuL2FyLXR5cGVzL3Byb2Nlc3NPYmplY3RzL2hlYXRFeGNoYW5nZXJzL2h4LXR5cGVzXCI7XG5pbXBvcnQgeyBnZXRIeE1vZGVDbGFzc05hbWVzIH0gZnJvbSBcIi4vYXItdXRpbHMvcHJvY2Vzc09iamVjdHMvaGVhdEV4Y2hhbmdlcnMvaHgtdXRpbHNcIjtcblxuLyoqXG4gKiBITUkgQ29tcG9uZW50IE1vZHVsZSBDb25zdGFudHNcbiAqL1xuZXhwb3J0IGNvbnN0IElBX1NZTUJPTF9DT01QT05FTlRfQ09MVU1OID1cblx0XCJpYV9zeW1ib2xDb21wb25lbnQgaWFfc3ltYm9sQ29tcG9uZW50X19jb2x1bW5cIjtcbmV4cG9ydCBjb25zdCBJQV9TWU1CT0xfQ09NUE9ORU5UX1JPVyA9IFwiaWFfc3ltYm9sQ29tcG9uZW50X19yb3dcIjtcbmV4cG9ydCBjb25zdCBJQV9TWU1CT0xfQ09NUE9ORU5UX1dSQVBQRVIgPSBcImlhX3N5bWJvbENvbXBvbmVudF9fd3JhcHBlclwiO1xuZXhwb3J0IGNvbnN0IEhNSV9DT01QT05FTlRfQ0xBU1MgPSBcImhtaS1jb21wb25lbnRcIjtcblxuZXhwb3J0IGNvbnN0IFZBTFZFX0NPTVBPTkVOVF9UWVBFID0gXCJobWkucHJvY2Vzc19vYmplY3RzLlZhbHZlXCI7XG5leHBvcnQgY29uc3QgUFVNUF9DT01QT05FTlRfVFlQRSA9IFwiaG1pLnByb2Nlc3Nfb2JqZWN0cy5QdW1wXCI7XG5leHBvcnQgY29uc3QgU1RBVFVTX0NPTVBPTkVOVF9UWVBFID0gXCJobWkuZGlzcGxheS5TdGF0dXNWYWx2ZU1wXCI7XG5leHBvcnQgY29uc3QgUEFSQU1FVEVSX0xJU1RfQ09NUE9ORU5UX1RZUEUgPSBcImhtaS5pbnB1dC5QYXJhbWV0ZXJMaXN0XCI7XG5leHBvcnQgY29uc3QgQ09NTUFORF9WQUxWRV9NUF9DT01QT05FTlRfVFlQRSA9IFwiaG1pLmlucHV0LkNvbW1hbmRWYWx2ZU1wXCI7XG5leHBvcnQgY29uc3QgSFhfQ09NUE9ORU5UX1RZUEUgPSBcImhtaS5wcm9jZXNzX29iamVjdHMuSGVhdEV4Y2hhbmdlclwiO1xuXG5cbi8vIENvbXBvbmVudCBFbGVtZW50IENvbnN0cnVjdGlvblxuXG5leHBvcnQgY29uc3QgaHhFbGVtZW50czogRWxlbWVudFZhcmlhbnRMaXN0ID0gW1xueyBiYXNlQ2xhc3M6IGdldEh4TW9kZUNsYXNzTmFtZXMoXCJwbGF0ZVwiLEh4TW9kZXMuaGVhdGluZykgfSxcbnsgc3RhdHVzS2V5OiB7YWN0RkI6IHt0cnVlU3RyaW5nOlwiYWN0aXZhdGVkXCJ9fSB9LFxueyBzdGF0dXNLZXk6IHtkZUFjdEZCOiB7dHJ1ZVN0cmluZzpcImRlYWN0aXZhdGVkXCJ9fSB9LFxueyBzdGF0dXNLZXk6IHthbGFybToge3RydWVTdHJpbmc6XCJhbGFybVwifX0gfSxcbl1cbiIsIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtcblx0SXRlbUlkUG9zaXRpb25UeXBlLFxuXHRQcm9jZXNzT2JqZWN0LFxuXHR0eXBlIFZhbHZlUHJvcHMsXG5cdHR5cGUgVmFsdmVTdGF0ZSxcbn0gZnJvbSBcIi4uL2FwaS90eXBlc1wiO1xuXG5pbXBvcnQge1xuXHRDb21wb25lbnQsXG5cdFByb3BlcnR5VHJlZSxcbn0gZnJvbSBcIkBpbmR1Y3RpdmVhdXRvbWF0aW9uL3BlcnNwZWN0aXZlLWNsaWVudFwiO1xuaW1wb3J0IHR5cGUge1xuXHRDb21wb25lbnRQcm9wcyxcblx0Q29tcG9uZW50TWV0YSxcblx0UENvbXBvbmVudCxcblx0U2l6ZU9iamVjdCxcbn0gZnJvbSBcIkBpbmR1Y3RpdmVhdXRvbWF0aW9uL3BlcnNwZWN0aXZlLWNsaWVudFwiOyAvLydAaW5kdWN0aXZlYXV0b21hdGlvbi9wZXJzcGVjdGl2ZS1jbGllbnQnO1xuaW1wb3J0IHsgVmFsdmVNcENvbXBvdW5kIH0gZnJvbSBcIi4vcHJvY2Vzcy1vYmplY3RzL3ZhbHZlLW1wL1ZhbHZlTXBcIjtcbmltcG9ydCB7IHByb2Nlc3NPYmplY3RQcm9wcyB9IGZyb20gXCIuLi9hcGkvaW5pdGlhbFN0YXRlXCI7XG4vLyBpbXBvcnQgeyB2YWx2ZVByb3BzIH0gZnJvbSBcIi4vcHJvY2Vzcy1vYmplY3RzL3ZhbHZlL2luaXRpYWxTdGF0ZVwiO1xuLy8gaW1wb3J0IHsgVmFsdmVGQ0NvbXBvdW5kIH0gZnJvbSBcIi4vcHJvY2Vzcy1vYmplY3RzL3ZhbHZlL1ZhbHZlRkNcIjtcblxuZXhwb3J0IGNvbnN0IENPTVBPTkVOVF9UWVBFID0gXCJobWkucHJvY2Vzc19vYmplY3RzLlZhbHZlX21wXCI7XG5cbi8qKlxuICogVmFsdmUgY29tcG9uZW50IGNsYXNzLlxuICogRXh0ZW5kcyB0aGUgYmFzZSBDb21wb25lbnQgY2xhc3MgZnJvbSBQZXJzcGVjdGl2ZSwgdHlwZWQgd2l0aCBWYWx2ZVByb3BzLlxuICogUHJvdmlkZXMgYSBjdXN0b21pemFibGUgdmFsdmUgd2l0aCBwcm9wZXIgaGFuZGxpbmcgb2YgZGVzaWduZXIvcHJldmlldyBtb2Rlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFZhbHZlIGV4dGVuZHMgQ29tcG9uZW50PENvbXBvbmVudFByb3BzPFZhbHZlUHJvcHM+LCBhbnk+IHtcblx0dmFsdmVSZWY6IFJlYWN0LlJlZk9iamVjdDxIVE1MRGl2RWxlbWVudD47XG5cblx0Y29uc3RydWN0b3IocHJvcHM6IENvbXBvbmVudFByb3BzPFZhbHZlUHJvcHM+KSB7XG5cdFx0c3VwZXIocHJvcHMpO1xuXHRcdHRoaXMudmFsdmVSZWYgPSBSZWFjdC5jcmVhdGVSZWY8SFRNTERpdkVsZW1lbnQ+KCk7XG5cdH1cblxuXHQvLyBUaGlzIGlzIGEgbGlmZWN5Y2xlIG1ldGhvZCB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgZmlyc3QgbW91bnRlZCB0byB0aGUgRE9NLlxuXHRjb21wb25lbnREaWRNb3VudCgpOiB2b2lkIHtcblx0XHQvLyBObyBuZWVkIHRvIGluaXRpYWxpemUgdmFsdmVSZWYgaGVyZVxuXHR9XG5cdHByb2Nlc3NPYmplY3Q6IFByb2Nlc3NPYmplY3QgPVxuXHRcdHRoaXMucHJvcHMucHJvcHMucHJvY2Vzc09iamVjdCB8fCBwcm9jZXNzT2JqZWN0UHJvcHM7XG5cdHN0YXR1czogVmFsdmVTdGF0ZSA9IHRoaXMucHJvY2Vzc09iamVjdC5zdGF0dXM7XG5cdHNob3dMYWJlbDogYm9vbGVhbiA9IHRoaXMucHJvcHMucHJvcHMuc2hvd0xhYmVsIHx8IGZhbHNlO1xuXHRsYWJlbFBvc2l0aW9uOiBJdGVtSWRQb3NpdGlvblR5cGUgPSB0aGlzLnByb3BzLnByb3BzLmxhYmVsUG9zaXRpb24gfHwgXCJsZWZ0XCI7XG5cblx0LyoqXG5cdCAqIEhhbmRsZXIgZm9yIHRoZSBjb21wb25lbnQncyBhY3Rpb24gZXZlbnQuXG5cdCAqL1xuXHRvbkFjdGlvblBlcmZvcm1lZCA9ICgpID0+IHtcblx0XHQvLyBJZiB0aGUgZGVzaWduZXIgaXMgaW4gXCJkZXNpZ25cIiBtb2RlLCBkb24ndCBkbyBhbnl0aGluZ1xuXHRcdGlmICghdGhpcy5wcm9wcy5ldmVudHNFbmFibGVkKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhcIlZhbHZlIGlzIGRpc2FibGVkIGluIHRoZSBkZXNpZ24tc2NvcGVcIik7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGNvbnNvbGUubG9nKFwiVmFsdmUgY2xpY2tlZCFcIik7XG5cdFx0dGhpcy5wcm9wcy5jb21wb25lbnRFdmVudHMuZmlyZUNvbXBvbmVudEV2ZW50KFwib25BY3Rpb25QZXJmb3JtZWRcIiwge30pO1xuXHR9O1xuXG5cdHJlbmRlcigpIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0Ly8gPGRpdj5UaGlzIGlzIFZhbHZlPC9kaXY+XG5cdFx0XHQ8VmFsdmVNcENvbXBvdW5kLlJvb3Rcblx0XHRcdFx0Y29tcG9uZW50UHJvcHM9e3RoaXMucHJvcHN9XG5cdFx0XHRcdHZhbHZlUHJvcHM9e3RoaXMucHJvcHMucHJvcHN9XG5cdFx0XHRcdG9uQWN0aW9uUGVyZm9ybWVkPXt0aGlzLm9uQWN0aW9uUGVyZm9ybWVkfVxuXHRcdFx0PlxuXHRcdFx0XHQ8VmFsdmVNcENvbXBvdW5kLnZhbHZlIC8+XG5cdFx0XHRcdDxWYWx2ZU1wQ29tcG91bmQucG9wb3ZlciBhbmNob3JFbD17dGhpcy52YWx2ZVJlZi5jdXJyZW50fSAvPlxuXHRcdFx0PC9WYWx2ZU1wQ29tcG91bmQuUm9vdD5cblx0XHQpO1xuXHR9XG59XG4vLyBUaGlzIGlzIHRoZSBhY3R1YWwgdGhpbmcgdGhhdCBnZXRzIHJlZ2lzdGVyZWQgd2l0aCB0aGUgY29tcG9uZW50IHJlZ2lzdHJ5LlxuZXhwb3J0IGNsYXNzIFZhbHZlTWV0YSBpbXBsZW1lbnRzIENvbXBvbmVudE1ldGEge1xuXHRnZXRDb21wb25lbnRUeXBlKCk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIENPTVBPTkVOVF9UWVBFO1xuXHR9XG5cblx0LyoqXG5cdCAqIEByZXR1cm5zIFRoZSBSZWFjdCBjb21wb25lbnQgY2xhc3MuXG5cdCAqL1xuXHRnZXRWaWV3Q29tcG9uZW50KCk6IFBDb21wb25lbnQge1xuXHRcdHJldHVybiBWYWx2ZTtcblx0fVxuXG5cdGdldERlZmF1bHRTaXplKCk6IFNpemVPYmplY3Qge1xuXHRcdHJldHVybiB7XG5cdFx0XHR3aWR0aDogMjAsXG5cdFx0XHRoZWlnaHQ6IDQwLFxuXHRcdH07XG5cdH1cblxuXHQvLyBJbnZva2VkIHdoZW4gYW4gdXBkYXRlIHRvIHRoZSBQcm9wZXJ0eVRyZWUgaGFzIG9jY3VycmVkLFxuXHQvLyBlZmZlY3RpdmVseSBtYXBwaW5nIHRoZSB2YWx2ZVN0YXR1cyBvZiB0aGUgdHJlZSB0byBjb21wb25lbnQgcHJvcHMuXG5cdGdldFByb3BzUmVkdWNlcih0cmVlOiBQcm9wZXJ0eVRyZWUpOiBWYWx2ZVByb3BzIHtcblx0XHRjb25zb2xlLmxvZyhcblx0XHRcdGBpdGVtTmFtZTogJHt0cmVlLnJlYWRTdHJpbmcoXG5cdFx0XHRcdFwicHJvY2Vzc09iamVjdC5zdGF0dXMuaXRlbU5hbWVcIlxuXHRcdFx0KX0gc2hvd0xhYmVsICR7dHJlZS5yZWFkQm9vbGVhbihcInNob3dMYWJlbFwiKX1gXG5cdFx0KTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRwcm9jZXNzT2JqZWN0OiB7XG5cdFx0XHRcdHN0YXR1czoge1xuXHRcdFx0XHRcdGFsYXJtOiB0cmVlLnJlYWRCb29sZWFuKFwicHJvY2Vzc09iamVjdC5zdGF0dXMuYWxhcm1cIiwgZmFsc2UpLFxuXHRcdFx0XHRcdGFjdEZCOiB0cmVlLnJlYWRCb29sZWFuKFwicHJvY2Vzc09iamVjdC5zdGF0dXMuYWN0RkJcIiwgZmFsc2UpLFxuXHRcdFx0XHRcdGRlQWN0RkI6IHRyZWUucmVhZEJvb2xlYW4oXCJwcm9jZXNzT2JqZWN0LnN0YXR1cy5kZUFjdEZCXCIsIGZhbHNlKSxcblx0XHRcdFx0XHRhY3RpdmF0ZWRDb25maWc6IHRyZWUucmVhZE51bWJlcihcblx0XHRcdFx0XHRcdFwicHJvY2Vzc09iamVjdC5zdGF0dXMuYWN0aXZhdGVkQ29uZmlnXCIsXG5cdFx0XHRcdFx0XHQ1MTFcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdGRlYWN0aXZhdGVkQ29uZmlnOiB0cmVlLnJlYWROdW1iZXIoXG5cdFx0XHRcdFx0XHRcInByb2Nlc3NPYmplY3Quc3RhdHVzLmRlYWN0aXZhdGVkQ29uZmlnXCIsXG5cdFx0XHRcdFx0XHQ0MDk1XG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRpdGVtTmFtZTogdHJlZS5yZWFkU3RyaW5nKFwicHJvY2Vzc09iamVjdC5zdGF0dXMuaXRlbU5hbWVcIiwgXCJcIiksXG5cdFx0XHRcdFx0bWFudWFsOiB0cmVlLnJlYWRCb29sZWFuKFwicHJvY2Vzc09iamVjdC5zdGF0dXMubWFudWFsXCIsIGZhbHNlKSxcblx0XHRcdFx0XHRtYXNrZWQ6IHRyZWUucmVhZEJvb2xlYW4oXCJwcm9jZXNzT2JqZWN0LnN0YXR1cy5tYXNrZWRcIiwgZmFsc2UpLFxuXHRcdFx0XHRcdGNoYW5naW5nOiB0cmVlLnJlYWRCb29sZWFuKFwicHJvY2Vzc09iamVjdC5zdGF0dXMuY2hhbmdpbmdcIiwgZmFsc2UpLFxuXHRcdFx0XHRcdGxvY2F0ZTogdHJlZS5yZWFkQm9vbGVhbihcInByb2Nlc3NPYmplY3Quc3RhdHVzLmxvY2F0ZVwiLCBmYWxzZSksXG5cdFx0XHRcdFx0dXNsOiB0cmVlLnJlYWRCb29sZWFuKFwicHJvY2Vzc09iamVjdC5zdGF0dXMudXNsXCIsIGZhbHNlKSxcblx0XHRcdFx0XHRsc2w6IHRyZWUucmVhZEJvb2xlYW4oXCJwcm9jZXNzT2JqZWN0LnN0YXR1cy5sc2xcIiwgZmFsc2UpLFxuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHRcdHNob3dMYWJlbDogdHJlZS5yZWFkQm9vbGVhbihcInNob3dMYWJlbFwiLCBmYWxzZSksXG5cdFx0XHRsYWJlbFBvc2l0aW9uOiB0cmVlLnJlYWRTdHJpbmcoXCJsYWJlbFBvc2l0aW9uXCIsIFwidG9wLWxlZnRcIiksXG5cdFx0fTtcblx0fVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlVSTCA9IGV4cG9ydHMuRE5TID0gZXhwb3J0cy5zdHJpbmdUb0J5dGVzID0gdm9pZCAwO1xuY29uc3QgcGFyc2VfanNfMSA9IHJlcXVpcmUoXCIuL3BhcnNlLmpzXCIpO1xuY29uc3Qgc3RyaW5naWZ5X2pzXzEgPSByZXF1aXJlKFwiLi9zdHJpbmdpZnkuanNcIik7XG5mdW5jdGlvbiBzdHJpbmdUb0J5dGVzKHN0cikge1xuICAgIHN0ciA9IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChzdHIpKTtcbiAgICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KHN0ci5sZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGJ5dGVzW2ldID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgfVxuICAgIHJldHVybiBieXRlcztcbn1cbmV4cG9ydHMuc3RyaW5nVG9CeXRlcyA9IHN0cmluZ1RvQnl0ZXM7XG5leHBvcnRzLkROUyA9ICc2YmE3YjgxMC05ZGFkLTExZDEtODBiNC0wMGMwNGZkNDMwYzgnO1xuZXhwb3J0cy5VUkwgPSAnNmJhN2I4MTEtOWRhZC0xMWQxLTgwYjQtMDBjMDRmZDQzMGM4JztcbmZ1bmN0aW9uIHYzNSh2ZXJzaW9uLCBoYXNoLCB2YWx1ZSwgbmFtZXNwYWNlLCBidWYsIG9mZnNldCkge1xuICAgIGNvbnN0IHZhbHVlQnl0ZXMgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gc3RyaW5nVG9CeXRlcyh2YWx1ZSkgOiB2YWx1ZTtcbiAgICBjb25zdCBuYW1lc3BhY2VCeXRlcyA9IHR5cGVvZiBuYW1lc3BhY2UgPT09ICdzdHJpbmcnID8gKDAsIHBhcnNlX2pzXzEuZGVmYXVsdCkobmFtZXNwYWNlKSA6IG5hbWVzcGFjZTtcbiAgICBpZiAodHlwZW9mIG5hbWVzcGFjZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgbmFtZXNwYWNlID0gKDAsIHBhcnNlX2pzXzEuZGVmYXVsdCkobmFtZXNwYWNlKTtcbiAgICB9XG4gICAgaWYgKG5hbWVzcGFjZT8ubGVuZ3RoICE9PSAxNikge1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ05hbWVzcGFjZSBtdXN0IGJlIGFycmF5LWxpa2UgKDE2IGl0ZXJhYmxlIGludGVnZXIgdmFsdWVzLCAwLTI1NSknKTtcbiAgICB9XG4gICAgbGV0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoMTYgKyB2YWx1ZUJ5dGVzLmxlbmd0aCk7XG4gICAgYnl0ZXMuc2V0KG5hbWVzcGFjZUJ5dGVzKTtcbiAgICBieXRlcy5zZXQodmFsdWVCeXRlcywgbmFtZXNwYWNlQnl0ZXMubGVuZ3RoKTtcbiAgICBieXRlcyA9IGhhc2goYnl0ZXMpO1xuICAgIGJ5dGVzWzZdID0gKGJ5dGVzWzZdICYgMHgwZikgfCB2ZXJzaW9uO1xuICAgIGJ5dGVzWzhdID0gKGJ5dGVzWzhdICYgMHgzZikgfCAweDgwO1xuICAgIGlmIChidWYpIHtcbiAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgICAgICAgYnVmW29mZnNldCArIGldID0gYnl0ZXNbaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9XG4gICAgcmV0dXJuICgwLCBzdHJpbmdpZnlfanNfMS51bnNhZmVTdHJpbmdpZnkpKGJ5dGVzKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHYzNTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJpbXBvcnQgeyBDb21wb25lbnRNZXRhLCBDb21wb25lbnRSZWdpc3RyeSB9IGZyb20gJ0BpbmR1Y3RpdmVhdXRvbWF0aW9uL3BlcnNwZWN0aXZlLWNsaWVudCc7XG4vL2ltcG9ydCB7IEJ1dHRvbiwgQnV0dG9uTWV0YSB9IGZyb20gJy4vY29tcG9uZW50cy9CdXR0b24nO1xuLy9pbXBvcnQgeyBWYWx2ZSwgVmFsdmVNZXRhIH0gZnJvbSBcIi4vY29tcG9uZW50cy9WYWx2ZVwiO1xuaW1wb3J0IHsgVmFsdmUsIFZhbHZlTWV0YSB9IGZyb20gJy4vY29tcG9uZW50cy9WYWx2ZSc7XG5pbXBvcnQgeyBQdW1wLCBQdW1wTWV0YSB9IGZyb20gJy4vY29tcG9uZW50cy9QdW1wJztcbmltcG9ydCB7IEhlYXRFeGNoYW5nZXIsIEhlYXRFeGNoYW5nZXJNZXRhIH0gZnJvbSAnLi9jb21wb25lbnRzL0hlYXRFeGNoYW5nZXInO1xuaW1wb3J0IHsgUGFyYW1ldGVyTGlzdENvbXBvbmVudCwgUGFyYW1ldGVyTGlzdENvbXBvbmVudE1ldGF9IGZyb20gJy4vY29tcG9uZW50cy9QYXJhbWV0ZXJMaXN0J1xuaW1wb3J0IHsgQ29tbWFuZFZhbHZlTXAsIENvbW1hbmRWYWx2ZU1wTWV0YSB9IGZyb20gJy4vY29tcG9uZW50cy9Db21tYW5kVmFsdmVNcCc7XG5pbXBvcnQgeyBTdGF0dXNWYWx2ZU1wLCBTdGF0dXNWYWx2ZU1wTWV0YSB9IGZyb20gJy4vY29tcG9uZW50cy9TdGF0dXNWYWx2ZU1wJztcblxuLy8gRXhwb3J0IGNvbXBvbmVudHMgZm9yIGV4dGVybmFsIHJlZmVyZW5jZVxuZXhwb3J0IHtcblx0VmFsdmUgLFxuXHRQdW1wICxcblx0SGVhdEV4Y2hhbmdlciAsXG5cdFBhcmFtZXRlckxpc3RDb21wb25lbnQsXG5cdENvbW1hbmRWYWx2ZU1wLFxuXHRTdGF0dXNWYWx2ZU1wXG5cdH07XG5cbi8vIEltcG9ydCBjb21wb25lbnQgc3R5bGVzXG5pbXBvcnQgJy4vaW5kZXguY3NzJztcblxuLy8gQXJyYXkgb2YgY29tcG9uZW50IG1ldGFkYXRhXG5jb25zdCBjb21wb25lbnRzOiBBcnJheTxDb21wb25lbnRNZXRhPiA9IFtcblx0bmV3IFZhbHZlTWV0YSgpLFxuXHRuZXcgUHVtcE1ldGEoKSxcblx0bmV3IEhlYXRFeGNoYW5nZXJNZXRhKCksXG5cdG5ldyBQYXJhbWV0ZXJMaXN0Q29tcG9uZW50TWV0YSgpLFxuXHRuZXcgQ29tbWFuZFZhbHZlTXBNZXRhKCksXG5cdG5ldyBTdGF0dXNWYWx2ZU1wTWV0YSgpLFxuXG5dO1xuXG4vLyBSZWdpc3RlciBlYWNoIGNvbXBvbmVudCB3aXRoIHRoZSBQZXJzcGVjdGl2ZSBDb21wb25lbnRSZWdpc3RyeVxuY29tcG9uZW50cy5mb3JFYWNoKChjOiBDb21wb25lbnRNZXRhKSA9PiBDb21wb25lbnRSZWdpc3RyeS5yZWdpc3RlcihjKSk7XG4iXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwicmVxdWlyZSIsImRlZmluZSIsImFtZCIsInNlbGYiLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18zNzdfXyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzg4M19fIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsInVuc2FmZVN0cmluZ2lmeSIsInZhbGlkYXRlX2pzXzEiLCJieXRlVG9IZXgiLCJpIiwicHVzaCIsInRvU3RyaW5nIiwic2xpY2UiLCJhcnIiLCJvZmZzZXQiLCJ0b0xvd2VyQ2FzZSIsInV1aWQiLCJkZWZhdWx0IiwiVHlwZUVycm9yIiwiZ2V0UGxhdGVDb2xvciIsIm1vZGUiLCJjb25zb2xlIiwibG9nIiwiQ09NUE9ORU5UX1RZUEUiLCJIWF9DT01QT05FTlRfVFlQRSIsInVzZUNyZWF0ZUNvbnRleHQiLCJIeENvbnRleHRQcm92aWRlciIsInVzZUh4Q29udGV4dCIsIkhlYXRFeGNoYW5nZXJDb21wb3VuZCIsIlJvb3QiLCJjb21wb25lbnRQcm9wcyIsIml0ZW1Qcm9wcyIsIm9uQWN0aW9uUGVyZm9ybWVkIiwiY2hpbGRyZW4iLCJwbGF0ZSIsImVsUmVmIiwiUmVhY3QiLCJ1c2VSZWYiLCJlbWl0IiwidHlwZSIsImxvY2F0ZSIsIkJBU0VfSVRFTV9DT1VOVCIsImdldEJhc2VJdGVtQ291bnQiLCJjb21wb25lbnRJdGVtTmFtZXMiLCJidWlsZENvbXBvbmVudEVsZW1lbnRzIiwiSlNPTiIsInN0cmluZ2lmeSIsImNvbXBvbmVudENsYXNzTmFtZSIsInJlZiIsImNsYXNzZXMiLCJJQV9TWU1CT0xfQ09NUE9ORU5UX0NPTFVNTiIsIm9uQ2xpY2siLCJjbGFzc05hbWUiLCJJQV9TWU1CT0xfQ09NUE9ORU5UX1JPVyIsIklBX1NZTUJPTF9DT01QT05FTlRfV1JBUFBFUiIsIkhNSV9DT01QT05FTlRfQ0xBU1MiLCJzdHlsZSIsIm1hcCIsIm5hbWUiLCJpbmRleCIsImtleSIsIml0ZW1DbGFzc05hbWUiLCJnZXRDbGFzc05hbWVXaXRoU3RhdHVzIiwidW5kZWZpbmVkIiwiaHhFbGVtZW50cyIsInBvcG92ZXIiLCJhbmNob3JFbCIsInNob3dMYWJlbCIsImxhYmVsUG9zaXRpb24iLCJpdGVtTmFtZSIsInBvc2l0aW9uIiwiZ2V0SXRlbUlkUG9zaXRpb25DbGFzc05hbWUiLCJ0b3AiLCJ5IiwibGVmdCIsIngiLCJwYWRkaW5nIiwiZSIsIm5lIiwiZ2UiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJiZSIsImdldE93blByb3BlcnR5TmFtZXMiLCJUZSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiQmUiLCJ0IiwiciIsImdldCIsImVudW1lcmFibGUiLCJBZSIsIkltbWVyIiwiSiIsImFwcGx5UGF0Y2hlcyIsIkNlIiwiY2FzdERyYWZ0Iiwia2UiLCJjYXN0SW1tdXRhYmxlIiwiS2UiLCJjcmVhdGVEcmFmdCIsIlJlIiwiY3VycmVudCIsInJlIiwiZW5hYmxlTWFwU2V0IiwieGUiLCJlbmFibGVQYXRjaGVzIiwiUGUiLCJmaW5pc2hEcmFmdCIsInZlIiwiZnJlZXplIiwiSyIsImltbWVyYWJsZSIsIk4iLCJpc0RyYWZ0IiwiTyIsImlzRHJhZnRhYmxlIiwiQSIsIm5vdGhpbmciLCJqIiwib3JpZ2luYWwiLCJsZSIsInByb2R1Y2UiLCJGZSIsInByb2R1Y2VXaXRoUGF0Y2hlcyIsIk5lIiwic2V0QXV0b0ZyZWV6ZSIsInplIiwic2V0VXNlU3RyaWN0U2hhbGxvd0NvcHkiLCJqZSIsIm4iLCJjYWxsIiwiSWUiLCJTeW1ib2wiLCJmb3IiLCJ1IiwiaCIsIkVycm9yIiwieiIsImdldFByb3RvdHlwZU9mIiwieWUiLCJBcnJheSIsImlzQXJyYXkiLCJjb25zdHJ1Y3RvciIsInYiLCJrIiwiT2UiLCJGdW5jdGlvbiIsIl8iLCJDIiwiUmVmbGVjdCIsIm93bktleXMiLCJmb3JFYWNoIiwibyIsIlIiLCJoYXMiLCJYIiwiUSIsInNldCIsImFkZCIsIk1hcCIsIlNldCIsIlQiLCJMIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImYiLCJsZW5ndGgiLCJsIiwiYyIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiY3JlYXRlIiwiYXNzaWduIiwiJCIsImNsZWFyIiwiZGVsZXRlIiwiTWUiLCJlbnRyaWVzIiwiaXNGcm96ZW4iLCJVIiwiYWUiLCJ3IiwiWSIsIkIiLCJvZSIsImIiLCJWIiwiWiIsImEiLCJ3ZSIsImllIiwicCIsIlAiLCJkIiwiX2UiLCJtIiwic2UiLCJzIiwiZWUiLCJ0ZSIsImRlIiwiZyIsImNvbmNhdCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidWUiLCJtZSIsIkVlIiwiY2UiLCJmZSIsIlciLCJwZSIsIkUiLCJOdW1iZXIiLCJpc05hTiIsImRlbGV0ZVByb3BlcnR5Iiwic2V0UHJvdG90eXBlT2YiLCJxIiwiUyIsImFyZ3VtZW50cyIsImFwcGx5IiwidGhpcyIsImF1dG9GcmVlemUiLCJ1c2VTdHJpY3RTaGFsbG93Q29weSIsInBhdGgiLCJvcCIsIkkiLCJEIiwicmV2b2tlIiwicHJveHkiLCJQcm94eSIsInJldm9jYWJsZSIsImhlIiwiU2UiLCJmcm9tIiwiSCIsIkYiLCJqb2luIiwic3BsaWNlIiwidW5zaGlmdCIsInN1cGVyIiwic2l6ZSIsImtleXMiLCJ2YWx1ZXMiLCJpdGVyYXRvciIsIm5leHQiLCJkb25lIiwiTSIsImJpbmQiLCJJdGVtIiwiaGFuZGxlQ2xpY2siLCJkaXNwbGF5TmFtZSIsInZlcnNpb24iLCJ2YWxpZGF0ZSIsInY3IiwidjZUb1YxIiwidjYiLCJ2NSIsInY0IiwidjMiLCJ2MVRvVjYiLCJ2MSIsInBhcnNlIiwiTklMIiwiTUFYIiwibWF4X2pzXzEiLCJuaWxfanNfMSIsInBhcnNlX2pzXzEiLCJzdHJpbmdpZnlfanNfMSIsInYxX2pzXzEiLCJ2MVRvVjZfanNfMSIsInYzX2pzXzEiLCJ2NF9qc18xIiwidjVfanNfMSIsInY2X2pzXzEiLCJ2NlRvVjFfanNfMSIsInY3X2pzXzEiLCJ2ZXJzaW9uX2pzXzEiLCJ2MUJ5dGVzIiwidjZCeXRlcyIsIlVpbnQ4QXJyYXkiLCJvZiIsIm5hdGl2ZV9qc18xIiwicm5nX2pzXzEiLCJvcHRpb25zIiwiYnVmIiwicmFuZG9tVVVJRCIsInJuZHMiLCJyYW5kb20iLCJybmciLCJSYW5nZUVycm9yIiwiZ2V0UmFuZG9tVmFsdWVzIiwicm5kczgiLCJjcnlwdG8iLCJ1cGRhdGVWN1N0YXRlIiwiX3N0YXRlIiwic3RhdGUiLCJub3ciLCJtc2VjcyIsInNlcSIsInY3Qnl0ZXMiLCJEYXRlIiwiYnl0ZXMiLCJnZXRPdXRwdXRMZW5ndGgiLCJpbnB1dExlbmd0aDgiLCJzYWZlQWRkIiwibHN3IiwibWQ1Y21uIiwibnVtIiwiY250IiwibWQ1ZmYiLCJtZDVnZyIsIm1kNWhoIiwibWQ1aWkiLCJpbnB1dCIsInVpbnQzMlRvVWludDgiLCJsZW4iLCJ4cGFkIiwiVWludDMyQXJyYXkiLCJmaWxsIiwib2xkYSIsIm9sZGIiLCJvbGRjIiwib2xkZCIsIndvcmRzVG9NZDUiLCJvdXRwdXQiLCJ1aW50OFRvVWludDMyIiwidXNlSW1tZXIiLCJ1c2VTdGF0ZSIsInVzZUNhbGxiYWNrIiwidXNlSW1tZXJSZWR1Y2VyIiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJfdjYiLCJ2YWx2ZVN0YXR1cyIsImFsYXJtIiwiYWN0RkIiLCJkZUFjdEZCIiwiYWN0aXZhdGVkQ29uZmlnIiwiZGVhY3RpdmF0ZWRDb25maWciLCJtYW51YWwiLCJtYXNrZWQiLCJjaGFuZ2luZyIsInByb2Nlc3NPYmplY3RQcm9wcyIsInN0YXR1cyIsInZhbHZlUHJvcHMiLCJwcm9jZXNzT2JqZWN0IiwicHVtcEluaXRpYWxTdGF0dXMiLCJjb25maWd1cmF0aW9uIiwicHVtcEluaXRpYWxQcm9wcyIsInBhcmFtZXRlckluaXRpYWxTdGF0ZSIsImxhYmVsIiwidGV4dCIsInRvb2x0aXBUZXh0IiwidG9vbHRpcFBvc2l0aW9uIiwidG9vbHRpcENsYXNzTmFtZSIsInRvb2x0aXBJZCIsImlucHV0bW9kZSIsInBsYWNlaG9sZGVyIiwiZWRpdGFibGUiLCJwYXR0ZXJuIiwibWluIiwibWF4IiwiZGVjaW1hbFBsYWNlcyIsImV1IiwiaW5pdGlhbEF1dG9NYW5TdGF0ZSIsImF1dG8iLCJpbml0aWFsT2ZmT25TdGF0ZSIsIm9mZiIsIm9uIiwiaW5pdGlhbENvbnRyb2xTdGF0ZSIsImNvbW1hbmQiLCJhdmFpbGFibGUiLCJtYWluIiwidXBwZXJTZWF0IiwibG93ZXJTZWF0IiwiYXV0b01hbnVhbCIsImFjdGl2YXRpb24iLCJIeE1vZGVzIiwiSHhJdGVtTGlzdCIsInVwZGF0ZVYxU3RhdGUiLCJuc2VjcyIsIm5vZGUiLCJjbG9ja3NlcSIsInRsIiwidG1oIiwiaXNWNiIsIm9wdGlvbnNLZXlzIiwidHAiLCJobWkiLCJuZXdDb25maWciLCJnZXRCb29sQXRJbmRleCIsIkJvb2xlYW4iLCJQVU1QX0NPTVBPTkVOVF9UWVBFIiwiUHVtcENvbnRleHRQcm92aWRlciIsInVzZVB1bXBDb250ZXh0IiwiUHVtcENvbXBvdW5kIiwicHVtcFByb3BzIiwicHVtcCIsInB1bXBUeXBlIiwicHVtcEl0ZW1OYW1lcyIsImdldFB1bXBTdGF0dXNDbGFzc05hbWVzIiwiZ2V0UHVtcEl0ZW1DbGFzc05hbWUiLCJoeEl0ZW1OYW1lcyIsImdldEh4SXRlbUNsYXNzTmFtZSIsImdldEh4Q29uZmlndXJhdGlvbiIsImdldEh4TW9kZUNsYXNzTmFtZXMiLCJpbmNsdWRlcyIsInJlcGxhY2UiLCJiYXNlRWxlbWVudHMiLCJkeW5hbWljRWxlbWVudHMiLCJpdGVtIiwiZ2V0VmFsdmVNcEl0ZW1DbGFzc05hbWUiLCJBY3RpdmF0ZWRDb25maWdWYWx1ZSIsImNvbnZlcnRUUFZhbHZlQ29uZmlnVG9IbWlWYWx2ZUNvbmZpZyIsIkRlYWN0aXZhdGVkQ29uZmlnVmFsdWUiLCJ1c2wiLCJsc2wiLCJlbGVtZW50VmFyaWFudHMiLCJiYXNlQ2xhc3NOYW1lIiwiYmFzZUNvbmZpZyIsImR5bmFtaWNJdGVtcyIsImR5bmFtaWNDb25maWciLCJhZGRpdGlvbmFsQ2xhc3MiLCJzdGF0dXNLZXkiLCJzdGF0dXNLZXlPYmoiLCJtYXRjaGluZ0tleXMiLCJmaWx0ZXIiLCJrZXlTdGF0dXNWYWx1ZSIsInRydWVTdHJpbmciLCJmYWxzZVN0cmluZyIsIml0ZW1TdHJpbmciLCJkeW5hbUluZGV4IiwidmFsdmVNcEl0ZW1OYW1lcyIsInZhbHZlTXBJdGVtTmFtZUVudW0iLCJpdGVtSWRQb3NpdGlvbiIsIndhcm4iLCJwdW1wSXRlbUxpc3QiLCJnZXRQdW1wQ29uZmlndXJhdGlvbiIsImRpc3BhdGNoIiwiUGFyYW1ldGVyUmVkdWNlciIsInJlZHVjZXIiLCJ1cGRhdGVWYWx1ZSIsInZhbHZlTXBSZWR1Y2VyIiwidXBkYXRlQXV0b01hblNlbGVjdGlvbiIsInVwZGF0ZU1haW5BdmFpbGFibGUiLCJ1cGRhdGVVcHBlclNlYXRBdmFpbGFibGUiLCJ1cGRhdGVMb3dlclNlYXRBdmFpbGFibGUiLCJ1cGRhdGVNYWluTWFudWFsT24iLCJ1cGRhdGVNYWluTWFudWFsT2ZmIiwidXBkYXRlVXNsTWFudWFsT24iLCJ1cGRhdGVVc2xNYW51YWxPZmYiLCJ1cGRhdGVMc2xNYW51YWxPbiIsInVwZGF0ZUxzbE1hbnVhbE9mZiIsImRyYWZ0IiwiYWN0aW9uIiwicm9vdENvbXBvbmVudE5hbWUiLCJkZWZhdWx0Q29udGV4dCIsIkNvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiUHJvdmlkZXIiLCJwcm9wcyIsImNvbnRleHQiLCJjb25zdW1lck5hbWUiLCJ1c2VDb250ZXh0IiwiVmFsdmVDbGFzc05hbWVFbnVtIiwiQWxhcm1TdGF0ZSIsIkFjdGl2YXRlZCIsIkRlYWN0aXZhdGVkIiwiTWFudWFsIiwiTWFza2VkIiwiQ2hhbmdpbmciLCJOb0FsYXJtTWFzayIsIkxvY2F0ZSIsIlYxYjEiLCJWMWIyIiwiVjFiMyIsIlYxYjQiLCJWMmIxIiwiVjJiMiIsIlYyYjMiLCJWMmI0IiwiVjIiLCJoeEl0ZW1OYW1lRW51bSIsImIxIiwiYjIiLCJiMyIsImI0IiwiVVJMIiwiRE5TIiwic2hhMV9qc18xIiwidjM1X2pzXzEiLCJ2MzVfanNfMiIsIm5hbWVzcGFjZSIsIkhlYXRFeGNoYW5nZXIiLCJDb21wb25lbnQiLCJldmVudHNFbmFibGVkIiwiY29tcG9uZW50RXZlbnRzIiwiZmlyZUNvbXBvbmVudEV2ZW50IiwidmFsdmVSZWYiLCJjcmVhdGVSZWYiLCJjb21wb25lbnREaWRNb3VudCIsInJlbmRlciIsImdldENvbXBvbmVudFR5cGUiLCJnZXRWaWV3Q29tcG9uZW50IiwiZ2V0RGVmYXVsdFNpemUiLCJ3aWR0aCIsImhlaWdodCIsImdldFByb3BzUmVkdWNlciIsInRyZWUiLCJyZWFkU3RyaW5nIiwicmVhZEJvb2xlYW4iLCJtZDVfanNfMSIsIlZBTFZFX0NPTVBPTkVOVF9UWVBFIiwiVmFsdmVDb250ZXh0UHJvdmlkZXIiLCJ1c2VWYWx2ZUNvbnRleHQiLCJWYWx2ZU1wQ29tcG91bmQiLCJ2YWx2ZSIsInJlZ2V4X2pzXzEiLCJ0ZXN0IiwicGFyc2VJbnQiLCJST1RMIiwibmV3Qnl0ZXMiLCJNYXRoIiwiY2VpbCIsInBvdyIsImZsb29yIiwiaW5pdFBhcmFtZXRlcnMiLCJQQVJBTUVURVJfTElTVF9DT01QT05FTlRfVFlQRSIsIlBhcmFtZXRlckxpc3RDb21wb25lbnQiLCJ0cmFuc2Zvcm1lZFByb3BzIiwicGFyYW1ldGVycyIsInBhcmFtIiwiaWQiLCJpbnB1dE1vZGUiLCJkaXNhYmxlZCIsIm9uQ2hhbmdlIiwic3RvcmUiLCJ3cml0ZSIsImN1cnJlbnRUYXJnZXQiLCJyZWFkIiwiQ09NTUFORF9WQUxWRV9NUF9DT01QT05FTlRfVFlQRSIsIkNvbW1hbmRWYWx2ZU1wIiwidXNlVmFsdmVNcENvbW1hbmRSZWR1Y2VyIiwidXNlRWZmZWN0IiwidW5zdWJzY3JpYmUiLCJzdWJzY3JpYmUiLCJoYW5kbGVNYWluQXV0b01hbnVhbFNlbGVjdGlvbiIsInJvbGUiLCJQdW1wIiwiU1RBVFVTX0NPTVBPTkVOVF9UWVBFIiwiU3RhdHVzVmFsdmVNcCIsInN0YXR1c0l0ZW1zIiwibG93bGlnaHQiLCJjaGVja2VkIiwicmVhZE9ubHkiLCJiYXNlQ2xhc3MiLCJoZWF0aW5nIiwiVmFsdmUiLCJyZWFkTnVtYmVyIiwic3RyaW5nVG9CeXRlcyIsInN0ciIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiY2hhckNvZGVBdCIsImhhc2giLCJ2YWx1ZUJ5dGVzIiwibmFtZXNwYWNlQnl0ZXMiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwidG9TdHJpbmdUYWciLCJWYWx2ZU1ldGEiLCJQdW1wTWV0YSIsIkhlYXRFeGNoYW5nZXJNZXRhIiwiUGFyYW1ldGVyTGlzdENvbXBvbmVudE1ldGEiLCJDb21tYW5kVmFsdmVNcE1ldGEiLCJTdGF0dXNWYWx2ZU1wTWV0YSIsIkNvbXBvbmVudFJlZ2lzdHJ5IiwicmVnaXN0ZXIiXSwic291cmNlUm9vdCI6IiJ9