!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("PerspectiveClient"),require("React")):"function"==typeof define&&define.amd?define("HmiComponents",["PerspectiveClient","React"],t):"object"==typeof exports?exports.HmiComponents=t(require("PerspectiveClient"),require("React")):e.HmiComponents=t(e.PerspectiveClient,e.React)}(self,((e,t)=>(()=>{var r={11:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.unsafeStringify=void 0;const n=r(746),a=[];for(let e=0;e<256;++e)a.push((e+256).toString(16).slice(1));function o(e,t=0){return(a[e[t+0]]+a[e[t+1]]+a[e[t+2]]+a[e[t+3]]+"-"+a[e[t+4]]+a[e[t+5]]+"-"+a[e[t+6]]+a[e[t+7]]+"-"+a[e[t+8]]+a[e[t+9]]+"-"+a[e[t+10]]+a[e[t+11]]+a[e[t+12]]+a[e[t+13]]+a[e[t+14]]+a[e[t+15]]).toLowerCase()}t.unsafeStringify=o,t.default=function(e,t=0){const r=o(e,t);if(!(0,n.default)(r))throw TypeError("Stringified UUID is invalid");return r}},124:e=>{"use strict";var t,r=Object.defineProperty,n=Object.getOwnPropertyDescriptor,a=Object.getOwnPropertyNames,o=Object.prototype.hasOwnProperty,l={};((e,t)=>{for(var n in t)r(e,n,{get:t[n],enumerable:!0})})(l,{Immer:()=>H,applyPatches:()=>le,castDraft:()=>se,castImmutable:()=>ce,createDraft:()=>ie,current:()=>J,enableMapSet:()=>ee,enablePatches:()=>Z,finishDraft:()=>ue,freeze:()=>E,immerable:()=>u,isDraft:()=>d,isDraftable:()=>p,nothing:()=>i,original:()=>b,produce:()=>re,produceWithPatches:()=>ne,setAutoFreeze:()=>ae,setUseStrictShallowCopy:()=>oe}),e.exports=(t=l,((e,t,l,i)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let l of a(t))!o.call(e,l)&&undefined!==l&&r(e,l,{get:()=>t[l],enumerable:!(i=n(t,l))||i.enumerable});return e})(r({},"__esModule",{value:!0}),t));var i=Symbol.for("immer-nothing"),u=Symbol.for("immer-draftable"),s=Symbol.for("immer-state");function c(e,...t){throw new Error(`[Immer] minified error nr: ${e}. Full error at: https://bit.ly/3cXEKWf`)}var f=Object.getPrototypeOf;function d(e){return!!e&&!!e[s]}function p(e){return!!e&&(m(e)||Array.isArray(e)||!!e[u]||!!e.constructor?.[u]||_(e)||V(e))}var v=Object.prototype.constructor.toString();function m(e){if(!e||"object"!=typeof e)return!1;let t=f(e);if(null===t)return!0;let r=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return r===Object||"function"==typeof r&&Function.toString.call(r)===v}function b(e){return d(e)||c(15),e[s].t}function h(e,t){0===y(e)?Reflect.ownKeys(e).forEach((r=>{t(r,e[r],e)})):e.forEach(((r,n)=>t(n,r,e)))}function y(e){let t=e[s];return t?t.o:Array.isArray(e)?1:_(e)?2:V(e)?3:0}function g(e,t){return 2===y(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function P(e,t){return 2===y(e)?e.get(t):e[t]}function A(e,t,r){let n=y(e);2===n?e.set(t,r):3===n?e.add(r):e[t]=r}function _(e){return e instanceof Map}function V(e){return e instanceof Set}function C(e){return e.e||e.t}function O(e,t){if(_(e))return new Map(e);if(V(e))return new Set(e);if(Array.isArray(e))return Array.prototype.slice.call(e);let r=m(e);if(!0===t||"class_only"===t&&!r){let t=Object.getOwnPropertyDescriptors(e);delete t[s];let r=Reflect.ownKeys(t);for(let n=0;n<r.length;n++){let a=r[n],o=t[a];!1===o.writable&&(o.writable=!0,o.configurable=!0),(o.get||o.set)&&(t[a]={configurable:!0,writable:!0,enumerable:o.enumerable,value:e[a]})}return Object.create(f(e),t)}{let t=f(e);if(null!==t&&r)return{...e};let n=Object.create(t);return Object.assign(n,e)}}function E(e,t=!1){return M(e)||d(e)||!p(e)||(y(e)>1&&(e.set=e.add=e.clear=e.delete=w),Object.freeze(e),t&&Object.entries(e).forEach((([e,t])=>E(t,!0)))),e}function w(){c(2)}function M(e){return Object.isFrozen(e)}var S,N={};function I(e){let t=N[e];return t||c(0),t}function j(e,t){N[e]||(N[e]=t)}function D(){return S}function U(e,t){t&&(I("Patches"),e.f=[],e.h=[],e.b=t)}function x(e){T(e),e.a.forEach(k),e.a=null}function T(e){e===S&&(S=e.i)}function B(e){return S=function(e,t){return{a:[],i:e,p:t,P:!0,d:0}}(S,e)}function k(e){let t=e[s];0===t.o||1===t.o?t.x():t.m=!0}function R(e,t){t.d=t.a.length;let r=t.a[0];return void 0!==e&&e!==r?(r[s].s&&(x(t),c(4)),p(e)&&(e=L(t,e),t.i||z(t,e)),t.f&&I("Patches").T(r[s].t,e,t.f,t.h)):e=L(t,r,[]),x(t),t.f&&t.b(t.f,t.h),e!==i?e:void 0}function L(e,t,r){if(M(t))return t;let n=t[s];if(!n)return h(t,((a,o)=>F(e,n,t,a,o,r))),t;if(n.n!==e)return t;if(!n.s)return z(e,n.t,!0),n.t;if(!n.c){n.c=!0,n.n.d--;let t=n.e,a=t,o=!1;3===n.o&&(a=new Set(t),t.clear(),o=!0),h(a,((a,l)=>F(e,n,t,a,l,r,o))),z(e,t,!1),r&&e.f&&I("Patches").g(n,r,e.f,e.h)}return n.e}function F(e,t,r,n,a,o,l){if(d(a)){let l=L(e,a,o&&t&&3!==t.o&&!g(t.r,n)?o.concat(n):void 0);if(A(r,n,l),!d(l))return;e.P=!1}else l&&r.add(a);if(p(a)&&!M(a)){if(!e.p.y&&e.d<1)return;L(e,a),(!t||!t.n.i)&&"symbol"!=typeof n&&Object.prototype.propertyIsEnumerable.call(r,n)&&z(e,a)}}function z(e,t,r=!1){!e.i&&e.p.y&&e.P&&E(t,r)}var $={get(e,t){if(t===s)return e;let r=C(e);if(!g(r,t))return function(e,t,r){let n=G(t,r);return n?"value"in n?n.value:n.get?.call(e.u):void 0}(e,r,t);let n=r[t];return e.c||!p(n)?n:n===Y(e.t,t)?(X(e),e.e[t]=W(n,e)):n},has:(e,t)=>t in C(e),ownKeys:e=>Reflect.ownKeys(C(e)),set(e,t,r){let n=G(C(e),t);if(n?.set)return n.set.call(e.u,r),!0;if(!e.s){let n=Y(C(e),t),a=n?.[s];if(a&&a.t===r)return e.e[t]=r,e.r[t]=!1,!0;if(function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}(r,n)&&(void 0!==r||g(e.t,t)))return!0;X(e),K(e)}return e.e[t]===r&&(void 0!==r||t in e.e)||Number.isNaN(r)&&Number.isNaN(e.e[t])||(e.e[t]=r,e.r[t]=!0),!0},deleteProperty:(e,t)=>(void 0!==Y(e.t,t)||t in e.t?(e.r[t]=!1,X(e),K(e)):delete e.r[t],e.e&&delete e.e[t],!0),getOwnPropertyDescriptor(e,t){let r=C(e),n=Reflect.getOwnPropertyDescriptor(r,t);return n&&{writable:!0,configurable:1!==e.o||"length"!==t,enumerable:n.enumerable,value:r[t]}},defineProperty(){c(11)},getPrototypeOf:e=>f(e.t),setPrototypeOf(){c(12)}},q={};function Y(e,t){let r=e[s];return(r?C(r):e)[t]}function G(e,t){if(!(t in e))return;let r=f(e);for(;r;){let e=Object.getOwnPropertyDescriptor(r,t);if(e)return e;r=f(r)}}function K(e){e.s||(e.s=!0,e.i&&K(e.i))}function X(e){e.e||(e.e=O(e.t,e.n.p.S))}h($,((e,t)=>{q[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),q.deleteProperty=function(e,t){return q.set.call(this,e,t,void 0)},q.set=function(e,t,r){return $.set.call(this,e[0],t,r,e[0])};var H=class{constructor(e){this.y=!0,this.S=!1,this.produce=(e,t,r)=>{if("function"==typeof e&&"function"!=typeof t){let r=t;t=e;let n=this;return function(e=r,...a){return n.produce(e,(e=>t.call(this,e,...a)))}}let n;if("function"!=typeof t&&c(6),void 0!==r&&"function"!=typeof r&&c(7),p(e)){let a=B(this),o=W(e,void 0),l=!0;try{n=t(o),l=!1}finally{l?x(a):T(a)}return U(a,r),R(n,a)}if(!e||"object"!=typeof e){if(n=t(e),void 0===n&&(n=e),n===i&&(n=void 0),this.y&&E(n,!0),r){let t=[],a=[];I("Patches").T(e,n,t,a),r(t,a)}return n}c(1)},this.produceWithPatches=(e,t)=>{if("function"==typeof e)return(t,...r)=>this.produceWithPatches(t,(t=>e(t,...r)));let r,n;return[this.produce(e,t,((e,t)=>{r=e,n=t})),r,n]},"boolean"==typeof e?.autoFreeze&&this.setAutoFreeze(e.autoFreeze),"boolean"==typeof e?.useStrictShallowCopy&&this.setUseStrictShallowCopy(e.useStrictShallowCopy)}createDraft(e){p(e)||c(8),d(e)&&(e=J(e));let t=B(this),r=W(e,void 0);return r[s].l=!0,T(t),r}finishDraft(e,t){let r=e&&e[s];(!r||!r.l)&&c(9);let{n}=r;return U(n,t),R(void 0,n)}setAutoFreeze(e){this.y=e}setUseStrictShallowCopy(e){this.S=e}applyPatches(e,t){let r;for(r=t.length-1;r>=0;r--){let n=t[r];if(0===n.path.length&&"replace"===n.op){e=n.value;break}}r>-1&&(t=t.slice(r+1));let n=I("Patches").A;return d(e)?n(e,t):this.produce(e,(e=>n(e,t)))}};function W(e,t){let r=_(e)?I("MapSet").I(e,t):V(e)?I("MapSet").D(e,t):function(e,t){let r=Array.isArray(e),n={o:r?1:0,n:t?t.n:D(),s:!1,c:!1,r:{},i:t,t:e,u:null,e:null,x:null,l:!1},a=n,o=$;r&&(a=[n],o=q);let{revoke:l,proxy:i}=Proxy.revocable(a,o);return n.u=i,n.x=l,i}(e,t);return(t?t.n:D()).a.push(r),r}function J(e){return d(e)||c(10),Q(e)}function Q(e){if(!p(e)||M(e))return e;let t,r=e[s];if(r){if(!r.s)return r.t;r.c=!0,t=O(e,r.n.p.S)}else t=O(e,!0);return h(t,((e,r)=>{A(t,e,Q(r))})),r&&(r.c=!1),t}function Z(){let e="replace",t="add",r="remove";function n(e){if(!p(e))return e;if(Array.isArray(e))return e.map(n);if(_(e))return new Map(Array.from(e.entries()).map((([e,t])=>[e,n(t)])));if(V(e))return new Set(Array.from(e).map(n));let t=Object.create(f(e));for(let r in e)t[r]=n(e[r]);return g(e,u)&&(t[u]=e[u]),t}function a(e){return d(e)?n(e):e}j("Patches",{A:function(a,o){return o.forEach((o=>{let{path:l,op:i}=o,u=a;for(let e=0;e<l.length-1;e++){let t=y(u),r=l[e];"string"!=typeof r&&"number"!=typeof r&&(r=""+r),(0===t||1===t)&&("__proto__"===r||"constructor"===r)&&c(19),"function"==typeof u&&"prototype"===r&&c(19),u=P(u,r),"object"!=typeof u&&c(18,l.join("/"))}let s=y(u),f=n(o.value),d=l[l.length-1];switch(i){case e:switch(s){case 2:return u.set(d,f);case 3:c(16);default:return u[d]=f}case t:switch(s){case 1:return"-"===d?u.push(f):u.splice(d,0,f);case 2:return u.set(d,f);case 3:return u.add(f);default:return u[d]=f}case r:switch(s){case 1:return u.splice(d,1);case 2:return u.delete(d);case 3:return u.delete(o.value);default:return delete u[d]}default:c(17)}})),a},g:function(n,o,l,i){switch(n.o){case 0:case 2:return function(n,o,l,i){let{t:u,e:s}=n;h(n.r,((n,c)=>{let f=P(u,n),d=P(s,n),p=c?g(u,n)?e:t:r;if(f===d&&p===e)return;let v=o.concat(n);l.push(p===r?{op:p,path:v}:{op:p,path:v,value:d}),i.push(p===t?{op:r,path:v}:p===r?{op:t,path:v,value:a(f)}:{op:e,path:v,value:a(f)})}))}(n,o,l,i);case 1:return function(n,o,l,i){let{t:u,r:s}=n,c=n.e;c.length<u.length&&([u,c]=[c,u],[l,i]=[i,l]);for(let t=0;t<u.length;t++)if(s[t]&&c[t]!==u[t]){let r=o.concat([t]);l.push({op:e,path:r,value:a(c[t])}),i.push({op:e,path:r,value:a(u[t])})}for(let e=u.length;e<c.length;e++){let r=o.concat([e]);l.push({op:t,path:r,value:a(c[e])})}for(let e=c.length-1;u.length<=e;--e){let t=o.concat([e]);i.push({op:r,path:t})}}(n,o,l,i);case 3:return function(e,n,a,o){let{t:l,e:i}=e,u=0;l.forEach((e=>{if(!i.has(e)){let l=n.concat([u]);a.push({op:r,path:l,value:e}),o.unshift({op:t,path:l,value:e})}u++})),u=0,i.forEach((e=>{if(!l.has(e)){let l=n.concat([u]);a.push({op:t,path:l,value:e}),o.unshift({op:r,path:l,value:e})}u++}))}(n,o,l,i)}},T:function(t,r,n,a){n.push({op:e,path:[],value:r===i?void 0:r}),a.push({op:e,path:[],value:t})}})}function ee(){class e extends Map{constructor(e,t){super(),this[s]={o:2,i:t,n:t?t.n:D(),s:!1,c:!1,e:void 0,r:void 0,t:e,u:this,l:!1,m:!1}}get size(){return C(this[s]).size}has(e){return C(this[s]).has(e)}set(e,r){let n=this[s];return a(n),(!C(n).has(e)||C(n).get(e)!==r)&&(t(n),K(n),n.r.set(e,!0),n.e.set(e,r),n.r.set(e,!0)),this}delete(e){if(!this.has(e))return!1;let r=this[s];return a(r),t(r),K(r),r.t.has(e)?r.r.set(e,!1):r.r.delete(e),r.e.delete(e),!0}clear(){let e=this[s];a(e),C(e).size&&(t(e),K(e),e.r=new Map,h(e.t,(t=>{e.r.set(t,!1)})),e.e.clear())}forEach(e,t){C(this[s]).forEach(((r,n,a)=>{e.call(t,this.get(n),n,this)}))}get(e){let r=this[s];a(r);let n=C(r).get(e);if(r.c||!p(n)||n!==r.t.get(e))return n;let o=W(n,r);return t(r),r.e.set(e,o),o}keys(){return C(this[s]).keys()}values(){let e=this.keys();return{[Symbol.iterator]:()=>this.values(),next:()=>{let t=e.next();return t.done?t:{done:!1,value:this.get(t.value)}}}}entries(){let e=this.keys();return{[Symbol.iterator]:()=>this.entries(),next:()=>{let t=e.next();if(t.done)return t;let r=this.get(t.value);return{done:!1,value:[t.value,r]}}}}[Symbol.iterator](){return this.entries()}}function t(e){e.e||(e.r=new Map,e.e=new Map(e.t))}class r extends Set{constructor(e,t){super(),this[s]={o:3,i:t,n:t?t.n:D(),s:!1,c:!1,e:void 0,t:e,u:this,a:new Map,m:!1,l:!1}}get size(){return C(this[s]).size}has(e){let t=this[s];return a(t),t.e?!!(t.e.has(e)||t.a.has(e)&&t.e.has(t.a.get(e))):t.t.has(e)}add(e){let t=this[s];return a(t),this.has(e)||(n(t),K(t),t.e.add(e)),this}delete(e){if(!this.has(e))return!1;let t=this[s];return a(t),n(t),K(t),t.e.delete(e)||!!t.a.has(e)&&t.e.delete(t.a.get(e))}clear(){let e=this[s];a(e),C(e).size&&(n(e),K(e),e.e.clear())}values(){let e=this[s];return a(e),n(e),e.e.values()}entries(){let e=this[s];return a(e),n(e),e.e.entries()}keys(){return this.values()}[Symbol.iterator](){return this.values()}forEach(e,t){let r=this.values(),n=r.next();for(;!n.done;)e.call(t,n.value,n.value,this),n=r.next()}}function n(e){e.e||(e.e=new Set,e.t.forEach((t=>{if(p(t)){let r=W(t,e);e.a.set(t,r),e.e.add(r)}else e.e.add(t)})))}function a(e){e.m&&c(3,JSON.stringify(C(e)))}j("MapSet",{I:function(t,r){return new e(t,r)},D:function(e,t){return new r(e,t)}})}var te=new H,re=te.produce,ne=te.produceWithPatches.bind(te),ae=te.setAutoFreeze.bind(te),oe=te.setUseStrictShallowCopy.bind(te),le=te.applyPatches.bind(te),ie=te.createDraft.bind(te),ue=te.finishDraft.bind(te);function se(e){return e}function ce(e){return e}},152:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(883),a=({itemClassName:e,handleClick:t})=>n.createElement("div",{className:e,onClick:t});a.displayName="Item",t.default=a},182:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.version=t.validate=t.v7=t.v6ToV1=t.v6=t.v5=t.v4=t.v3=t.v1ToV6=t.v1=t.stringify=t.parse=t.NIL=t.MAX=void 0;var n=r(196);Object.defineProperty(t,"MAX",{enumerable:!0,get:function(){return n.default}});var a=r(465);Object.defineProperty(t,"NIL",{enumerable:!0,get:function(){return a.default}});var o=r(797);Object.defineProperty(t,"parse",{enumerable:!0,get:function(){return o.default}});var l=r(11);Object.defineProperty(t,"stringify",{enumerable:!0,get:function(){return l.default}});var i=r(425);Object.defineProperty(t,"v1",{enumerable:!0,get:function(){return i.default}});var u=r(568);Object.defineProperty(t,"v1ToV6",{enumerable:!0,get:function(){return u.default}});var s=r(591);Object.defineProperty(t,"v3",{enumerable:!0,get:function(){return s.default}});var c=r(286);Object.defineProperty(t,"v4",{enumerable:!0,get:function(){return c.default}});var f=r(557);Object.defineProperty(t,"v5",{enumerable:!0,get:function(){return f.default}});var d=r(356);Object.defineProperty(t,"v6",{enumerable:!0,get:function(){return d.default}});var p=r(268);Object.defineProperty(t,"v6ToV1",{enumerable:!0,get:function(){return p.default}});var v=r(299);Object.defineProperty(t,"v7",{enumerable:!0,get:function(){return v.default}});var m=r(746);Object.defineProperty(t,"validate",{enumerable:!0,get:function(){return m.default}});var b=r(770);Object.defineProperty(t,"version",{enumerable:!0,get:function(){return b.default}})},196:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="ffffffff-ffff-ffff-ffff-ffffffffffff"},268:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(797),a=r(11);t.default=function(e){const t=(r="string"==typeof e?(0,n.default)(e):e,Uint8Array.of((15&r[3])<<4|r[4]>>4&15,(15&r[4])<<4|(240&r[5])>>4,(15&r[5])<<4|15&r[6],r[7],(15&r[1])<<4|(240&r[2])>>4,(15&r[2])<<4|(240&r[3])>>4,16|(240&r[0])>>4,(15&r[0])<<4|(240&r[1])>>4,r[8],r[9],r[10],r[11],r[12],r[13],r[14],r[15]));var r;return"string"==typeof e?(0,a.unsafeStringify)(t):t}},286:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(779),a=r(291),o=r(11);t.default=function(e,t,r){if(n.default.randomUUID&&!t&&!e)return n.default.randomUUID();const l=(e=e||{}).random??e.rng?.()??(0,a.default)();if(l.length<16)throw new Error("Random bytes length must be >= 16");if(l[6]=15&l[6]|64,l[8]=63&l[8]|128,t){if((r=r||0)<0||r+16>t.length)throw new RangeError(`UUID byte range ${r}:${r+15} is out of buffer bounds`);for(let e=0;e<16;++e)t[r+e]=l[e];return t}return(0,o.unsafeStringify)(l)}},291:(e,t)=>{"use strict";let r;Object.defineProperty(t,"__esModule",{value:!0});const n=new Uint8Array(16);t.default=function(){if(!r){if("undefined"==typeof crypto||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");r=crypto.getRandomValues.bind(crypto)}return r(n)}},299:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateV7State=void 0;const n=r(291),a=r(11),o={};function l(e,t,r){return e.msecs??=-1/0,e.seq??=0,t>e.msecs?(e.seq=r[6]<<23|r[7]<<16|r[8]<<8|r[9],e.msecs=t):(e.seq=e.seq+1|0,0===e.seq&&e.msecs++),e}function i(e,t,r,n,a=0){if(e.length<16)throw new Error("Random bytes length must be >= 16");if(n){if(a<0||a+16>n.length)throw new RangeError(`UUID byte range ${a}:${a+15} is out of buffer bounds`)}else n=new Uint8Array(16),a=0;return t??=Date.now(),r??=127*e[6]<<24|e[7]<<16|e[8]<<8|e[9],n[a++]=t/1099511627776&255,n[a++]=t/4294967296&255,n[a++]=t/16777216&255,n[a++]=t/65536&255,n[a++]=t/256&255,n[a++]=255&t,n[a++]=112|r>>>28&15,n[a++]=r>>>20&255,n[a++]=128|r>>>14&63,n[a++]=r>>>6&255,n[a++]=r<<2&255|3&e[10],n[a++]=e[11],n[a++]=e[12],n[a++]=e[13],n[a++]=e[14],n[a++]=e[15],n}t.updateV7State=l,t.default=function(e,t,r){let u;if(e)u=i(e.random??e.rng?.()??(0,n.default)(),e.msecs,e.seq,t,r);else{const e=Date.now(),a=(0,n.default)();l(o,e,a),u=i(a,o.msecs,o.seq,t,r)}return t??(0,a.unsafeStringify)(u)}},338:(e,t)=>{"use strict";function r(e){return 14+(e+64>>>9<<4)+1}function n(e,t){const r=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(r>>16)<<16|65535&r}function a(e,t,r,a,o,l){return n((i=n(n(t,e),n(a,l)))<<(u=o)|i>>>32-u,r);var i,u}function o(e,t,r,n,o,l,i){return a(t&r|~t&n,e,t,o,l,i)}function l(e,t,r,n,o,l,i){return a(t&n|r&~n,e,t,o,l,i)}function i(e,t,r,n,o,l,i){return a(t^r^n,e,t,o,l,i)}function u(e,t,r,n,o,l,i){return a(r^(t|~n),e,t,o,l,i)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return function(e){const t=new Uint8Array(4*e.length);for(let r=0;r<4*e.length;r++)t[r]=e[r>>2]>>>r%4*8&255;return t}(function(e,t){const a=new Uint32Array(r(t)).fill(0);a.set(e),a[t>>5]|=128<<t%32,a[a.length-1]=t,e=a;let s=1732584193,c=-271733879,f=-1732584194,d=271733878;for(let t=0;t<e.length;t+=16){const r=s,a=c,p=f,v=d;s=o(s,c,f,d,e[t],7,-680876936),d=o(d,s,c,f,e[t+1],12,-389564586),f=o(f,d,s,c,e[t+2],17,606105819),c=o(c,f,d,s,e[t+3],22,-1044525330),s=o(s,c,f,d,e[t+4],7,-176418897),d=o(d,s,c,f,e[t+5],12,1200080426),f=o(f,d,s,c,e[t+6],17,-1473231341),c=o(c,f,d,s,e[t+7],22,-45705983),s=o(s,c,f,d,e[t+8],7,1770035416),d=o(d,s,c,f,e[t+9],12,-1958414417),f=o(f,d,s,c,e[t+10],17,-42063),c=o(c,f,d,s,e[t+11],22,-1990404162),s=o(s,c,f,d,e[t+12],7,1804603682),d=o(d,s,c,f,e[t+13],12,-40341101),f=o(f,d,s,c,e[t+14],17,-1502002290),c=o(c,f,d,s,e[t+15],22,1236535329),s=l(s,c,f,d,e[t+1],5,-165796510),d=l(d,s,c,f,e[t+6],9,-1069501632),f=l(f,d,s,c,e[t+11],14,643717713),c=l(c,f,d,s,e[t],20,-373897302),s=l(s,c,f,d,e[t+5],5,-701558691),d=l(d,s,c,f,e[t+10],9,38016083),f=l(f,d,s,c,e[t+15],14,-660478335),c=l(c,f,d,s,e[t+4],20,-405537848),s=l(s,c,f,d,e[t+9],5,568446438),d=l(d,s,c,f,e[t+14],9,-1019803690),f=l(f,d,s,c,e[t+3],14,-187363961),c=l(c,f,d,s,e[t+8],20,1163531501),s=l(s,c,f,d,e[t+13],5,-1444681467),d=l(d,s,c,f,e[t+2],9,-51403784),f=l(f,d,s,c,e[t+7],14,1735328473),c=l(c,f,d,s,e[t+12],20,-1926607734),s=i(s,c,f,d,e[t+5],4,-378558),d=i(d,s,c,f,e[t+8],11,-2022574463),f=i(f,d,s,c,e[t+11],16,1839030562),c=i(c,f,d,s,e[t+14],23,-35309556),s=i(s,c,f,d,e[t+1],4,-1530992060),d=i(d,s,c,f,e[t+4],11,1272893353),f=i(f,d,s,c,e[t+7],16,-155497632),c=i(c,f,d,s,e[t+10],23,-1094730640),s=i(s,c,f,d,e[t+13],4,681279174),d=i(d,s,c,f,e[t],11,-358537222),f=i(f,d,s,c,e[t+3],16,-722521979),c=i(c,f,d,s,e[t+6],23,76029189),s=i(s,c,f,d,e[t+9],4,-640364487),d=i(d,s,c,f,e[t+12],11,-421815835),f=i(f,d,s,c,e[t+15],16,530742520),c=i(c,f,d,s,e[t+2],23,-995338651),s=u(s,c,f,d,e[t],6,-198630844),d=u(d,s,c,f,e[t+7],10,1126891415),f=u(f,d,s,c,e[t+14],15,-1416354905),c=u(c,f,d,s,e[t+5],21,-57434055),s=u(s,c,f,d,e[t+12],6,1700485571),d=u(d,s,c,f,e[t+3],10,-1894986606),f=u(f,d,s,c,e[t+10],15,-1051523),c=u(c,f,d,s,e[t+1],21,-2054922799),s=u(s,c,f,d,e[t+8],6,1873313359),d=u(d,s,c,f,e[t+15],10,-30611744),f=u(f,d,s,c,e[t+6],15,-1560198380),c=u(c,f,d,s,e[t+13],21,1309151649),s=u(s,c,f,d,e[t+4],6,-145523070),d=u(d,s,c,f,e[t+11],10,-1120210379),f=u(f,d,s,c,e[t+2],15,718787259),c=u(c,f,d,s,e[t+9],21,-343485551),s=n(s,r),c=n(c,a),f=n(f,p),d=n(d,v)}return Uint32Array.of(s,c,f,d)}(function(e){if(0===e.length)return new Uint32Array;const t=new Uint32Array(r(8*e.length)).fill(0);for(let r=0;r<e.length;r++)t[r>>2]|=(255&e[r])<<r%4*8;return t}(e),8*e.length))}},348:(e,t,r)=>{var n=r(407),a=r(883);t.useImmer=function(e){var t=a.useState((function(){return n.freeze("function"==typeof e?e():e,!0)})),r=t[1];return[t[0],a.useCallback((function(e){r("function"==typeof e?n.produce(e):n.freeze(e))}),[])]},t.useImmerReducer=function(e,t,r){var o=a.useMemo((function(){return n.produce(e)}),[e]);return a.useReducer(o,t,r)}},356:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(11),a=r(425),o=r(568);t.default=function(e,t,r){e??={},r??=0;let l=(0,a.default)({...e,_v6:!0},new Uint8Array(16));if(l=(0,o.default)(l),t){for(let e=0;e<16;e++)t[r+e]=l[e];return t}return(0,n.unsafeStringify)(l)}},377:t=>{"use strict";t.exports=e},390:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parameterInitialState=t.valveProps=t.valveStatus=void 0,t.valveStatus={alarm:!1,actFB:!1,deActFB:!0,activatedConfig:7,deactivatedConfig:5,itemName:"VXXX",manual:!1,masked:!1,changing:!1,locate:!1},t.valveProps={ValveStatus:t.valveStatus,handleClick:()=>{console.log("Valve clicked")}},t.parameterInitialState=[{label:{text:"label",className:"",tooltipText:"",tooltipPosition:"",tooltipClassName:"",tooltipId:""},input:{type:"text",inputmode:"numeric",placeholder:"Enter a number",editable:!0,pattern:"^[0-9]*[.,]?[0-9]*$",min:0,max:100,decimalPlaces:2,eu:"µC",value:0}}]},407:(e,t,r)=>{"use strict";e.exports=r(124)},425:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateV1State=void 0;const n=r(291),a=r(11),o={};function l(e,t,r){return e.msecs??=-1/0,e.nsecs??=0,t===e.msecs?(e.nsecs++,e.nsecs>=1e4&&(e.node=void 0,e.nsecs=0)):t>e.msecs?e.nsecs=0:t<e.msecs&&(e.node=void 0),e.node||(e.node=r.slice(10,16),e.node[0]|=1,e.clockseq=16383&(r[8]<<8|r[9])),e.msecs=t,e}function i(e,t,r,n,a,o,l=0){if(e.length<16)throw new Error("Random bytes length must be >= 16");if(o){if(l<0||l+16>o.length)throw new RangeError(`UUID byte range ${l}:${l+15} is out of buffer bounds`)}else o=new Uint8Array(16),l=0;t??=Date.now(),r??=0,n??=16383&(e[8]<<8|e[9]),a??=e.slice(10,16);const i=(1e4*(268435455&(t+=122192928e5))+r)%4294967296;o[l++]=i>>>24&255,o[l++]=i>>>16&255,o[l++]=i>>>8&255,o[l++]=255&i;const u=t/4294967296*1e4&268435455;o[l++]=u>>>8&255,o[l++]=255&u,o[l++]=u>>>24&15|16,o[l++]=u>>>16&255,o[l++]=n>>>8|128,o[l++]=255&n;for(let e=0;e<6;++e)o[l++]=a[e];return o}t.updateV1State=l,t.default=function(e,t,r){let u;const s=e?._v6??!1;if(e){const t=Object.keys(e);1===t.length&&"_v6"===t[0]&&(e=void 0)}if(e)u=i(e.random??e.rng?.()??(0,n.default)(),e.msecs,e.nsecs,e.clockseq,e.node,t,r);else{const e=Date.now(),a=(0,n.default)();l(o,e,a),u=i(a,o.msecs,o.nsecs,s?void 0:o.clockseq,s?void 0:o.node,t,r)}return t??(0,a.unsafeStringify)(u)}},429:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getBoolAtIndex=void 0,t.getBoolAtIndex=(e,t)=>Boolean(e>>t&1)},465:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="00000000-0000-0000-0000-000000000000"},506:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getItemIdPositionClassName=t.valveMpItemNames=t.itemNames=t.getValveMpItemClassName=t.getItemClassName=void 0;const n=r(429),a=r(542),o=r(182);t.getItemClassName=(e,t)=>{var r,a;let o="";const l=null!==(r=null==t?void 0:t.activatedConfig)&&void 0!==r?r:0,i=null!==(a=null==t?void 0:t.deactivatedConfig)&&void 0!==a?a:0;return o=e<12?(0,n.getBoolAtIndex)(l,e)&&(null==t?void 0:t.actFB)||(0,n.getBoolAtIndex)(i,e)&&(null==t?void 0:t.deActFB)?"show item":"hide item":14===e?"show":12===e||13===e?(0,n.getBoolAtIndex)(l,e)||(0,n.getBoolAtIndex)(i,e)?"show":"hide":15===e||16===e?(0,n.getBoolAtIndex)(l,12)||(0,n.getBoolAtIndex)(i,12)?"show":"hide":17===e?(0,n.getBoolAtIndex)(l,13)||(0,n.getBoolAtIndex)(i,13)?"show":"hide":18===e&&((0,n.getBoolAtIndex)(l,13)||(0,n.getBoolAtIndex)(i,13))?"show":"hide",o.includes("show")&&!o.includes("item")&&((null==t?void 0:t.alarm)&&(o=o.replace("AlarmState","")+" AlarmState"),(null==t?void 0:t.changing)&&(o=o.replace("Changing","")+" Changing"),(null==t?void 0:t.manual)&&(o=o.replace("Manual","")+" Manual"),(null==t?void 0:t.masked)&&!t.alarm&&(o=o.replace("NoAlarmMask","")+" NoAlarmMask"),(null==t?void 0:t.masked)&&(o=o.replace("Masked","")+" Masked"),(null==t?void 0:t.actFB)&&(o=o.replace("Activated","")+" Activated"),(null==t?void 0:t.deActFB)&&(o=o.replace("Deactivated","")+" Deactivated"),(null==t?void 0:t.locate)&&(o=o.replace("circle","")+" circle")),o},t.getValveMpItemClassName=(e,t)=>{var r,a;let o="";const l=null!==(r=null==t?void 0:t.activatedConfig)&&void 0!==r?r:0,i=null!==(a=null==t?void 0:t.deactivatedConfig)&&void 0!==a?a:0;return e<8?o=(0,n.getBoolAtIndex)(l,e)&&(null==t?void 0:t.actFB)||(0,n.getBoolAtIndex)(i,e)&&(null==t?void 0:t.deActFB)?"show item":"hide item":9===e?o="show":8===e?o=(0,n.getBoolAtIndex)(l,e)||(0,n.getBoolAtIndex)(i,e)?"show":"hide":10===e?(0,n.getBoolAtIndex)(l,10)||(0,n.getBoolAtIndex)(i,10)?(o="show item",o=(null==t?void 0:t.usl)?o.replace("Activated","")+" Activated":o.replace("Deactivated","")+" Deactivated"):o="hide item":11===e?(0,n.getBoolAtIndex)(l,11)||(0,n.getBoolAtIndex)(i,11)?(o="show item",o=(null==t?void 0:t.lsl)?o.replace("Activated","")+" Activated":o.replace("Deactivated","")+" Deactivated"):o="hide item":12===e&&((null==t?void 0:t.locate)?(o=o.replace("show item","")+" show item",((0,n.getBoolAtIndex)(l,8)||(0,n.getBoolAtIndex)(i,8))&&(o=o.replace("show large item","")+" show large item")):o=o.replace("hide item","")+" hide item"),o.includes("show")&&!o.includes("item")&&((null==t?void 0:t.alarm)&&(o=o.replace("AlarmState","")+" AlarmState"),(null==t?void 0:t.changing)&&(o=o.replace("Changing","")+" Changing"),(null==t?void 0:t.manual)&&(o=o.replace("Manual","")+" Manual"),(null==t?void 0:t.masked)&&!t.alarm&&(o=o.replace("NoAlarmMask","")+" NoAlarmMask"),(null==t?void 0:t.masked)&&(o=o.replace("Masked","")+" Masked"),(null==t?void 0:t.actFB)&&(o=o.replace("Activated","")+" Activated"),(null==t?void 0:t.deActFB)&&(o=o.replace("Deactivated","")+" Deactivated")),o},t.itemNames=Object.entries(a.ItemNameEnum).map(((e,t)=>({key:(0,o.v4)(),name:e,value:e[1],index:t}))),t.valveMpItemNames=Object.entries(a.valveMpItemNameEnum).map(((e,t)=>({key:(0,o.v4)(),name:e,value:e[1],index:t}))),t.getItemIdPositionClassName=(e,t)=>{if(!e.includes("itemId popover"))return console.warn("Function getItemIdPositionClassName called when 'itemId popover' not in given className"),e;switch(e="itemId popover",t){case"left":e=e.replace("position-left","")+" position-left";break;case"right":e=e.replace("position-right","")+" position-right";break;case"top-left":e=e.replace("position-top-left","")+" position-top-left";break;case"top-right":e=e.replace("position-top-right","")+" position-top-right";break;case"bottom-left":e=e.replace("position-bottom-left","")+" position-bottom-left";break;case"bottom-right":e=e.replace("position-bottom-right","")+" position-bottom-right"}return e}},511:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.useValveReducer=function(){const[e,t]=(0,n.useImmerReducer)(o,a.valveStatus);return{state:e,reducer:{updateActConfig:function(e){t({type:"UPDATE_ACT_CONFIG",value:e})},updateDeActConfig:function(e){t({type:"UPDATE_DEACT_CONFIG",value:e})},updateAlarm:function(){t({type:"UPDATE_ALARM"})},updateActFB:function(){t({type:"UPDATE_ACT_FB"})},updateDeActFB:function(){t({type:"UPDATE_DE_ACT_FB"})},updateUsl:function(){t({type:"UPDATE_USL"})},updateLsl:function(){t({type:"UPDATE_LSL"})},updateManual:function(){t({type:"UPDATE_MANUAL"})},updateMasked:function(){t({type:"UPDATE_MASKED"})},updateChanging:function(){t({type:"UPDATE_CHANGING"})},updateLocate:function(){t({type:"UPDATE_LOCATE"})}}}},t.ParameterReducer=l,t.paramItemsReducer=function(){const[e,t]=(0,n.useImmerReducer)(l,a.parameterInitialState);return{state:e,reducer:{updateValue:function(e,r){t({type:"UPDATE_VALUE",index:e,value:r})}}}};const n=r(348),a=r(390);function o(e,t){switch(t.type){case"UPDATE_ACT_CONFIG":return e.activatedConfig=t.value,e;case"UPDATE_DEACT_CONFIG":return e.deactivatedConfig=t.value,e;case"UPDATE_ACT_FB":return e.actFB=!e.actFB,e;case"UPDATE_DE_ACT_FB":return e.deActFB=!e.deActFB,e;case"UPDATE_USL":return e.usl=!e.usl,e;case"UPDATE_LSL":return e.lsl=!e.lsl,e;case"UPDATE_MANUAL":return e.manual=!e.manual,e;case"UPDATE_ALARM":return e.alarm=!e.alarm,e;case"UPDATE_MASKED":return e.masked=!e.masked,e;case"UPDATE_CHANGING":return e.changing=!e.changing,e;case"UPDATE_LOCATE":return e.locate=!e.locate,e;default:return e}}function l(e,t){return"UPDATE_VALUE"===t.type?(e[t.index].input.value=t.value,e):e}},535:function(e,t,r){"use strict";var n=this&&this.__rest||function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(n=Object.getOwnPropertySymbols(e);a<n.length;a++)t.indexOf(n[a])<0&&Object.prototype.propertyIsEnumerable.call(e,n[a])&&(r[n[a]]=e[n[a]])}return r};Object.defineProperty(t,"__esModule",{value:!0}),t.useCreateContext=function(e,t){const r=a.createContext(t),o=e=>{const{children:t}=e,o=n(e,["children"]),l=a.useMemo((()=>o),Object.values(o));return a.createElement(r.Provider,{value:l},t)};return o.displayName=e+"Provider",[o,function(n){const o=a.useContext(r);if(o)return o;if(void 0!==t)return t;throw new Error(`\`${n}\` must be used within \`${e}\``)}]};const a=r(883)},542:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ItemPositionEnum=t.valveMpItemClickableNameEnum=t.ItemClickableNameEnum=t.valveMpItemNameEnum=t.ItemNameEnum=t.ValveClassNameEnum=t.VALVE_COMPONENT_TYPE=void 0,t.VALVE_COMPONENT_TYPE="hmi.process_objects.Valve",t.ValveClassNameEnum={AlarmState:"AlarmState",Activated:"Activated",Deactivated:"Deactivated",Manual:"Manual",Masked:"Masked",Changing:"Changing",NoAlarmMask:"NoAlarmMask",Locate:"Locate"},t.ItemNameEnum={V1b1:"v1b1",V1b2:"v1b2",V1b3:"v1b3",V1b4:"v1b4",V2b1:"v2b1",V2b2:"v2b2",V2b3:"v2b3",V2b4:"v2b4",V3b1:"v3b1",V3b2:"v3b2",V3b3:"v3b3",V3b4:"v3b4",V2:"v2",V3:"v3",V1:"v1",V2f1:"v2f1",V2f2:"v2f2",V3f1:"v3f1",V3f2:"v3f2"},t.valveMpItemNameEnum={V1b1:"v1b1",V1b2:"v1b2",V1b3:"v1b3",V1b4:"v1b4",V2b1:"v2b1",V2b2:"v2b2",V2b3:"v2b3",V2b4:"v2b4",V2:"v2",V1:"v1",usl:"usl",lsl:"lsl",locate:"locate"},t.ItemClickableNameEnum={V1b1:"v1b1",V1b2:"v1b2",V1b3:"v1b3",V1b4:"v1b4",V2b1:"v2b1",V2b2:"v2b2",V2b3:"v2b3",V2b4:"v2b4",V3b1:"v3b1",V3b2:"v3b2",V3b3:"v3b3",V3b4:"v3b4",V2:"v2",V3:"v3",V1:"v1"},t.valveMpItemClickableNameEnum={V1b1:"v1b1",V1b2:"v1b2",V1b3:"v1b3",V1b4:"v1b4",V2b1:"v2b1",V2b2:"v2b2",V2b3:"v2b3",V2b4:"v2b4",V2:"v2",V1:"v1"},t.ItemPositionEnum={v1b1:"v1b1",v1b2:"v1b2",v1b3:"v1b3",v1b4:"v1b4",v2b1:"v2b1",V2b2:"v2b2",v2b3:"v2b3",v2b4:"v2b4",v3b1:"v3b1",v3b2:"v3b2",v3b3:"v3b3",v3b4:"v3b4",v2:"v2",v3:"v3"}},557:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=void 0;const n=r(829),a=r(988);var o=r(988);function l(e,t,r,o){return(0,a.default)(80,n.default,e,t,r,o)}Object.defineProperty(t,"DNS",{enumerable:!0,get:function(){return o.DNS}}),Object.defineProperty(t,"URL",{enumerable:!0,get:function(){return o.URL}}),l.DNS=a.DNS,l.URL=a.URL,t.default=l},568:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(797),a=r(11);t.default=function(e){const t=(r="string"==typeof e?(0,n.default)(e):e,Uint8Array.of((15&r[6])<<4|r[7]>>4&15,(15&r[7])<<4|(240&r[4])>>4,(15&r[4])<<4|(240&r[5])>>4,(15&r[5])<<4|(240&r[0])>>4,(15&r[0])<<4|(240&r[1])>>4,(15&r[1])<<4|(240&r[2])>>4,96|15&r[2],r[3],r[8],r[9],r[10],r[11],r[12],r[13],r[14],r[15]));var r;return"string"==typeof e?(0,a.unsafeStringify)(t):t}},591:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=void 0;const n=r(338),a=r(988);var o=r(988);function l(e,t,r,o){return(0,a.default)(48,n.default,e,t,r,o)}Object.defineProperty(t,"DNS",{enumerable:!0,get:function(){return o.DNS}}),Object.defineProperty(t,"URL",{enumerable:!0,get:function(){return o.URL}}),l.DNS=a.DNS,l.URL=a.URL,t.default=l},697:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i},702:(e,t,r)=>{"use strict";r.r(t)},740:(e,t,r)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.ValveMpCompound=t.useValveContext=t.ValveContextProvider=void 0;const a=r(883),o=r(511),l=r(506),i=r(152),u=r(535),s=r(542).VALVE_COMPONENT_TYPE;n=(0,u.useCreateContext)("ValveMpCompound"),t.ValveContextProvider=n[0],t.useValveContext=n[1],t.ValveMpCompound={Root:({componentProps:e,valveProps:r,onActionPerformed:n,children:l})=>a.createElement(t.ValveContextProvider,{valveProps:r,componentProps:e,onActionPerformed:n,useValveReducer:o.useValveReducer},l),valve:()=>{var e;const{valveProps:r,onActionPerformed:n,componentProps:o}=(0,t.useValveContext)("Valve"),u=a.useRef(null),{position:c,emit:f}=o,{ValveStatus:d}=r,p=null!==(e=null==c?void 0:c.x)&&void 0!==e&&e;let v=l.valveMpItemNames;return(null==d?void 0:d.locate)||(v=v.slice(0,-1)),p?a.createElement("div",Object.assign({ref:u},f({classes:["hmi-component hmi-component-valve__mp "]}),{"data-component":s,onClick:n}),v.map((({value:e,index:t,key:r})=>a.createElement(i.default,{itemClassName:e+" "+(0,l.getValveMpItemClassName)(t,d),key:r})))):a.createElement("div",Object.assign({ref:u},f({classes:["hmi-component hmi-component__column "]}),{"data-component":s,onClick:n}),a.createElement("div",{className:"hmi-component__row"},a.createElement("div",{className:"hmi-component-valve__mp"},v.map((({value:e,index:t,key:r})=>a.createElement(i.default,{itemClassName:e+" "+(0,l.getValveMpItemClassName)(t,d),key:r}))))))},popover:({anchorEl:e})=>{const{valveProps:r,componentProps:n}=(0,t.useValveContext)("Popover"),{showLabel:o,labelPosition:i,ValveStatus:u}=r;if(!o)return null;const{position:s}=n;let c="itemId popover position-left";return i&&(c=(0,l.getItemIdPositionClassName)(c,i)),a.createElement("div",{className:c,style:{top:s.y,left:s.x}},a.createElement("div",{style:{padding:8}},null==u?void 0:u.itemName))}}},746:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(697);t.default=function(e){return"string"==typeof e&&n.default.test(e)}},770:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(746);t.default=function(e){if(!(0,n.default)(e))throw TypeError("Invalid UUID");return parseInt(e.slice(14,15),16)}},779:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r="undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto);t.default={randomUUID:r}},797:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(746);t.default=function(e){if(!(0,n.default)(e))throw TypeError("Invalid UUID");let t;return Uint8Array.of((t=parseInt(e.slice(0,8),16))>>>24,t>>>16&255,t>>>8&255,255&t,(t=parseInt(e.slice(9,13),16))>>>8,255&t,(t=parseInt(e.slice(14,18),16))>>>8,255&t,(t=parseInt(e.slice(19,23),16))>>>8,255&t,(t=parseInt(e.slice(24,36),16))/1099511627776&255,t/4294967296&255,t>>>24&255,t>>>16&255,t>>>8&255,255&t)}},829:(e,t)=>{"use strict";function r(e,t,r,n){switch(e){case 0:return t&r^~t&n;case 1:case 3:return t^r^n;case 2:return t&r^t&n^r&n}}function n(e,t){return e<<t|e>>>32-t}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){const t=[1518500249,1859775393,2400959708,3395469782],a=[1732584193,4023233417,2562383102,271733878,3285377520],o=new Uint8Array(e.length+1);o.set(e),o[e.length]=128;const l=(e=o).length/4+2,i=Math.ceil(l/16),u=new Array(i);for(let t=0;t<i;++t){const r=new Uint32Array(16);for(let n=0;n<16;++n)r[n]=e[64*t+4*n]<<24|e[64*t+4*n+1]<<16|e[64*t+4*n+2]<<8|e[64*t+4*n+3];u[t]=r}u[i-1][14]=8*(e.length-1)/Math.pow(2,32),u[i-1][14]=Math.floor(u[i-1][14]),u[i-1][15]=8*(e.length-1)&4294967295;for(let e=0;e<i;++e){const o=new Uint32Array(80);for(let t=0;t<16;++t)o[t]=u[e][t];for(let e=16;e<80;++e)o[e]=n(o[e-3]^o[e-8]^o[e-14]^o[e-16],1);let l=a[0],i=a[1],s=a[2],c=a[3],f=a[4];for(let e=0;e<80;++e){const a=Math.floor(e/20),u=n(l,5)+r(a,i,s,c)+f+t[a]+o[e]>>>0;f=c,c=s,s=n(i,30)>>>0,i=l,l=u}a[0]=a[0]+l>>>0,a[1]=a[1]+i>>>0,a[2]=a[2]+s>>>0,a[3]=a[3]+c>>>0,a[4]=a[4]+f>>>0}return Uint8Array.of(a[0]>>24,a[0]>>16,a[0]>>8,a[0],a[1]>>24,a[1]>>16,a[1]>>8,a[1],a[2]>>24,a[2]>>16,a[2]>>8,a[2],a[3]>>24,a[3]>>16,a[3]>>8,a[3],a[4]>>24,a[4]>>16,a[4]>>8,a[4])}},838:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ParameterListComponentMeta=t.ParameterListComponent=t.COMPONENT_TYPE=void 0;const n=r(883),a=r(390),o=[{label:{text:"text"},input:{value:null,placeholder:"Enter a Number"}}];t.COMPONENT_TYPE="hmi.input.ParameterList",t.ParameterListComponent=e=>{const t=n.useMemo((()=>{const{parameters:t}=e.props||o;return t}),[e.props.parameters]);return console.log(`transformedProps: label ${t[0].label.text}`),n.createElement("div",{className:"display-flex-column"},t.map(((t,r)=>{const{label:a,input:o}=t;return console.log(o.value),n.createElement("label",{key:`${a.text}-parameter${r}`,className:"field small"},n.createElement("span",{className:"label"},a.text),n.createElement("span",{className:"eu"},o.eu),n.createElement("input",{type:"text",id:`${a.text}-parameter${r}`,inputMode:o.inputmode,pattern:o.pattern||"[0-9]*",placeholder:o.placeholder,disabled:!o.editable,value:o.value,onChange:t=>{e.store.props.write(`parameters[${r}].input.value`,t.currentTarget.value)}}))})))},t.ParameterListComponentMeta=class{getComponentType(){return t.COMPONENT_TYPE}getDefaultSize(){return{width:120,height:240}}getPropsReducer(e){return{parameters:e.read("parameters",a.parameterInitialState)}}getViewComponent(){return t.ParameterListComponent}}},883:e=>{"use strict";e.exports=t},973:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ValveMeta=t.Valve=t.COMPONENT_TYPE=void 0;const n=r(883),a=r(377),o=r(740),l=r(390);t.COMPONENT_TYPE="hmi.process_objects.Valve_mp";class i extends a.Component{constructor(e){super(e),this.valveStatus=this.props.props.ValveStatus||l.valveStatus,this.onActionPerformed=()=>{this.props.eventsEnabled?(console.log("Valve clicked!"),this.props.componentEvents.fireComponentEvent("onActionPerformed",{})):console.log("Valve is disabled in the design-scope")},this.valveRef=n.createRef()}componentDidMount(){}render(){return n.createElement(o.ValveMpCompound.Root,{componentProps:this.props,valveProps:this.props.props,onActionPerformed:this.onActionPerformed},n.createElement(o.ValveMpCompound.valve,null),n.createElement(o.ValveMpCompound.popover,{anchorEl:this.valveRef.current}))}}t.Valve=i,t.ValveMeta=class{getComponentType(){return t.COMPONENT_TYPE}getViewComponent(){return i}getDefaultSize(){return{width:24,height:48}}getPropsReducer(e){return console.log("ValveStatus",e.read("ValveStatus")),{ValveStatus:{alarm:e.readBoolean("ValveStatus.alarm",!1),actFB:e.readBoolean("ValveStatus.actFB",!1),deActFB:e.readBoolean("ValveStatus.deActFB",!1),activatedConfig:e.readNumber("ValveStatus.activatedConfig",6),deactivatedConfig:e.readNumber("ValveStatus.deactivatedConfig",0),itemName:e.readString("ValveStatus.itemName",""),manual:e.readBoolean("ValveStatus.manual",!1),masked:e.readBoolean("ValveStatus.masked",!1),changing:e.readBoolean("ValveStatus.changing",!1),locate:e.readBoolean("ValveStatus.locate",!1),usl:e.readBoolean("ValveStatus.usl",!1),lsl:e.readBoolean("ValveStatus.lsl",!1)},showLabel:e.readBoolean("showLabel",!1),labelPosition:e.readString("labelPosition","top-left")}}}},988:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=t.stringToBytes=void 0;const n=r(797),a=r(11);function o(e){e=unescape(encodeURIComponent(e));const t=new Uint8Array(e.length);for(let r=0;r<e.length;++r)t[r]=e.charCodeAt(r);return t}t.stringToBytes=o,t.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",t.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",t.default=function(e,t,r,l,i,u){const s="string"==typeof r?o(r):r,c="string"==typeof l?(0,n.default)(l):l;if("string"==typeof l&&(l=(0,n.default)(l)),16!==l?.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");let f=new Uint8Array(16+s.length);if(f.set(c),f.set(s,c.length),f=t(f),f[6]=15&f[6]|e,f[8]=63&f[8]|128,i){u=u||0;for(let e=0;e<16;++e)i[u+e]=f[e];return i}return(0,a.unsafeStringify)(f)}}},n={};function a(e){var t=n[e];if(void 0!==t)return t.exports;var o=n[e]={exports:{}};return r[e].call(o.exports,o,o.exports,a),o.exports}a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};return(()=>{"use strict";var e=o;Object.defineProperty(e,"__esModule",{value:!0}),e.ParameterListComponent=e.Valve=void 0;const t=a(377),r=a(973);Object.defineProperty(e,"Valve",{enumerable:!0,get:function(){return r.Valve}});const n=a(838);Object.defineProperty(e,"ParameterListComponent",{enumerable:!0,get:function(){return n.ParameterListComponent}}),a(702),[new r.ValveMeta,new n.ParameterListComponentMeta].forEach((e=>t.ComponentRegistry.register(e)))})(),o})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,