!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("PerspectiveClient"),require("React")):"function"==typeof define&&define.amd?define("HmiComponents",["PerspectiveClient","React"],t):"object"==typeof exports?exports.HmiComponents=t(require("PerspectiveClient"),require("React")):e.HmiComponents=t(e.PerspectiveClient,e.React)}(self,((e,t)=>(()=>{var r={11:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.unsafeStringify=void 0;const n=r(746),o=[];for(let e=0;e<256;++e)o.push((e+256).toString(16).slice(1));function a(e,t=0){return(o[e[t+0]]+o[e[t+1]]+o[e[t+2]]+o[e[t+3]]+"-"+o[e[t+4]]+o[e[t+5]]+"-"+o[e[t+6]]+o[e[t+7]]+"-"+o[e[t+8]]+o[e[t+9]]+"-"+o[e[t+10]]+o[e[t+11]]+o[e[t+12]]+o[e[t+13]]+o[e[t+14]]+o[e[t+15]]).toLowerCase()}t.unsafeStringify=a,t.default=function(e,t=0){const r=a(e,t);if(!(0,n.default)(r))throw TypeError("Stringified UUID is invalid");return r}},124:e=>{"use strict";var t,r=Object.defineProperty,n=Object.getOwnPropertyDescriptor,o=Object.getOwnPropertyNames,a=Object.prototype.hasOwnProperty,l={};((e,t)=>{for(var n in t)r(e,n,{get:t[n],enumerable:!0})})(l,{Immer:()=>H,applyPatches:()=>le,castDraft:()=>ue,castImmutable:()=>ce,createDraft:()=>ie,current:()=>J,enableMapSet:()=>ee,enablePatches:()=>Z,finishDraft:()=>se,freeze:()=>w,immerable:()=>s,isDraft:()=>d,isDraftable:()=>p,nothing:()=>i,original:()=>b,produce:()=>re,produceWithPatches:()=>ne,setAutoFreeze:()=>oe,setUseStrictShallowCopy:()=>ae}),e.exports=(t=l,((e,t,l,i)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let l of o(t))!a.call(e,l)&&undefined!==l&&r(e,l,{get:()=>t[l],enumerable:!(i=n(t,l))||i.enumerable});return e})(r({},"__esModule",{value:!0}),t));var i=Symbol.for("immer-nothing"),s=Symbol.for("immer-draftable"),u=Symbol.for("immer-state");function c(e,...t){throw new Error(`[Immer] minified error nr: ${e}. Full error at: https://bit.ly/3cXEKWf`)}var f=Object.getPrototypeOf;function d(e){return!!e&&!!e[u]}function p(e){return!!e&&(m(e)||Array.isArray(e)||!!e[s]||!!e.constructor?.[s]||O(e)||_(e))}var v=Object.prototype.constructor.toString();function m(e){if(!e||"object"!=typeof e)return!1;let t=f(e);if(null===t)return!0;let r=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return r===Object||"function"==typeof r&&Function.toString.call(r)===v}function b(e){return d(e)||c(15),e[u].t}function h(e,t){0===y(e)?Reflect.ownKeys(e).forEach((r=>{t(r,e[r],e)})):e.forEach(((r,n)=>t(n,r,e)))}function y(e){let t=e[u];return t?t.o:Array.isArray(e)?1:O(e)?2:_(e)?3:0}function g(e,t){return 2===y(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function P(e,t){return 2===y(e)?e.get(t):e[t]}function A(e,t,r){let n=y(e);2===n?e.set(t,r):3===n?e.add(r):e[t]=r}function O(e){return e instanceof Map}function _(e){return e instanceof Set}function M(e){return e.e||e.t}function E(e,t){if(O(e))return new Map(e);if(_(e))return new Set(e);if(Array.isArray(e))return Array.prototype.slice.call(e);let r=m(e);if(!0===t||"class_only"===t&&!r){let t=Object.getOwnPropertyDescriptors(e);delete t[u];let r=Reflect.ownKeys(t);for(let n=0;n<r.length;n++){let o=r[n],a=t[o];!1===a.writable&&(a.writable=!0,a.configurable=!0),(a.get||a.set)&&(t[o]={configurable:!0,writable:!0,enumerable:a.enumerable,value:e[o]})}return Object.create(f(e),t)}{let t=f(e);if(null!==t&&r)return{...e};let n=Object.create(t);return Object.assign(n,e)}}function w(e,t=!1){return C(e)||d(e)||!p(e)||(y(e)>1&&(e.set=e.add=e.clear=e.delete=N),Object.freeze(e),t&&Object.entries(e).forEach((([e,t])=>w(t,!0)))),e}function N(){c(2)}function C(e){return Object.isFrozen(e)}var S,j={};function V(e){let t=j[e];return t||c(0),t}function U(e,t){j[e]||(j[e]=t)}function I(){return S}function D(e,t){t&&(V("Patches"),e.f=[],e.h=[],e.b=t)}function T(e){x(e),e.a.forEach(B),e.a=null}function x(e){e===S&&(S=e.i)}function L(e){return S=function(e,t){return{a:[],i:e,p:t,P:!0,d:0}}(S,e)}function B(e){let t=e[u];0===t.o||1===t.o?t.x():t.m=!0}function k(e,t){t.d=t.a.length;let r=t.a[0];return void 0!==e&&e!==r?(r[u].s&&(T(t),c(4)),p(e)&&(e=R(t,e),t.i||z(t,e)),t.f&&V("Patches").T(r[u].t,e,t.f,t.h)):e=R(t,r,[]),T(t),t.f&&t.b(t.f,t.h),e!==i?e:void 0}function R(e,t,r){if(C(t))return t;let n=t[u];if(!n)return h(t,((o,a)=>F(e,n,t,o,a,r))),t;if(n.n!==e)return t;if(!n.s)return z(e,n.t,!0),n.t;if(!n.c){n.c=!0,n.n.d--;let t=n.e,o=t,a=!1;3===n.o&&(o=new Set(t),t.clear(),a=!0),h(o,((o,l)=>F(e,n,t,o,l,r,a))),z(e,t,!1),r&&e.f&&V("Patches").g(n,r,e.f,e.h)}return n.e}function F(e,t,r,n,o,a,l){if(d(o)){let l=R(e,o,a&&t&&3!==t.o&&!g(t.r,n)?a.concat(n):void 0);if(A(r,n,l),!d(l))return;e.P=!1}else l&&r.add(o);if(p(o)&&!C(o)){if(!e.p.y&&e.d<1)return;R(e,o),(!t||!t.n.i)&&"symbol"!=typeof n&&Object.prototype.propertyIsEnumerable.call(r,n)&&z(e,o)}}function z(e,t,r=!1){!e.i&&e.p.y&&e.P&&w(t,r)}var $={get(e,t){if(t===u)return e;let r=M(e);if(!g(r,t))return function(e,t,r){let n=G(t,r);return n?"value"in n?n.value:n.get?.call(e.u):void 0}(e,r,t);let n=r[t];return e.c||!p(n)?n:n===Y(e.t,t)?(X(e),e.e[t]=W(n,e)):n},has:(e,t)=>t in M(e),ownKeys:e=>Reflect.ownKeys(M(e)),set(e,t,r){let n=G(M(e),t);if(n?.set)return n.set.call(e.u,r),!0;if(!e.s){let n=Y(M(e),t),o=n?.[u];if(o&&o.t===r)return e.e[t]=r,e.r[t]=!1,!0;if(function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}(r,n)&&(void 0!==r||g(e.t,t)))return!0;X(e),K(e)}return e.e[t]===r&&(void 0!==r||t in e.e)||Number.isNaN(r)&&Number.isNaN(e.e[t])||(e.e[t]=r,e.r[t]=!0),!0},deleteProperty:(e,t)=>(void 0!==Y(e.t,t)||t in e.t?(e.r[t]=!1,X(e),K(e)):delete e.r[t],e.e&&delete e.e[t],!0),getOwnPropertyDescriptor(e,t){let r=M(e),n=Reflect.getOwnPropertyDescriptor(r,t);return n&&{writable:!0,configurable:1!==e.o||"length"!==t,enumerable:n.enumerable,value:r[t]}},defineProperty(){c(11)},getPrototypeOf:e=>f(e.t),setPrototypeOf(){c(12)}},q={};function Y(e,t){let r=e[u];return(r?M(r):e)[t]}function G(e,t){if(!(t in e))return;let r=f(e);for(;r;){let e=Object.getOwnPropertyDescriptor(r,t);if(e)return e;r=f(r)}}function K(e){e.s||(e.s=!0,e.i&&K(e.i))}function X(e){e.e||(e.e=E(e.t,e.n.p.S))}h($,((e,t)=>{q[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),q.deleteProperty=function(e,t){return q.set.call(this,e,t,void 0)},q.set=function(e,t,r){return $.set.call(this,e[0],t,r,e[0])};var H=class{constructor(e){this.y=!0,this.S=!1,this.produce=(e,t,r)=>{if("function"==typeof e&&"function"!=typeof t){let r=t;t=e;let n=this;return function(e=r,...o){return n.produce(e,(e=>t.call(this,e,...o)))}}let n;if("function"!=typeof t&&c(6),void 0!==r&&"function"!=typeof r&&c(7),p(e)){let o=L(this),a=W(e,void 0),l=!0;try{n=t(a),l=!1}finally{l?T(o):x(o)}return D(o,r),k(n,o)}if(!e||"object"!=typeof e){if(n=t(e),void 0===n&&(n=e),n===i&&(n=void 0),this.y&&w(n,!0),r){let t=[],o=[];V("Patches").T(e,n,t,o),r(t,o)}return n}c(1)},this.produceWithPatches=(e,t)=>{if("function"==typeof e)return(t,...r)=>this.produceWithPatches(t,(t=>e(t,...r)));let r,n;return[this.produce(e,t,((e,t)=>{r=e,n=t})),r,n]},"boolean"==typeof e?.autoFreeze&&this.setAutoFreeze(e.autoFreeze),"boolean"==typeof e?.useStrictShallowCopy&&this.setUseStrictShallowCopy(e.useStrictShallowCopy)}createDraft(e){p(e)||c(8),d(e)&&(e=J(e));let t=L(this),r=W(e,void 0);return r[u].l=!0,x(t),r}finishDraft(e,t){let r=e&&e[u];(!r||!r.l)&&c(9);let{n}=r;return D(n,t),k(void 0,n)}setAutoFreeze(e){this.y=e}setUseStrictShallowCopy(e){this.S=e}applyPatches(e,t){let r;for(r=t.length-1;r>=0;r--){let n=t[r];if(0===n.path.length&&"replace"===n.op){e=n.value;break}}r>-1&&(t=t.slice(r+1));let n=V("Patches").A;return d(e)?n(e,t):this.produce(e,(e=>n(e,t)))}};function W(e,t){let r=O(e)?V("MapSet").I(e,t):_(e)?V("MapSet").D(e,t):function(e,t){let r=Array.isArray(e),n={o:r?1:0,n:t?t.n:I(),s:!1,c:!1,r:{},i:t,t:e,u:null,e:null,x:null,l:!1},o=n,a=$;r&&(o=[n],a=q);let{revoke:l,proxy:i}=Proxy.revocable(o,a);return n.u=i,n.x=l,i}(e,t);return(t?t.n:I()).a.push(r),r}function J(e){return d(e)||c(10),Q(e)}function Q(e){if(!p(e)||C(e))return e;let t,r=e[u];if(r){if(!r.s)return r.t;r.c=!0,t=E(e,r.n.p.S)}else t=E(e,!0);return h(t,((e,r)=>{A(t,e,Q(r))})),r&&(r.c=!1),t}function Z(){let e="replace",t="add",r="remove";function n(e){if(!p(e))return e;if(Array.isArray(e))return e.map(n);if(O(e))return new Map(Array.from(e.entries()).map((([e,t])=>[e,n(t)])));if(_(e))return new Set(Array.from(e).map(n));let t=Object.create(f(e));for(let r in e)t[r]=n(e[r]);return g(e,s)&&(t[s]=e[s]),t}function o(e){return d(e)?n(e):e}U("Patches",{A:function(o,a){return a.forEach((a=>{let{path:l,op:i}=a,s=o;for(let e=0;e<l.length-1;e++){let t=y(s),r=l[e];"string"!=typeof r&&"number"!=typeof r&&(r=""+r),(0===t||1===t)&&("__proto__"===r||"constructor"===r)&&c(19),"function"==typeof s&&"prototype"===r&&c(19),s=P(s,r),"object"!=typeof s&&c(18,l.join("/"))}let u=y(s),f=n(a.value),d=l[l.length-1];switch(i){case e:switch(u){case 2:return s.set(d,f);case 3:c(16);default:return s[d]=f}case t:switch(u){case 1:return"-"===d?s.push(f):s.splice(d,0,f);case 2:return s.set(d,f);case 3:return s.add(f);default:return s[d]=f}case r:switch(u){case 1:return s.splice(d,1);case 2:return s.delete(d);case 3:return s.delete(a.value);default:return delete s[d]}default:c(17)}})),o},g:function(n,a,l,i){switch(n.o){case 0:case 2:return function(n,a,l,i){let{t:s,e:u}=n;h(n.r,((n,c)=>{let f=P(s,n),d=P(u,n),p=c?g(s,n)?e:t:r;if(f===d&&p===e)return;let v=a.concat(n);l.push(p===r?{op:p,path:v}:{op:p,path:v,value:d}),i.push(p===t?{op:r,path:v}:p===r?{op:t,path:v,value:o(f)}:{op:e,path:v,value:o(f)})}))}(n,a,l,i);case 1:return function(n,a,l,i){let{t:s,r:u}=n,c=n.e;c.length<s.length&&([s,c]=[c,s],[l,i]=[i,l]);for(let t=0;t<s.length;t++)if(u[t]&&c[t]!==s[t]){let r=a.concat([t]);l.push({op:e,path:r,value:o(c[t])}),i.push({op:e,path:r,value:o(s[t])})}for(let e=s.length;e<c.length;e++){let r=a.concat([e]);l.push({op:t,path:r,value:o(c[e])})}for(let e=c.length-1;s.length<=e;--e){let t=a.concat([e]);i.push({op:r,path:t})}}(n,a,l,i);case 3:return function(e,n,o,a){let{t:l,e:i}=e,s=0;l.forEach((e=>{if(!i.has(e)){let l=n.concat([s]);o.push({op:r,path:l,value:e}),a.unshift({op:t,path:l,value:e})}s++})),s=0,i.forEach((e=>{if(!l.has(e)){let l=n.concat([s]);o.push({op:t,path:l,value:e}),a.unshift({op:r,path:l,value:e})}s++}))}(n,a,l,i)}},T:function(t,r,n,o){n.push({op:e,path:[],value:r===i?void 0:r}),o.push({op:e,path:[],value:t})}})}function ee(){class e extends Map{constructor(e,t){super(),this[u]={o:2,i:t,n:t?t.n:I(),s:!1,c:!1,e:void 0,r:void 0,t:e,u:this,l:!1,m:!1}}get size(){return M(this[u]).size}has(e){return M(this[u]).has(e)}set(e,r){let n=this[u];return o(n),(!M(n).has(e)||M(n).get(e)!==r)&&(t(n),K(n),n.r.set(e,!0),n.e.set(e,r),n.r.set(e,!0)),this}delete(e){if(!this.has(e))return!1;let r=this[u];return o(r),t(r),K(r),r.t.has(e)?r.r.set(e,!1):r.r.delete(e),r.e.delete(e),!0}clear(){let e=this[u];o(e),M(e).size&&(t(e),K(e),e.r=new Map,h(e.t,(t=>{e.r.set(t,!1)})),e.e.clear())}forEach(e,t){M(this[u]).forEach(((r,n,o)=>{e.call(t,this.get(n),n,this)}))}get(e){let r=this[u];o(r);let n=M(r).get(e);if(r.c||!p(n)||n!==r.t.get(e))return n;let a=W(n,r);return t(r),r.e.set(e,a),a}keys(){return M(this[u]).keys()}values(){let e=this.keys();return{[Symbol.iterator]:()=>this.values(),next:()=>{let t=e.next();return t.done?t:{done:!1,value:this.get(t.value)}}}}entries(){let e=this.keys();return{[Symbol.iterator]:()=>this.entries(),next:()=>{let t=e.next();if(t.done)return t;let r=this.get(t.value);return{done:!1,value:[t.value,r]}}}}[Symbol.iterator](){return this.entries()}}function t(e){e.e||(e.r=new Map,e.e=new Map(e.t))}class r extends Set{constructor(e,t){super(),this[u]={o:3,i:t,n:t?t.n:I(),s:!1,c:!1,e:void 0,t:e,u:this,a:new Map,m:!1,l:!1}}get size(){return M(this[u]).size}has(e){let t=this[u];return o(t),t.e?!!(t.e.has(e)||t.a.has(e)&&t.e.has(t.a.get(e))):t.t.has(e)}add(e){let t=this[u];return o(t),this.has(e)||(n(t),K(t),t.e.add(e)),this}delete(e){if(!this.has(e))return!1;let t=this[u];return o(t),n(t),K(t),t.e.delete(e)||!!t.a.has(e)&&t.e.delete(t.a.get(e))}clear(){let e=this[u];o(e),M(e).size&&(n(e),K(e),e.e.clear())}values(){let e=this[u];return o(e),n(e),e.e.values()}entries(){let e=this[u];return o(e),n(e),e.e.entries()}keys(){return this.values()}[Symbol.iterator](){return this.values()}forEach(e,t){let r=this.values(),n=r.next();for(;!n.done;)e.call(t,n.value,n.value,this),n=r.next()}}function n(e){e.e||(e.e=new Set,e.t.forEach((t=>{if(p(t)){let r=W(t,e);e.a.set(t,r),e.e.add(r)}else e.e.add(t)})))}function o(e){e.m&&c(3,JSON.stringify(M(e)))}U("MapSet",{I:function(t,r){return new e(t,r)},D:function(e,t){return new r(e,t)}})}var te=new H,re=te.produce,ne=te.produceWithPatches.bind(te),oe=te.setAutoFreeze.bind(te),ae=te.setUseStrictShallowCopy.bind(te),le=te.applyPatches.bind(te),ie=te.createDraft.bind(te),se=te.finishDraft.bind(te);function ue(e){return e}function ce(e){return e}},152:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(883),o=({itemClassName:e,handleClick:t})=>n.createElement("div",{className:e,onClick:t});o.displayName="Item",t.default=o},182:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.version=t.validate=t.v7=t.v6ToV1=t.v6=t.v5=t.v4=t.v3=t.v1ToV6=t.v1=t.stringify=t.parse=t.NIL=t.MAX=void 0;var n=r(196);Object.defineProperty(t,"MAX",{enumerable:!0,get:function(){return n.default}});var o=r(465);Object.defineProperty(t,"NIL",{enumerable:!0,get:function(){return o.default}});var a=r(797);Object.defineProperty(t,"parse",{enumerable:!0,get:function(){return a.default}});var l=r(11);Object.defineProperty(t,"stringify",{enumerable:!0,get:function(){return l.default}});var i=r(425);Object.defineProperty(t,"v1",{enumerable:!0,get:function(){return i.default}});var s=r(568);Object.defineProperty(t,"v1ToV6",{enumerable:!0,get:function(){return s.default}});var u=r(591);Object.defineProperty(t,"v3",{enumerable:!0,get:function(){return u.default}});var c=r(286);Object.defineProperty(t,"v4",{enumerable:!0,get:function(){return c.default}});var f=r(557);Object.defineProperty(t,"v5",{enumerable:!0,get:function(){return f.default}});var d=r(356);Object.defineProperty(t,"v6",{enumerable:!0,get:function(){return d.default}});var p=r(268);Object.defineProperty(t,"v6ToV1",{enumerable:!0,get:function(){return p.default}});var v=r(299);Object.defineProperty(t,"v7",{enumerable:!0,get:function(){return v.default}});var m=r(746);Object.defineProperty(t,"validate",{enumerable:!0,get:function(){return m.default}});var b=r(770);Object.defineProperty(t,"version",{enumerable:!0,get:function(){return b.default}})},196:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="ffffffff-ffff-ffff-ffff-ffffffffffff"},268:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(797),o=r(11);t.default=function(e){const t=(r="string"==typeof e?(0,n.default)(e):e,Uint8Array.of((15&r[3])<<4|r[4]>>4&15,(15&r[4])<<4|(240&r[5])>>4,(15&r[5])<<4|15&r[6],r[7],(15&r[1])<<4|(240&r[2])>>4,(15&r[2])<<4|(240&r[3])>>4,16|(240&r[0])>>4,(15&r[0])<<4|(240&r[1])>>4,r[8],r[9],r[10],r[11],r[12],r[13],r[14],r[15]));var r;return"string"==typeof e?(0,o.unsafeStringify)(t):t}},286:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(779),o=r(291),a=r(11);t.default=function(e,t,r){if(n.default.randomUUID&&!t&&!e)return n.default.randomUUID();const l=(e=e||{}).random??e.rng?.()??(0,o.default)();if(l.length<16)throw new Error("Random bytes length must be >= 16");if(l[6]=15&l[6]|64,l[8]=63&l[8]|128,t){if((r=r||0)<0||r+16>t.length)throw new RangeError(`UUID byte range ${r}:${r+15} is out of buffer bounds`);for(let e=0;e<16;++e)t[r+e]=l[e];return t}return(0,a.unsafeStringify)(l)}},291:(e,t)=>{"use strict";let r;Object.defineProperty(t,"__esModule",{value:!0});const n=new Uint8Array(16);t.default=function(){if(!r){if("undefined"==typeof crypto||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");r=crypto.getRandomValues.bind(crypto)}return r(n)}},299:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateV7State=void 0;const n=r(291),o=r(11),a={};function l(e,t,r){return e.msecs??=-1/0,e.seq??=0,t>e.msecs?(e.seq=r[6]<<23|r[7]<<16|r[8]<<8|r[9],e.msecs=t):(e.seq=e.seq+1|0,0===e.seq&&e.msecs++),e}function i(e,t,r,n,o=0){if(e.length<16)throw new Error("Random bytes length must be >= 16");if(n){if(o<0||o+16>n.length)throw new RangeError(`UUID byte range ${o}:${o+15} is out of buffer bounds`)}else n=new Uint8Array(16),o=0;return t??=Date.now(),r??=127*e[6]<<24|e[7]<<16|e[8]<<8|e[9],n[o++]=t/1099511627776&255,n[o++]=t/4294967296&255,n[o++]=t/16777216&255,n[o++]=t/65536&255,n[o++]=t/256&255,n[o++]=255&t,n[o++]=112|r>>>28&15,n[o++]=r>>>20&255,n[o++]=128|r>>>14&63,n[o++]=r>>>6&255,n[o++]=r<<2&255|3&e[10],n[o++]=e[11],n[o++]=e[12],n[o++]=e[13],n[o++]=e[14],n[o++]=e[15],n}t.updateV7State=l,t.default=function(e,t,r){let s;if(e)s=i(e.random??e.rng?.()??(0,n.default)(),e.msecs,e.seq,t,r);else{const e=Date.now(),o=(0,n.default)();l(a,e,o),s=i(o,a.msecs,a.seq,t,r)}return t??(0,o.unsafeStringify)(s)}},338:(e,t)=>{"use strict";function r(e){return 14+(e+64>>>9<<4)+1}function n(e,t){const r=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(r>>16)<<16|65535&r}function o(e,t,r,o,a,l){return n((i=n(n(t,e),n(o,l)))<<(s=a)|i>>>32-s,r);var i,s}function a(e,t,r,n,a,l,i){return o(t&r|~t&n,e,t,a,l,i)}function l(e,t,r,n,a,l,i){return o(t&n|r&~n,e,t,a,l,i)}function i(e,t,r,n,a,l,i){return o(t^r^n,e,t,a,l,i)}function s(e,t,r,n,a,l,i){return o(r^(t|~n),e,t,a,l,i)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return function(e){const t=new Uint8Array(4*e.length);for(let r=0;r<4*e.length;r++)t[r]=e[r>>2]>>>r%4*8&255;return t}(function(e,t){const o=new Uint32Array(r(t)).fill(0);o.set(e),o[t>>5]|=128<<t%32,o[o.length-1]=t,e=o;let u=1732584193,c=-271733879,f=-1732584194,d=271733878;for(let t=0;t<e.length;t+=16){const r=u,o=c,p=f,v=d;u=a(u,c,f,d,e[t],7,-680876936),d=a(d,u,c,f,e[t+1],12,-389564586),f=a(f,d,u,c,e[t+2],17,606105819),c=a(c,f,d,u,e[t+3],22,-1044525330),u=a(u,c,f,d,e[t+4],7,-176418897),d=a(d,u,c,f,e[t+5],12,1200080426),f=a(f,d,u,c,e[t+6],17,-1473231341),c=a(c,f,d,u,e[t+7],22,-45705983),u=a(u,c,f,d,e[t+8],7,1770035416),d=a(d,u,c,f,e[t+9],12,-1958414417),f=a(f,d,u,c,e[t+10],17,-42063),c=a(c,f,d,u,e[t+11],22,-1990404162),u=a(u,c,f,d,e[t+12],7,1804603682),d=a(d,u,c,f,e[t+13],12,-40341101),f=a(f,d,u,c,e[t+14],17,-1502002290),c=a(c,f,d,u,e[t+15],22,1236535329),u=l(u,c,f,d,e[t+1],5,-165796510),d=l(d,u,c,f,e[t+6],9,-1069501632),f=l(f,d,u,c,e[t+11],14,643717713),c=l(c,f,d,u,e[t],20,-373897302),u=l(u,c,f,d,e[t+5],5,-701558691),d=l(d,u,c,f,e[t+10],9,38016083),f=l(f,d,u,c,e[t+15],14,-660478335),c=l(c,f,d,u,e[t+4],20,-405537848),u=l(u,c,f,d,e[t+9],5,568446438),d=l(d,u,c,f,e[t+14],9,-1019803690),f=l(f,d,u,c,e[t+3],14,-187363961),c=l(c,f,d,u,e[t+8],20,1163531501),u=l(u,c,f,d,e[t+13],5,-1444681467),d=l(d,u,c,f,e[t+2],9,-51403784),f=l(f,d,u,c,e[t+7],14,1735328473),c=l(c,f,d,u,e[t+12],20,-1926607734),u=i(u,c,f,d,e[t+5],4,-378558),d=i(d,u,c,f,e[t+8],11,-2022574463),f=i(f,d,u,c,e[t+11],16,1839030562),c=i(c,f,d,u,e[t+14],23,-35309556),u=i(u,c,f,d,e[t+1],4,-1530992060),d=i(d,u,c,f,e[t+4],11,1272893353),f=i(f,d,u,c,e[t+7],16,-155497632),c=i(c,f,d,u,e[t+10],23,-1094730640),u=i(u,c,f,d,e[t+13],4,681279174),d=i(d,u,c,f,e[t],11,-358537222),f=i(f,d,u,c,e[t+3],16,-722521979),c=i(c,f,d,u,e[t+6],23,76029189),u=i(u,c,f,d,e[t+9],4,-640364487),d=i(d,u,c,f,e[t+12],11,-421815835),f=i(f,d,u,c,e[t+15],16,530742520),c=i(c,f,d,u,e[t+2],23,-995338651),u=s(u,c,f,d,e[t],6,-198630844),d=s(d,u,c,f,e[t+7],10,1126891415),f=s(f,d,u,c,e[t+14],15,-1416354905),c=s(c,f,d,u,e[t+5],21,-57434055),u=s(u,c,f,d,e[t+12],6,1700485571),d=s(d,u,c,f,e[t+3],10,-1894986606),f=s(f,d,u,c,e[t+10],15,-1051523),c=s(c,f,d,u,e[t+1],21,-2054922799),u=s(u,c,f,d,e[t+8],6,1873313359),d=s(d,u,c,f,e[t+15],10,-30611744),f=s(f,d,u,c,e[t+6],15,-1560198380),c=s(c,f,d,u,e[t+13],21,1309151649),u=s(u,c,f,d,e[t+4],6,-145523070),d=s(d,u,c,f,e[t+11],10,-1120210379),f=s(f,d,u,c,e[t+2],15,718787259),c=s(c,f,d,u,e[t+9],21,-343485551),u=n(u,r),c=n(c,o),f=n(f,p),d=n(d,v)}return Uint32Array.of(u,c,f,d)}(function(e){if(0===e.length)return new Uint32Array;const t=new Uint32Array(r(8*e.length)).fill(0);for(let r=0;r<e.length;r++)t[r>>2]|=(255&e[r])<<r%4*8;return t}(e),8*e.length))}},348:(e,t,r)=>{var n=r(407),o=r(883);t.useImmer=function(e){var t=o.useState((function(){return n.freeze("function"==typeof e?e():e,!0)})),r=t[1];return[t[0],o.useCallback((function(e){r("function"==typeof e?n.produce(e):n.freeze(e))}),[])]},t.useImmerReducer=function(e,t,r){var a=o.useMemo((function(){return n.produce(e)}),[e]);return o.useReducer(a,t,r)}},356:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(11),o=r(425),a=r(568);t.default=function(e,t,r){e??={},r??=0;let l=(0,o.default)({...e,_v6:!0},new Uint8Array(16));if(l=(0,a.default)(l),t){for(let e=0;e<16;e++)t[r+e]=l[e];return t}return(0,n.unsafeStringify)(l)}},377:t=>{"use strict";t.exports=e},390:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.initialControlState=t.initialOffOnState=t.initialAutoManState=t.parameterInitialState=t.valveProps=t.processObjectProps=t.valveStatus=void 0,t.valveStatus={alarm:!1,actFB:!1,deActFB:!0,activatedConfig:7,deactivatedConfig:5,itemName:"VXXX",manual:!1,masked:!1,changing:!1,locate:!1},t.processObjectProps={status:t.valveStatus},t.valveProps={processObject:t.processObjectProps,handleClick:()=>{console.log("Valve clicked")},labelPosition:"left",showLabel:!1},t.parameterInitialState=[{label:{text:"label",className:"",tooltipText:"",tooltipPosition:"",tooltipClassName:"",tooltipId:""},input:{type:"text",inputmode:"numeric",placeholder:"Enter a number",editable:!0,pattern:"^[0-9]*[.,]?[0-9]*$",min:0,max:100,decimalPlaces:2,eu:"µC",value:0}}],t.initialAutoManState={auto:!0,manual:!1},t.initialOffOnState={off:!1,on:!1},t.initialControlState={main:{auto:!0,manual:!1,off:!1,on:!1,label:"Main"},upperSeat:{off:!1,on:!1,label:"Upper Seat"},lowerSeat:{off:!1,on:!1,label:"Lower Seat"}}},407:(e,t,r)=>{"use strict";e.exports=r(124)},425:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateV1State=void 0;const n=r(291),o=r(11),a={};function l(e,t,r){return e.msecs??=-1/0,e.nsecs??=0,t===e.msecs?(e.nsecs++,e.nsecs>=1e4&&(e.node=void 0,e.nsecs=0)):t>e.msecs?e.nsecs=0:t<e.msecs&&(e.node=void 0),e.node||(e.node=r.slice(10,16),e.node[0]|=1,e.clockseq=16383&(r[8]<<8|r[9])),e.msecs=t,e}function i(e,t,r,n,o,a,l=0){if(e.length<16)throw new Error("Random bytes length must be >= 16");if(a){if(l<0||l+16>a.length)throw new RangeError(`UUID byte range ${l}:${l+15} is out of buffer bounds`)}else a=new Uint8Array(16),l=0;t??=Date.now(),r??=0,n??=16383&(e[8]<<8|e[9]),o??=e.slice(10,16);const i=(1e4*(268435455&(t+=122192928e5))+r)%4294967296;a[l++]=i>>>24&255,a[l++]=i>>>16&255,a[l++]=i>>>8&255,a[l++]=255&i;const s=t/4294967296*1e4&268435455;a[l++]=s>>>8&255,a[l++]=255&s,a[l++]=s>>>24&15|16,a[l++]=s>>>16&255,a[l++]=n>>>8|128,a[l++]=255&n;for(let e=0;e<6;++e)a[l++]=o[e];return a}t.updateV1State=l,t.default=function(e,t,r){let s;const u=e?._v6??!1;if(e){const t=Object.keys(e);1===t.length&&"_v6"===t[0]&&(e=void 0)}if(e)s=i(e.random??e.rng?.()??(0,n.default)(),e.msecs,e.nsecs,e.clockseq,e.node,t,r);else{const e=Date.now(),o=(0,n.default)();l(a,e,o),s=i(o,a.msecs,a.nsecs,u?void 0:a.clockseq,u?void 0:a.node,t,r)}return t??(0,o.unsafeStringify)(s)}},429:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getBoolAtIndex=void 0,t.getBoolAtIndex=(e,t)=>Boolean(e>>t&1)},465:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="00000000-0000-0000-0000-000000000000"},506:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getItemIdPositionClassName=t.valveMpItemNames=t.itemNames=t.getValveMpItemClassName=t.getItemClassName=void 0;const n=r(429),o=r(542),a=r(182);t.getItemClassName=(e,t)=>{var r,o;let a="";const l=null!==(r=null==t?void 0:t.activatedConfig)&&void 0!==r?r:0,i=null!==(o=null==t?void 0:t.deactivatedConfig)&&void 0!==o?o:0;return a=e<12?(0,n.getBoolAtIndex)(l,e)&&(null==t?void 0:t.actFB)||(0,n.getBoolAtIndex)(i,e)&&(null==t?void 0:t.deActFB)?"show item":"hide item":14===e?"show":12===e||13===e?(0,n.getBoolAtIndex)(l,e)||(0,n.getBoolAtIndex)(i,e)?"show":"hide":15===e||16===e?(0,n.getBoolAtIndex)(l,12)||(0,n.getBoolAtIndex)(i,12)?"show":"hide":17===e?(0,n.getBoolAtIndex)(l,13)||(0,n.getBoolAtIndex)(i,13)?"show":"hide":18===e&&((0,n.getBoolAtIndex)(l,13)||(0,n.getBoolAtIndex)(i,13))?"show":"hide",a.includes("show")&&!a.includes("item")&&((null==t?void 0:t.alarm)&&(a=a.replace("AlarmState","")+" AlarmState"),(null==t?void 0:t.changing)&&(a=a.replace("Changing","")+" Changing"),(null==t?void 0:t.manual)&&(a=a.replace("Manual","")+" Manual"),(null==t?void 0:t.masked)&&!t.alarm&&(a=a.replace("NoAlarmMask","")+" NoAlarmMask"),(null==t?void 0:t.masked)&&(a=a.replace("Masked","")+" Masked"),(null==t?void 0:t.actFB)&&(a=a.replace("Activated","")+" Activated"),(null==t?void 0:t.deActFB)&&(a=a.replace("Deactivated","")+" Deactivated"),(null==t?void 0:t.locate)&&(a=a.replace("circle","")+" circle")),a},t.getValveMpItemClassName=(e,t)=>{var r,o;let a="";const l=null!==(r=null==t?void 0:t.activatedConfig)&&void 0!==r?r:0,i=null!==(o=null==t?void 0:t.deactivatedConfig)&&void 0!==o?o:0;return e<8?a=(0,n.getBoolAtIndex)(l,e)&&(null==t?void 0:t.actFB)||(0,n.getBoolAtIndex)(i,e)&&(null==t?void 0:t.deActFB)?"show item":"hide item":9===e?a="show":8===e?a=(0,n.getBoolAtIndex)(l,e)||(0,n.getBoolAtIndex)(i,e)?"show":"hide":10===e?(0,n.getBoolAtIndex)(l,10)||(0,n.getBoolAtIndex)(i,10)?(a="show item",a=(null==t?void 0:t.usl)?a.replace("Activated","")+" Activated":a.replace("Deactivated","")+" Deactivated"):a="hide item":11===e?(0,n.getBoolAtIndex)(l,11)||(0,n.getBoolAtIndex)(i,11)?(a="show item",a=(null==t?void 0:t.lsl)?a.replace("Activated","")+" Activated":a.replace("Deactivated","")+" Deactivated"):a="hide item":12===e&&((null==t?void 0:t.locate)?(a=a.replace("show item","")+" show item",((0,n.getBoolAtIndex)(l,8)||(0,n.getBoolAtIndex)(i,8))&&(a=a.replace("show large item","")+" show large item")):a=a.replace("hide item","")+" hide item"),a.includes("show")&&!a.includes("item")&&((null==t?void 0:t.alarm)&&(a=a.replace("AlarmState","")+" AlarmState"),(null==t?void 0:t.changing)&&(a=a.replace("Changing","")+" Changing"),(null==t?void 0:t.manual)&&(a=a.replace("Manual","")+" Manual"),(null==t?void 0:t.masked)&&!t.alarm&&(a=a.replace("NoAlarmMask","")+" NoAlarmMask"),(null==t?void 0:t.masked)&&(a=a.replace("Masked","")+" Masked"),(null==t?void 0:t.actFB)&&(a=a.replace("Activated","")+" Activated"),(null==t?void 0:t.deActFB)&&(a=a.replace("Deactivated","")+" Deactivated")),a},t.itemNames=Object.entries(o.ItemNameEnum).map(((e,t)=>({key:(0,a.v4)(),name:e,value:e[1],index:t}))),t.valveMpItemNames=Object.entries(o.valveMpItemNameEnum).map(((e,t)=>({key:(0,a.v4)(),name:e,value:e[1],index:t}))),t.getItemIdPositionClassName=(e,t)=>{if(!e.includes("itemId popover"))return console.warn("Function getItemIdPositionClassName called when 'itemId popover' not in given className"),e;switch(e="itemId popover",t){case"left":e=e.replace("position-left","")+" position-left";break;case"right":e=e.replace("position-right","")+" position-right";break;case"top-left":e=e.replace("position-top-left","")+" position-top-left";break;case"top-right":e=e.replace("position-top-right","")+" position-top-right";break;case"bottom-left":e=e.replace("position-bottom-left","")+" position-bottom-left";break;case"bottom-right":e=e.replace("position-bottom-right","")+" position-bottom-right"}return e}},511:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.useValveReducer=function(){const[e,t]=(0,n.useImmerReducer)(a,o.valveStatus);return{state:e,reducer:{updateActConfig:function(e){t({type:"UPDATE_ACT_CONFIG",value:e})},updateDeActConfig:function(e){t({type:"UPDATE_DEACT_CONFIG",value:e})},updateAlarm:function(){t({type:"UPDATE_ALARM"})},updateActFB:function(){t({type:"UPDATE_ACT_FB"})},updateDeActFB:function(){t({type:"UPDATE_DE_ACT_FB"})},updateUsl:function(){t({type:"UPDATE_USL"})},updateLsl:function(){t({type:"UPDATE_LSL"})},updateManual:function(){t({type:"UPDATE_MANUAL"})},updateMasked:function(){t({type:"UPDATE_MASKED"})},updateChanging:function(){t({type:"UPDATE_CHANGING"})},updateLocate:function(){t({type:"UPDATE_LOCATE"})}}}},t.ParameterReducer=l,t.paramItemsReducer=function(){const[e,t]=(0,n.useImmerReducer)(l,o.parameterInitialState);return{state:e,reducer:{updateValue:function(e,r){t({type:"UPDATE_VALUE",index:e,value:r})}}}},t.useValveMpCommandReducer=function(){const[e,t]=(0,n.useImmerReducer)(i,o.initialControlState);return{state:e,reducer:{updateAutoManSelection:function(e){t({type:"UPDATE_AUTO_MANUAL",mode:e})},updateMainManualOn:function(){t({type:"UPDATE_MAIN_MAN_ON"})},updateMainManualOff:function(){t({type:"UPDATE_MAIN_MAN_OFF"})},updateUslManualOn:function(){t({type:"UPDATE_USL_MAN_ON"})},updateUslManualOff:function(){t({type:"UPDATE_USL_MAN_OFF"})},updateLslManualOn:function(){t({type:"UPDATE_LSL_MAN_ON"})},updateLslManualOff:function(){t({type:"UPDATE_LSL_MAN_OFF"})}}}};const n=r(348),o=r(390);function a(e,t){switch(t.type){case"UPDATE_ACT_CONFIG":return e.activatedConfig=t.value,e;case"UPDATE_DEACT_CONFIG":return e.deactivatedConfig=t.value,e;case"UPDATE_ACT_FB":return e.actFB=!e.actFB,e;case"UPDATE_DE_ACT_FB":return e.deActFB=!e.deActFB,e;case"UPDATE_USL":return e.usl=!e.usl,e;case"UPDATE_LSL":return e.lsl=!e.lsl,e;case"UPDATE_MANUAL":return e.manual=!e.manual,e;case"UPDATE_ALARM":return e.alarm=!e.alarm,e;case"UPDATE_MASKED":return e.masked=!e.masked,e;case"UPDATE_CHANGING":return e.changing=!e.changing,e;case"UPDATE_LOCATE":return e.locate=!e.locate,e;default:return e}}function l(e,t){return"UPDATE_VALUE"===t.type?(e[t.index].input.value=t.value,e):e}function i(e,t){switch(t.type){case"UPDATE_AUTO_MANUAL":return e.main&&("auto"===t.mode?(e.main.auto=!0,e.main.manual=!1):"manual"===t.mode&&(e.main.auto=!1,e.main.manual=!0)),e;case"UPDATE_MAIN_MAN_ON":return e.main&&(e.main.on=!0,e.main.off=!1),e;case"UPDATE_MAIN_MAN_OFF":return e.main&&(e.main.on=!1,e.main.off=!0),e;case"UPDATE_USL_MAN_ON":return e.upperSeat&&(e.upperSeat.on=!0,e.upperSeat.off=!1),e;case"UPDATE_USL_MAN_OFF":return e.upperSeat&&(e.upperSeat.on=!1,e.upperSeat.off=!0),e;case"UPDATE_LSL_MAN_ON":return e.lowerSeat&&(e.lowerSeat.on=!0,e.lowerSeat.off=!1),e;case"UPDATE_LSL_MAN_OFF":return e.lowerSeat&&(e.lowerSeat.on=!1,e.lowerSeat.off=!0),e;default:return e}}},535:function(e,t,r){"use strict";var n=this&&this.__rest||function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(r[n[o]]=e[n[o]])}return r};Object.defineProperty(t,"__esModule",{value:!0}),t.useCreateContext=function(e,t){const r=o.createContext(t),a=e=>{const{children:t}=e,a=n(e,["children"]),l=o.useMemo((()=>a),Object.values(a));return o.createElement(r.Provider,{value:l},t)};return a.displayName=e+"Provider",[a,function(n){const a=o.useContext(r);if(a)return a;if(void 0!==t)return t;throw new Error(`\`${n}\` must be used within \`${e}\``)}]};const o=r(883)},542:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ItemPositionEnum=t.valveMpItemClickableNameEnum=t.ItemClickableNameEnum=t.valveMpItemNameEnum=t.ItemNameEnum=t.ValveClassNameEnum=t.VALVE_COMPONENT_TYPE=void 0,t.VALVE_COMPONENT_TYPE="hmi.process_objects.Valve",t.ValveClassNameEnum={AlarmState:"AlarmState",Activated:"Activated",Deactivated:"Deactivated",Manual:"Manual",Masked:"Masked",Changing:"Changing",NoAlarmMask:"NoAlarmMask",Locate:"Locate"},t.ItemNameEnum={V1b1:"v1b1",V1b2:"v1b2",V1b3:"v1b3",V1b4:"v1b4",V2b1:"v2b1",V2b2:"v2b2",V2b3:"v2b3",V2b4:"v2b4",V3b1:"v3b1",V3b2:"v3b2",V3b3:"v3b3",V3b4:"v3b4",V2:"v2",V3:"v3",V1:"v1",V2f1:"v2f1",V2f2:"v2f2",V3f1:"v3f1",V3f2:"v3f2"},t.valveMpItemNameEnum={V1b1:"v1b1",V1b2:"v1b2",V1b3:"v1b3",V1b4:"v1b4",V2b1:"v2b1",V2b2:"v2b2",V2b3:"v2b3",V2b4:"v2b4",V2:"v2",V1:"v1",usl:"usl",lsl:"lsl",locate:"locate"},t.ItemClickableNameEnum={V1b1:"v1b1",V1b2:"v1b2",V1b3:"v1b3",V1b4:"v1b4",V2b1:"v2b1",V2b2:"v2b2",V2b3:"v2b3",V2b4:"v2b4",V3b1:"v3b1",V3b2:"v3b2",V3b3:"v3b3",V3b4:"v3b4",V2:"v2",V3:"v3",V1:"v1"},t.valveMpItemClickableNameEnum={V1b1:"v1b1",V1b2:"v1b2",V1b3:"v1b3",V1b4:"v1b4",V2b1:"v2b1",V2b2:"v2b2",V2b3:"v2b3",V2b4:"v2b4",V2:"v2",V1:"v1"},t.ItemPositionEnum={v1b1:"v1b1",v1b2:"v1b2",v1b3:"v1b3",v1b4:"v1b4",v2b1:"v2b1",V2b2:"v2b2",v2b3:"v2b3",v2b4:"v2b4",v3b1:"v3b1",v3b2:"v3b2",v3b3:"v3b3",v3b4:"v3b4",v2:"v2",v3:"v3"}},557:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=void 0;const n=r(829),o=r(988);var a=r(988);function l(e,t,r,a){return(0,o.default)(80,n.default,e,t,r,a)}Object.defineProperty(t,"DNS",{enumerable:!0,get:function(){return a.DNS}}),Object.defineProperty(t,"URL",{enumerable:!0,get:function(){return a.URL}}),l.DNS=o.DNS,l.URL=o.URL,t.default=l},568:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(797),o=r(11);t.default=function(e){const t=(r="string"==typeof e?(0,n.default)(e):e,Uint8Array.of((15&r[6])<<4|r[7]>>4&15,(15&r[7])<<4|(240&r[4])>>4,(15&r[4])<<4|(240&r[5])>>4,(15&r[5])<<4|(240&r[0])>>4,(15&r[0])<<4|(240&r[1])>>4,(15&r[1])<<4|(240&r[2])>>4,96|15&r[2],r[3],r[8],r[9],r[10],r[11],r[12],r[13],r[14],r[15]));var r;return"string"==typeof e?(0,o.unsafeStringify)(t):t}},591:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=void 0;const n=r(338),o=r(988);var a=r(988);function l(e,t,r,a){return(0,o.default)(48,n.default,e,t,r,a)}Object.defineProperty(t,"DNS",{enumerable:!0,get:function(){return a.DNS}}),Object.defineProperty(t,"URL",{enumerable:!0,get:function(){return a.URL}}),l.DNS=o.DNS,l.URL=o.URL,t.default=l},697:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i},702:(e,t,r)=>{"use strict";r.r(t)},740:(e,t,r)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.ValveMpCompound=t.useValveContext=t.ValveContextProvider=void 0;const o=r(883),a=r(511),l=r(506),i=r(152),s=r(535),u=r(542),c=r(390),f=u.VALVE_COMPONENT_TYPE;n=(0,s.useCreateContext)("ValveMpCompound"),t.ValveContextProvider=n[0],t.useValveContext=n[1],t.ValveMpCompound={Root:({componentProps:e,valveProps:r,onActionPerformed:n,children:l})=>o.createElement(t.ValveContextProvider,{valveProps:r,componentProps:e,onActionPerformed:n,useValveReducer:a.useValveReducer},l),valve:()=>{var e;const{valveProps:r,onActionPerformed:n,componentProps:a}=(0,t.useValveContext)("Valve"),s=o.useRef(null),{position:u,emit:d}=a,{processObject:p}=r,{status:v}=p||c.processObjectProps,m=null!==(e=null==u?void 0:u.x)&&void 0!==e&&e;let b=l.valveMpItemNames;return(null==v?void 0:v.locate)||(b=b.slice(0,-1)),m?o.createElement("div",Object.assign({ref:s},d({classes:["hmi-component hmi-component-valve__mp "]}),{"data-component":f,onClick:n}),b.map((({value:e,index:t,key:r})=>o.createElement(i.default,{itemClassName:e+" "+(0,l.getValveMpItemClassName)(t,v),key:r})))):o.createElement("div",Object.assign({ref:s},d({classes:["hmi-component hmi-component__column "]}),{"data-component":f,onClick:n}),o.createElement("div",{className:"hmi-component__row"},o.createElement("div",{className:"hmi-component-valve__mp"},b.map((({value:e,index:t,key:r})=>o.createElement(i.default,{itemClassName:e+" "+(0,l.getValveMpItemClassName)(t,v),key:r}))))))},popover:({anchorEl:e})=>{const{valveProps:r,componentProps:n}=(0,t.useValveContext)("Popover"),{showLabel:a,labelPosition:i,processObject:s}=r,{status:u}=s||c.processObjectProps;if(!a)return null;const{position:f}=n;let d="itemId popover position-left";return i&&(d=(0,l.getItemIdPositionClassName)(d,i)),o.createElement("div",{className:d,style:{top:f.y,left:f.x}},o.createElement("div",{style:{padding:8}},null==u?void 0:u.itemName))}}},746:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(697);t.default=function(e){return"string"==typeof e&&n.default.test(e)}},770:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(746);t.default=function(e){if(!(0,n.default)(e))throw TypeError("Invalid UUID");return parseInt(e.slice(14,15),16)}},779:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r="undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto);t.default={randomUUID:r}},797:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(746);t.default=function(e){if(!(0,n.default)(e))throw TypeError("Invalid UUID");let t;return Uint8Array.of((t=parseInt(e.slice(0,8),16))>>>24,t>>>16&255,t>>>8&255,255&t,(t=parseInt(e.slice(9,13),16))>>>8,255&t,(t=parseInt(e.slice(14,18),16))>>>8,255&t,(t=parseInt(e.slice(19,23),16))>>>8,255&t,(t=parseInt(e.slice(24,36),16))/1099511627776&255,t/4294967296&255,t>>>24&255,t>>>16&255,t>>>8&255,255&t)}},829:(e,t)=>{"use strict";function r(e,t,r,n){switch(e){case 0:return t&r^~t&n;case 1:case 3:return t^r^n;case 2:return t&r^t&n^r&n}}function n(e,t){return e<<t|e>>>32-t}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){const t=[1518500249,1859775393,2400959708,3395469782],o=[1732584193,4023233417,2562383102,271733878,3285377520],a=new Uint8Array(e.length+1);a.set(e),a[e.length]=128;const l=(e=a).length/4+2,i=Math.ceil(l/16),s=new Array(i);for(let t=0;t<i;++t){const r=new Uint32Array(16);for(let n=0;n<16;++n)r[n]=e[64*t+4*n]<<24|e[64*t+4*n+1]<<16|e[64*t+4*n+2]<<8|e[64*t+4*n+3];s[t]=r}s[i-1][14]=8*(e.length-1)/Math.pow(2,32),s[i-1][14]=Math.floor(s[i-1][14]),s[i-1][15]=8*(e.length-1)&4294967295;for(let e=0;e<i;++e){const a=new Uint32Array(80);for(let t=0;t<16;++t)a[t]=s[e][t];for(let e=16;e<80;++e)a[e]=n(a[e-3]^a[e-8]^a[e-14]^a[e-16],1);let l=o[0],i=o[1],u=o[2],c=o[3],f=o[4];for(let e=0;e<80;++e){const o=Math.floor(e/20),s=n(l,5)+r(o,i,u,c)+f+t[o]+a[e]>>>0;f=c,c=u,u=n(i,30)>>>0,i=l,l=s}o[0]=o[0]+l>>>0,o[1]=o[1]+i>>>0,o[2]=o[2]+u>>>0,o[3]=o[3]+c>>>0,o[4]=o[4]+f>>>0}return Uint8Array.of(o[0]>>24,o[0]>>16,o[0]>>8,o[0],o[1]>>24,o[1]>>16,o[1]>>8,o[1],o[2]>>24,o[2]>>16,o[2]>>8,o[2],o[3]>>24,o[3]>>16,o[3]>>8,o[3],o[4]>>24,o[4]>>16,o[4]>>8,o[4])}},838:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ParameterListComponentMeta=t.ParameterListComponent=t.COMPONENT_TYPE=void 0;const n=r(883),o=r(390),a=[{label:{text:"text"},input:{value:null,placeholder:"Enter a Number"}}];t.COMPONENT_TYPE="hmi.input.ParameterList",t.ParameterListComponent=e=>{const t=n.useMemo((()=>{const{parameters:t}=e.props||a;return t}),[e.props.parameters]);return console.log(`transformedProps: label ${t[0].label.text}`),n.createElement("div",{className:"display-flex-column"},t.map(((t,r)=>{const{label:o,input:a}=t;return console.log(a.value),n.createElement("label",{key:`${o.text}-parameter${r}`,className:"field small"},n.createElement("span",{className:"label"},o.text),n.createElement("span",{className:"eu"},a.eu),n.createElement("input",{type:"text",id:`${o.text}-parameter${r}`,inputMode:a.inputmode,pattern:a.pattern||"[0-9]*",placeholder:a.placeholder,disabled:!a.editable,value:a.value,onChange:t=>{e.store.props.write(`parameters[${r}].input.value`,t.currentTarget.value)}}))})))},t.ParameterListComponentMeta=class{getComponentType(){return t.COMPONENT_TYPE}getDefaultSize(){return{width:120,height:240}}getPropsReducer(e){return{parameters:e.read("parameters",o.parameterInitialState)}}getViewComponent(){return t.ParameterListComponent}}},883:e=>{"use strict";e.exports=t},973:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ValveMeta=t.Valve=t.COMPONENT_TYPE=void 0;const n=r(883),o=r(377),a=r(740),l=r(390);t.COMPONENT_TYPE="hmi.process_objects.Valve_mp";class i extends o.Component{constructor(e){super(e),this.processObject=this.props.props.processObject||l.processObjectProps,this.status=this.processObject.status,this.showLabel=this.props.props.showLabel||!1,this.labelPosition=this.props.props.labelPosition||"left",this.onActionPerformed=()=>{this.props.eventsEnabled?(console.log("Valve clicked!"),this.props.componentEvents.fireComponentEvent("onActionPerformed",{})):console.log("Valve is disabled in the design-scope")},this.valveRef=n.createRef()}componentDidMount(){}render(){return n.createElement(a.ValveMpCompound.Root,{componentProps:this.props,valveProps:this.props.props,onActionPerformed:this.onActionPerformed},n.createElement(a.ValveMpCompound.valve,null),n.createElement(a.ValveMpCompound.popover,{anchorEl:this.valveRef.current}))}}t.Valve=i,t.ValveMeta=class{getComponentType(){return t.COMPONENT_TYPE}getViewComponent(){return i}getDefaultSize(){return{width:24,height:48}}getPropsReducer(e){return console.log(`itemName: ${e.readString("processObject.status.itemName")} showLabel ${e.readBoolean("showLabel")}`),{processObject:{status:{alarm:e.readBoolean("processObject.status.alarm",!1),actFB:e.readBoolean("processObject.status.actFB",!1),deActFB:e.readBoolean("processObject.status.deActFB",!1),activatedConfig:e.readNumber("processObject.status.activatedConfig",511),deactivatedConfig:e.readNumber("processObject.status.deactivatedConfig",4095),itemName:e.readString("processObject.status.itemName",""),manual:e.readBoolean("processObject.status.manual",!1),masked:e.readBoolean("processObject.status.masked",!1),changing:e.readBoolean("processObject.status.changing",!1),locate:e.readBoolean("processObject.status.locate",!1),usl:e.readBoolean("processObject.status.usl",!1),lsl:e.readBoolean("processObject.status.lsl",!1)}},showLabel:e.readBoolean("showLabel",!1),labelPosition:e.readString("labelPosition","top-left")}}}},988:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=t.stringToBytes=void 0;const n=r(797),o=r(11);function a(e){e=unescape(encodeURIComponent(e));const t=new Uint8Array(e.length);for(let r=0;r<e.length;++r)t[r]=e.charCodeAt(r);return t}t.stringToBytes=a,t.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",t.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",t.default=function(e,t,r,l,i,s){const u="string"==typeof r?a(r):r,c="string"==typeof l?(0,n.default)(l):l;if("string"==typeof l&&(l=(0,n.default)(l)),16!==l?.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");let f=new Uint8Array(16+u.length);if(f.set(c),f.set(u,c.length),f=t(f),f[6]=15&f[6]|e,f[8]=63&f[8]|128,i){s=s||0;for(let e=0;e<16;++e)i[s+e]=f[e];return i}return(0,o.unsafeStringify)(f)}}},n={};function o(e){var t=n[e];if(void 0!==t)return t.exports;var a=n[e]={exports:{}};return r[e].call(a.exports,a,a.exports,o),a.exports}o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var a={};return(()=>{"use strict";var e=a;Object.defineProperty(e,"__esModule",{value:!0}),e.ParameterListComponent=e.Valve=void 0;const t=o(377),r=o(973);Object.defineProperty(e,"Valve",{enumerable:!0,get:function(){return r.Valve}});const n=o(838);Object.defineProperty(e,"ParameterListComponent",{enumerable:!0,get:function(){return n.ParameterListComponent}}),o(702),[new r.ValveMeta,new n.ParameterListComponentMeta].forEach((e=>t.ComponentRegistry.register(e)))})(),a})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QVNnQixHQUFxQixFQUFBK1osa0JBQWtCQyxTQUFTaGEsSSIsInNvdXJjZXMiOlsid2VicGFjazovL0htaUNvbXBvbmVudHMvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2Nqcy1icm93c2VyL3N0cmluZ2lmeS5qcyIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL2ltbWVyL2Rpc3QvY2pzL2ltbWVyLmNqcy5wcm9kdWN0aW9uLmpzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9zcmMvY29tcG9uZW50cy9wcm9jZXNzLW9iamVjdHMvdmFsdmUvaXRlbS50c3giLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY2pzLWJyb3dzZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY2pzLWJyb3dzZXIvbWF4LmpzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2Nqcy1icm93c2VyL3Y2VG9WMS5qcyIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9janMtYnJvd3Nlci92NC5qcyIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9janMtYnJvd3Nlci9ybmcuanMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY2pzLWJyb3dzZXIvdjcuanMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY2pzLWJyb3dzZXIvbWQ1LmpzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvdXNlLWltbWVyL2Rpc3QvdXNlLWltbWVyLmpzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2Nqcy1icm93c2VyL3Y2LmpzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvZXh0ZXJuYWwgdW1kIFwiUGVyc3BlY3RpdmVDbGllbnRcIiIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vc3JjL2FwaS9pbml0aWFsU3RhdGUudHMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9pbW1lci9kaXN0L2Nqcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9janMtYnJvd3Nlci92MS5qcyIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vc3JjL3V0aWxzL251bWJlclV0aWwudHMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY2pzLWJyb3dzZXIvbmlsLmpzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9zcmMvYXBpL3V0aWxzLnRzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9zcmMvYXBpL2hvb2tzLnRzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9zcmMvdXRpbHMvY3JlYXRlQ29udGV4dC50c3giLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL3NyYy9hcGkvdHlwZXMudHMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY2pzLWJyb3dzZXIvdjUuanMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY2pzLWJyb3dzZXIvdjFUb1Y2LmpzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2Nqcy1icm93c2VyL3YzLmpzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2Nqcy1icm93c2VyL3JlZ2V4LmpzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9zcmMvY29tcG9uZW50cy9wcm9jZXNzLW9iamVjdHMvdmFsdmUtbXAvVmFsdmVNcC50c3giLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY2pzLWJyb3dzZXIvdmFsaWRhdGUuanMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY2pzLWJyb3dzZXIvdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9janMtYnJvd3Nlci9uYXRpdmUuanMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY2pzLWJyb3dzZXIvcGFyc2UuanMiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY2pzLWJyb3dzZXIvc2hhMS5qcyIsIndlYnBhY2s6Ly9IbWlDb21wb25lbnRzLy4vc3JjL2NvbXBvbmVudHMvUGFyYW1ldGVyTGlzdC50c3giLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy9leHRlcm5hbCB1bWQgXCJSZWFjdFwiIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9zcmMvY29tcG9uZW50cy9WYWx2ZS50c3giLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvY2pzLWJyb3dzZXIvdjM1LmpzIiwid2VicGFjazovL0htaUNvbXBvbmVudHMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vSG1pQ29tcG9uZW50cy93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL0htaUNvbXBvbmVudHMvLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiUGVyc3BlY3RpdmVDbGllbnRcIiksIHJlcXVpcmUoXCJSZWFjdFwiKSk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShcIkhtaUNvbXBvbmVudHNcIiwgW1wiUGVyc3BlY3RpdmVDbGllbnRcIiwgXCJSZWFjdFwiXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJIbWlDb21wb25lbnRzXCJdID0gZmFjdG9yeShyZXF1aXJlKFwiUGVyc3BlY3RpdmVDbGllbnRcIiksIHJlcXVpcmUoXCJSZWFjdFwiKSk7XG5cdGVsc2Vcblx0XHRyb290W1wiSG1pQ29tcG9uZW50c1wiXSA9IGZhY3Rvcnkocm9vdFtcIlBlcnNwZWN0aXZlQ2xpZW50XCJdLCByb290W1wiUmVhY3RcIl0pO1xufSkoc2VsZiwgKF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzM3N19fLCBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX184ODNfXykgPT4ge1xucmV0dXJuICIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51bnNhZmVTdHJpbmdpZnkgPSB2b2lkIDA7XG5jb25zdCB2YWxpZGF0ZV9qc18xID0gcmVxdWlyZShcIi4vdmFsaWRhdGUuanNcIik7XG5jb25zdCBieXRlVG9IZXggPSBbXTtcbmZvciAobGV0IGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgICBieXRlVG9IZXgucHVzaCgoaSArIDB4MTAwKS50b1N0cmluZygxNikuc2xpY2UoMSkpO1xufVxuZnVuY3Rpb24gdW5zYWZlU3RyaW5naWZ5KGFyciwgb2Zmc2V0ID0gMCkge1xuICAgIHJldHVybiAoYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAwXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDFdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMl1dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAzXV0gK1xuICAgICAgICAnLScgK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDRdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNV1dICtcbiAgICAgICAgJy0nICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA2XV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDddXSArXG4gICAgICAgICctJyArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOF1dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA5XV0gK1xuICAgICAgICAnLScgK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDEwXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDExXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDEyXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDEzXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDE0XV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDE1XV0pLnRvTG93ZXJDYXNlKCk7XG59XG5leHBvcnRzLnVuc2FmZVN0cmluZ2lmeSA9IHVuc2FmZVN0cmluZ2lmeTtcbmZ1bmN0aW9uIHN0cmluZ2lmeShhcnIsIG9mZnNldCA9IDApIHtcbiAgICBjb25zdCB1dWlkID0gdW5zYWZlU3RyaW5naWZ5KGFyciwgb2Zmc2V0KTtcbiAgICBpZiAoISgwLCB2YWxpZGF0ZV9qc18xLmRlZmF1bHQpKHV1aWQpKSB7XG4gICAgICAgIHRocm93IFR5cGVFcnJvcignU3RyaW5naWZpZWQgVVVJRCBpcyBpbnZhbGlkJyk7XG4gICAgfVxuICAgIHJldHVybiB1dWlkO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gc3RyaW5naWZ5O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIG5lPU9iamVjdC5kZWZpbmVQcm9wZXJ0eTt2YXIgZ2U9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjt2YXIgYmU9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7dmFyIFRlPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7dmFyIEFlPShlLHQpPT57Zm9yKHZhciByIGluIHQpbmUoZSxyLHtnZXQ6dFtyXSxlbnVtZXJhYmxlOiEwfSl9LEllPShlLHQscixuKT0+e2lmKHQmJnR5cGVvZiB0PT1cIm9iamVjdFwifHx0eXBlb2YgdD09XCJmdW5jdGlvblwiKWZvcihsZXQgaSBvZiBiZSh0KSkhVGUuY2FsbChlLGkpJiZpIT09ciYmbmUoZSxpLHtnZXQ6KCk9PnRbaV0sZW51bWVyYWJsZTohKG49Z2UodCxpKSl8fG4uZW51bWVyYWJsZX0pO3JldHVybiBlfTt2YXIgRGU9ZT0+SWUobmUoe30sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZSk7dmFyIEJlPXt9O0FlKEJlLHtJbW1lcjooKT0+SixhcHBseVBhdGNoZXM6KCk9PkNlLGNhc3REcmFmdDooKT0+a2UsY2FzdEltbXV0YWJsZTooKT0+S2UsY3JlYXRlRHJhZnQ6KCk9PlJlLGN1cnJlbnQ6KCk9PnJlLGVuYWJsZU1hcFNldDooKT0+eGUsZW5hYmxlUGF0Y2hlczooKT0+UGUsZmluaXNoRHJhZnQ6KCk9PnZlLGZyZWV6ZTooKT0+SyxpbW1lcmFibGU6KCk9Pk4saXNEcmFmdDooKT0+Tyxpc0RyYWZ0YWJsZTooKT0+QSxub3RoaW5nOigpPT5qLG9yaWdpbmFsOigpPT5sZSxwcm9kdWNlOigpPT5GZSxwcm9kdWNlV2l0aFBhdGNoZXM6KCk9Pk5lLHNldEF1dG9GcmVlemU6KCk9PnplLHNldFVzZVN0cmljdFNoYWxsb3dDb3B5OigpPT5qZX0pO21vZHVsZS5leHBvcnRzPURlKEJlKTt2YXIgaj1TeW1ib2wuZm9yKFwiaW1tZXItbm90aGluZ1wiKSxOPVN5bWJvbC5mb3IoXCJpbW1lci1kcmFmdGFibGVcIiksdT1TeW1ib2wuZm9yKFwiaW1tZXItc3RhdGVcIik7ZnVuY3Rpb24gaChlLC4uLnQpe3Rocm93IG5ldyBFcnJvcihgW0ltbWVyXSBtaW5pZmllZCBlcnJvciBucjogJHtlfS4gRnVsbCBlcnJvciBhdDogaHR0cHM6Ly9iaXQubHkvM2NYRUtXZmApfXZhciB6PU9iamVjdC5nZXRQcm90b3R5cGVPZjtmdW5jdGlvbiBPKGUpe3JldHVybiEhZSYmISFlW3VdfWZ1bmN0aW9uIEEoZSl7cmV0dXJuIGU/eWUoZSl8fEFycmF5LmlzQXJyYXkoZSl8fCEhZVtOXXx8ISFlLmNvbnN0cnVjdG9yPy5bTl18fHYoZSl8fGsoZSk6ITF9dmFyIE9lPU9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IudG9TdHJpbmcoKTtmdW5jdGlvbiB5ZShlKXtpZighZXx8dHlwZW9mIGUhPVwib2JqZWN0XCIpcmV0dXJuITE7bGV0IHQ9eihlKTtpZih0PT09bnVsbClyZXR1cm4hMDtsZXQgcj1PYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbCh0LFwiY29uc3RydWN0b3JcIikmJnQuY29uc3RydWN0b3I7cmV0dXJuIHI9PT1PYmplY3Q/ITA6dHlwZW9mIHI9PVwiZnVuY3Rpb25cIiYmRnVuY3Rpb24udG9TdHJpbmcuY2FsbChyKT09PU9lfWZ1bmN0aW9uIGxlKGUpe3JldHVybiBPKGUpfHxoKDE1LGUpLGVbdV0udH1mdW5jdGlvbiBfKGUsdCl7QyhlKT09PTA/UmVmbGVjdC5vd25LZXlzKGUpLmZvckVhY2gocj0+e3QocixlW3JdLGUpfSk6ZS5mb3JFYWNoKChyLG4pPT50KG4scixlKSl9ZnVuY3Rpb24gQyhlKXtsZXQgdD1lW3VdO3JldHVybiB0P3QubzpBcnJheS5pc0FycmF5KGUpPzE6dihlKT8yOmsoZSk/MzowfWZ1bmN0aW9uIFIoZSx0KXtyZXR1cm4gQyhlKT09PTI/ZS5oYXModCk6T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9ZnVuY3Rpb24gWChlLHQpe3JldHVybiBDKGUpPT09Mj9lLmdldCh0KTplW3RdfWZ1bmN0aW9uIFEoZSx0LHIpe2xldCBuPUMoZSk7bj09PTI/ZS5zZXQodCxyKTpuPT09Mz9lLmFkZChyKTplW3RdPXJ9ZnVuY3Rpb24gcGUoZSx0KXtyZXR1cm4gZT09PXQ/ZSE9PTB8fDEvZT09PTEvdDplIT09ZSYmdCE9PXR9ZnVuY3Rpb24gdihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIE1hcH1mdW5jdGlvbiBrKGUpe3JldHVybiBlIGluc3RhbmNlb2YgU2V0fWZ1bmN0aW9uIFQoZSl7cmV0dXJuIGUuZXx8ZS50fWZ1bmN0aW9uIEwoZSx0KXtpZih2KGUpKXJldHVybiBuZXcgTWFwKGUpO2lmKGsoZSkpcmV0dXJuIG5ldyBTZXQoZSk7aWYoQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZSk7bGV0IHI9eWUoZSk7aWYodD09PSEwfHx0PT09XCJjbGFzc19vbmx5XCImJiFyKXtsZXQgbj1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhlKTtkZWxldGUgblt1XTtsZXQgaT1SZWZsZWN0Lm93bktleXMobik7Zm9yKGxldCBmPTA7ZjxpLmxlbmd0aDtmKyspe2xldCBsPWlbZl0sYz1uW2xdO2Mud3JpdGFibGU9PT0hMSYmKGMud3JpdGFibGU9ITAsYy5jb25maWd1cmFibGU9ITApLChjLmdldHx8Yy5zZXQpJiYobltsXT17Y29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLGVudW1lcmFibGU6Yy5lbnVtZXJhYmxlLHZhbHVlOmVbbF19KX1yZXR1cm4gT2JqZWN0LmNyZWF0ZSh6KGUpLG4pfWVsc2V7bGV0IG49eihlKTtpZihuIT09bnVsbCYmcilyZXR1cm57Li4uZX07bGV0IGk9T2JqZWN0LmNyZWF0ZShuKTtyZXR1cm4gT2JqZWN0LmFzc2lnbihpLGUpfX1mdW5jdGlvbiBLKGUsdD0hMSl7cmV0dXJuICQoZSl8fE8oZSl8fCFBKGUpfHwoQyhlKT4xJiYoZS5zZXQ9ZS5hZGQ9ZS5jbGVhcj1lLmRlbGV0ZT1NZSksT2JqZWN0LmZyZWV6ZShlKSx0JiZPYmplY3QuZW50cmllcyhlKS5mb3JFYWNoKChbcixuXSk9PksobiwhMCkpKSxlfWZ1bmN0aW9uIE1lKCl7aCgyKX1mdW5jdGlvbiAkKGUpe3JldHVybiBPYmplY3QuaXNGcm96ZW4oZSl9dmFyIGFlPXt9O2Z1bmN0aW9uIHcoZSl7bGV0IHQ9YWVbZV07cmV0dXJuIHR8fGgoMCxlKSx0fWZ1bmN0aW9uIFkoZSx0KXthZVtlXXx8KGFlW2VdPXQpfXZhciBVO2Z1bmN0aW9uIEIoKXtyZXR1cm4gVX1mdW5jdGlvbiBfZShlLHQpe3JldHVybnthOltdLGk6ZSxwOnQsUDohMCxkOjB9fWZ1bmN0aW9uIG9lKGUsdCl7dCYmKHcoXCJQYXRjaGVzXCIpLGUuZj1bXSxlLmg9W10sZS5iPXQpfWZ1bmN0aW9uIFYoZSl7WihlKSxlLmEuZm9yRWFjaCh3ZSksZS5hPW51bGx9ZnVuY3Rpb24gWihlKXtlPT09VSYmKFU9ZS5pKX1mdW5jdGlvbiBpZShlKXtyZXR1cm4gVT1fZShVLGUpfWZ1bmN0aW9uIHdlKGUpe2xldCB0PWVbdV07dC5vPT09MHx8dC5vPT09MT90LngoKTp0Lm09ITB9ZnVuY3Rpb24gc2UoZSx0KXt0LmQ9dC5hLmxlbmd0aDtsZXQgcj10LmFbMF07cmV0dXJuIGUhPT12b2lkIDAmJmUhPT1yPyhyW3VdLnMmJihWKHQpLGgoNCkpLEEoZSkmJihlPWVlKHQsZSksdC5pfHx0ZSh0LGUpKSx0LmYmJncoXCJQYXRjaGVzXCIpLlQoclt1XS50LGUsdC5mLHQuaCkpOmU9ZWUodCxyLFtdKSxWKHQpLHQuZiYmdC5iKHQuZix0LmgpLGUhPT1qP2U6dm9pZCAwfWZ1bmN0aW9uIGVlKGUsdCxyKXtpZigkKHQpKXJldHVybiB0O2xldCBuPXRbdV07aWYoIW4pcmV0dXJuIF8odCwoaSxmKT0+ZGUoZSxuLHQsaSxmLHIpKSx0O2lmKG4ubiE9PWUpcmV0dXJuIHQ7aWYoIW4ucylyZXR1cm4gdGUoZSxuLnQsITApLG4udDtpZighbi5jKXtuLmM9ITAsbi5uLmQtLTtsZXQgaT1uLmUsZj1pLGw9ITE7bi5vPT09MyYmKGY9bmV3IFNldChpKSxpLmNsZWFyKCksbD0hMCksXyhmLChjLGIpPT5kZShlLG4saSxjLGIscixsKSksdGUoZSxpLCExKSxyJiZlLmYmJncoXCJQYXRjaGVzXCIpLmcobixyLGUuZixlLmgpfXJldHVybiBuLmV9ZnVuY3Rpb24gZGUoZSx0LHIsbixpLGYsbCl7aWYoTyhpKSl7bGV0IGM9ZiYmdCYmdC5vIT09MyYmIVIodC5yLG4pP2YuY29uY2F0KG4pOnZvaWQgMCxiPWVlKGUsaSxjKTtpZihRKHIsbixiKSxPKGIpKWUuUD0hMTtlbHNlIHJldHVybn1lbHNlIGwmJnIuYWRkKGkpO2lmKEEoaSkmJiEkKGkpKXtpZighZS5wLnkmJmUuZDwxKXJldHVybjtlZShlLGkpLCghdHx8IXQubi5pKSYmdHlwZW9mIG4hPVwic3ltYm9sXCImJk9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChyLG4pJiZ0ZShlLGkpfX1mdW5jdGlvbiB0ZShlLHQscj0hMSl7IWUuaSYmZS5wLnkmJmUuUCYmSyh0LHIpfWZ1bmN0aW9uIGhlKGUsdCl7bGV0IHI9QXJyYXkuaXNBcnJheShlKSxuPXtvOnI/MTowLG46dD90Lm46QigpLHM6ITEsYzohMSxyOnt9LGk6dCx0OmUsdTpudWxsLGU6bnVsbCx4Om51bGwsbDohMX0saT1uLGY9dWU7ciYmKGk9W25dLGY9cSk7bGV0e3Jldm9rZTpsLHByb3h5OmN9PVByb3h5LnJldm9jYWJsZShpLGYpO3JldHVybiBuLnU9YyxuLng9bCxjfXZhciB1ZT17Z2V0KGUsdCl7aWYodD09PXUpcmV0dXJuIGU7bGV0IHI9VChlKTtpZighUihyLHQpKXJldHVybiBFZShlLHIsdCk7bGV0IG49clt0XTtyZXR1cm4gZS5jfHwhQShuKT9uOm49PT1jZShlLnQsdCk/KGZlKGUpLGUuZVt0XT1XKG4sZSkpOm59LGhhcyhlLHQpe3JldHVybiB0IGluIFQoZSl9LG93bktleXMoZSl7cmV0dXJuIFJlZmxlY3Qub3duS2V5cyhUKGUpKX0sc2V0KGUsdCxyKXtsZXQgbj1tZShUKGUpLHQpO2lmKG4/LnNldClyZXR1cm4gbi5zZXQuY2FsbChlLnUsciksITA7aWYoIWUucyl7bGV0IGk9Y2UoVChlKSx0KSxmPWk/Llt1XTtpZihmJiZmLnQ9PT1yKXJldHVybiBlLmVbdF09cixlLnJbdF09ITEsITA7aWYocGUocixpKSYmKHIhPT12b2lkIDB8fFIoZS50LHQpKSlyZXR1cm4hMDtmZShlKSxFKGUpfXJldHVybiBlLmVbdF09PT1yJiYociE9PXZvaWQgMHx8dCBpbiBlLmUpfHxOdW1iZXIuaXNOYU4ocikmJk51bWJlci5pc05hTihlLmVbdF0pfHwoZS5lW3RdPXIsZS5yW3RdPSEwKSwhMH0sZGVsZXRlUHJvcGVydHkoZSx0KXtyZXR1cm4gY2UoZS50LHQpIT09dm9pZCAwfHx0IGluIGUudD8oZS5yW3RdPSExLGZlKGUpLEUoZSkpOmRlbGV0ZSBlLnJbdF0sZS5lJiZkZWxldGUgZS5lW3RdLCEwfSxnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSx0KXtsZXQgcj1UKGUpLG49UmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iocix0KTtyZXR1cm4gbiYme3dyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTplLm8hPT0xfHx0IT09XCJsZW5ndGhcIixlbnVtZXJhYmxlOm4uZW51bWVyYWJsZSx2YWx1ZTpyW3RdfX0sZGVmaW5lUHJvcGVydHkoKXtoKDExKX0sZ2V0UHJvdG90eXBlT2YoZSl7cmV0dXJuIHooZS50KX0sc2V0UHJvdG90eXBlT2YoKXtoKDEyKX19LHE9e307Xyh1ZSwoZSx0KT0+e3FbZV09ZnVuY3Rpb24oKXtyZXR1cm4gYXJndW1lbnRzWzBdPWFyZ3VtZW50c1swXVswXSx0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KTtxLmRlbGV0ZVByb3BlcnR5PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHEuc2V0LmNhbGwodGhpcyxlLHQsdm9pZCAwKX07cS5zZXQ9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB1ZS5zZXQuY2FsbCh0aGlzLGVbMF0sdCxyLGVbMF0pfTtmdW5jdGlvbiBjZShlLHQpe2xldCByPWVbdV07cmV0dXJuKHI/VChyKTplKVt0XX1mdW5jdGlvbiBFZShlLHQscil7bGV0IG49bWUodCxyKTtyZXR1cm4gbj9cInZhbHVlXCJpbiBuP24udmFsdWU6bi5nZXQ/LmNhbGwoZS51KTp2b2lkIDB9ZnVuY3Rpb24gbWUoZSx0KXtpZighKHQgaW4gZSkpcmV0dXJuO2xldCByPXooZSk7Zm9yKDtyOyl7bGV0IG49T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyLHQpO2lmKG4pcmV0dXJuIG47cj16KHIpfX1mdW5jdGlvbiBFKGUpe2Uuc3x8KGUucz0hMCxlLmkmJkUoZS5pKSl9ZnVuY3Rpb24gZmUoZSl7ZS5lfHwoZS5lPUwoZS50LGUubi5wLlMpKX12YXIgSj1jbGFzc3tjb25zdHJ1Y3Rvcih0KXt0aGlzLnk9ITA7dGhpcy5TPSExO3RoaXMucHJvZHVjZT0odCxyLG4pPT57aWYodHlwZW9mIHQ9PVwiZnVuY3Rpb25cIiYmdHlwZW9mIHIhPVwiZnVuY3Rpb25cIil7bGV0IGY9cjtyPXQ7bGV0IGw9dGhpcztyZXR1cm4gZnVuY3Rpb24oYj1mLC4uLmEpe3JldHVybiBsLnByb2R1Y2UoYixvPT5yLmNhbGwodGhpcyxvLC4uLmEpKX19dHlwZW9mIHIhPVwiZnVuY3Rpb25cIiYmaCg2KSxuIT09dm9pZCAwJiZ0eXBlb2YgbiE9XCJmdW5jdGlvblwiJiZoKDcpO2xldCBpO2lmKEEodCkpe2xldCBmPWllKHRoaXMpLGw9Vyh0LHZvaWQgMCksYz0hMDt0cnl7aT1yKGwpLGM9ITF9ZmluYWxseXtjP1YoZik6WihmKX1yZXR1cm4gb2UoZixuKSxzZShpLGYpfWVsc2UgaWYoIXR8fHR5cGVvZiB0IT1cIm9iamVjdFwiKXtpZihpPXIodCksaT09PXZvaWQgMCYmKGk9dCksaT09PWomJihpPXZvaWQgMCksdGhpcy55JiZLKGksITApLG4pe2xldCBmPVtdLGw9W107dyhcIlBhdGNoZXNcIikuVCh0LGksZixsKSxuKGYsbCl9cmV0dXJuIGl9ZWxzZSBoKDEsdCl9O3RoaXMucHJvZHVjZVdpdGhQYXRjaGVzPSh0LHIpPT57aWYodHlwZW9mIHQ9PVwiZnVuY3Rpb25cIilyZXR1cm4obCwuLi5jKT0+dGhpcy5wcm9kdWNlV2l0aFBhdGNoZXMobCxiPT50KGIsLi4uYykpO2xldCBuLGk7cmV0dXJuW3RoaXMucHJvZHVjZSh0LHIsKGwsYyk9PntuPWwsaT1jfSksbixpXX07dHlwZW9mIHQ/LmF1dG9GcmVlemU9PVwiYm9vbGVhblwiJiZ0aGlzLnNldEF1dG9GcmVlemUodC5hdXRvRnJlZXplKSx0eXBlb2YgdD8udXNlU3RyaWN0U2hhbGxvd0NvcHk9PVwiYm9vbGVhblwiJiZ0aGlzLnNldFVzZVN0cmljdFNoYWxsb3dDb3B5KHQudXNlU3RyaWN0U2hhbGxvd0NvcHkpfWNyZWF0ZURyYWZ0KHQpe0EodCl8fGgoOCksTyh0KSYmKHQ9cmUodCkpO2xldCByPWllKHRoaXMpLG49Vyh0LHZvaWQgMCk7cmV0dXJuIG5bdV0ubD0hMCxaKHIpLG59ZmluaXNoRHJhZnQodCxyKXtsZXQgbj10JiZ0W3VdOyghbnx8IW4ubCkmJmgoOSk7bGV0e246aX09bjtyZXR1cm4gb2UoaSxyKSxzZSh2b2lkIDAsaSl9c2V0QXV0b0ZyZWV6ZSh0KXt0aGlzLnk9dH1zZXRVc2VTdHJpY3RTaGFsbG93Q29weSh0KXt0aGlzLlM9dH1hcHBseVBhdGNoZXModCxyKXtsZXQgbjtmb3Iobj1yLmxlbmd0aC0xO24+PTA7bi0tKXtsZXQgZj1yW25dO2lmKGYucGF0aC5sZW5ndGg9PT0wJiZmLm9wPT09XCJyZXBsYWNlXCIpe3Q9Zi52YWx1ZTticmVha319bj4tMSYmKHI9ci5zbGljZShuKzEpKTtsZXQgaT13KFwiUGF0Y2hlc1wiKS5BO3JldHVybiBPKHQpP2kodCxyKTp0aGlzLnByb2R1Y2UodCxmPT5pKGYscikpfX07ZnVuY3Rpb24gVyhlLHQpe2xldCByPXYoZSk/dyhcIk1hcFNldFwiKS5JKGUsdCk6ayhlKT93KFwiTWFwU2V0XCIpLkQoZSx0KTpoZShlLHQpO3JldHVybih0P3QubjpCKCkpLmEucHVzaChyKSxyfWZ1bmN0aW9uIHJlKGUpe3JldHVybiBPKGUpfHxoKDEwLGUpLFNlKGUpfWZ1bmN0aW9uIFNlKGUpe2lmKCFBKGUpfHwkKGUpKXJldHVybiBlO2xldCB0PWVbdV0scjtpZih0KXtpZighdC5zKXJldHVybiB0LnQ7dC5jPSEwLHI9TChlLHQubi5wLlMpfWVsc2Ugcj1MKGUsITApO3JldHVybiBfKHIsKG4saSk9PntRKHIsbixTZShpKSl9KSx0JiYodC5jPSExKSxyfWZ1bmN0aW9uIFBlKCl7bGV0IHQ9XCJyZXBsYWNlXCIscj1cImFkZFwiLG49XCJyZW1vdmVcIjtmdW5jdGlvbiBpKHMsUyxtLHgpe3N3aXRjaChzLm8pe2Nhc2UgMDpjYXNlIDI6cmV0dXJuIGwocyxTLG0seCk7Y2FzZSAxOnJldHVybiBmKHMsUyxtLHgpO2Nhc2UgMzpyZXR1cm4gYyhzLFMsbSx4KX19ZnVuY3Rpb24gZihzLFMsbSx4KXtsZXR7dDpJLHI6UH09cyxnPXMuZTtnLmxlbmd0aDxJLmxlbmd0aCYmKFtJLGddPVtnLEldLFttLHhdPVt4LG1dKTtmb3IobGV0IHk9MDt5PEkubGVuZ3RoO3krKylpZihQW3ldJiZnW3ldIT09SVt5XSl7bGV0IGQ9Uy5jb25jYXQoW3ldKTttLnB1c2goe29wOnQscGF0aDpkLHZhbHVlOnAoZ1t5XSl9KSx4LnB1c2goe29wOnQscGF0aDpkLHZhbHVlOnAoSVt5XSl9KX1mb3IobGV0IHk9SS5sZW5ndGg7eTxnLmxlbmd0aDt5Kyspe2xldCBkPVMuY29uY2F0KFt5XSk7bS5wdXNoKHtvcDpyLHBhdGg6ZCx2YWx1ZTpwKGdbeV0pfSl9Zm9yKGxldCB5PWcubGVuZ3RoLTE7SS5sZW5ndGg8PXk7LS15KXtsZXQgZD1TLmNvbmNhdChbeV0pO3gucHVzaCh7b3A6bixwYXRoOmR9KX19ZnVuY3Rpb24gbChzLFMsbSx4KXtsZXR7dDpJLGU6UH09cztfKHMuciwoZyx5KT0+e2xldCBkPVgoSSxnKSxIPVgoUCxnKSxGPXk/UihJLGcpP3Q6cjpuO2lmKGQ9PT1IJiZGPT09dClyZXR1cm47bGV0IEQ9Uy5jb25jYXQoZyk7bS5wdXNoKEY9PT1uP3tvcDpGLHBhdGg6RH06e29wOkYscGF0aDpELHZhbHVlOkh9KSx4LnB1c2goRj09PXI/e29wOm4scGF0aDpEfTpGPT09bj97b3A6cixwYXRoOkQsdmFsdWU6cChkKX06e29wOnQscGF0aDpELHZhbHVlOnAoZCl9KX0pfWZ1bmN0aW9uIGMocyxTLG0seCl7bGV0e3Q6SSxlOlB9PXMsZz0wO0kuZm9yRWFjaCh5PT57aWYoIVAuaGFzKHkpKXtsZXQgZD1TLmNvbmNhdChbZ10pO20ucHVzaCh7b3A6bixwYXRoOmQsdmFsdWU6eX0pLHgudW5zaGlmdCh7b3A6cixwYXRoOmQsdmFsdWU6eX0pfWcrK30pLGc9MCxQLmZvckVhY2goeT0+e2lmKCFJLmhhcyh5KSl7bGV0IGQ9Uy5jb25jYXQoW2ddKTttLnB1c2goe29wOnIscGF0aDpkLHZhbHVlOnl9KSx4LnVuc2hpZnQoe29wOm4scGF0aDpkLHZhbHVlOnl9KX1nKyt9KX1mdW5jdGlvbiBiKHMsUyxtLHgpe20ucHVzaCh7b3A6dCxwYXRoOltdLHZhbHVlOlM9PT1qP3ZvaWQgMDpTfSkseC5wdXNoKHtvcDp0LHBhdGg6W10sdmFsdWU6c30pfWZ1bmN0aW9uIGEocyxTKXtyZXR1cm4gUy5mb3JFYWNoKG09PntsZXR7cGF0aDp4LG9wOkl9PW0sUD1zO2ZvcihsZXQgSD0wO0g8eC5sZW5ndGgtMTtIKyspe2xldCBGPUMoUCksRD14W0hdO3R5cGVvZiBEIT1cInN0cmluZ1wiJiZ0eXBlb2YgRCE9XCJudW1iZXJcIiYmKEQ9XCJcIitEKSwoRj09PTB8fEY9PT0xKSYmKEQ9PT1cIl9fcHJvdG9fX1wifHxEPT09XCJjb25zdHJ1Y3RvclwiKSYmaCgxNiszKSx0eXBlb2YgUD09XCJmdW5jdGlvblwiJiZEPT09XCJwcm90b3R5cGVcIiYmaCgxNiszKSxQPVgoUCxEKSx0eXBlb2YgUCE9XCJvYmplY3RcIiYmaCgxNisyLHguam9pbihcIi9cIikpfWxldCBnPUMoUCkseT1vKG0udmFsdWUpLGQ9eFt4Lmxlbmd0aC0xXTtzd2l0Y2goSSl7Y2FzZSB0OnN3aXRjaChnKXtjYXNlIDI6cmV0dXJuIFAuc2V0KGQseSk7Y2FzZSAzOmgoMTYpO2RlZmF1bHQ6cmV0dXJuIFBbZF09eX1jYXNlIHI6c3dpdGNoKGcpe2Nhc2UgMTpyZXR1cm4gZD09PVwiLVwiP1AucHVzaCh5KTpQLnNwbGljZShkLDAseSk7Y2FzZSAyOnJldHVybiBQLnNldChkLHkpO2Nhc2UgMzpyZXR1cm4gUC5hZGQoeSk7ZGVmYXVsdDpyZXR1cm4gUFtkXT15fWNhc2Ugbjpzd2l0Y2goZyl7Y2FzZSAxOnJldHVybiBQLnNwbGljZShkLDEpO2Nhc2UgMjpyZXR1cm4gUC5kZWxldGUoZCk7Y2FzZSAzOnJldHVybiBQLmRlbGV0ZShtLnZhbHVlKTtkZWZhdWx0OnJldHVybiBkZWxldGUgUFtkXX1kZWZhdWx0OmgoMTYrMSxJKX19KSxzfWZ1bmN0aW9uIG8ocyl7aWYoIUEocykpcmV0dXJuIHM7aWYoQXJyYXkuaXNBcnJheShzKSlyZXR1cm4gcy5tYXAobyk7aWYodihzKSlyZXR1cm4gbmV3IE1hcChBcnJheS5mcm9tKHMuZW50cmllcygpKS5tYXAoKFttLHhdKT0+W20sbyh4KV0pKTtpZihrKHMpKXJldHVybiBuZXcgU2V0KEFycmF5LmZyb20ocykubWFwKG8pKTtsZXQgUz1PYmplY3QuY3JlYXRlKHoocykpO2ZvcihsZXQgbSBpbiBzKVNbbV09byhzW21dKTtyZXR1cm4gUihzLE4pJiYoU1tOXT1zW05dKSxTfWZ1bmN0aW9uIHAocyl7cmV0dXJuIE8ocyk/byhzKTpzfVkoXCJQYXRjaGVzXCIse0E6YSxnOmksVDpifSl9ZnVuY3Rpb24geGUoKXtjbGFzcyBlIGV4dGVuZHMgTWFwe2NvbnN0cnVjdG9yKGEsbyl7c3VwZXIoKTt0aGlzW3VdPXtvOjIsaTpvLG46bz9vLm46QigpLHM6ITEsYzohMSxlOnZvaWQgMCxyOnZvaWQgMCx0OmEsdTp0aGlzLGw6ITEsbTohMX19Z2V0IHNpemUoKXtyZXR1cm4gVCh0aGlzW3VdKS5zaXplfWhhcyhhKXtyZXR1cm4gVCh0aGlzW3VdKS5oYXMoYSl9c2V0KGEsbyl7bGV0IHA9dGhpc1t1XTtyZXR1cm4gbChwKSwoIVQocCkuaGFzKGEpfHxUKHApLmdldChhKSE9PW8pJiYocihwKSxFKHApLHAuci5zZXQoYSwhMCkscC5lLnNldChhLG8pLHAuci5zZXQoYSwhMCkpLHRoaXN9ZGVsZXRlKGEpe2lmKCF0aGlzLmhhcyhhKSlyZXR1cm4hMTtsZXQgbz10aGlzW3VdO3JldHVybiBsKG8pLHIobyksRShvKSxvLnQuaGFzKGEpP28uci5zZXQoYSwhMSk6by5yLmRlbGV0ZShhKSxvLmUuZGVsZXRlKGEpLCEwfWNsZWFyKCl7bGV0IGE9dGhpc1t1XTtsKGEpLFQoYSkuc2l6ZSYmKHIoYSksRShhKSxhLnI9bmV3IE1hcCxfKGEudCxvPT57YS5yLnNldChvLCExKX0pLGEuZS5jbGVhcigpKX1mb3JFYWNoKGEsbyl7bGV0IHA9dGhpc1t1XTtUKHApLmZvckVhY2goKHMsUyxtKT0+e2EuY2FsbChvLHRoaXMuZ2V0KFMpLFMsdGhpcyl9KX1nZXQoYSl7bGV0IG89dGhpc1t1XTtsKG8pO2xldCBwPVQobykuZ2V0KGEpO2lmKG8uY3x8IUEocCl8fHAhPT1vLnQuZ2V0KGEpKXJldHVybiBwO2xldCBzPVcocCxvKTtyZXR1cm4gcihvKSxvLmUuc2V0KGEscyksc31rZXlzKCl7cmV0dXJuIFQodGhpc1t1XSkua2V5cygpfXZhbHVlcygpe2xldCBhPXRoaXMua2V5cygpO3JldHVybntbU3ltYm9sLml0ZXJhdG9yXTooKT0+dGhpcy52YWx1ZXMoKSxuZXh0OigpPT57bGV0IG89YS5uZXh0KCk7cmV0dXJuIG8uZG9uZT9vOntkb25lOiExLHZhbHVlOnRoaXMuZ2V0KG8udmFsdWUpfX19fWVudHJpZXMoKXtsZXQgYT10aGlzLmtleXMoKTtyZXR1cm57W1N5bWJvbC5pdGVyYXRvcl06KCk9PnRoaXMuZW50cmllcygpLG5leHQ6KCk9PntsZXQgbz1hLm5leHQoKTtpZihvLmRvbmUpcmV0dXJuIG87bGV0IHA9dGhpcy5nZXQoby52YWx1ZSk7cmV0dXJue2RvbmU6ITEsdmFsdWU6W28udmFsdWUscF19fX19Wyh1LFN5bWJvbC5pdGVyYXRvcildKCl7cmV0dXJuIHRoaXMuZW50cmllcygpfX1mdW5jdGlvbiB0KGMsYil7cmV0dXJuIG5ldyBlKGMsYil9ZnVuY3Rpb24gcihjKXtjLmV8fChjLnI9bmV3IE1hcCxjLmU9bmV3IE1hcChjLnQpKX1jbGFzcyBuIGV4dGVuZHMgU2V0e2NvbnN0cnVjdG9yKGEsbyl7c3VwZXIoKTt0aGlzW3VdPXtvOjMsaTpvLG46bz9vLm46QigpLHM6ITEsYzohMSxlOnZvaWQgMCx0OmEsdTp0aGlzLGE6bmV3IE1hcCxtOiExLGw6ITF9fWdldCBzaXplKCl7cmV0dXJuIFQodGhpc1t1XSkuc2l6ZX1oYXMoYSl7bGV0IG89dGhpc1t1XTtyZXR1cm4gbChvKSxvLmU/ISEoby5lLmhhcyhhKXx8by5hLmhhcyhhKSYmby5lLmhhcyhvLmEuZ2V0KGEpKSk6by50LmhhcyhhKX1hZGQoYSl7bGV0IG89dGhpc1t1XTtyZXR1cm4gbChvKSx0aGlzLmhhcyhhKXx8KGYobyksRShvKSxvLmUuYWRkKGEpKSx0aGlzfWRlbGV0ZShhKXtpZighdGhpcy5oYXMoYSkpcmV0dXJuITE7bGV0IG89dGhpc1t1XTtyZXR1cm4gbChvKSxmKG8pLEUobyksby5lLmRlbGV0ZShhKXx8KG8uYS5oYXMoYSk/by5lLmRlbGV0ZShvLmEuZ2V0KGEpKTohMSl9Y2xlYXIoKXtsZXQgYT10aGlzW3VdO2woYSksVChhKS5zaXplJiYoZihhKSxFKGEpLGEuZS5jbGVhcigpKX12YWx1ZXMoKXtsZXQgYT10aGlzW3VdO3JldHVybiBsKGEpLGYoYSksYS5lLnZhbHVlcygpfWVudHJpZXMoKXtsZXQgYT10aGlzW3VdO3JldHVybiBsKGEpLGYoYSksYS5lLmVudHJpZXMoKX1rZXlzKCl7cmV0dXJuIHRoaXMudmFsdWVzKCl9Wyh1LFN5bWJvbC5pdGVyYXRvcildKCl7cmV0dXJuIHRoaXMudmFsdWVzKCl9Zm9yRWFjaChhLG8pe2xldCBwPXRoaXMudmFsdWVzKCkscz1wLm5leHQoKTtmb3IoOyFzLmRvbmU7KWEuY2FsbChvLHMudmFsdWUscy52YWx1ZSx0aGlzKSxzPXAubmV4dCgpfX1mdW5jdGlvbiBpKGMsYil7cmV0dXJuIG5ldyBuKGMsYil9ZnVuY3Rpb24gZihjKXtjLmV8fChjLmU9bmV3IFNldCxjLnQuZm9yRWFjaChiPT57aWYoQShiKSl7bGV0IGE9VyhiLGMpO2MuYS5zZXQoYixhKSxjLmUuYWRkKGEpfWVsc2UgYy5lLmFkZChiKX0pKX1mdW5jdGlvbiBsKGMpe2MubSYmaCgzLEpTT04uc3RyaW5naWZ5KFQoYykpKX1ZKFwiTWFwU2V0XCIse0k6dCxEOml9KX12YXIgTT1uZXcgSixGZT1NLnByb2R1Y2UsTmU9TS5wcm9kdWNlV2l0aFBhdGNoZXMuYmluZChNKSx6ZT1NLnNldEF1dG9GcmVlemUuYmluZChNKSxqZT1NLnNldFVzZVN0cmljdFNoYWxsb3dDb3B5LmJpbmQoTSksQ2U9TS5hcHBseVBhdGNoZXMuYmluZChNKSxSZT1NLmNyZWF0ZURyYWZ0LmJpbmQoTSksdmU9TS5maW5pc2hEcmFmdC5iaW5kKE0pO2Z1bmN0aW9uIGtlKGUpe3JldHVybiBlfWZ1bmN0aW9uIEtlKGUpe3JldHVybiBlfTAmJihtb2R1bGUuZXhwb3J0cz17SW1tZXIsYXBwbHlQYXRjaGVzLGNhc3REcmFmdCxjYXN0SW1tdXRhYmxlLGNyZWF0ZURyYWZ0LGN1cnJlbnQsZW5hYmxlTWFwU2V0LGVuYWJsZVBhdGNoZXMsZmluaXNoRHJhZnQsZnJlZXplLGltbWVyYWJsZSxpc0RyYWZ0LGlzRHJhZnRhYmxlLG5vdGhpbmcsb3JpZ2luYWwscHJvZHVjZSxwcm9kdWNlV2l0aFBhdGNoZXMsc2V0QXV0b0ZyZWV6ZSxzZXRVc2VTdHJpY3RTaGFsbG93Q29weX0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW1tZXIuY2pzLnByb2R1Y3Rpb24uanMubWFwIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG4vL2ltcG9ydCBcIi4vaXRlbS5tb2R1bGUuY3NzXCI7XG5cbmludGVyZmFjZSBJdGVtUHJvcHMge1xuXHRpdGVtQ2xhc3NOYW1lOiBzdHJpbmc7XG5cdGhhbmRsZUNsaWNrPzogKGV2ZW50OiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxEaXZFbGVtZW50LCBNb3VzZUV2ZW50PikgPT4gdm9pZDtcbn1cbi8vIGNvbnN0IGJpdCA9IChuOiBudW1iZXIsIGk6IG51bWJlcik6IG51bWJlciA9PiB7XG4vLyBcdHJldHVybiAobiA+PiBpKSAmIDE7XG4vLyB9O1xuY29uc3QgSXRlbTogUmVhY3QuRkM8SXRlbVByb3BzPiA9ICh7IGl0ZW1DbGFzc05hbWUsIGhhbmRsZUNsaWNrIH0pOiBSZWFjdC5SZWFjdEVsZW1lbnQgPT4ge1xuXHRyZXR1cm4gPGRpdiBjbGFzc05hbWU9e2l0ZW1DbGFzc05hbWV9XG5cdG9uQ2xpY2s9e2hhbmRsZUNsaWNrfT48L2Rpdj47XG59O1xuSXRlbS5kaXNwbGF5TmFtZSA9IFwiSXRlbVwiO1xuZXhwb3J0IGRlZmF1bHQgSXRlbTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy52ZXJzaW9uID0gZXhwb3J0cy52YWxpZGF0ZSA9IGV4cG9ydHMudjcgPSBleHBvcnRzLnY2VG9WMSA9IGV4cG9ydHMudjYgPSBleHBvcnRzLnY1ID0gZXhwb3J0cy52NCA9IGV4cG9ydHMudjMgPSBleHBvcnRzLnYxVG9WNiA9IGV4cG9ydHMudjEgPSBleHBvcnRzLnN0cmluZ2lmeSA9IGV4cG9ydHMucGFyc2UgPSBleHBvcnRzLk5JTCA9IGV4cG9ydHMuTUFYID0gdm9pZCAwO1xudmFyIG1heF9qc18xID0gcmVxdWlyZShcIi4vbWF4LmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTUFYXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtYXhfanNfMS5kZWZhdWx0OyB9IH0pO1xudmFyIG5pbF9qc18xID0gcmVxdWlyZShcIi4vbmlsLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTklMXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuaWxfanNfMS5kZWZhdWx0OyB9IH0pO1xudmFyIHBhcnNlX2pzXzEgPSByZXF1aXJlKFwiLi9wYXJzZS5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInBhcnNlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwYXJzZV9qc18xLmRlZmF1bHQ7IH0gfSk7XG52YXIgc3RyaW5naWZ5X2pzXzEgPSByZXF1aXJlKFwiLi9zdHJpbmdpZnkuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzdHJpbmdpZnlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0cmluZ2lmeV9qc18xLmRlZmF1bHQ7IH0gfSk7XG52YXIgdjFfanNfMSA9IHJlcXVpcmUoXCIuL3YxLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidjFcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHYxX2pzXzEuZGVmYXVsdDsgfSB9KTtcbnZhciB2MVRvVjZfanNfMSA9IHJlcXVpcmUoXCIuL3YxVG9WNi5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInYxVG9WNlwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdjFUb1Y2X2pzXzEuZGVmYXVsdDsgfSB9KTtcbnZhciB2M19qc18xID0gcmVxdWlyZShcIi4vdjMuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ2M1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdjNfanNfMS5kZWZhdWx0OyB9IH0pO1xudmFyIHY0X2pzXzEgPSByZXF1aXJlKFwiLi92NC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInY0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2NF9qc18xLmRlZmF1bHQ7IH0gfSk7XG52YXIgdjVfanNfMSA9IHJlcXVpcmUoXCIuL3Y1LmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidjVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHY1X2pzXzEuZGVmYXVsdDsgfSB9KTtcbnZhciB2Nl9qc18xID0gcmVxdWlyZShcIi4vdjYuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ2NlwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdjZfanNfMS5kZWZhdWx0OyB9IH0pO1xudmFyIHY2VG9WMV9qc18xID0gcmVxdWlyZShcIi4vdjZUb1YxLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidjZUb1YxXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2NlRvVjFfanNfMS5kZWZhdWx0OyB9IH0pO1xudmFyIHY3X2pzXzEgPSByZXF1aXJlKFwiLi92Ny5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInY3XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2N19qc18xLmRlZmF1bHQ7IH0gfSk7XG52YXIgdmFsaWRhdGVfanNfMSA9IHJlcXVpcmUoXCIuL3ZhbGlkYXRlLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidmFsaWRhdGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZhbGlkYXRlX2pzXzEuZGVmYXVsdDsgfSB9KTtcbnZhciB2ZXJzaW9uX2pzXzEgPSByZXF1aXJlKFwiLi92ZXJzaW9uLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidmVyc2lvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdmVyc2lvbl9qc18xLmRlZmF1bHQ7IH0gfSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9ICdmZmZmZmZmZi1mZmZmLWZmZmYtZmZmZi1mZmZmZmZmZmZmZmYnO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBwYXJzZV9qc18xID0gcmVxdWlyZShcIi4vcGFyc2UuanNcIik7XG5jb25zdCBzdHJpbmdpZnlfanNfMSA9IHJlcXVpcmUoXCIuL3N0cmluZ2lmeS5qc1wiKTtcbmZ1bmN0aW9uIHY2VG9WMSh1dWlkKSB7XG4gICAgY29uc3QgdjZCeXRlcyA9IHR5cGVvZiB1dWlkID09PSAnc3RyaW5nJyA/ICgwLCBwYXJzZV9qc18xLmRlZmF1bHQpKHV1aWQpIDogdXVpZDtcbiAgICBjb25zdCB2MUJ5dGVzID0gX3Y2VG9WMSh2NkJ5dGVzKTtcbiAgICByZXR1cm4gdHlwZW9mIHV1aWQgPT09ICdzdHJpbmcnID8gKDAsIHN0cmluZ2lmeV9qc18xLnVuc2FmZVN0cmluZ2lmeSkodjFCeXRlcykgOiB2MUJ5dGVzO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gdjZUb1YxO1xuZnVuY3Rpb24gX3Y2VG9WMSh2NkJ5dGVzKSB7XG4gICAgcmV0dXJuIFVpbnQ4QXJyYXkub2YoKCh2NkJ5dGVzWzNdICYgMHgwZikgPDwgNCkgfCAoKHY2Qnl0ZXNbNF0gPj4gNCkgJiAweDBmKSwgKCh2NkJ5dGVzWzRdICYgMHgwZikgPDwgNCkgfCAoKHY2Qnl0ZXNbNV0gJiAweGYwKSA+PiA0KSwgKCh2NkJ5dGVzWzVdICYgMHgwZikgPDwgNCkgfCAodjZCeXRlc1s2XSAmIDB4MGYpLCB2NkJ5dGVzWzddLCAoKHY2Qnl0ZXNbMV0gJiAweDBmKSA8PCA0KSB8ICgodjZCeXRlc1syXSAmIDB4ZjApID4+IDQpLCAoKHY2Qnl0ZXNbMl0gJiAweDBmKSA8PCA0KSB8ICgodjZCeXRlc1szXSAmIDB4ZjApID4+IDQpLCAweDEwIHwgKCh2NkJ5dGVzWzBdICYgMHhmMCkgPj4gNCksICgodjZCeXRlc1swXSAmIDB4MGYpIDw8IDQpIHwgKCh2NkJ5dGVzWzFdICYgMHhmMCkgPj4gNCksIHY2Qnl0ZXNbOF0sIHY2Qnl0ZXNbOV0sIHY2Qnl0ZXNbMTBdLCB2NkJ5dGVzWzExXSwgdjZCeXRlc1sxMl0sIHY2Qnl0ZXNbMTNdLCB2NkJ5dGVzWzE0XSwgdjZCeXRlc1sxNV0pO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBuYXRpdmVfanNfMSA9IHJlcXVpcmUoXCIuL25hdGl2ZS5qc1wiKTtcbmNvbnN0IHJuZ19qc18xID0gcmVxdWlyZShcIi4vcm5nLmpzXCIpO1xuY29uc3Qgc3RyaW5naWZ5X2pzXzEgPSByZXF1aXJlKFwiLi9zdHJpbmdpZnkuanNcIik7XG5mdW5jdGlvbiB2NChvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICAgIGlmIChuYXRpdmVfanNfMS5kZWZhdWx0LnJhbmRvbVVVSUQgJiYgIWJ1ZiAmJiAhb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmF0aXZlX2pzXzEuZGVmYXVsdC5yYW5kb21VVUlEKCk7XG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIGNvbnN0IHJuZHMgPSBvcHRpb25zLnJhbmRvbSA/PyBvcHRpb25zLnJuZz8uKCkgPz8gKDAsIHJuZ19qc18xLmRlZmF1bHQpKCk7XG4gICAgaWYgKHJuZHMubGVuZ3RoIDwgMTYpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSYW5kb20gYnl0ZXMgbGVuZ3RoIG11c3QgYmUgPj0gMTYnKTtcbiAgICB9XG4gICAgcm5kc1s2XSA9IChybmRzWzZdICYgMHgwZikgfCAweDQwO1xuICAgIHJuZHNbOF0gPSAocm5kc1s4XSAmIDB4M2YpIHwgMHg4MDtcbiAgICBpZiAoYnVmKSB7XG4gICAgICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAxNiA+IGJ1Zi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBVVUlEIGJ5dGUgcmFuZ2UgJHtvZmZzZXR9OiR7b2Zmc2V0ICsgMTV9IGlzIG91dCBvZiBidWZmZXIgYm91bmRzYCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgICAgICAgICBidWZbb2Zmc2V0ICsgaV0gPSBybmRzW2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidWY7XG4gICAgfVxuICAgIHJldHVybiAoMCwgc3RyaW5naWZ5X2pzXzEudW5zYWZlU3RyaW5naWZ5KShybmRzKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHY0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5sZXQgZ2V0UmFuZG9tVmFsdWVzO1xuY29uc3Qgcm5kczggPSBuZXcgVWludDhBcnJheSgxNik7XG5mdW5jdGlvbiBybmcoKSB7XG4gICAgaWYgKCFnZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjcnlwdG8gPT09ICd1bmRlZmluZWQnIHx8ICFjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NyeXB0by5nZXRSYW5kb21WYWx1ZXMoKSBub3Qgc3VwcG9ydGVkLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkI2dldHJhbmRvbXZhbHVlcy1ub3Qtc3VwcG9ydGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0UmFuZG9tVmFsdWVzID0gY3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKGNyeXB0byk7XG4gICAgfVxuICAgIHJldHVybiBnZXRSYW5kb21WYWx1ZXMocm5kczgpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gcm5nO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVwZGF0ZVY3U3RhdGUgPSB2b2lkIDA7XG5jb25zdCBybmdfanNfMSA9IHJlcXVpcmUoXCIuL3JuZy5qc1wiKTtcbmNvbnN0IHN0cmluZ2lmeV9qc18xID0gcmVxdWlyZShcIi4vc3RyaW5naWZ5LmpzXCIpO1xuY29uc3QgX3N0YXRlID0ge307XG5mdW5jdGlvbiB2NyhvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICAgIGxldCBieXRlcztcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgICBieXRlcyA9IHY3Qnl0ZXMob3B0aW9ucy5yYW5kb20gPz8gb3B0aW9ucy5ybmc/LigpID8/ICgwLCBybmdfanNfMS5kZWZhdWx0KSgpLCBvcHRpb25zLm1zZWNzLCBvcHRpb25zLnNlcSwgYnVmLCBvZmZzZXQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgY29uc3Qgcm5kcyA9ICgwLCBybmdfanNfMS5kZWZhdWx0KSgpO1xuICAgICAgICB1cGRhdGVWN1N0YXRlKF9zdGF0ZSwgbm93LCBybmRzKTtcbiAgICAgICAgYnl0ZXMgPSB2N0J5dGVzKHJuZHMsIF9zdGF0ZS5tc2VjcywgX3N0YXRlLnNlcSwgYnVmLCBvZmZzZXQpO1xuICAgIH1cbiAgICByZXR1cm4gYnVmID8/ICgwLCBzdHJpbmdpZnlfanNfMS51bnNhZmVTdHJpbmdpZnkpKGJ5dGVzKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVY3U3RhdGUoc3RhdGUsIG5vdywgcm5kcykge1xuICAgIHN0YXRlLm1zZWNzID8/PSAtSW5maW5pdHk7XG4gICAgc3RhdGUuc2VxID8/PSAwO1xuICAgIGlmIChub3cgPiBzdGF0ZS5tc2Vjcykge1xuICAgICAgICBzdGF0ZS5zZXEgPSAocm5kc1s2XSA8PCAyMykgfCAocm5kc1s3XSA8PCAxNikgfCAocm5kc1s4XSA8PCA4KSB8IHJuZHNbOV07XG4gICAgICAgIHN0YXRlLm1zZWNzID0gbm93O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc3RhdGUuc2VxID0gKHN0YXRlLnNlcSArIDEpIHwgMDtcbiAgICAgICAgaWYgKHN0YXRlLnNlcSA9PT0gMCkge1xuICAgICAgICAgICAgc3RhdGUubXNlY3MrKztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RhdGU7XG59XG5leHBvcnRzLnVwZGF0ZVY3U3RhdGUgPSB1cGRhdGVWN1N0YXRlO1xuZnVuY3Rpb24gdjdCeXRlcyhybmRzLCBtc2Vjcywgc2VxLCBidWYsIG9mZnNldCA9IDApIHtcbiAgICBpZiAocm5kcy5sZW5ndGggPCAxNikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JhbmRvbSBieXRlcyBsZW5ndGggbXVzdCBiZSA+PSAxNicpO1xuICAgIH1cbiAgICBpZiAoIWJ1Zikge1xuICAgICAgICBidWYgPSBuZXcgVWludDhBcnJheSgxNik7XG4gICAgICAgIG9mZnNldCA9IDA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgKyAxNiA+IGJ1Zi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBVVUlEIGJ5dGUgcmFuZ2UgJHtvZmZzZXR9OiR7b2Zmc2V0ICsgMTV9IGlzIG91dCBvZiBidWZmZXIgYm91bmRzYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbXNlY3MgPz89IERhdGUubm93KCk7XG4gICAgc2VxID8/PSAoKHJuZHNbNl0gKiAweDdmKSA8PCAyNCkgfCAocm5kc1s3XSA8PCAxNikgfCAocm5kc1s4XSA8PCA4KSB8IHJuZHNbOV07XG4gICAgYnVmW29mZnNldCsrXSA9IChtc2VjcyAvIDB4MTAwMDAwMDAwMDApICYgMHhmZjtcbiAgICBidWZbb2Zmc2V0KytdID0gKG1zZWNzIC8gMHgxMDAwMDAwMDApICYgMHhmZjtcbiAgICBidWZbb2Zmc2V0KytdID0gKG1zZWNzIC8gMHgxMDAwMDAwKSAmIDB4ZmY7XG4gICAgYnVmW29mZnNldCsrXSA9IChtc2VjcyAvIDB4MTAwMDApICYgMHhmZjtcbiAgICBidWZbb2Zmc2V0KytdID0gKG1zZWNzIC8gMHgxMDApICYgMHhmZjtcbiAgICBidWZbb2Zmc2V0KytdID0gbXNlY3MgJiAweGZmO1xuICAgIGJ1ZltvZmZzZXQrK10gPSAweDcwIHwgKChzZXEgPj4+IDI4KSAmIDB4MGYpO1xuICAgIGJ1ZltvZmZzZXQrK10gPSAoc2VxID4+PiAyMCkgJiAweGZmO1xuICAgIGJ1ZltvZmZzZXQrK10gPSAweDgwIHwgKChzZXEgPj4+IDE0KSAmIDB4M2YpO1xuICAgIGJ1ZltvZmZzZXQrK10gPSAoc2VxID4+PiA2KSAmIDB4ZmY7XG4gICAgYnVmW29mZnNldCsrXSA9ICgoc2VxIDw8IDIpICYgMHhmZikgfCAocm5kc1sxMF0gJiAweDAzKTtcbiAgICBidWZbb2Zmc2V0KytdID0gcm5kc1sxMV07XG4gICAgYnVmW29mZnNldCsrXSA9IHJuZHNbMTJdO1xuICAgIGJ1ZltvZmZzZXQrK10gPSBybmRzWzEzXTtcbiAgICBidWZbb2Zmc2V0KytdID0gcm5kc1sxNF07XG4gICAgYnVmW29mZnNldCsrXSA9IHJuZHNbMTVdO1xuICAgIHJldHVybiBidWY7XG59XG5leHBvcnRzLmRlZmF1bHQgPSB2NztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gbWQ1KGJ5dGVzKSB7XG4gICAgY29uc3Qgd29yZHMgPSB1aW50OFRvVWludDMyKGJ5dGVzKTtcbiAgICBjb25zdCBtZDVCeXRlcyA9IHdvcmRzVG9NZDUod29yZHMsIGJ5dGVzLmxlbmd0aCAqIDgpO1xuICAgIHJldHVybiB1aW50MzJUb1VpbnQ4KG1kNUJ5dGVzKTtcbn1cbmZ1bmN0aW9uIHVpbnQzMlRvVWludDgoaW5wdXQpIHtcbiAgICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGlucHV0Lmxlbmd0aCAqIDQpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoICogNDsgaSsrKSB7XG4gICAgICAgIGJ5dGVzW2ldID0gKGlucHV0W2kgPj4gMl0gPj4+ICgoaSAlIDQpICogOCkpICYgMHhmZjtcbiAgICB9XG4gICAgcmV0dXJuIGJ5dGVzO1xufVxuZnVuY3Rpb24gZ2V0T3V0cHV0TGVuZ3RoKGlucHV0TGVuZ3RoOCkge1xuICAgIHJldHVybiAoKChpbnB1dExlbmd0aDggKyA2NCkgPj4+IDkpIDw8IDQpICsgMTQgKyAxO1xufVxuZnVuY3Rpb24gd29yZHNUb01kNSh4LCBsZW4pIHtcbiAgICBjb25zdCB4cGFkID0gbmV3IFVpbnQzMkFycmF5KGdldE91dHB1dExlbmd0aChsZW4pKS5maWxsKDApO1xuICAgIHhwYWQuc2V0KHgpO1xuICAgIHhwYWRbbGVuID4+IDVdIHw9IDB4ODAgPDwgbGVuICUgMzI7XG4gICAgeHBhZFt4cGFkLmxlbmd0aCAtIDFdID0gbGVuO1xuICAgIHggPSB4cGFkO1xuICAgIGxldCBhID0gMTczMjU4NDE5MztcbiAgICBsZXQgYiA9IC0yNzE3MzM4Nzk7XG4gICAgbGV0IGMgPSAtMTczMjU4NDE5NDtcbiAgICBsZXQgZCA9IDI3MTczMzg3ODtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHgubGVuZ3RoOyBpICs9IDE2KSB7XG4gICAgICAgIGNvbnN0IG9sZGEgPSBhO1xuICAgICAgICBjb25zdCBvbGRiID0gYjtcbiAgICAgICAgY29uc3Qgb2xkYyA9IGM7XG4gICAgICAgIGNvbnN0IG9sZGQgPSBkO1xuICAgICAgICBhID0gbWQ1ZmYoYSwgYiwgYywgZCwgeFtpXSwgNywgLTY4MDg3NjkzNik7XG4gICAgICAgIGQgPSBtZDVmZihkLCBhLCBiLCBjLCB4W2kgKyAxXSwgMTIsIC0zODk1NjQ1ODYpO1xuICAgICAgICBjID0gbWQ1ZmYoYywgZCwgYSwgYiwgeFtpICsgMl0sIDE3LCA2MDYxMDU4MTkpO1xuICAgICAgICBiID0gbWQ1ZmYoYiwgYywgZCwgYSwgeFtpICsgM10sIDIyLCAtMTA0NDUyNTMzMCk7XG4gICAgICAgIGEgPSBtZDVmZihhLCBiLCBjLCBkLCB4W2kgKyA0XSwgNywgLTE3NjQxODg5Nyk7XG4gICAgICAgIGQgPSBtZDVmZihkLCBhLCBiLCBjLCB4W2kgKyA1XSwgMTIsIDEyMDAwODA0MjYpO1xuICAgICAgICBjID0gbWQ1ZmYoYywgZCwgYSwgYiwgeFtpICsgNl0sIDE3LCAtMTQ3MzIzMTM0MSk7XG4gICAgICAgIGIgPSBtZDVmZihiLCBjLCBkLCBhLCB4W2kgKyA3XSwgMjIsIC00NTcwNTk4Myk7XG4gICAgICAgIGEgPSBtZDVmZihhLCBiLCBjLCBkLCB4W2kgKyA4XSwgNywgMTc3MDAzNTQxNik7XG4gICAgICAgIGQgPSBtZDVmZihkLCBhLCBiLCBjLCB4W2kgKyA5XSwgMTIsIC0xOTU4NDE0NDE3KTtcbiAgICAgICAgYyA9IG1kNWZmKGMsIGQsIGEsIGIsIHhbaSArIDEwXSwgMTcsIC00MjA2Myk7XG4gICAgICAgIGIgPSBtZDVmZihiLCBjLCBkLCBhLCB4W2kgKyAxMV0sIDIyLCAtMTk5MDQwNDE2Mik7XG4gICAgICAgIGEgPSBtZDVmZihhLCBiLCBjLCBkLCB4W2kgKyAxMl0sIDcsIDE4MDQ2MDM2ODIpO1xuICAgICAgICBkID0gbWQ1ZmYoZCwgYSwgYiwgYywgeFtpICsgMTNdLCAxMiwgLTQwMzQxMTAxKTtcbiAgICAgICAgYyA9IG1kNWZmKGMsIGQsIGEsIGIsIHhbaSArIDE0XSwgMTcsIC0xNTAyMDAyMjkwKTtcbiAgICAgICAgYiA9IG1kNWZmKGIsIGMsIGQsIGEsIHhbaSArIDE1XSwgMjIsIDEyMzY1MzUzMjkpO1xuICAgICAgICBhID0gbWQ1Z2coYSwgYiwgYywgZCwgeFtpICsgMV0sIDUsIC0xNjU3OTY1MTApO1xuICAgICAgICBkID0gbWQ1Z2coZCwgYSwgYiwgYywgeFtpICsgNl0sIDksIC0xMDY5NTAxNjMyKTtcbiAgICAgICAgYyA9IG1kNWdnKGMsIGQsIGEsIGIsIHhbaSArIDExXSwgMTQsIDY0MzcxNzcxMyk7XG4gICAgICAgIGIgPSBtZDVnZyhiLCBjLCBkLCBhLCB4W2ldLCAyMCwgLTM3Mzg5NzMwMik7XG4gICAgICAgIGEgPSBtZDVnZyhhLCBiLCBjLCBkLCB4W2kgKyA1XSwgNSwgLTcwMTU1ODY5MSk7XG4gICAgICAgIGQgPSBtZDVnZyhkLCBhLCBiLCBjLCB4W2kgKyAxMF0sIDksIDM4MDE2MDgzKTtcbiAgICAgICAgYyA9IG1kNWdnKGMsIGQsIGEsIGIsIHhbaSArIDE1XSwgMTQsIC02NjA0NzgzMzUpO1xuICAgICAgICBiID0gbWQ1Z2coYiwgYywgZCwgYSwgeFtpICsgNF0sIDIwLCAtNDA1NTM3ODQ4KTtcbiAgICAgICAgYSA9IG1kNWdnKGEsIGIsIGMsIGQsIHhbaSArIDldLCA1LCA1Njg0NDY0MzgpO1xuICAgICAgICBkID0gbWQ1Z2coZCwgYSwgYiwgYywgeFtpICsgMTRdLCA5LCAtMTAxOTgwMzY5MCk7XG4gICAgICAgIGMgPSBtZDVnZyhjLCBkLCBhLCBiLCB4W2kgKyAzXSwgMTQsIC0xODczNjM5NjEpO1xuICAgICAgICBiID0gbWQ1Z2coYiwgYywgZCwgYSwgeFtpICsgOF0sIDIwLCAxMTYzNTMxNTAxKTtcbiAgICAgICAgYSA9IG1kNWdnKGEsIGIsIGMsIGQsIHhbaSArIDEzXSwgNSwgLTE0NDQ2ODE0NjcpO1xuICAgICAgICBkID0gbWQ1Z2coZCwgYSwgYiwgYywgeFtpICsgMl0sIDksIC01MTQwMzc4NCk7XG4gICAgICAgIGMgPSBtZDVnZyhjLCBkLCBhLCBiLCB4W2kgKyA3XSwgMTQsIDE3MzUzMjg0NzMpO1xuICAgICAgICBiID0gbWQ1Z2coYiwgYywgZCwgYSwgeFtpICsgMTJdLCAyMCwgLTE5MjY2MDc3MzQpO1xuICAgICAgICBhID0gbWQ1aGgoYSwgYiwgYywgZCwgeFtpICsgNV0sIDQsIC0zNzg1NTgpO1xuICAgICAgICBkID0gbWQ1aGgoZCwgYSwgYiwgYywgeFtpICsgOF0sIDExLCAtMjAyMjU3NDQ2Myk7XG4gICAgICAgIGMgPSBtZDVoaChjLCBkLCBhLCBiLCB4W2kgKyAxMV0sIDE2LCAxODM5MDMwNTYyKTtcbiAgICAgICAgYiA9IG1kNWhoKGIsIGMsIGQsIGEsIHhbaSArIDE0XSwgMjMsIC0zNTMwOTU1Nik7XG4gICAgICAgIGEgPSBtZDVoaChhLCBiLCBjLCBkLCB4W2kgKyAxXSwgNCwgLTE1MzA5OTIwNjApO1xuICAgICAgICBkID0gbWQ1aGgoZCwgYSwgYiwgYywgeFtpICsgNF0sIDExLCAxMjcyODkzMzUzKTtcbiAgICAgICAgYyA9IG1kNWhoKGMsIGQsIGEsIGIsIHhbaSArIDddLCAxNiwgLTE1NTQ5NzYzMik7XG4gICAgICAgIGIgPSBtZDVoaChiLCBjLCBkLCBhLCB4W2kgKyAxMF0sIDIzLCAtMTA5NDczMDY0MCk7XG4gICAgICAgIGEgPSBtZDVoaChhLCBiLCBjLCBkLCB4W2kgKyAxM10sIDQsIDY4MTI3OTE3NCk7XG4gICAgICAgIGQgPSBtZDVoaChkLCBhLCBiLCBjLCB4W2ldLCAxMSwgLTM1ODUzNzIyMik7XG4gICAgICAgIGMgPSBtZDVoaChjLCBkLCBhLCBiLCB4W2kgKyAzXSwgMTYsIC03MjI1MjE5NzkpO1xuICAgICAgICBiID0gbWQ1aGgoYiwgYywgZCwgYSwgeFtpICsgNl0sIDIzLCA3NjAyOTE4OSk7XG4gICAgICAgIGEgPSBtZDVoaChhLCBiLCBjLCBkLCB4W2kgKyA5XSwgNCwgLTY0MDM2NDQ4Nyk7XG4gICAgICAgIGQgPSBtZDVoaChkLCBhLCBiLCBjLCB4W2kgKyAxMl0sIDExLCAtNDIxODE1ODM1KTtcbiAgICAgICAgYyA9IG1kNWhoKGMsIGQsIGEsIGIsIHhbaSArIDE1XSwgMTYsIDUzMDc0MjUyMCk7XG4gICAgICAgIGIgPSBtZDVoaChiLCBjLCBkLCBhLCB4W2kgKyAyXSwgMjMsIC05OTUzMzg2NTEpO1xuICAgICAgICBhID0gbWQ1aWkoYSwgYiwgYywgZCwgeFtpXSwgNiwgLTE5ODYzMDg0NCk7XG4gICAgICAgIGQgPSBtZDVpaShkLCBhLCBiLCBjLCB4W2kgKyA3XSwgMTAsIDExMjY4OTE0MTUpO1xuICAgICAgICBjID0gbWQ1aWkoYywgZCwgYSwgYiwgeFtpICsgMTRdLCAxNSwgLTE0MTYzNTQ5MDUpO1xuICAgICAgICBiID0gbWQ1aWkoYiwgYywgZCwgYSwgeFtpICsgNV0sIDIxLCAtNTc0MzQwNTUpO1xuICAgICAgICBhID0gbWQ1aWkoYSwgYiwgYywgZCwgeFtpICsgMTJdLCA2LCAxNzAwNDg1NTcxKTtcbiAgICAgICAgZCA9IG1kNWlpKGQsIGEsIGIsIGMsIHhbaSArIDNdLCAxMCwgLTE4OTQ5ODY2MDYpO1xuICAgICAgICBjID0gbWQ1aWkoYywgZCwgYSwgYiwgeFtpICsgMTBdLCAxNSwgLTEwNTE1MjMpO1xuICAgICAgICBiID0gbWQ1aWkoYiwgYywgZCwgYSwgeFtpICsgMV0sIDIxLCAtMjA1NDkyMjc5OSk7XG4gICAgICAgIGEgPSBtZDVpaShhLCBiLCBjLCBkLCB4W2kgKyA4XSwgNiwgMTg3MzMxMzM1OSk7XG4gICAgICAgIGQgPSBtZDVpaShkLCBhLCBiLCBjLCB4W2kgKyAxNV0sIDEwLCAtMzA2MTE3NDQpO1xuICAgICAgICBjID0gbWQ1aWkoYywgZCwgYSwgYiwgeFtpICsgNl0sIDE1LCAtMTU2MDE5ODM4MCk7XG4gICAgICAgIGIgPSBtZDVpaShiLCBjLCBkLCBhLCB4W2kgKyAxM10sIDIxLCAxMzA5MTUxNjQ5KTtcbiAgICAgICAgYSA9IG1kNWlpKGEsIGIsIGMsIGQsIHhbaSArIDRdLCA2LCAtMTQ1NTIzMDcwKTtcbiAgICAgICAgZCA9IG1kNWlpKGQsIGEsIGIsIGMsIHhbaSArIDExXSwgMTAsIC0xMTIwMjEwMzc5KTtcbiAgICAgICAgYyA9IG1kNWlpKGMsIGQsIGEsIGIsIHhbaSArIDJdLCAxNSwgNzE4Nzg3MjU5KTtcbiAgICAgICAgYiA9IG1kNWlpKGIsIGMsIGQsIGEsIHhbaSArIDldLCAyMSwgLTM0MzQ4NTU1MSk7XG4gICAgICAgIGEgPSBzYWZlQWRkKGEsIG9sZGEpO1xuICAgICAgICBiID0gc2FmZUFkZChiLCBvbGRiKTtcbiAgICAgICAgYyA9IHNhZmVBZGQoYywgb2xkYyk7XG4gICAgICAgIGQgPSBzYWZlQWRkKGQsIG9sZGQpO1xuICAgIH1cbiAgICByZXR1cm4gVWludDMyQXJyYXkub2YoYSwgYiwgYywgZCk7XG59XG5mdW5jdGlvbiB1aW50OFRvVWludDMyKGlucHV0KSB7XG4gICAgaWYgKGlucHV0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQzMkFycmF5KCk7XG4gICAgfVxuICAgIGNvbnN0IG91dHB1dCA9IG5ldyBVaW50MzJBcnJheShnZXRPdXRwdXRMZW5ndGgoaW5wdXQubGVuZ3RoICogOCkpLmZpbGwoMCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgICBvdXRwdXRbaSA+PiAyXSB8PSAoaW5wdXRbaV0gJiAweGZmKSA8PCAoKGkgJSA0KSAqIDgpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xufVxuZnVuY3Rpb24gc2FmZUFkZCh4LCB5KSB7XG4gICAgY29uc3QgbHN3ID0gKHggJiAweGZmZmYpICsgKHkgJiAweGZmZmYpO1xuICAgIGNvbnN0IG1zdyA9ICh4ID4+IDE2KSArICh5ID4+IDE2KSArIChsc3cgPj4gMTYpO1xuICAgIHJldHVybiAobXN3IDw8IDE2KSB8IChsc3cgJiAweGZmZmYpO1xufVxuZnVuY3Rpb24gYml0Um90YXRlTGVmdChudW0sIGNudCkge1xuICAgIHJldHVybiAobnVtIDw8IGNudCkgfCAobnVtID4+PiAoMzIgLSBjbnQpKTtcbn1cbmZ1bmN0aW9uIG1kNWNtbihxLCBhLCBiLCB4LCBzLCB0KSB7XG4gICAgcmV0dXJuIHNhZmVBZGQoYml0Um90YXRlTGVmdChzYWZlQWRkKHNhZmVBZGQoYSwgcSksIHNhZmVBZGQoeCwgdCkpLCBzKSwgYik7XG59XG5mdW5jdGlvbiBtZDVmZihhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XG4gICAgcmV0dXJuIG1kNWNtbigoYiAmIGMpIHwgKH5iICYgZCksIGEsIGIsIHgsIHMsIHQpO1xufVxuZnVuY3Rpb24gbWQ1Z2coYSwgYiwgYywgZCwgeCwgcywgdCkge1xuICAgIHJldHVybiBtZDVjbW4oKGIgJiBkKSB8IChjICYgfmQpLCBhLCBiLCB4LCBzLCB0KTtcbn1cbmZ1bmN0aW9uIG1kNWhoKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcbiAgICByZXR1cm4gbWQ1Y21uKGIgXiBjIF4gZCwgYSwgYiwgeCwgcywgdCk7XG59XG5mdW5jdGlvbiBtZDVpaShhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XG4gICAgcmV0dXJuIG1kNWNtbihjIF4gKGIgfCB+ZCksIGEsIGIsIHgsIHMsIHQpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gbWQ1O1xuIiwidmFyIGU9cmVxdWlyZShcImltbWVyXCIpLHI9cmVxdWlyZShcInJlYWN0XCIpO2V4cG9ydHMudXNlSW1tZXI9ZnVuY3Rpb24odSl7dmFyIG49ci51c2VTdGF0ZShmdW5jdGlvbigpe3JldHVybiBlLmZyZWV6ZShcImZ1bmN0aW9uXCI9PXR5cGVvZiB1P3UoKTp1LCEwKX0pLHQ9blsxXTtyZXR1cm5bblswXSxyLnVzZUNhbGxiYWNrKGZ1bmN0aW9uKHIpe3QoXCJmdW5jdGlvblwiPT10eXBlb2Ygcj9lLnByb2R1Y2Uocik6ZS5mcmVlemUocikpfSxbXSldfSxleHBvcnRzLnVzZUltbWVyUmVkdWNlcj1mdW5jdGlvbih1LG4sdCl7dmFyIG89ci51c2VNZW1vKGZ1bmN0aW9uKCl7cmV0dXJuIGUucHJvZHVjZSh1KX0sW3VdKTtyZXR1cm4gci51c2VSZWR1Y2VyKG8sbix0KX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtaW1tZXIuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHN0cmluZ2lmeV9qc18xID0gcmVxdWlyZShcIi4vc3RyaW5naWZ5LmpzXCIpO1xuY29uc3QgdjFfanNfMSA9IHJlcXVpcmUoXCIuL3YxLmpzXCIpO1xuY29uc3QgdjFUb1Y2X2pzXzEgPSByZXF1aXJlKFwiLi92MVRvVjYuanNcIik7XG5mdW5jdGlvbiB2NihvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICAgIG9wdGlvbnMgPz89IHt9O1xuICAgIG9mZnNldCA/Pz0gMDtcbiAgICBsZXQgYnl0ZXMgPSAoMCwgdjFfanNfMS5kZWZhdWx0KSh7IC4uLm9wdGlvbnMsIF92NjogdHJ1ZSB9LCBuZXcgVWludDhBcnJheSgxNikpO1xuICAgIGJ5dGVzID0gKDAsIHYxVG9WNl9qc18xLmRlZmF1bHQpKGJ5dGVzKTtcbiAgICBpZiAoYnVmKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgICAgICAgICAgYnVmW29mZnNldCArIGldID0gYnl0ZXNbaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9XG4gICAgcmV0dXJuICgwLCBzdHJpbmdpZnlfanNfMS51bnNhZmVTdHJpbmdpZnkpKGJ5dGVzKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHY2O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18zNzdfXzsiLCIvKipcbiAqIFRoZSBwdXJwb3NlIG9mIGluaXRpYWxTdGF0ZXMudHMgaXMgdG8gcHJvdmlkZSBpbml0aWFsIHN0YXRlIGZvciBjb21wb25lbnQgcHJvcHNcbiAqL1xuLy8gaW5pdGlhbFN0YXRlLnRzXG5cbmltcG9ydCB7IENvbW1hbmRWYWx2ZU1wUHJvcHMsIFBhcmFtSXRlbSB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbmV4cG9ydCBjb25zdCB2YWx2ZVN0YXR1cyA9IHtcblx0YWxhcm06IGZhbHNlLFxuXHRhY3RGQjogZmFsc2UsXG5cdGRlQWN0RkI6IHRydWUsXG5cdGFjdGl2YXRlZENvbmZpZzogNyxcblx0ZGVhY3RpdmF0ZWRDb25maWc6IDUsXG5cdGl0ZW1OYW1lOiBcIlZYWFhcIixcblx0bWFudWFsOiBmYWxzZSxcblx0bWFza2VkOiBmYWxzZSxcblx0Y2hhbmdpbmc6IGZhbHNlLFxuXHRsb2NhdGU6IGZhbHNlLFxufTtcblxuZXhwb3J0IGNvbnN0IHByb2Nlc3NPYmplY3RQcm9wcyA9IHtcblx0c3RhdHVzOiB2YWx2ZVN0YXR1cyxcbn07XG5leHBvcnQgY29uc3QgdmFsdmVQcm9wcyA9IHtcblx0cHJvY2Vzc09iamVjdDogcHJvY2Vzc09iamVjdFByb3BzLFxuXHRoYW5kbGVDbGljazogKCkgPT4ge1xuXHRcdGNvbnNvbGUubG9nKFwiVmFsdmUgY2xpY2tlZFwiKTtcblx0fSxcblx0bGFiZWxQb3NpdGlvbjogXCJsZWZ0XCIsXG5cdHNob3dMYWJlbDogZmFsc2UsXG59O1xuXG5leHBvcnQgY29uc3QgcGFyYW1ldGVySW5pdGlhbFN0YXRlID0gW1xuXHR7XG5cdFx0bGFiZWw6IHtcblx0XHRcdHRleHQ6IFwibGFiZWxcIixcblx0XHRcdGNsYXNzTmFtZTogXCJcIixcblx0XHRcdHRvb2x0aXBUZXh0OiBcIlwiLFxuXHRcdFx0dG9vbHRpcFBvc2l0aW9uOiBcIlwiLFxuXHRcdFx0dG9vbHRpcENsYXNzTmFtZTogXCJcIixcblx0XHRcdHRvb2x0aXBJZDogXCJcIixcblx0XHR9LFxuXHRcdGlucHV0OiB7XG5cdFx0XHR0eXBlOiBcInRleHRcIixcblx0XHRcdGlucHV0bW9kZTogXCJudW1lcmljXCIsXG5cdFx0XHRwbGFjZWhvbGRlcjogXCJFbnRlciBhIG51bWJlclwiLFxuXHRcdFx0ZWRpdGFibGU6IHRydWUsXG5cdFx0XHRwYXR0ZXJuOiBcIl5bMC05XSpbLixdP1swLTldKiRcIixcblx0XHRcdG1pbjogMCxcblx0XHRcdG1heDogMTAwLFxuXHRcdFx0ZGVjaW1hbFBsYWNlczogMixcblx0XHRcdGV1OiBcIlxcdTAwQjVDXCIsXG5cdFx0XHR2YWx1ZTogMCxcblx0XHR9LFxuXHR9IGFzIFBhcmFtSXRlbSxcbl07XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsQXV0b01hblN0YXRlID0ge1xuXHRhdXRvOiB0cnVlLFxuXHRtYW51YWw6IGZhbHNlLFxufTtcbmV4cG9ydCBjb25zdCBpbml0aWFsT2ZmT25TdGF0ZSA9IHtcblx0b2ZmOiBmYWxzZSxcblx0b246IGZhbHNlLFxufTtcbmV4cG9ydCBjb25zdCBpbml0aWFsQ29udHJvbFN0YXRlID0ge1xuXHRtYWluOiB7XG5cdFx0YXV0bzogdHJ1ZSxcblx0XHRtYW51YWw6IGZhbHNlLFxuXHRcdG9mZjogZmFsc2UsXG5cdFx0b246IGZhbHNlLFxuXHRcdGxhYmVsOiBcIk1haW5cIixcblx0fSxcblx0dXBwZXJTZWF0OiB7XG5cdFx0b2ZmOiBmYWxzZSxcblx0XHRvbjogZmFsc2UsXG5cdFx0bGFiZWw6IFwiVXBwZXIgU2VhdFwiLFxuXHR9LFxuXHRsb3dlclNlYXQ6IHtcblx0XHRvZmY6IGZhbHNlLFxuXHRcdG9uOiBmYWxzZSxcblx0XHRsYWJlbDogXCJMb3dlciBTZWF0XCIsXG5cdH0sXG59IGFzIENvbW1hbmRWYWx2ZU1wUHJvcHM7XG4iLCJcbid1c2Ugc3RyaWN0J1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vaW1tZXIuY2pzLnByb2R1Y3Rpb24uanMnKVxufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ltbWVyLmNqcy5kZXZlbG9wbWVudC5qcycpXG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVwZGF0ZVYxU3RhdGUgPSB2b2lkIDA7XG5jb25zdCBybmdfanNfMSA9IHJlcXVpcmUoXCIuL3JuZy5qc1wiKTtcbmNvbnN0IHN0cmluZ2lmeV9qc18xID0gcmVxdWlyZShcIi4vc3RyaW5naWZ5LmpzXCIpO1xuY29uc3QgX3N0YXRlID0ge307XG5mdW5jdGlvbiB2MShvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICAgIGxldCBieXRlcztcbiAgICBjb25zdCBpc1Y2ID0gb3B0aW9ucz8uX3Y2ID8/IGZhbHNlO1xuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnNLZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gICAgICAgIGlmIChvcHRpb25zS2V5cy5sZW5ndGggPT09IDEgJiYgb3B0aW9uc0tleXNbMF0gPT09ICdfdjYnKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIGJ5dGVzID0gdjFCeXRlcyhvcHRpb25zLnJhbmRvbSA/PyBvcHRpb25zLnJuZz8uKCkgPz8gKDAsIHJuZ19qc18xLmRlZmF1bHQpKCksIG9wdGlvbnMubXNlY3MsIG9wdGlvbnMubnNlY3MsIG9wdGlvbnMuY2xvY2tzZXEsIG9wdGlvbnMubm9kZSwgYnVmLCBvZmZzZXQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgY29uc3Qgcm5kcyA9ICgwLCBybmdfanNfMS5kZWZhdWx0KSgpO1xuICAgICAgICB1cGRhdGVWMVN0YXRlKF9zdGF0ZSwgbm93LCBybmRzKTtcbiAgICAgICAgYnl0ZXMgPSB2MUJ5dGVzKHJuZHMsIF9zdGF0ZS5tc2VjcywgX3N0YXRlLm5zZWNzLCBpc1Y2ID8gdW5kZWZpbmVkIDogX3N0YXRlLmNsb2Nrc2VxLCBpc1Y2ID8gdW5kZWZpbmVkIDogX3N0YXRlLm5vZGUsIGJ1Ziwgb2Zmc2V0KTtcbiAgICB9XG4gICAgcmV0dXJuIGJ1ZiA/PyAoMCwgc3RyaW5naWZ5X2pzXzEudW5zYWZlU3RyaW5naWZ5KShieXRlcyk7XG59XG5mdW5jdGlvbiB1cGRhdGVWMVN0YXRlKHN0YXRlLCBub3csIHJuZHMpIHtcbiAgICBzdGF0ZS5tc2VjcyA/Pz0gLUluZmluaXR5O1xuICAgIHN0YXRlLm5zZWNzID8/PSAwO1xuICAgIGlmIChub3cgPT09IHN0YXRlLm1zZWNzKSB7XG4gICAgICAgIHN0YXRlLm5zZWNzKys7XG4gICAgICAgIGlmIChzdGF0ZS5uc2VjcyA+PSAxMDAwMCkge1xuICAgICAgICAgICAgc3RhdGUubm9kZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHN0YXRlLm5zZWNzID0gMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChub3cgPiBzdGF0ZS5tc2Vjcykge1xuICAgICAgICBzdGF0ZS5uc2VjcyA9IDA7XG4gICAgfVxuICAgIGVsc2UgaWYgKG5vdyA8IHN0YXRlLm1zZWNzKSB7XG4gICAgICAgIHN0YXRlLm5vZGUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICghc3RhdGUubm9kZSkge1xuICAgICAgICBzdGF0ZS5ub2RlID0gcm5kcy5zbGljZSgxMCwgMTYpO1xuICAgICAgICBzdGF0ZS5ub2RlWzBdIHw9IDB4MDE7XG4gICAgICAgIHN0YXRlLmNsb2Nrc2VxID0gKChybmRzWzhdIDw8IDgpIHwgcm5kc1s5XSkgJiAweDNmZmY7XG4gICAgfVxuICAgIHN0YXRlLm1zZWNzID0gbm93O1xuICAgIHJldHVybiBzdGF0ZTtcbn1cbmV4cG9ydHMudXBkYXRlVjFTdGF0ZSA9IHVwZGF0ZVYxU3RhdGU7XG5mdW5jdGlvbiB2MUJ5dGVzKHJuZHMsIG1zZWNzLCBuc2VjcywgY2xvY2tzZXEsIG5vZGUsIGJ1Ziwgb2Zmc2V0ID0gMCkge1xuICAgIGlmIChybmRzLmxlbmd0aCA8IDE2KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUmFuZG9tIGJ5dGVzIGxlbmd0aCBtdXN0IGJlID49IDE2Jyk7XG4gICAgfVxuICAgIGlmICghYnVmKSB7XG4gICAgICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KDE2KTtcbiAgICAgICAgb2Zmc2V0ID0gMDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCArIDE2ID4gYnVmLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYFVVSUQgYnl0ZSByYW5nZSAke29mZnNldH06JHtvZmZzZXQgKyAxNX0gaXMgb3V0IG9mIGJ1ZmZlciBib3VuZHNgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBtc2VjcyA/Pz0gRGF0ZS5ub3coKTtcbiAgICBuc2VjcyA/Pz0gMDtcbiAgICBjbG9ja3NlcSA/Pz0gKChybmRzWzhdIDw8IDgpIHwgcm5kc1s5XSkgJiAweDNmZmY7XG4gICAgbm9kZSA/Pz0gcm5kcy5zbGljZSgxMCwgMTYpO1xuICAgIG1zZWNzICs9IDEyMjE5MjkyODAwMDAwO1xuICAgIGNvbnN0IHRsID0gKChtc2VjcyAmIDB4ZmZmZmZmZikgKiAxMDAwMCArIG5zZWNzKSAlIDB4MTAwMDAwMDAwO1xuICAgIGJ1ZltvZmZzZXQrK10gPSAodGwgPj4+IDI0KSAmIDB4ZmY7XG4gICAgYnVmW29mZnNldCsrXSA9ICh0bCA+Pj4gMTYpICYgMHhmZjtcbiAgICBidWZbb2Zmc2V0KytdID0gKHRsID4+PiA4KSAmIDB4ZmY7XG4gICAgYnVmW29mZnNldCsrXSA9IHRsICYgMHhmZjtcbiAgICBjb25zdCB0bWggPSAoKG1zZWNzIC8gMHgxMDAwMDAwMDApICogMTAwMDApICYgMHhmZmZmZmZmO1xuICAgIGJ1ZltvZmZzZXQrK10gPSAodG1oID4+PiA4KSAmIDB4ZmY7XG4gICAgYnVmW29mZnNldCsrXSA9IHRtaCAmIDB4ZmY7XG4gICAgYnVmW29mZnNldCsrXSA9ICgodG1oID4+PiAyNCkgJiAweGYpIHwgMHgxMDtcbiAgICBidWZbb2Zmc2V0KytdID0gKHRtaCA+Pj4gMTYpICYgMHhmZjtcbiAgICBidWZbb2Zmc2V0KytdID0gKGNsb2Nrc2VxID4+PiA4KSB8IDB4ODA7XG4gICAgYnVmW29mZnNldCsrXSA9IGNsb2Nrc2VxICYgMHhmZjtcbiAgICBmb3IgKGxldCBuID0gMDsgbiA8IDY7ICsrbikge1xuICAgICAgICBidWZbb2Zmc2V0KytdID0gbm9kZVtuXTtcbiAgICB9XG4gICAgcmV0dXJuIGJ1Zjtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHYxO1xuIiwiLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9ucyBmb3IgbnVtYmVyc1xuICovXG5cbi8qKlxuICogVXNpbmcgdGhlIGJpbmFyeSByZXByZXNlbnRhdGlvbiBvZiBuLCBhbiBJbnRlZ2VyLCByZXR1cm5zIHRoZSBib29sZWFuXG4gKiB2YWx1ZSBhdCBpbmRleCwgaS5cbiAqIEBwYXJhbSBuIGEgbnVtYmVyIGlzIGltcGxpY2l0eSBjb252ZXJ0ZXIgdG8gYSAzMmJpdCBpbnRlZ2VyLCBieSB0aGUgYml0d2lzZSBvcGVyYXRvcnNcbiAqIEBwYXJhbSBpIGlzIGEgbnVtYmVyIHJlcHJlc2VudGluZyB0aGUgYml0IHBvc2l0aW9uIHRvIGJlIHRlc3RlZFxuICogQHJldHVybnMgdGhlIGJvb2xlYW4gdmFsdWUgb2YgdGhlIGJpdCBhdCBpbmRleCBpLlxuICovXG5leHBvcnQgY29uc3QgZ2V0Qm9vbEF0SW5kZXggPSAobjogbnVtYmVyLCBpOiBudW1iZXIpOiBib29sZWFuID0+IHtcblx0cmV0dXJuIEJvb2xlYW4oKG4gPj4gaSkgJiAxKTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9ICcwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAnO1xuIiwiaW1wb3J0IHsgZ2V0Qm9vbEF0SW5kZXggfSBmcm9tIFwiLi4vdXRpbHMvbnVtYmVyVXRpbFwiO1xuaW1wb3J0IHtcblx0SXRlbUlkUG9zaXRpb25UeXBlLFxuXHRJdGVtTmFtZUVudW0sXG5cdHZhbHZlTXBJdGVtTmFtZUVudW0sXG5cdHR5cGUgVmFsdmVTdGF0ZSxcbn0gZnJvbSBcIi4uL2FwaS90eXBlc1wiO1xuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSBcInV1aWRcIjtcbi8qKlxuICogVGhpcyBpcyBhIHV0aWxpdHkgZnVuY3Rpb24gZm9yIHRoZSBjb21wb25lbnQgXCJwcm9jZXNzLW9iamVjdC9WYWx2ZUZDXCJcbiAqXG4gKiBAcGFyYW0gaW5kZXg6IG51bWJlciB0aGUgaW5kZXggb2YgYW4gZHluYW1pYyB2aXN1YWwgZWxlbWVudCBcIml0ZW1cIiB3aXRoaW4gdGhlIFZhbHZlIGNvbXBvbmVudFxuICogQHBhcmFtIHZhbHZlU3RhdHVzPzpWYWx2ZVN0YXR1cyB0aGUgc3RhdHVzIHJlcHJlc2VudGluZyBwaHlzaWNhbCBwcm9jZXNzIHZhbHZlXG4gKiBAcmV0dXJucyBjbGFzc05hbWU6c3RyaW5nIHJldHVybnMgYWRkaXRpb25hbCBjbGFzc25hbWVzIGZvciBhbiB2aXN1YWwgZWxlbWVudCBvZiB0aGUgdmFsdmUgY29tcG9uZW50LlxuICpcbiAqIFJldHVybmVkIGNsYXNzbmFtZXMgYXJlO1xuICogXHRoaWRlIC0gdGhpcyBoaWRlcyB0aGUgaXRlbVxuICogXHRzaG93IC1cbiAqL1xuZXhwb3J0IGNvbnN0IGdldEl0ZW1DbGFzc05hbWUgPSAoXG5cdGluZGV4OiBudW1iZXIsXG5cdHZhbHZlU3RhdHVzPzogVmFsdmVTdGF0ZVxuKTogc3RyaW5nID0+IHtcblx0bGV0IGNsYXNzTmFtZSA9IFwiXCI7XG5cdC8vIEhhbmRsZSB0aGUgZmFjdCB0aGF0IEFjdGl2YXRlZENvbmZpZyBhbmQgRGVhY3RpdmF0ZWRDb25maWcgYXJlIG9wdGlvbmFsIGFuZCBtYXliZSB1bmRlZmluZWRcblx0Y29uc3QgQWN0aXZhdGVkQ29uZmlnVmFsdWUgPSB2YWx2ZVN0YXR1cz8uYWN0aXZhdGVkQ29uZmlnID8/IDA7XG5cdGNvbnN0IERlYWN0aXZhdGVkQ29uZmlnVmFsdWUgPSB2YWx2ZVN0YXR1cz8uZGVhY3RpdmF0ZWRDb25maWcgPz8gMDtcblx0aWYgKGluZGV4IDwgMTIpIHtcblx0XHRpZiAoXG5cdFx0XHQoZ2V0Qm9vbEF0SW5kZXgoQWN0aXZhdGVkQ29uZmlnVmFsdWUsIGluZGV4KSAmJiB2YWx2ZVN0YXR1cz8uYWN0RkIpIHx8XG5cdFx0XHQoZ2V0Qm9vbEF0SW5kZXgoRGVhY3RpdmF0ZWRDb25maWdWYWx1ZSwgaW5kZXgpICYmIHZhbHZlU3RhdHVzPy5kZUFjdEZCKVxuXHRcdCkge1xuXHRcdFx0Y2xhc3NOYW1lID0gXCJzaG93IGl0ZW1cIjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y2xhc3NOYW1lID0gXCJoaWRlIGl0ZW1cIjtcblx0XHR9XG5cdH0gZWxzZSBpZiAoaW5kZXggPT09IDE0KSB7XG5cdFx0Y2xhc3NOYW1lID0gXCJzaG93XCI7XG5cdH0gZWxzZSBpZiAoaW5kZXggPT09IDEyKSB7XG5cdFx0aWYgKFxuXHRcdFx0Z2V0Qm9vbEF0SW5kZXgoQWN0aXZhdGVkQ29uZmlnVmFsdWUsIGluZGV4KSB8fFxuXHRcdFx0Z2V0Qm9vbEF0SW5kZXgoRGVhY3RpdmF0ZWRDb25maWdWYWx1ZSwgaW5kZXgpXG5cdFx0KSB7XG5cdFx0XHRjbGFzc05hbWUgPSBcInNob3dcIjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y2xhc3NOYW1lID0gXCJoaWRlXCI7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKGluZGV4ID09PSAxMykge1xuXHRcdGlmIChcblx0XHRcdGdldEJvb2xBdEluZGV4KEFjdGl2YXRlZENvbmZpZ1ZhbHVlLCBpbmRleCkgfHxcblx0XHRcdGdldEJvb2xBdEluZGV4KERlYWN0aXZhdGVkQ29uZmlnVmFsdWUsIGluZGV4KVxuXHRcdCkge1xuXHRcdFx0Y2xhc3NOYW1lID0gXCJzaG93XCI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNsYXNzTmFtZSA9IFwiaGlkZVwiO1xuXHRcdH1cblx0fSBlbHNlIGlmIChpbmRleCA9PT0gMTUpIHtcblx0XHRpZiAoXG5cdFx0XHRnZXRCb29sQXRJbmRleChBY3RpdmF0ZWRDb25maWdWYWx1ZSwgMTIpIHx8XG5cdFx0XHRnZXRCb29sQXRJbmRleChEZWFjdGl2YXRlZENvbmZpZ1ZhbHVlLCAxMilcblx0XHQpIHtcblx0XHRcdGNsYXNzTmFtZSA9IFwic2hvd1wiO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjbGFzc05hbWUgPSBcImhpZGVcIjtcblx0XHR9XG5cdH0gZWxzZSBpZiAoaW5kZXggPT09IDE2KSB7XG5cdFx0aWYgKFxuXHRcdFx0Z2V0Qm9vbEF0SW5kZXgoQWN0aXZhdGVkQ29uZmlnVmFsdWUsIDEyKSB8fFxuXHRcdFx0Z2V0Qm9vbEF0SW5kZXgoRGVhY3RpdmF0ZWRDb25maWdWYWx1ZSwgMTIpXG5cdFx0KSB7XG5cdFx0XHRjbGFzc05hbWUgPSBcInNob3dcIjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y2xhc3NOYW1lID0gXCJoaWRlXCI7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKGluZGV4ID09PSAxNykge1xuXHRcdGlmIChcblx0XHRcdGdldEJvb2xBdEluZGV4KEFjdGl2YXRlZENvbmZpZ1ZhbHVlLCAxMykgfHxcblx0XHRcdGdldEJvb2xBdEluZGV4KERlYWN0aXZhdGVkQ29uZmlnVmFsdWUsIDEzKVxuXHRcdCkge1xuXHRcdFx0Y2xhc3NOYW1lID0gXCJzaG93XCI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNsYXNzTmFtZSA9IFwiaGlkZVwiO1xuXHRcdH1cblx0fSBlbHNlIGlmIChpbmRleCA9PT0gMTgpIHtcblx0XHRpZiAoXG5cdFx0XHRnZXRCb29sQXRJbmRleChBY3RpdmF0ZWRDb25maWdWYWx1ZSwgMTMpIHx8XG5cdFx0XHRnZXRCb29sQXRJbmRleChEZWFjdGl2YXRlZENvbmZpZ1ZhbHVlLCAxMylcblx0XHQpIHtcblx0XHRcdGNsYXNzTmFtZSA9IFwic2hvd1wiO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjbGFzc05hbWUgPSBcImhpZGVcIjtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0Y2xhc3NOYW1lID0gXCJoaWRlXCI7XG5cdH1cblx0Ly8gQWRkaXRpb25zIHRvIHRoZSBjbGFzc05hbWVcblxuXHRpZiAoY2xhc3NOYW1lLmluY2x1ZGVzKFwic2hvd1wiKSAmJiAhY2xhc3NOYW1lLmluY2x1ZGVzKFwiaXRlbVwiKSkge1xuXHRcdC8vIGNvbnNvbGUubG9nKFwiaW5kZXhcIiwgaW5kZXgsIGNsYXNzTmFtZSk7XG5cdFx0aWYgKHZhbHZlU3RhdHVzPy5hbGFybSkge1xuXHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lLnJlcGxhY2UoXCJBbGFybVN0YXRlXCIsIFwiXCIpICsgXCIgQWxhcm1TdGF0ZVwiO1xuXHRcdH1cblx0XHRpZiAodmFsdmVTdGF0dXM/LmNoYW5naW5nKSB7XG5cdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcIkNoYW5naW5nXCIsIFwiXCIpICsgXCIgQ2hhbmdpbmdcIjtcblx0XHR9XG5cdFx0aWYgKHZhbHZlU3RhdHVzPy5tYW51YWwpIHtcblx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwiTWFudWFsXCIsIFwiXCIpICsgXCIgTWFudWFsXCI7XG5cdFx0fVxuXHRcdGlmICh2YWx2ZVN0YXR1cz8ubWFza2VkICYmICF2YWx2ZVN0YXR1cy5hbGFybSkge1xuXHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lLnJlcGxhY2UoXCJOb0FsYXJtTWFza1wiLCBcIlwiKSArIFwiIE5vQWxhcm1NYXNrXCI7XG5cdFx0fVxuXHRcdGlmICh2YWx2ZVN0YXR1cz8ubWFza2VkKSB7XG5cdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcIk1hc2tlZFwiLCBcIlwiKSArIFwiIE1hc2tlZFwiO1xuXHRcdH1cblx0XHRpZiAodmFsdmVTdGF0dXM/LmFjdEZCKSB7XG5cdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcIkFjdGl2YXRlZFwiLCBcIlwiKSArIFwiIEFjdGl2YXRlZFwiO1xuXHRcdH1cblx0XHRpZiAodmFsdmVTdGF0dXM/LmRlQWN0RkIpIHtcblx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwiRGVhY3RpdmF0ZWRcIiwgXCJcIikgKyBcIiBEZWFjdGl2YXRlZFwiO1xuXHRcdH1cblx0XHRpZiAodmFsdmVTdGF0dXM/LmxvY2F0ZSkge1xuXHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lLnJlcGxhY2UoXCJjaXJjbGVcIiwgXCJcIikgKyBcIiBjaXJjbGVcIjtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY2xhc3NOYW1lOyAvLyBkZWZhdWx0IHJldHVybiB2YWx1ZSBpZiBubyBvdGhlciBjb25kaXRpb24gaXMgbWV0XG59O1xuZXhwb3J0IGNvbnN0IGdldFZhbHZlTXBJdGVtQ2xhc3NOYW1lID0gKFxuXHRpbmRleDogbnVtYmVyLFxuXHR2YWx2ZVN0YXR1cz86IFZhbHZlU3RhdGVcbik6IHN0cmluZyA9PiB7XG5cdGxldCBjbGFzc05hbWUgPSBcIlwiO1xuXHQvLyBIYW5kbGUgdGhlIGZhY3QgdGhhdCBBY3RpdmF0ZWRDb25maWcgYW5kIERlYWN0aXZhdGVkQ29uZmlnIGFyZSBvcHRpb25hbCBhbmQgbWF5YmUgdW5kZWZpbmVkXG5cdGNvbnN0IEFjdGl2YXRlZENvbmZpZ1ZhbHVlID0gdmFsdmVTdGF0dXM/LmFjdGl2YXRlZENvbmZpZyA/PyAwO1xuXHRjb25zdCBEZWFjdGl2YXRlZENvbmZpZ1ZhbHVlID0gdmFsdmVTdGF0dXM/LmRlYWN0aXZhdGVkQ29uZmlnID8/IDA7XG5cdC8vIGNvbnNvbGUubG9nKHZhbHZlU3RhdHVzKTtcblxuXHRpZiAoaW5kZXggPCA4KSB7XG5cdFx0aWYgKFxuXHRcdFx0KGdldEJvb2xBdEluZGV4KEFjdGl2YXRlZENvbmZpZ1ZhbHVlLCBpbmRleCkgJiYgdmFsdmVTdGF0dXM/LmFjdEZCKSB8fFxuXHRcdFx0KGdldEJvb2xBdEluZGV4KERlYWN0aXZhdGVkQ29uZmlnVmFsdWUsIGluZGV4KSAmJiB2YWx2ZVN0YXR1cz8uZGVBY3RGQilcblx0XHQpIHtcblx0XHRcdGNsYXNzTmFtZSA9IFwic2hvdyBpdGVtXCI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNsYXNzTmFtZSA9IFwiaGlkZSBpdGVtXCI7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKGluZGV4ID09PSA5KSB7XG5cdFx0Y2xhc3NOYW1lID0gXCJzaG93XCI7XG5cdH0gZWxzZSBpZiAoaW5kZXggPT09IDgpIHtcblx0XHRpZiAoXG5cdFx0XHRnZXRCb29sQXRJbmRleChBY3RpdmF0ZWRDb25maWdWYWx1ZSwgaW5kZXgpIHx8XG5cdFx0XHRnZXRCb29sQXRJbmRleChEZWFjdGl2YXRlZENvbmZpZ1ZhbHVlLCBpbmRleClcblx0XHQpIHtcblx0XHRcdGNsYXNzTmFtZSA9IFwic2hvd1wiO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjbGFzc05hbWUgPSBcImhpZGVcIjtcblx0XHR9XG5cdH0gZWxzZSBpZiAoaW5kZXggPT09IDEwKSB7XG5cdFx0Ly8gY29uc29sZS5sb2coXG5cdFx0Ly8gXHRgaW5kZXggJHtpbmRleH0gZGVhY3QgY29uZmlnICR7RGVhY3RpdmF0ZWRDb25maWdWYWx1ZX0gYml0IGlzICR7Z2V0Qm9vbEF0SW5kZXgoXG5cdFx0Ly8gXHRcdERlYWN0aXZhdGVkQ29uZmlnVmFsdWUsXG5cdFx0Ly8gXHRcdDEwXG5cdFx0Ly8gXHQpfWBcblx0XHQvLyApO1xuXG5cdFx0aWYgKFxuXHRcdFx0Z2V0Qm9vbEF0SW5kZXgoQWN0aXZhdGVkQ29uZmlnVmFsdWUsIDEwKSB8fFxuXHRcdFx0Z2V0Qm9vbEF0SW5kZXgoRGVhY3RpdmF0ZWRDb25maWdWYWx1ZSwgMTApXG5cdFx0KSB7XG5cdFx0XHRjbGFzc05hbWUgPSBcInNob3cgaXRlbVwiO1xuXHRcdFx0aWYgKHZhbHZlU3RhdHVzPy51c2wpIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lLnJlcGxhY2UoXCJBY3RpdmF0ZWRcIiwgXCJcIikgKyBcIiBBY3RpdmF0ZWRcIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwiRGVhY3RpdmF0ZWRcIiwgXCJcIikgKyBcIiBEZWFjdGl2YXRlZFwiO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjbGFzc05hbWUgPSBcImhpZGUgaXRlbVwiO1xuXHRcdH1cblx0fSBlbHNlIGlmIChpbmRleCA9PT0gMTEpIHtcblx0XHRpZiAoXG5cdFx0XHRnZXRCb29sQXRJbmRleChBY3RpdmF0ZWRDb25maWdWYWx1ZSwgMTEpIHx8XG5cdFx0XHRnZXRCb29sQXRJbmRleChEZWFjdGl2YXRlZENvbmZpZ1ZhbHVlLCAxMSlcblx0XHQpIHtcblx0XHRcdGNsYXNzTmFtZSA9IFwic2hvdyBpdGVtXCI7XG5cdFx0XHRpZiAodmFsdmVTdGF0dXM/LmxzbCkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcIkFjdGl2YXRlZFwiLCBcIlwiKSArIFwiIEFjdGl2YXRlZFwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lLnJlcGxhY2UoXCJEZWFjdGl2YXRlZFwiLCBcIlwiKSArIFwiIERlYWN0aXZhdGVkXCI7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNsYXNzTmFtZSA9IFwiaGlkZSBpdGVtXCI7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKGluZGV4ID09PSAxMikge1xuXHRcdGlmICh2YWx2ZVN0YXR1cz8ubG9jYXRlKSB7XG5cdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcInNob3cgaXRlbVwiLCBcIlwiKSArIFwiIHNob3cgaXRlbVwiO1xuXHRcdFx0aWYoZ2V0Qm9vbEF0SW5kZXgoQWN0aXZhdGVkQ29uZmlnVmFsdWUsIDgpIHx8XG5cdFx0XHRnZXRCb29sQXRJbmRleChEZWFjdGl2YXRlZENvbmZpZ1ZhbHVlLCA4KSl7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwic2hvdyBsYXJnZSBpdGVtXCIsIFwiXCIpICsgXCIgc2hvdyBsYXJnZSBpdGVtXCI7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwiaGlkZSBpdGVtXCIsIFwiXCIpICsgXCIgaGlkZSBpdGVtXCI7XG5cdFx0fVxuXHR9XG5cdC8vIEFkZGl0aW9ucyB0byB0aGUgY2xhc3NOYW1lXG5cblx0aWYgKGNsYXNzTmFtZS5pbmNsdWRlcyhcInNob3dcIikgJiYgIWNsYXNzTmFtZS5pbmNsdWRlcyhcIml0ZW1cIikpIHtcblx0XHQvLyBjb25zb2xlLmxvZyhcImluZGV4XCIsIGluZGV4LCBjbGFzc05hbWUpO1xuXHRcdGlmICh2YWx2ZVN0YXR1cz8uYWxhcm0pIHtcblx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwiQWxhcm1TdGF0ZVwiLCBcIlwiKSArIFwiIEFsYXJtU3RhdGVcIjtcblx0XHR9XG5cdFx0aWYgKHZhbHZlU3RhdHVzPy5jaGFuZ2luZykge1xuXHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lLnJlcGxhY2UoXCJDaGFuZ2luZ1wiLCBcIlwiKSArIFwiIENoYW5naW5nXCI7XG5cdFx0fVxuXHRcdGlmICh2YWx2ZVN0YXR1cz8ubWFudWFsKSB7XG5cdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcIk1hbnVhbFwiLCBcIlwiKSArIFwiIE1hbnVhbFwiO1xuXHRcdH1cblx0XHRpZiAodmFsdmVTdGF0dXM/Lm1hc2tlZCAmJiAhdmFsdmVTdGF0dXMuYWxhcm0pIHtcblx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwiTm9BbGFybU1hc2tcIiwgXCJcIikgKyBcIiBOb0FsYXJtTWFza1wiO1xuXHRcdH1cblx0XHRpZiAodmFsdmVTdGF0dXM/Lm1hc2tlZCkge1xuXHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lLnJlcGxhY2UoXCJNYXNrZWRcIiwgXCJcIikgKyBcIiBNYXNrZWRcIjtcblx0XHR9XG5cdFx0aWYgKHZhbHZlU3RhdHVzPy5hY3RGQikge1xuXHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lLnJlcGxhY2UoXCJBY3RpdmF0ZWRcIiwgXCJcIikgKyBcIiBBY3RpdmF0ZWRcIjtcblx0XHR9XG5cdFx0aWYgKHZhbHZlU3RhdHVzPy5kZUFjdEZCKSB7XG5cdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcIkRlYWN0aXZhdGVkXCIsIFwiXCIpICsgXCIgRGVhY3RpdmF0ZWRcIjtcblx0XHR9XG5cdH1cblx0Ly8gY29uc29sZS5sb2coXCJpbmRleFwiLCBpbmRleCwgY2xhc3NOYW1lKTtcblxuXHRyZXR1cm4gY2xhc3NOYW1lOyAvLyBkZWZhdWx0IHJldHVybiB2YWx1ZSBpZiBubyBvdGhlciBjb25kaXRpb24gaXMgbWV0XG59O1xuLyoqXG4gKiBAcmV0dXJucyBBcnJheSBvZiBpdGVtTmFtZShzKSBmb3IgZWFjaCB2aXN1YWwgZWxlbWVudCBvZiBhIHZhbHZlIGNvbXBvbmVudFxuICovXG5leHBvcnQgY29uc3QgaXRlbU5hbWVzID0gT2JqZWN0LmVudHJpZXMoSXRlbU5hbWVFbnVtKS5tYXAoKGtleSwgaW5kZXgpID0+IHtcblx0Ly8gY29uc29sZS5sb2coYEluIGJ1aWxkIEl0ZW1OYW1lcyBuYW1lICR7a2V5fSBpbmRleCAke2luZGV4fWApO1xuXHRyZXR1cm4ge1xuXHRcdGtleTogdXVpZHY0KCksXG5cdFx0bmFtZToga2V5LFxuXHRcdHZhbHVlOiBrZXlbMV0sXG5cdFx0aW5kZXg6IGluZGV4LFxuXHR9O1xufSk7XG5leHBvcnQgY29uc3QgdmFsdmVNcEl0ZW1OYW1lcyA9IE9iamVjdC5lbnRyaWVzKHZhbHZlTXBJdGVtTmFtZUVudW0pLm1hcChcblx0KGtleSwgaW5kZXgpID0+IHtcblx0XHQvLyBjb25zb2xlLmxvZyhgSW4gYnVpbGQgSXRlbU5hbWVzIG5hbWUgJHtrZXl9IGluZGV4ICR7aW5kZXh9YCk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGtleTogdXVpZHY0KCksXG5cdFx0XHRuYW1lOiBrZXksXG5cdFx0XHR2YWx1ZToga2V5WzFdLFxuXHRcdFx0aW5kZXg6IGluZGV4LFxuXHRcdH07XG5cdH1cbik7XG5leHBvcnQgY29uc3QgZ2V0SXRlbUlkUG9zaXRpb25DbGFzc05hbWUgPSAoY2xhc3NOYW1lOiBzdHJpbmcsIGl0ZW1JZFBvc2l0aW9uOiBJdGVtSWRQb3NpdGlvblR5cGUpOkl0ZW1JZFBvc2l0aW9uVHlwZSA9PiB7XG5cdC8vIENoZWNrIGNsYXNzTmFtZSBpbmNsdWRlcyAnaXRlbUlkIHBvcG92ZXInLCBpZiBub3QgcmV0dXJuIGNsYXNzTmFtZSBhbmQgd2FyblxuXHRpZiAoIWNsYXNzTmFtZS5pbmNsdWRlcygnaXRlbUlkIHBvcG92ZXInKSl7XG5cdFx0Y29uc29sZS53YXJuKFwiRnVuY3Rpb24gZ2V0SXRlbUlkUG9zaXRpb25DbGFzc05hbWUgY2FsbGVkIHdoZW4gJ2l0ZW1JZCBwb3BvdmVyJyBub3QgaW4gZ2l2ZW4gY2xhc3NOYW1lXCIpO1xuXHRcdHJldHVybiBjbGFzc05hbWVcblx0fVxuXHQvLyBPdmVyIHdyaXRlIGdpdmVuIGNsYXNzTmFtZVxuXHRjbGFzc05hbWUgPSBcIml0ZW1JZCBwb3BvdmVyXCI7XG5cdHN3aXRjaCAoaXRlbUlkUG9zaXRpb24pIHtcblx0Y2FzZSBcImxlZnRcIjpcblx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcInBvc2l0aW9uLWxlZnRcIiwgXCJcIikgKyBcIiBwb3NpdGlvbi1sZWZ0XCI7XG5cdFx0YnJlYWs7XG5cdGNhc2UgXCJyaWdodFwiOlxuXHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwicG9zaXRpb24tcmlnaHRcIiwgXCJcIikgKyBcIiBwb3NpdGlvbi1yaWdodFwiO1xuXHRcdGJyZWFrO1xuXHRjYXNlIFwidG9wLWxlZnRcIjpcblx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWUucmVwbGFjZShcInBvc2l0aW9uLXRvcC1sZWZ0XCIsIFwiXCIpICsgXCIgcG9zaXRpb24tdG9wLWxlZnRcIjtcblx0XHRicmVhaztcblx0Y2FzZSBcInRvcC1yaWdodFwiOlxuXHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwicG9zaXRpb24tdG9wLXJpZ2h0XCIsIFwiXCIpICsgXCIgcG9zaXRpb24tdG9wLXJpZ2h0XCI7XG5cdFx0YnJlYWs7XG5cdGNhc2UgXCJib3R0b20tbGVmdFwiOlxuXHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5yZXBsYWNlKFwicG9zaXRpb24tYm90dG9tLWxlZnRcIiwgXCJcIikgKyBcIiBwb3NpdGlvbi1ib3R0b20tbGVmdFwiO1xuXHRcdGJyZWFrO1xuXHRjYXNlIFwiYm90dG9tLXJpZ2h0XCI6XG5cdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lLnJlcGxhY2UoXCJwb3NpdGlvbi1ib3R0b20tcmlnaHRcIiwgXCJcIikgKyBcIiBwb3NpdGlvbi1ib3R0b20tcmlnaHRcIjtcblx0XHRicmVhaztcblxuXHRkZWZhdWx0OlxuXHRcdGJyZWFrO1xufVxuXG5cdHJldHVybiBjbGFzc05hbWU7XG59XG5cbiIsImltcG9ydCB7IHVzZUltbWVyUmVkdWNlciB9IGZyb20gXCJ1c2UtaW1tZXJcIjtcbmltcG9ydCB7XG5cdGluaXRpYWxDb250cm9sU3RhdGUsXG5cdHBhcmFtZXRlckluaXRpYWxTdGF0ZSxcblx0dmFsdmVTdGF0dXMsXG59IGZyb20gXCIuL2luaXRpYWxTdGF0ZVwiO1xuaW1wb3J0IHR5cGUge1xuXHRDb21tYW5kVmFsdmVNcFByb3BzLFxuXHRQYXJhbWV0ZXJBY3Rpb24sXG5cdFBhcmFtSXRlbSxcblx0VXNlUGFyYW1ldGVyUmVkdWNlcixcblx0VXNlVmFsdmVNcENvbW1hbmRSZWR1Y2VyLFxuXHRVc2VWYWx2ZVJlZHVjZXIsXG5cdFZhbHZlQWN0aW9uLFxuXHRWYWx2ZU1wQ29tbWFuZEFjdGlvbixcblx0VmFsdmVTdGF0ZSxcbn0gZnJvbSBcIi4vdHlwZXNcIjtcblxuZnVuY3Rpb24gdmFsdmVSZWR1Y2VyKGRyYWZ0OiBWYWx2ZVN0YXRlLCBhY3Rpb246IFZhbHZlQWN0aW9uKTogVmFsdmVTdGF0ZSB7XG5cdHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcblx0XHRjYXNlIFwiVVBEQVRFX0FDVF9DT05GSUdcIjpcblx0XHRcdGRyYWZ0LmFjdGl2YXRlZENvbmZpZyA9IGFjdGlvbi52YWx1ZTtcblx0XHRcdHJldHVybiBkcmFmdDtcblx0XHRjYXNlIFwiVVBEQVRFX0RFQUNUX0NPTkZJR1wiOlxuXHRcdFx0ZHJhZnQuZGVhY3RpdmF0ZWRDb25maWcgPSBhY3Rpb24udmFsdWU7XG5cdFx0XHRyZXR1cm4gZHJhZnQ7XG5cdFx0Y2FzZSBcIlVQREFURV9BQ1RfRkJcIjpcblx0XHRcdGRyYWZ0LmFjdEZCID0gIWRyYWZ0LmFjdEZCO1xuXHRcdFx0cmV0dXJuIGRyYWZ0O1xuXHRcdGNhc2UgXCJVUERBVEVfREVfQUNUX0ZCXCI6XG5cdFx0XHRkcmFmdC5kZUFjdEZCID0gIWRyYWZ0LmRlQWN0RkI7XG5cdFx0XHRyZXR1cm4gZHJhZnQ7XG5cdFx0Y2FzZSBcIlVQREFURV9VU0xcIjpcblx0XHRcdGRyYWZ0LnVzbCA9ICFkcmFmdC51c2w7XG5cdFx0XHRyZXR1cm4gZHJhZnQ7XG5cdFx0Y2FzZSBcIlVQREFURV9MU0xcIjpcblx0XHRcdGRyYWZ0LmxzbCA9ICFkcmFmdC5sc2w7XG5cdFx0XHRyZXR1cm4gZHJhZnQ7XG5cdFx0Y2FzZSBcIlVQREFURV9NQU5VQUxcIjpcblx0XHRcdGRyYWZ0Lm1hbnVhbCA9ICFkcmFmdC5tYW51YWw7XG5cdFx0XHRyZXR1cm4gZHJhZnQ7XG5cdFx0Y2FzZSBcIlVQREFURV9BTEFSTVwiOlxuXHRcdFx0ZHJhZnQuYWxhcm0gPSAhZHJhZnQuYWxhcm07XG5cdFx0XHRyZXR1cm4gZHJhZnQ7XG5cdFx0Y2FzZSBcIlVQREFURV9NQVNLRURcIjpcblx0XHRcdGRyYWZ0Lm1hc2tlZCA9ICFkcmFmdC5tYXNrZWQ7XG5cdFx0XHRyZXR1cm4gZHJhZnQ7XG5cdFx0Y2FzZSBcIlVQREFURV9DSEFOR0lOR1wiOlxuXHRcdFx0ZHJhZnQuY2hhbmdpbmcgPSAhZHJhZnQuY2hhbmdpbmc7XG5cdFx0XHRyZXR1cm4gZHJhZnQ7XG5cdFx0Y2FzZSBcIlVQREFURV9MT0NBVEVcIjpcblx0XHRcdGRyYWZ0LmxvY2F0ZSA9ICFkcmFmdC5sb2NhdGU7XG5cdFx0XHRyZXR1cm4gZHJhZnQ7XG5cdFx0ZGVmYXVsdDogLy8gI1RPRE8gQWRkIG1vcmUgcmVkdWNlciBjYXNlIHN0YXRlbWVudHNcblx0XHRcdHJldHVybiBkcmFmdDtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlVmFsdmVSZWR1Y2VyKCk6IFVzZVZhbHZlUmVkdWNlciB7XG5cdGNvbnN0IFtzdGF0ZSwgZGlzcGF0Y2hdID0gdXNlSW1tZXJSZWR1Y2VyKHZhbHZlUmVkdWNlciwgdmFsdmVTdGF0dXMpO1xuXG5cdGZ1bmN0aW9uIHVwZGF0ZUFjdENvbmZpZyh2YWx1ZTogbnVtYmVyKSB7XG5cdFx0ZGlzcGF0Y2goeyB0eXBlOiBcIlVQREFURV9BQ1RfQ09ORklHXCIsIHZhbHVlIH0pO1xuXHR9XG5cdGZ1bmN0aW9uIHVwZGF0ZURlQWN0Q29uZmlnKHZhbHVlOiBudW1iZXIpIHtcblx0XHRkaXNwYXRjaCh7IHR5cGU6IFwiVVBEQVRFX0RFQUNUX0NPTkZJR1wiLCB2YWx1ZSB9KTtcblx0fVxuXHRmdW5jdGlvbiB1cGRhdGVVc2woKSB7XG5cdFx0ZGlzcGF0Y2goeyB0eXBlOiBcIlVQREFURV9VU0xcIiB9KTtcblx0fVxuXHRmdW5jdGlvbiB1cGRhdGVMc2woKSB7XG5cdFx0ZGlzcGF0Y2goeyB0eXBlOiBcIlVQREFURV9MU0xcIiB9KTtcblx0fVxuXHRmdW5jdGlvbiB1cGRhdGVBbGFybSgpIHtcblx0XHRkaXNwYXRjaCh7IHR5cGU6IFwiVVBEQVRFX0FMQVJNXCIgfSk7XG5cdH1cblx0ZnVuY3Rpb24gdXBkYXRlQWN0RkIoKSB7XG5cdFx0ZGlzcGF0Y2goeyB0eXBlOiBcIlVQREFURV9BQ1RfRkJcIiB9KTtcblx0fVxuXHRmdW5jdGlvbiB1cGRhdGVEZUFjdEZCKCkge1xuXHRcdGRpc3BhdGNoKHsgdHlwZTogXCJVUERBVEVfREVfQUNUX0ZCXCIgfSk7XG5cdH1cblx0ZnVuY3Rpb24gdXBkYXRlTWFudWFsKCkge1xuXHRcdGRpc3BhdGNoKHsgdHlwZTogXCJVUERBVEVfTUFOVUFMXCIgfSk7XG5cdH1cblx0ZnVuY3Rpb24gdXBkYXRlTWFza2VkKCkge1xuXHRcdGRpc3BhdGNoKHsgdHlwZTogXCJVUERBVEVfTUFTS0VEXCIgfSk7XG5cdH1cblx0ZnVuY3Rpb24gdXBkYXRlQ2hhbmdpbmcoKSB7XG5cdFx0ZGlzcGF0Y2goeyB0eXBlOiBcIlVQREFURV9DSEFOR0lOR1wiIH0pO1xuXHR9XG5cdGZ1bmN0aW9uIHVwZGF0ZUxvY2F0ZSgpIHtcblx0XHRkaXNwYXRjaCh7IHR5cGU6IFwiVVBEQVRFX0xPQ0FURVwiIH0pO1xuXHR9XG5cblx0Y29uc3QgdXNlRWRpdFZhbHZlUmVkdWNlciA9IHtcblx0XHRzdGF0ZSxcblx0XHRyZWR1Y2VyOiB7XG5cdFx0XHR1cGRhdGVBY3RDb25maWcsXG5cdFx0XHR1cGRhdGVEZUFjdENvbmZpZyxcblx0XHRcdHVwZGF0ZUFsYXJtLFxuXHRcdFx0dXBkYXRlQWN0RkIsXG5cdFx0XHR1cGRhdGVEZUFjdEZCLFxuXHRcdFx0dXBkYXRlVXNsLFxuXHRcdFx0dXBkYXRlTHNsLFxuXHRcdFx0dXBkYXRlTWFudWFsLFxuXHRcdFx0dXBkYXRlTWFza2VkLFxuXHRcdFx0dXBkYXRlQ2hhbmdpbmcsXG5cdFx0XHR1cGRhdGVMb2NhdGUsXG5cdFx0fSxcblx0fTtcblxuXHRyZXR1cm4gdXNlRWRpdFZhbHZlUmVkdWNlcjtcbn1cbi8qKlxuICogIFVwZGF0ZSBhIHBhcmFtZXRlciBpdGVtIGluIGEgbGlzdCBvZiBwYXJhbWV0ZXIgaXRlbXNcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gUGFyYW1ldGVyUmVkdWNlcihcblx0ZHJhZnQ6IFBhcmFtSXRlbVtdLFxuXHRhY3Rpb246IFBhcmFtZXRlckFjdGlvblxuKTogUGFyYW1JdGVtW10ge1xuXHRzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG5cdFx0Y2FzZSBcIlVQREFURV9WQUxVRVwiOlxuXHRcdFx0ZHJhZnRbYWN0aW9uLmluZGV4XS5pbnB1dC52YWx1ZSA9IGFjdGlvbi52YWx1ZTtcblx0XHRcdHJldHVybiBkcmFmdDtcblx0XHRkZWZhdWx0OiAvLyAjVE9ETyBBZGQgbW9yZSByZWR1Y2VyIGNhc2Ugc3RhdGVtZW50c1xuXHRcdFx0cmV0dXJuIGRyYWZ0O1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJhbUl0ZW1zUmVkdWNlcigpOiBVc2VQYXJhbWV0ZXJSZWR1Y2VyIHtcblx0Y29uc3QgW3N0YXRlLCBkaXNwYXRjaF0gPSB1c2VJbW1lclJlZHVjZXIoXG5cdFx0UGFyYW1ldGVyUmVkdWNlcixcblx0XHRwYXJhbWV0ZXJJbml0aWFsU3RhdGVcblx0KTtcblxuXHRmdW5jdGlvbiB1cGRhdGVWYWx1ZShpbmRleDogbnVtYmVyLCB2YWx1ZTogbnVtYmVyKSB7XG5cdFx0ZGlzcGF0Y2goeyB0eXBlOiBcIlVQREFURV9WQUxVRVwiLCBpbmRleDogaW5kZXgsIHZhbHVlOiB2YWx1ZSB9KTtcblx0fVxuXHQvLyBBZGQgbW9yZSBkaXNwYXRjaCBmdW5jdGlvbnMgaGVyZVxuXHRjb25zdCB1c2VQYXJhbWV0ZXJSZWR1Y2VyID0ge1xuXHRcdHN0YXRlLFxuXHRcdHJlZHVjZXI6IHtcblx0XHRcdHVwZGF0ZVZhbHVlLFxuXHRcdH0sXG5cdH07XG5cdHJldHVybiB1c2VQYXJhbWV0ZXJSZWR1Y2VyO1xufVxuZnVuY3Rpb24gdmFsdmVNcFJlZHVjZXIoXG5cdGRyYWZ0OiBDb21tYW5kVmFsdmVNcFByb3BzLFxuXHRhY3Rpb246IFZhbHZlTXBDb21tYW5kQWN0aW9uXG4pOiBDb21tYW5kVmFsdmVNcFByb3BzIHtcblx0c3dpdGNoIChhY3Rpb24udHlwZSkge1xuXHRcdGNhc2UgXCJVUERBVEVfQVVUT19NQU5VQUxcIjpcblx0XHRcdGlmIChkcmFmdC5tYWluKSB7XG5cdFx0XHRcdGlmIChhY3Rpb24ubW9kZSA9PT0gXCJhdXRvXCIpIHtcblx0XHRcdFx0XHRkcmFmdC5tYWluLmF1dG8gPSB0cnVlO1xuXHRcdFx0XHRcdGRyYWZ0Lm1haW4ubWFudWFsID0gZmFsc2U7XG5cdFx0XHRcdH0gZWxzZSBpZiAoYWN0aW9uLm1vZGUgPT09IFwibWFudWFsXCIpIHtcblx0XHRcdFx0XHRkcmFmdC5tYWluLmF1dG8gPSBmYWxzZTtcblx0XHRcdFx0XHRkcmFmdC5tYWluLm1hbnVhbCA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBkcmFmdDtcblx0XHRjYXNlIFwiVVBEQVRFX01BSU5fTUFOX09OXCI6XG5cdFx0XHRpZiAoZHJhZnQubWFpbikge1xuXHRcdFx0XHRkcmFmdC5tYWluLm9uID0gdHJ1ZTtcblx0XHRcdFx0ZHJhZnQubWFpbi5vZmYgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBkcmFmdDtcblx0XHRjYXNlIFwiVVBEQVRFX01BSU5fTUFOX09GRlwiOlxuXHRcdFx0aWYgKGRyYWZ0Lm1haW4pIHtcblx0XHRcdFx0ZHJhZnQubWFpbi5vbiA9IGZhbHNlO1xuXHRcdFx0XHRkcmFmdC5tYWluLm9mZiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZHJhZnQ7XG5cdFx0Y2FzZSBcIlVQREFURV9VU0xfTUFOX09OXCI6XG5cdFx0XHRpZiAoZHJhZnQudXBwZXJTZWF0KSB7XG5cdFx0XHRcdGRyYWZ0LnVwcGVyU2VhdC5vbiA9IHRydWU7XG5cdFx0XHRcdGRyYWZ0LnVwcGVyU2VhdC5vZmYgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBkcmFmdDtcblx0XHRjYXNlIFwiVVBEQVRFX1VTTF9NQU5fT0ZGXCI6XG5cdFx0XHRpZiAoZHJhZnQudXBwZXJTZWF0KSB7XG5cdFx0XHRcdGRyYWZ0LnVwcGVyU2VhdC5vbiA9IGZhbHNlO1xuXHRcdFx0XHRkcmFmdC51cHBlclNlYXQub2ZmID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBkcmFmdDtcblx0XHRjYXNlIFwiVVBEQVRFX0xTTF9NQU5fT05cIjpcblx0XHRcdGlmIChkcmFmdC5sb3dlclNlYXQpIHtcblx0XHRcdFx0ZHJhZnQubG93ZXJTZWF0Lm9uID0gdHJ1ZTtcblx0XHRcdFx0ZHJhZnQubG93ZXJTZWF0Lm9mZiA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGRyYWZ0O1xuXHRcdFx0Y2FzZSBcIlVQREFURV9MU0xfTUFOX09GRlwiOlxuXHRcdFx0XHRpZiAoZHJhZnQubG93ZXJTZWF0KSB7XG5cdFx0XHRcdFx0ZHJhZnQubG93ZXJTZWF0Lm9uID0gZmFsc2U7XG5cdFx0XHRcdFx0ZHJhZnQubG93ZXJTZWF0Lm9mZiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZHJhZnQ7XG5cblx0XHRkZWZhdWx0OiAvLyAjVE9ETyBBZGQgbW9yZSByZWR1Y2VyIGNhc2Ugc3RhdGVtZW50c1xuXHRcdFx0cmV0dXJuIGRyYWZ0O1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VWYWx2ZU1wQ29tbWFuZFJlZHVjZXIoKTogVXNlVmFsdmVNcENvbW1hbmRSZWR1Y2VyIHtcblx0Y29uc3QgW3N0YXRlLCBkaXNwYXRjaF0gPSB1c2VJbW1lclJlZHVjZXIoXG5cdFx0dmFsdmVNcFJlZHVjZXIsXG5cdFx0aW5pdGlhbENvbnRyb2xTdGF0ZVxuXHQpO1xuXG5cdGZ1bmN0aW9uIHVwZGF0ZUF1dG9NYW5TZWxlY3Rpb24obW9kZTogXCJhdXRvXCIgfCBcIm1hbnVhbFwiKSB7XG5cdFx0ZGlzcGF0Y2goeyB0eXBlOiBcIlVQREFURV9BVVRPX01BTlVBTFwiLCBtb2RlIH0pO1xuXHR9XG5cdGZ1bmN0aW9uIHVwZGF0ZU1haW5NYW51YWxPbigpIHtcblx0XHRkaXNwYXRjaCh7IHR5cGU6IFwiVVBEQVRFX01BSU5fTUFOX09OXCIgfSk7XG5cdH1cblx0ZnVuY3Rpb24gdXBkYXRlTWFpbk1hbnVhbE9mZigpIHtcblx0XHRkaXNwYXRjaCh7IHR5cGU6IFwiVVBEQVRFX01BSU5fTUFOX09GRlwiIH0pO1xuXHR9XG5cdGZ1bmN0aW9uIHVwZGF0ZVVzbE1hbnVhbE9uKCkge1xuXHRcdGRpc3BhdGNoKHsgdHlwZTogXCJVUERBVEVfVVNMX01BTl9PTlwiIH0pO1xuXHR9XG5cdGZ1bmN0aW9uIHVwZGF0ZVVzbE1hbnVhbE9mZigpIHtcblx0XHRkaXNwYXRjaCh7IHR5cGU6IFwiVVBEQVRFX1VTTF9NQU5fT0ZGXCIgfSk7XG5cdH1cblx0ZnVuY3Rpb24gdXBkYXRlTHNsTWFudWFsT24oKSB7XG5cdFx0ZGlzcGF0Y2goeyB0eXBlOiBcIlVQREFURV9MU0xfTUFOX09OXCIgfSk7XG5cdH1cblx0ZnVuY3Rpb24gdXBkYXRlTHNsTWFudWFsT2ZmKCkge1xuXHRcdGRpc3BhdGNoKHsgdHlwZTogXCJVUERBVEVfTFNMX01BTl9PRkZcIiB9KTtcblx0fVxuXG5cdGNvbnN0IHVzZUNvbW1hbmRzVmFsdmVNcFJlZHVjZXIgPSB7XG5cdFx0c3RhdGUsXG5cdFx0cmVkdWNlcjoge1xuXHRcdFx0dXBkYXRlQXV0b01hblNlbGVjdGlvbixcblx0XHRcdHVwZGF0ZU1haW5NYW51YWxPbixcblx0XHRcdHVwZGF0ZU1haW5NYW51YWxPZmYsXG5cdFx0XHR1cGRhdGVVc2xNYW51YWxPbixcblx0XHRcdHVwZGF0ZVVzbE1hbnVhbE9mZixcblx0XHRcdHVwZGF0ZUxzbE1hbnVhbE9uLFxuXHRcdFx0dXBkYXRlTHNsTWFudWFsT2ZmLFxuXHRcdH0sXG5cdH07XG5cblx0cmV0dXJuIHVzZUNvbW1hbmRzVmFsdmVNcFJlZHVjZXI7XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCdcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUNyZWF0ZUNvbnRleHQ8Q29udGV4dFZhbHVlVHlwZSBleHRlbmRzIG9iamVjdCB8IG51bGw+KFxuICByb290Q29tcG9uZW50TmFtZTogc3RyaW5nLFxuICBkZWZhdWx0Q29udGV4dD86IENvbnRleHRWYWx1ZVR5cGVcbikge1xuICBjb25zdCBDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxDb250ZXh0VmFsdWVUeXBlIHwgdW5kZWZpbmVkPihcbiAgICBkZWZhdWx0Q29udGV4dFxuICApO1xuXG4gIGNvbnN0IFByb3ZpZGVyOiBSZWFjdC5GQzxDb250ZXh0VmFsdWVUeXBlICYgeyBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIH0+ID0gKFxuICAgIHByb3BzXG4gICkgPT4ge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4sIC4uLmNvbnRleHQgfSA9IHByb3BzO1xuICAgIC8vIE9ubHkgcmUtbWVtb2l6ZSB3aGVuIHByb3AgdmFsdWVzIGNoYW5nZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgICBjb25zdCB2YWx1ZSA9IFJlYWN0LnVzZU1lbW8oXG4gICAgICAoKSA9PiBjb250ZXh0LFxuICAgICAgT2JqZWN0LnZhbHVlcyhjb250ZXh0KVxuICAgICkgYXMgQ29udGV4dFZhbHVlVHlwZTtcbiAgICByZXR1cm4gPENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3ZhbHVlfT57Y2hpbGRyZW59PC9Db250ZXh0LlByb3ZpZGVyPjtcbiAgfTtcblxuICBQcm92aWRlci5kaXNwbGF5TmFtZSA9IHJvb3RDb21wb25lbnROYW1lICsgXCJQcm92aWRlclwiO1xuXG4gIGZ1bmN0aW9uIHVzZUNvbnRleHQoY29uc3VtZXJOYW1lOiBzdHJpbmcpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChDb250ZXh0KTtcbiAgICBpZiAoY29udGV4dCkgcmV0dXJuIGNvbnRleHQ7XG4gICAgaWYgKGRlZmF1bHRDb250ZXh0ICE9PSB1bmRlZmluZWQpIHJldHVybiBkZWZhdWx0Q29udGV4dDtcbiAgICAvLyBpZiBhIGRlZmF1bHRDb250ZXh0IHdhc24ndCBzcGVjaWZpZWQsIGl0J3MgYSByZXF1aXJlZCBjb250ZXh0LlxuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBcXGAke2NvbnN1bWVyTmFtZX1cXGAgbXVzdCBiZSB1c2VkIHdpdGhpbiBcXGAke3Jvb3RDb21wb25lbnROYW1lfVxcYGBcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIFtQcm92aWRlciwgdXNlQ29udGV4dF0gYXMgY29uc3Q7XG59XG4iLCJpbXBvcnQgdHlwZSB7IFJlYWN0Tm9kZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHR5cGUgeyBDb21wb25lbnRQcm9wcyB9IGZyb20gXCJAaW5kdWN0aXZlYXV0b21hdGlvbi9wZXJzcGVjdGl2ZS1jbGllbnRcIjtcblxuXG5cbmV4cG9ydCBjb25zdCBWQUxWRV9DT01QT05FTlRfVFlQRSA9IFwiaG1pLnByb2Nlc3Nfb2JqZWN0cy5WYWx2ZVwiO1xuXG5leHBvcnQgdHlwZSBWYWx2ZVN0YXRlID0ge1xuXHRhbGFybTogYm9vbGVhbjtcblx0YWN0RkI6IGJvb2xlYW47XG5cdGRlQWN0RkI6IGJvb2xlYW47XG5cdHVzbD86Ym9vbGVhbjtcblx0bHNsPzogYm9vbGVhbjtcblx0YWN0aXZhdGVkQ29uZmlnOiBudW1iZXI7XG5cdGRlYWN0aXZhdGVkQ29uZmlnOiBudW1iZXI7XG5cdGl0ZW1OYW1lOiBzdHJpbmc7XG5cdG1hbnVhbDogYm9vbGVhbjtcblx0bWFza2VkOiBib29sZWFuO1xuXHRjaGFuZ2luZzogYm9vbGVhbjtcblx0bG9jYXRlOiBib29sZWFuO1xufTtcblxuXG5cbmV4cG9ydCB0eXBlIFZhbHZlQ29tcG91bmRDb250ZXh0VHlwZSA9IHtcblx0Y29tcG9uZW50UHJvcHM6Q29tcG9uZW50UHJvcHM8YW55LGFueT4sXG5cdHZhbHZlUHJvcHM6IFZhbHZlUHJvcHM7XG5cdG9uQWN0aW9uUGVyZm9ybWVkOiAoKT0+IHZvaWRcblx0Y2hpbGRyZW46IFJlYWN0Tm9kZTtcbn07XG5leHBvcnQgdHlwZSBWYWx2ZUNvbXBvdW5kUm9vdFByb3BzID0ge1xuXHRjb21wb25lbnRQcm9wczpDb21wb25lbnRQcm9wczxhbnksYW55Pixcblx0dmFsdmVQcm9wczpWYWx2ZVByb3BzLFxuXHRvbkFjdGlvblBlcmZvcm1lZDogKCk9PiB2b2lkXG5cdGNoaWxkcmVuOiBSZWFjdE5vZGU7XG59XG4vKipcbiAqIERlZmluZSB0aGUgc2hhcGUgb2YgdGhlIFBhcmFtZXRlckFjdGlvbiB0eXBlXG4gKiBAVXNlYWdlIHVzZVBhcmFtZXRlclJlZHVjZXJcbiAqL1xuZXhwb3J0IHR5cGUgUGFyYW1ldGVyQWN0aW9uID1cblx0fCB7IHR5cGU6IFwiVVBEQVRFX1ZBTFVFXCI7IHZhbHVlOiBudW1iZXIgLCBpbmRleDogbnVtYmVyfVxuXG5cdDtcblxuZXhwb3J0IHR5cGUgUGFyYW1ldGVyUmVkdWNlciA9IChcblx0c3RhdGU6IFBhcmFtSXRlbSB8IFBhcmFtSXRlbVtdLFxuXHRhY3Rpb246IFBhcmFtZXRlckFjdGlvblxuKSA9PiBWYWx2ZVN0YXRlO1xuXG5leHBvcnQgdHlwZSBVc2VQYXJhbWV0ZXJSZWR1Y2VyID0ge1xuXHRzdGF0ZTogUGFyYW1JdGVtW107XG5cdHJlZHVjZXI6IHtcblx0XHR1cGRhdGVWYWx1ZTogKHZhbHVlOm51bWJlciwgaW5kZXg6IG51bWJlcikgPT4gdm9pZDtcblx0XHQvL2FkZCBtb3JlIGhhbmRsZXJzIGFzIG5lZWRlZFxuXHR9O1xufTtcbmV4cG9ydCB0eXBlIFBhcmFtTGFiZWwgPSB7XG5cdHRleHQ6IHN0cmluZztcblx0Y2xhc3NOYW1lPzogc3RyaW5nO1xuXHR0b29sdGlwVGV4dD86IHN0cmluZztcblx0dG9vbHRpcFBvc2l0aW9uPzogc3RyaW5nO1xuXHR0b29sdGlwQ2xhc3NOYW1lPzogc3RyaW5nO1xuXHR0b29sdGlwSWQ/OiBzdHJpbmc7XG59XG5leHBvcnQgdHlwZSBQYXJhbUlucHV0ID0ge1xuXHR0eXBlOiBzdHJpbmc7XG5cdGlucHV0bW9kZTogJ25vbmUnIHwgJ3RleHQnIHwgJ3RlbCcgfCAndXJsJyB8ICdlbWFpbCcgfCAnbnVtZXJpYycgfCAnZGVjaW1hbCcgfCAnc2VhcmNoJyB8IHVuZGVmaW5lZDtcblx0cGxhY2Vob2xkZXI6IHN0cmluZztcblx0ZWRpdGFibGU6IGJvb2xlYW47XG5cdHBhdHRlcm46IHN0cmluZztcblx0bWluOiBudW1iZXI7XG5cdG1heDogbnVtYmVyO1xuXHRkZWNpbWFsUGxhY2VzOiBudW1iZXI7XG5cdC8vIHBhdHRlcm46IFwiXlswLTldKlsuLF0/WzAtOV0qJFwiIGZvciBkZWNpbWFsIG51bWJlcnNcblx0Ly8gcGF0dGVybjogXCJeWzAtOV0qJFwiIGZvciBpbnRlZ2Vyc1xuXHRldTogc3RyaW5nO1xuXHR2YWx1ZTogbnVtYmVyO1xufVxuLy8gdHlwZSBQYXJhbXNIZWFkZXIgPSB7XG4vLyBcdGxhYmVsOiBzdHJpbmdcbi8vIH1cbmV4cG9ydCB0eXBlIFBhcmFtSXRlbSA9IHtcblx0bGFiZWw6IFBhcmFtTGFiZWw7XG5cdGlucHV0OiBQYXJhbUlucHV0O1xufVxuZXhwb3J0IHR5cGUgUGFyYW1ldGVyc0xpc3RTdGF0ZSA9IHtcblx0cGFyYW1ldGVyczogUGFyYW1JdGVtW11cbn1cbi8qKlxuICogRGVmaW5lIHRoZSBzaGFwZSBvZiB0aGUgVmFsdmVBY3Rpb24gdHlwZVxuICogQFVzZWFnZSB1c2VWYWx2ZVJlZHVjZXJcbiAqL1xuZXhwb3J0IHR5cGUgVmFsdmVBY3Rpb24gPVxuXHR8IHsgdHlwZTogXCJVUERBVEVfQUNUX0NPTkZJR1wiOyB2YWx1ZTogbnVtYmVyIH1cblx0fCB7IHR5cGU6IFwiVVBEQVRFX0RFQUNUX0NPTkZJR1wiOyB2YWx1ZTogbnVtYmVyIH1cblx0fCB7IHR5cGU6IFwiVVBEQVRFX0FDVF9GQlwiIH1cblx0fCB7IHR5cGU6IFwiVVBEQVRFX0RFX0FDVF9GQlwiIH1cblx0fCB7IHR5cGU6IFwiVVBEQVRFX1VTTFwiIH1cblx0fCB7IHR5cGU6IFwiVVBEQVRFX0xTTFwiIH1cblx0fCB7IHR5cGU6IFwiVVBEQVRFX01BTlVBTFwiIH1cblx0fCB7IHR5cGU6IFwiVVBEQVRFX0FMQVJNXCIgfVxuXHR8IHsgdHlwZTogXCJVUERBVEVfTUFTS0VEXCIgfVxuXHR8IHsgdHlwZTogXCJVUERBVEVfQ0hBTkdJTkdcIiB9XG5cdHwgeyB0eXBlOiBcIlVQREFURV9MT0NBVEVcIiB9XG5cdDtcblxuZXhwb3J0IHR5cGUgVmFsdmVSZWR1Y2VyID0gKFxuXHRzdGF0ZTogVmFsdmVTdGF0ZSxcblx0YWN0aW9uOiBWYWx2ZUFjdGlvblxuKSA9PiBWYWx2ZVN0YXRlO1xuXG5leHBvcnQgdHlwZSBVc2VWYWx2ZVJlZHVjZXIgPSB7XG5cdHN0YXRlOiBWYWx2ZVN0YXRlO1xuXHRyZWR1Y2VyOiB7XG5cdFx0dXBkYXRlQWN0Q29uZmlnOiAodmFsdWU6bnVtYmVyKSA9PiB2b2lkO1xuXHRcdHVwZGF0ZURlQWN0Q29uZmlnOiAodmFsdWU6bnVtYmVyKSA9PiB2b2lkO1xuXHRcdHVwZGF0ZUFsYXJtOiAoKSA9PiB2b2lkO1xuXHRcdHVwZGF0ZUFjdEZCOiAoKSA9PiB2b2lkO1xuXHRcdHVwZGF0ZURlQWN0RkI6ICgpID0+IHZvaWQ7XG5cdFx0dXBkYXRlVXNsOiAoKSA9PiB2b2lkO1xuXHRcdHVwZGF0ZUxzbDogKCkgPT4gdm9pZDtcblx0XHR1cGRhdGVNYW51YWw6ICgpID0+IHZvaWQ7XG5cdFx0dXBkYXRlTWFza2VkOiAoKSA9PiB2b2lkO1xuXHRcdHVwZGF0ZUNoYW5naW5nOiAoKSA9PiB2b2lkO1xuXHRcdHVwZGF0ZUxvY2F0ZTogKCkgPT4gdm9pZDtcblxuXHRcdC8vYWRkIG1vcmUgaGFuZGxlcnMgYXMgbmVlZGVkXG5cdH07XG59O1xuXG5leHBvcnQgY29uc3QgVmFsdmVDbGFzc05hbWVFbnVtID0ge1xuXHRBbGFybVN0YXRlOiBcIkFsYXJtU3RhdGVcIixcblx0QWN0aXZhdGVkOiBcIkFjdGl2YXRlZFwiLFxuXHREZWFjdGl2YXRlZDogXCJEZWFjdGl2YXRlZFwiLFxuXHRNYW51YWw6IFwiTWFudWFsXCIsXG5cdE1hc2tlZDogXCJNYXNrZWRcIixcblx0Q2hhbmdpbmc6IFwiQ2hhbmdpbmdcIixcblx0Tm9BbGFybU1hc2s6IFwiTm9BbGFybU1hc2tcIixcblx0TG9jYXRlOiBcIkxvY2F0ZVwiXG59O1xuZXhwb3J0IHR5cGUgVmFsdmVDbGFzc05hbWVFbnVtID1cblx0KHR5cGVvZiBWYWx2ZUNsYXNzTmFtZUVudW0pW2tleW9mIHR5cGVvZiBWYWx2ZUNsYXNzTmFtZUVudW1dO1xuZXhwb3J0IGNvbnN0IEl0ZW1OYW1lRW51bSA9IHtcblx0VjFiMTogXCJ2MWIxXCIsIC8vIGluZGV4IDBcblx0VjFiMjogXCJ2MWIyXCIsIC8vIGluZGV4IDFcblx0VjFiMzogXCJ2MWIzXCIsIC8vIGluZGV4IDJcblx0VjFiNDogXCJ2MWI0XCIsIC8vIGluZGV4IDNcblx0VjJiMTogXCJ2MmIxXCIsIC8vIGluZGV4IDRcblx0VjJiMjogXCJ2MmIyXCIsIC8vIGluZGV4IDVcblx0VjJiMzogXCJ2MmIzXCIsIC8vIGluZGV4IDZcblx0VjJiNDogXCJ2MmI0XCIsIC8vIGluZGV4IDdcblx0VjNiMTogXCJ2M2IxXCIsIC8vIGluZGV4IDhcblx0VjNiMjogXCJ2M2IyXCIsIC8vIGluZGV4IDlcblx0VjNiMzogXCJ2M2IzXCIsIC8vIGluZGV4IDEwXG5cdFYzYjQ6IFwidjNiNFwiLCAvLyBpbmRleCAxMVxuXHRWMjogXCJ2MlwiLCAvLyBpbmRleCAxMlxuXHRWMzogXCJ2M1wiLCAvLyBpbmRleCAxM1xuXHRWMTogXCJ2MVwiLCAvLyBpbmRleCAxNFxuXHRWMmYxOiBcInYyZjFcIiwgLy8gaW5kZXggMTVcblx0VjJmMjogXCJ2MmYyXCIsIC8vIGluZGV4IDE2XG5cdFYzZjE6IFwidjNmMVwiLCAvLyBpbmRleCAxN1xuXHRWM2YyOiBcInYzZjJcIiwgLy8gaW5kZXggMThcbn07XG5leHBvcnQgdHlwZSBJdGVtTmFtZUVudW0gPSAodHlwZW9mIEl0ZW1OYW1lRW51bSlba2V5b2YgdHlwZW9mIEl0ZW1OYW1lRW51bV07XG5leHBvcnQgY29uc3QgdmFsdmVNcEl0ZW1OYW1lRW51bSA9IHtcblx0VjFiMTogXCJ2MWIxXCIsIC8vIGluZGV4IDBcblx0VjFiMjogXCJ2MWIyXCIsIC8vIGluZGV4IDFcblx0VjFiMzogXCJ2MWIzXCIsIC8vIGluZGV4IDJcblx0VjFiNDogXCJ2MWI0XCIsIC8vIGluZGV4IDNcblx0VjJiMTogXCJ2MmIxXCIsIC8vIGluZGV4IDRcblx0VjJiMjogXCJ2MmIyXCIsIC8vIGluZGV4IDVcblx0VjJiMzogXCJ2MmIzXCIsIC8vIGluZGV4IDZcblx0VjJiNDogXCJ2MmI0XCIsIC8vIGluZGV4IDdcblx0VjI6IFwidjJcIiwgLy8gaW5kZXggOFxuXHRWMTogXCJ2MVwiLCAvLyBpbmRleCA5XG5cdHVzbDogXCJ1c2xcIiwgLy8gaW5kZXggMTAgdXBwZXItc2VhdC1saWZ0XG5cdGxzbDogXCJsc2xcIiwgLy8gaW5kZXggMTEgbG93ZXItc2VhdC1saWZ0XG5cdGxvY2F0ZTogXCJsb2NhdGVcIiAvLyBpbmRleCAxMiBsb2NhdGUgYW5pbWF0aW9uXG59O1xuZXhwb3J0IHR5cGUgdmFsdmVNcEl0ZW1OYW1lRW51bSA9ICh0eXBlb2YgdmFsdmVNcEl0ZW1OYW1lRW51bSlba2V5b2YgdHlwZW9mIHZhbHZlTXBJdGVtTmFtZUVudW1dO1xuXG5leHBvcnQgY29uc3QgSXRlbUNsaWNrYWJsZU5hbWVFbnVtID0ge1xuXHRWMWIxOiBcInYxYjFcIiwgLy8gaW5kZXggMFxuXHRWMWIyOiBcInYxYjJcIiwgLy8gaW5kZXggMVxuXHRWMWIzOiBcInYxYjNcIiwgLy8gaW5kZXggMlxuXHRWMWI0OiBcInYxYjRcIiwgLy8gaW5kZXggM1xuXHRWMmIxOiBcInYyYjFcIiwgLy8gaW5kZXggNFxuXHRWMmIyOiBcInYyYjJcIiwgLy8gaW5kZXggNVxuXHRWMmIzOiBcInYyYjNcIiwgLy8gaW5kZXggNlxuXHRWMmI0OiBcInYyYjRcIiwgLy8gaW5kZXggN1xuXHRWM2IxOiBcInYzYjFcIiwgLy8gaW5kZXggOFxuXHRWM2IyOiBcInYzYjJcIiwgLy8gaW5kZXggOVxuXHRWM2IzOiBcInYzYjNcIiwgLy8gaW5kZXggMTBcblx0VjNiNDogXCJ2M2I0XCIsIC8vIGluZGV4IDExXG5cdFYyOiBcInYyXCIsIC8vIGluZGV4IDEyXG5cdFYzOiBcInYzXCIsIC8vIGluZGV4IDEzXG5cdFYxOiBcInYxXCIsIC8vIGluZGV4IDE0XG59O1xuZXhwb3J0IHR5cGUgSXRlbUNsaWNrYWJsZU5hbWVFbnVtID1cblx0KHR5cGVvZiBJdGVtQ2xpY2thYmxlTmFtZUVudW0pW2tleW9mIHR5cGVvZiBJdGVtQ2xpY2thYmxlTmFtZUVudW1dO1xuZXhwb3J0IGNvbnN0IHZhbHZlTXBJdGVtQ2xpY2thYmxlTmFtZUVudW0gPSB7XG5cdFYxYjE6IFwidjFiMVwiLCAvLyBpbmRleCAwXG5cdFYxYjI6IFwidjFiMlwiLCAvLyBpbmRleCAxXG5cdFYxYjM6IFwidjFiM1wiLCAvLyBpbmRleCAyXG5cdFYxYjQ6IFwidjFiNFwiLCAvLyBpbmRleCAzXG5cdFYyYjE6IFwidjJiMVwiLCAvLyBpbmRleCA0XG5cdFYyYjI6IFwidjJiMlwiLCAvLyBpbmRleCA1XG5cdFYyYjM6IFwidjJiM1wiLCAvLyBpbmRleCA2XG5cdFYyYjQ6IFwidjJiNFwiLCAvLyBpbmRleCA3XG5cdFYyOiBcInYyXCIsIC8vIGluZGV4IDhcblx0VjE6IFwidjFcIiwgLy8gaW5kZXggOVxufTtcbmV4cG9ydCB0eXBlIHZhbHZlTXBJdGVtQ2xpY2thYmxlTmFtZUVudW0gPVxuXHQodHlwZW9mIHZhbHZlTXBJdGVtQ2xpY2thYmxlTmFtZUVudW0pW2tleW9mIHR5cGVvZiB2YWx2ZU1wSXRlbUNsaWNrYWJsZU5hbWVFbnVtXTtcblxuZXhwb3J0IGNvbnN0IEl0ZW1Qb3NpdGlvbkVudW0gPSB7XG5cdHYxYjE6IFwidjFiMVwiLFxuXHR2MWIyOiBcInYxYjJcIixcblx0djFiMzogXCJ2MWIzXCIsXG5cdHYxYjQ6IFwidjFiNFwiLFxuXHR2MmIxOiBcInYyYjFcIixcblx0VjJiMjogXCJ2MmIyXCIsXG5cdHYyYjM6IFwidjJiM1wiLFxuXHR2MmI0OiBcInYyYjRcIixcblx0djNiMTogXCJ2M2IxXCIsXG5cdHYzYjI6IFwidjNiMlwiLFxuXHR2M2IzOiBcInYzYjNcIixcblx0djNiNDogXCJ2M2I0XCIsXG5cdHYyOiBcInYyXCIsXG5cdHYzOiBcInYzXCIsXG59O1xuZXhwb3J0IHR5cGUgSXRlbVBvc2l0aW9uRW51bSA9XG5cdCh0eXBlb2YgSXRlbVBvc2l0aW9uRW51bSlba2V5b2YgdHlwZW9mIEl0ZW1Qb3NpdGlvbkVudW1dO1xuXG5jb25zdCBWYWx2ZVN0YXRlRW51bSA9IHtcblx0YWxhcm06IFwiYWxhcm1cIixcblx0bWFudWFsOiBcIm1hbnVhbFwiLFxuXHRtYXNrZWQ6IFwibWFza2VkXCIsXG59O1xuZXhwb3J0IHR5cGUgVmFsdmVTdGF0ZUVudW0gPVxuXHQodHlwZW9mIFZhbHZlU3RhdGVFbnVtKVtrZXlvZiB0eXBlb2YgVmFsdmVTdGF0ZUVudW1dO1xuXG5jb25zdCBpdGVtSWRQb3NpdGlvbnMgPSBbXG5cdCdyaWdodCcsXG5cdCdsZWZ0Jyxcblx0J3RvcC1sZWZ0Jyxcblx0J3RvcC1yaWdodCcsXG5cdCdib3R0b20tbGVmdCcsXG5cdCdib3R0b20tcmlnaHQnXG5dO1xuXG5leHBvcnQgdHlwZSBJdGVtSWRQb3NpdGlvblR5cGUgPSB0eXBlb2YgaXRlbUlkUG9zaXRpb25zW251bWJlcl07XG5leHBvcnQgdHlwZSBQcm9jZXNzT2JqZWN0ID0ge1xuXHRzdGF0dXM6IFZhbHZlU3RhdGVcbn1cbmV4cG9ydCB0eXBlIFZhbHZlUHJvcHMgPSB7XG5cdHByb2Nlc3NPYmplY3Q/OlByb2Nlc3NPYmplY3Q7XG5cdGxhYmVsUG9zaXRpb24/Okl0ZW1JZFBvc2l0aW9uVHlwZTtcblx0c2hvd0xhYmVsPzogYm9vbGVhbjtcblx0aGFuZGxlQ2xpY2s/OiAoKSA9PiB2b2lkO1xufTtcblxuZXhwb3J0IHR5cGUgSXRlbURhdGEgPSB7XG5cdGtleTogc3RyaW5nO1xuXHR2YWx1ZTogc3RyaW5nO1xuXHRwcm9wczogVmFsdmVTdGF0ZTtcbn07XG4vKipcbiAqIGRyYWdnYWJsZSBjb21wb25lbnQgdHlwZXNcbiAqL1xuLy8gZXhwb3J0IHR5cGUgRHJhZ2dhYmxlSXRlbSA9IHtcbi8vIFx0aWQ6IFVuaXF1ZUlkZW50aWZpZXI7XG4vLyBcdGxlZnQ6IG51bWJlcjtcbi8vIFx0dG9wOiBudW1iZXI7XG4vLyB9XG5cbi8vIGV4cG9ydCB0eXBlIERyYWdnYWJsZVByb3BzID0ge1xuLy8gXHRpZDogVW5pcXVlSWRlbnRpZmllcixcbi8vIFx0b25DbG9zZTogKGlkOiBVbmlxdWVJZGVudGlmaWVyKT0+IHZvaWQsXG4vLyBcdGVsZW1lbnQ/OiBrZXlvZiBIVE1MRWxlbWVudCxcbi8vIFx0bGVmdDogbnVtYmVyO1xuLy8gXHR0b3AgOiBudW1iZXI7XG4vLyBcdGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGU7XG4vLyBcdGNsYXNzTmFtZTogc3RyaW5nO1xuLy8gfVxuZXhwb3J0IHR5cGUgaXRlbU5hbWVQcm9wcyA9IHtcblx0XHRcdGtleTogc3RyaW5nLFxuXHRcdFx0bmFtZTogW3N0cmluZyxzdHJpbmddLFxuXHRcdFx0dmFsdWU6IHN0cmluZyxcblx0XHRcdGluZGV4OiBudW1iZXIsXG59XG5leHBvcnQgdHlwZSBDb21tYW5kVmFsdmVNcFByb3BzID0ge1xuXHRzZWN1cml0eT86e1xuXHRcdGVuYWJsZWQ6IGJvb2xlYW47XG5cdFx0YWNjZXNzbGV2ZWw6IG51bWJlcjtcblx0XHR1c2VyTmFtZXM6IHN0cmluZ1tdO1xuXHRcdHVzZXJSb2xlczogc3RyaW5nW107fSxcblx0aW50ZXJsb2Nrcz86e1xuXHRcdG1haW46IGJvb2xlYW5bXTtcblx0XHR1cHBlclNlYXQ6IGJvb2xlYW5bXTtcblx0XHRsb3dlclNlYXQ6IGJvb2xlYW5bXTt9LFxuXHRtYWluPzp7XG5cdGxhYmVsOiBzdHJpbmc7XG5cdGF1dG86IGJvb2xlYW47XG5cdC8vIG9uQWN0aW9uUGVyZm9ybWVkX19hdXRvOiAoKSA9PiB2b2lkO1xuXHRtYW51YWw6IGJvb2xlYW47XG5cdC8vIG9uQWN0aW9uUGVyZm9ybWVkX19tYW51YWw6ICgpID0+IHZvaWQ7XG5cdG9mZjogYm9vbGVhbjtcblx0Ly8gb25BY3Rpb25QZXJmb3JtZWRfX29uOiAoKSA9PiB2b2lkO1xuXHRvbjogYm9vbGVhbjtcblx0Ly8gb25BY3Rpb25QZXJmb3JtZWRfX29mZjogKCkgPT4gdm9pZDt9LFxuXHR9LFxuXHR1cHBlclNlYXQ/Ontcblx0bGFiZWw6IHN0cmluZztcblx0b2ZmOiBib29sZWFuO1xuXHRvbjogYm9vbGVhbjtcblx0Ly8gb25BY3Rpb25QZXJmb3JtZWRfX29mZjogUmVhY3QuTW91c2VFdmVudEhhbmRsZXIgO1xuXHQvLyBvbkFjdGlvblBlcmZvcm1lZF9fb246IFJlYWN0Lk1vdXNlRXZlbnRIYW5kbGVyIDtcbn0sXG5cdGxvd2VyU2VhdD86e1xuXHRsYWJlbDogc3RyaW5nO1xuXHRvZmY6IGJvb2xlYW47XG5cdG9uOiBib29sZWFuO1xuXHQvLyBvbkFjdGlvblBlcmZvcm1lZF9fb2ZmOiBSZWFjdC5Nb3VzZUV2ZW50SGFuZGxlciA7XG5cdC8vIG9uQWN0aW9uUGVyZm9ybWVkX19vbjogUmVhY3QuTW91c2VFdmVudEhhbmRsZXIgO1xufSxcbn1cblxuXG5leHBvcnQgdHlwZSBDb21tYW5kc1ZhbHZlTXBDb21wb3VuZENvbnRleHRUeXBlID0ge1xuXHRjb21wb25lbnRQcm9wczpDb21wb25lbnRQcm9wczxhbnksYW55Pixcblx0dXNlUmVkdWNlcjogVXNlVmFsdmVNcENvbW1hbmRSZWR1Y2VyO1xuXHRjaGlsZHJlbjogUmVhY3ROb2RlO1xufTtcbmV4cG9ydCB0eXBlIENvbW1hbmRzVmFsdmVNcENvbXBvdW5kUm9vdFByb3BzID0ge1xuXHRjb21wb25lbnRQcm9wczpDb21wb25lbnRQcm9wczxhbnksYW55Pixcblx0Y29tbWFuZDogQ29tbWFuZFZhbHZlTXBQcm9wcztcblx0Y2hpbGRyZW46IFJlYWN0Tm9kZTtcbn1cbi8qKlxuICogRGVmaW5lIHRoZSBzaGFwZSBvZiB0aGUgVmFsdmVBY3Rpb24gdHlwZVxuICogQFVzZWFnZSB1c2VWYWx2ZVJlZHVjZXJcbiAqL1xuZXhwb3J0IHR5cGUgVmFsdmVNcENvbW1hbmRBY3Rpb24gPVxuXHR8IHsgdHlwZTogXCJVUERBVEVfQVVUT19NQU5VQUxcIiwgbW9kZTpcImF1dG9cInwgXCJtYW51YWxcIn1cblx0fCB7IHR5cGU6IFwiVVBEQVRFX01BSU5fTUFOX09OXCJ9XG5cdHwgeyB0eXBlOiBcIlVQREFURV9NQUlOX01BTl9PRkZcIn1cblx0fCB7IHR5cGU6IFwiVVBEQVRFX1VTTF9NQU5fT05cIn1cblx0fCB7IHR5cGU6IFwiVVBEQVRFX1VTTF9NQU5fT0ZGXCJ9XG5cdHwgeyB0eXBlOiBcIlVQREFURV9MU0xfTUFOX09OXCJ9XG5cdHwgeyB0eXBlOiBcIlVQREFURV9MU0xfTUFOX09GRlwifVxuXG5cdDtcbmV4cG9ydCB0eXBlIFZhbHZlTXBDb21tYW5kUmVkdWNlciA9IChcblx0c3RhdGU6IENvbW1hbmRWYWx2ZU1wUHJvcHMsXG5cdGFjdGlvbjogVmFsdmVNcENvbW1hbmRBY3Rpb25cbikgPT4gVmFsdmVTdGF0ZTtcblxuZXhwb3J0IHR5cGUgVXNlVmFsdmVNcENvbW1hbmRSZWR1Y2VyID0ge1xuXHRzdGF0ZTogQ29tbWFuZFZhbHZlTXBQcm9wcztcblx0cmVkdWNlcjoge1xuXHRcdHVwZGF0ZUF1dG9NYW5TZWxlY3Rpb246KG1vZGU6XCJhdXRvXCJ8IFwibWFudWFsXCIpID0+IHZvaWQ7XG5cdFx0dXBkYXRlTWFpbk1hbnVhbE9uOiAoKSA9PiB2b2lkO1xuXHRcdHVwZGF0ZU1haW5NYW51YWxPZmY6ICgpID0+IHZvaWQ7XG5cdFx0dXBkYXRlVXNsTWFudWFsT246ICgpID0+IHZvaWQ7XG5cdFx0dXBkYXRlVXNsTWFudWFsT2ZmOiAoKSA9PiB2b2lkO1xuXHRcdHVwZGF0ZUxzbE1hbnVhbE9uOiAoKSA9PiB2b2lkO1xuXHRcdHVwZGF0ZUxzbE1hbnVhbE9mZjogKCkgPT4gdm9pZDtcblx0XHQvL2FkZCBtb3JlIGhhbmRsZXJzIGFzIG5lZWRlZFxuXHR9O1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5VUkwgPSBleHBvcnRzLkROUyA9IHZvaWQgMDtcbmNvbnN0IHNoYTFfanNfMSA9IHJlcXVpcmUoXCIuL3NoYTEuanNcIik7XG5jb25zdCB2MzVfanNfMSA9IHJlcXVpcmUoXCIuL3YzNS5qc1wiKTtcbnZhciB2MzVfanNfMiA9IHJlcXVpcmUoXCIuL3YzNS5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkROU1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdjM1X2pzXzIuRE5TOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVVJMXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2MzVfanNfMi5VUkw7IH0gfSk7XG5mdW5jdGlvbiB2NSh2YWx1ZSwgbmFtZXNwYWNlLCBidWYsIG9mZnNldCkge1xuICAgIHJldHVybiAoMCwgdjM1X2pzXzEuZGVmYXVsdCkoMHg1MCwgc2hhMV9qc18xLmRlZmF1bHQsIHZhbHVlLCBuYW1lc3BhY2UsIGJ1Ziwgb2Zmc2V0KTtcbn1cbnY1LkROUyA9IHYzNV9qc18xLkROUztcbnY1LlVSTCA9IHYzNV9qc18xLlVSTDtcbmV4cG9ydHMuZGVmYXVsdCA9IHY1O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBwYXJzZV9qc18xID0gcmVxdWlyZShcIi4vcGFyc2UuanNcIik7XG5jb25zdCBzdHJpbmdpZnlfanNfMSA9IHJlcXVpcmUoXCIuL3N0cmluZ2lmeS5qc1wiKTtcbmZ1bmN0aW9uIHYxVG9WNih1dWlkKSB7XG4gICAgY29uc3QgdjFCeXRlcyA9IHR5cGVvZiB1dWlkID09PSAnc3RyaW5nJyA/ICgwLCBwYXJzZV9qc18xLmRlZmF1bHQpKHV1aWQpIDogdXVpZDtcbiAgICBjb25zdCB2NkJ5dGVzID0gX3YxVG9WNih2MUJ5dGVzKTtcbiAgICByZXR1cm4gdHlwZW9mIHV1aWQgPT09ICdzdHJpbmcnID8gKDAsIHN0cmluZ2lmeV9qc18xLnVuc2FmZVN0cmluZ2lmeSkodjZCeXRlcykgOiB2NkJ5dGVzO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gdjFUb1Y2O1xuZnVuY3Rpb24gX3YxVG9WNih2MUJ5dGVzKSB7XG4gICAgcmV0dXJuIFVpbnQ4QXJyYXkub2YoKCh2MUJ5dGVzWzZdICYgMHgwZikgPDwgNCkgfCAoKHYxQnl0ZXNbN10gPj4gNCkgJiAweDBmKSwgKCh2MUJ5dGVzWzddICYgMHgwZikgPDwgNCkgfCAoKHYxQnl0ZXNbNF0gJiAweGYwKSA+PiA0KSwgKCh2MUJ5dGVzWzRdICYgMHgwZikgPDwgNCkgfCAoKHYxQnl0ZXNbNV0gJiAweGYwKSA+PiA0KSwgKCh2MUJ5dGVzWzVdICYgMHgwZikgPDwgNCkgfCAoKHYxQnl0ZXNbMF0gJiAweGYwKSA+PiA0KSwgKCh2MUJ5dGVzWzBdICYgMHgwZikgPDwgNCkgfCAoKHYxQnl0ZXNbMV0gJiAweGYwKSA+PiA0KSwgKCh2MUJ5dGVzWzFdICYgMHgwZikgPDwgNCkgfCAoKHYxQnl0ZXNbMl0gJiAweGYwKSA+PiA0KSwgMHg2MCB8ICh2MUJ5dGVzWzJdICYgMHgwZiksIHYxQnl0ZXNbM10sIHYxQnl0ZXNbOF0sIHYxQnl0ZXNbOV0sIHYxQnl0ZXNbMTBdLCB2MUJ5dGVzWzExXSwgdjFCeXRlc1sxMl0sIHYxQnl0ZXNbMTNdLCB2MUJ5dGVzWzE0XSwgdjFCeXRlc1sxNV0pO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlVSTCA9IGV4cG9ydHMuRE5TID0gdm9pZCAwO1xuY29uc3QgbWQ1X2pzXzEgPSByZXF1aXJlKFwiLi9tZDUuanNcIik7XG5jb25zdCB2MzVfanNfMSA9IHJlcXVpcmUoXCIuL3YzNS5qc1wiKTtcbnZhciB2MzVfanNfMiA9IHJlcXVpcmUoXCIuL3YzNS5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkROU1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdjM1X2pzXzIuRE5TOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVVJMXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2MzVfanNfMi5VUkw7IH0gfSk7XG5mdW5jdGlvbiB2Myh2YWx1ZSwgbmFtZXNwYWNlLCBidWYsIG9mZnNldCkge1xuICAgIHJldHVybiAoMCwgdjM1X2pzXzEuZGVmYXVsdCkoMHgzMCwgbWQ1X2pzXzEuZGVmYXVsdCwgdmFsdWUsIG5hbWVzcGFjZSwgYnVmLCBvZmZzZXQpO1xufVxudjMuRE5TID0gdjM1X2pzXzEuRE5TO1xudjMuVVJMID0gdjM1X2pzXzEuVVJMO1xuZXhwb3J0cy5kZWZhdWx0ID0gdjM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9IC9eKD86WzAtOWEtZl17OH0tWzAtOWEtZl17NH0tWzEtOF1bMC05YS1mXXszfS1bODlhYl1bMC05YS1mXXszfS1bMC05YS1mXXsxMn18MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwfGZmZmZmZmZmLWZmZmYtZmZmZi1mZmZmLWZmZmZmZmZmZmZmZikkL2k7XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB0eXBlIHtcblx0VmFsdmVDb21wb3VuZENvbnRleHRUeXBlLFxuXHRWYWx2ZUNvbXBvdW5kUm9vdFByb3BzLFxufSBmcm9tIFwiLi4vLi4vLi4vYXBpL3R5cGVzXCI7XG5pbXBvcnQgeyB1c2VWYWx2ZVJlZHVjZXIgfSBmcm9tIFwiLi4vLi4vLi4vYXBpL2hvb2tzXCI7XG5pbXBvcnQgeyBnZXRJdGVtSWRQb3NpdGlvbkNsYXNzTmFtZSwgZ2V0VmFsdmVNcEl0ZW1DbGFzc05hbWUsIHZhbHZlTXBJdGVtTmFtZXMgfSBmcm9tIFwiLi4vLi4vLi4vYXBpL3V0aWxzXCI7XG5pbXBvcnQgSXRlbSBmcm9tIFwiLi4vdmFsdmUvaXRlbVwiO1xuaW1wb3J0IHsgdXNlQ3JlYXRlQ29udGV4dCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9jcmVhdGVDb250ZXh0XCI7XG5pbXBvcnQgeyBWQUxWRV9DT01QT05FTlRfVFlQRSB9IGZyb20gXCIuLi8uLi8uLi9hcGkvdHlwZXNcIjtcbmltcG9ydCB7IHByb2Nlc3NPYmplY3RQcm9wcyB9IGZyb20gXCIuLi8uLi8uLi9hcGkvaW5pdGlhbFN0YXRlXCI7XG5cbi8vIGltcG9ydCAnLi92YWx2ZS1tcC5tb2R1bGUuY3NzJ1xuLy8gaW1wb3J0IHt2YWx2ZVN0YXR1c30gZnJvbSAnLi4vLi4vYXBpL2luaXRpYWxTdGF0ZSdcbmNvbnN0IENPTVBPTkVOVF9UWVBFID0gVkFMVkVfQ09NUE9ORU5UX1RZUEU7XG5cbi8vIGltcG9ydCB7dmFsdmVTdGF0dXN9IGZyb20gJy4vaW5pdGlhbFN0YXRlJ1xuXG5leHBvcnQgY29uc3QgW1ZhbHZlQ29udGV4dFByb3ZpZGVyLCB1c2VWYWx2ZUNvbnRleHRdID1cblx0dXNlQ3JlYXRlQ29udGV4dDxWYWx2ZUNvbXBvdW5kQ29udGV4dFR5cGU+KFwiVmFsdmVNcENvbXBvdW5kXCIpO1xuXG5jb25zdCBSb290ID0gKHtcblx0Y29tcG9uZW50UHJvcHMsXG5cdHZhbHZlUHJvcHMsXG5cdG9uQWN0aW9uUGVyZm9ybWVkLFxuXHRjaGlsZHJlbixcbn06IFZhbHZlQ29tcG91bmRSb290UHJvcHMpID0+IHtcblx0cmV0dXJuIChcblx0XHQ8VmFsdmVDb250ZXh0UHJvdmlkZXJcblx0XHRcdHsuLi57XG5cdFx0XHRcdHZhbHZlUHJvcHMsXG5cdFx0XHRcdGNvbXBvbmVudFByb3BzLFxuXHRcdFx0XHRvbkFjdGlvblBlcmZvcm1lZCxcblx0XHRcdFx0dXNlVmFsdmVSZWR1Y2VyLFxuXHRcdFx0fX1cblx0XHQ+XG5cdFx0XHR7Y2hpbGRyZW59XG5cdFx0PC9WYWx2ZUNvbnRleHRQcm92aWRlcj5cblx0KTtcbn07XG5jb25zdCB2YWx2ZSA9ICgpID0+IHtcblx0Y29uc3QgeyB2YWx2ZVByb3BzLCBvbkFjdGlvblBlcmZvcm1lZCwgY29tcG9uZW50UHJvcHMgfSA9XG5cdFx0dXNlVmFsdmVDb250ZXh0KFwiVmFsdmVcIik7XG5cdFx0Y29uc3QgdmFsdmVSZWYgPSBSZWFjdC51c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpXG5cdGNvbnN0IHsgcG9zaXRpb24sIGVtaXQgfSA9IGNvbXBvbmVudFByb3BzO1xuXHRjb25zdCB7IHByb2Nlc3NPYmplY3R9ID0gdmFsdmVQcm9wcztcblx0Y29uc3QgeyBzdGF0dXMgfSA9IHByb2Nlc3NPYmplY3QgfHwgcHJvY2Vzc09iamVjdFByb3BzO1xuXHRjb25zdCBpbkNvb3JkID0gcG9zaXRpb24/LnggPz8gZmFsc2U7XG5cdC8vIGlmIG5vdCBsb2NhdGUsIHRyaW0gbGFzdCBpdGVtIGZyb20gdmFsdmVNcEl0ZW1OYW1lc1xuXHRsZXQgY29tcG9uZW50SXRlbU5hbWVzID0gdmFsdmVNcEl0ZW1OYW1lcztcblx0aWYgKCFzdGF0dXM/LmxvY2F0ZSkge1xuXHRcdGNvbXBvbmVudEl0ZW1OYW1lcyA9IGNvbXBvbmVudEl0ZW1OYW1lcy5zbGljZSgwLCAtMSk7XG5cdH1cblxuXHRpZiAoIWluQ29vcmQpIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0PGRpdlxuXHRcdFx0cmVmPXt2YWx2ZVJlZn1cblx0XHRcdHsuLi5lbWl0KHtcblx0XHRcdFx0Y2xhc3NlczogW2BobWktY29tcG9uZW50IGhtaS1jb21wb25lbnRfX2NvbHVtbiBgXSxcblx0XHRcdH0pfVxuXHRcdFx0XHRkYXRhLWNvbXBvbmVudD17Q09NUE9ORU5UX1RZUEV9XG5cdFx0XHRcdG9uQ2xpY2s9e29uQWN0aW9uUGVyZm9ybWVkfVxuXHRcdFx0PlxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImhtaS1jb21wb25lbnRfX3Jvd1wiPlxuXHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiaG1pLWNvbXBvbmVudC12YWx2ZV9fbXBcIj5cblx0XHRcdFx0XHRcdHtjb21wb25lbnRJdGVtTmFtZXMubWFwKFxuXHRcdFx0XHRcdFx0XHQoeyB2YWx1ZSwgaW5kZXgsIGtleSB9KSA9PiAoXG5cdFx0XHRcdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coXG5cdFx0XHRcdFx0XHRcdFx0Ly8gXHRgcmUtcmVuZGVyZWQgLGtleSAke2tleX0gdmFsdWUgJHt2YWx1ZX0gaW5kZXggJHtpbmRleH1gXG5cdFx0XHRcdFx0XHRcdFx0Ly8gKSxcblx0XHRcdFx0XHRcdFx0XHQoXG5cdFx0XHRcdFx0XHRcdFx0XHQ8SXRlbVxuXHRcdFx0XHRcdFx0XHRcdFx0aXRlbUNsYXNzTmFtZT17XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHZhbHVlICsgXCIgXCIgKyBnZXRWYWx2ZU1wSXRlbUNsYXNzTmFtZShpbmRleCwgc3RhdHVzKVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0a2V5PXtrZXl9XG5cdFx0XHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KX1cblx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2Rpdj5cblx0XHQpO1xuXHR9IGVsc2Uge1xuXHRcdHJldHVybiAoXG5cdFx0XHQ8ZGl2XG5cdFx0XHRyZWY9e3ZhbHZlUmVmfVxuXHRcdFx0ey4uLmVtaXQoe1xuXHRcdFx0XHRjbGFzc2VzOiBbYGhtaS1jb21wb25lbnQgaG1pLWNvbXBvbmVudC12YWx2ZV9fbXAgYF0sXG5cdFx0XHR9KX1cblx0XHRcdGRhdGEtY29tcG9uZW50PXtDT01QT05FTlRfVFlQRX1cblx0XHRcdG9uQ2xpY2s9e29uQWN0aW9uUGVyZm9ybWVkfVxuXHRcdFx0PlxuXHRcdFx0XHR7Y29tcG9uZW50SXRlbU5hbWVzLm1hcChcblx0XHRcdFx0XHQoeyB2YWx1ZSwgaW5kZXgsIGtleSB9KSA9PiAoXG5cdFx0XHRcdFx0XHQvLyBjb25zb2xlLmxvZyhcblx0XHRcdFx0XHRcdC8vIFx0YHJlLXJlbmRlcmVkICxrZXkgJHtrZXl9IHZhbHVlICR7dmFsdWV9IGluZGV4ICR7aW5kZXh9YFxuXHRcdFx0XHRcdFx0Ly8gKSxcblx0XHRcdFx0XHRcdChcblx0XHRcdFx0XHRcdFx0PEl0ZW1cblx0XHRcdFx0XHRcdFx0XHRpdGVtQ2xhc3NOYW1lPXtcblx0XHRcdFx0XHRcdFx0XHRcdHZhbHVlICsgXCIgXCIgKyBnZXRWYWx2ZU1wSXRlbUNsYXNzTmFtZShpbmRleCwgc3RhdHVzKVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRrZXk9e2tleX1cblx0XHRcdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHQpXG5cdFx0XHRcdCl9XG5cdFx0XHQ8L2Rpdj5cblx0XHQpO1xuXHR9XG59O1xuXG5jb25zdCBwb3BvdmVyID0gKHsgYW5jaG9yRWwgfTogeyBhbmNob3JFbDogSFRNTERpdkVsZW1lbnQgfCBudWxsIH0pID0+IHtcblx0Y29uc3QgeyB2YWx2ZVByb3BzLCBjb21wb25lbnRQcm9wcyB9ID0gdXNlVmFsdmVDb250ZXh0KFwiUG9wb3ZlclwiKTtcbiAgICBjb25zdCB7IHNob3dMYWJlbCxsYWJlbFBvc2l0aW9uLCBwcm9jZXNzT2JqZWN0IH0gPSB2YWx2ZVByb3BzO1xuXHRjb25zdCB7IHN0YXR1cyB9ID0gcHJvY2Vzc09iamVjdCB8fCBwcm9jZXNzT2JqZWN0UHJvcHM7XG5cdGlmICghc2hvd0xhYmVsKSByZXR1cm4gbnVsbDtcbiAgICBjb25zdCB7IHBvc2l0aW9uIH0gPSBjb21wb25lbnRQcm9wcztcblx0bGV0IGNsYXNzTmFtZSA9IFwiaXRlbUlkIHBvcG92ZXIgcG9zaXRpb24tbGVmdFwiO1xuXHRpZiAobGFiZWxQb3NpdGlvbikge1xuXHRcdGNsYXNzTmFtZSA9IGdldEl0ZW1JZFBvc2l0aW9uQ2xhc3NOYW1lKGNsYXNzTmFtZSwgbGFiZWxQb3NpdGlvbilcblx0fVxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXZcblx0XHRcdGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICB0b3A6IHBvc2l0aW9uLnksXG4gICAgICAgICAgICAgICAgbGVmdDogcG9zaXRpb24ueCxcbiAgICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICAgIDxkaXYgc3R5bGU9e3sgcGFkZGluZzogOCB9fT57c3RhdHVzPy5pdGVtTmFtZX08L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG5cblxuZXhwb3J0IGNvbnN0IFZhbHZlTXBDb21wb3VuZCA9IHtcblx0Um9vdCxcblx0dmFsdmUsXG5cdHBvcG92ZXIsXG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCByZWdleF9qc18xID0gcmVxdWlyZShcIi4vcmVnZXguanNcIik7XG5mdW5jdGlvbiB2YWxpZGF0ZSh1dWlkKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB1dWlkID09PSAnc3RyaW5nJyAmJiByZWdleF9qc18xLmRlZmF1bHQudGVzdCh1dWlkKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHZhbGlkYXRlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB2YWxpZGF0ZV9qc18xID0gcmVxdWlyZShcIi4vdmFsaWRhdGUuanNcIik7XG5mdW5jdGlvbiB2ZXJzaW9uKHV1aWQpIHtcbiAgICBpZiAoISgwLCB2YWxpZGF0ZV9qc18xLmRlZmF1bHQpKHV1aWQpKSB7XG4gICAgICAgIHRocm93IFR5cGVFcnJvcignSW52YWxpZCBVVUlEJyk7XG4gICAgfVxuICAgIHJldHVybiBwYXJzZUludCh1dWlkLnNsaWNlKDE0LCAxNSksIDE2KTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHZlcnNpb247XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHJhbmRvbVVVSUQgPSB0eXBlb2YgY3J5cHRvICE9PSAndW5kZWZpbmVkJyAmJiBjcnlwdG8ucmFuZG9tVVVJRCAmJiBjcnlwdG8ucmFuZG9tVVVJRC5iaW5kKGNyeXB0byk7XG5leHBvcnRzLmRlZmF1bHQgPSB7IHJhbmRvbVVVSUQgfTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdmFsaWRhdGVfanNfMSA9IHJlcXVpcmUoXCIuL3ZhbGlkYXRlLmpzXCIpO1xuZnVuY3Rpb24gcGFyc2UodXVpZCkge1xuICAgIGlmICghKDAsIHZhbGlkYXRlX2pzXzEuZGVmYXVsdCkodXVpZCkpIHtcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbnZhbGlkIFVVSUQnKTtcbiAgICB9XG4gICAgbGV0IHY7XG4gICAgcmV0dXJuIFVpbnQ4QXJyYXkub2YoKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDAsIDgpLCAxNikpID4+PiAyNCwgKHYgPj4+IDE2KSAmIDB4ZmYsICh2ID4+PiA4KSAmIDB4ZmYsIHYgJiAweGZmLCAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoOSwgMTMpLCAxNikpID4+PiA4LCB2ICYgMHhmZiwgKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDE0LCAxOCksIDE2KSkgPj4+IDgsIHYgJiAweGZmLCAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMTksIDIzKSwgMTYpKSA+Pj4gOCwgdiAmIDB4ZmYsICgodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMjQsIDM2KSwgMTYpKSAvIDB4MTAwMDAwMDAwMDApICYgMHhmZiwgKHYgLyAweDEwMDAwMDAwMCkgJiAweGZmLCAodiA+Pj4gMjQpICYgMHhmZiwgKHYgPj4+IDE2KSAmIDB4ZmYsICh2ID4+PiA4KSAmIDB4ZmYsIHYgJiAweGZmKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHBhcnNlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiBmKHMsIHgsIHksIHopIHtcbiAgICBzd2l0Y2ggKHMpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgcmV0dXJuICh4ICYgeSkgXiAofnggJiB6KTtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgcmV0dXJuIHggXiB5IF4gejtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgcmV0dXJuICh4ICYgeSkgXiAoeCAmIHopIF4gKHkgJiB6KTtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgcmV0dXJuIHggXiB5IF4gejtcbiAgICB9XG59XG5mdW5jdGlvbiBST1RMKHgsIG4pIHtcbiAgICByZXR1cm4gKHggPDwgbikgfCAoeCA+Pj4gKDMyIC0gbikpO1xufVxuZnVuY3Rpb24gc2hhMShieXRlcykge1xuICAgIGNvbnN0IEsgPSBbMHg1YTgyNzk5OSwgMHg2ZWQ5ZWJhMSwgMHg4ZjFiYmNkYywgMHhjYTYyYzFkNl07XG4gICAgY29uc3QgSCA9IFsweDY3NDUyMzAxLCAweGVmY2RhYjg5LCAweDk4YmFkY2ZlLCAweDEwMzI1NDc2LCAweGMzZDJlMWYwXTtcbiAgICBjb25zdCBuZXdCeXRlcyA9IG5ldyBVaW50OEFycmF5KGJ5dGVzLmxlbmd0aCArIDEpO1xuICAgIG5ld0J5dGVzLnNldChieXRlcyk7XG4gICAgbmV3Qnl0ZXNbYnl0ZXMubGVuZ3RoXSA9IDB4ODA7XG4gICAgYnl0ZXMgPSBuZXdCeXRlcztcbiAgICBjb25zdCBsID0gYnl0ZXMubGVuZ3RoIC8gNCArIDI7XG4gICAgY29uc3QgTiA9IE1hdGguY2VpbChsIC8gMTYpO1xuICAgIGNvbnN0IE0gPSBuZXcgQXJyYXkoTik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBOOyArK2kpIHtcbiAgICAgICAgY29uc3QgYXJyID0gbmV3IFVpbnQzMkFycmF5KDE2KTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCAxNjsgKytqKSB7XG4gICAgICAgICAgICBhcnJbal0gPVxuICAgICAgICAgICAgICAgIChieXRlc1tpICogNjQgKyBqICogNF0gPDwgMjQpIHxcbiAgICAgICAgICAgICAgICAgICAgKGJ5dGVzW2kgKiA2NCArIGogKiA0ICsgMV0gPDwgMTYpIHxcbiAgICAgICAgICAgICAgICAgICAgKGJ5dGVzW2kgKiA2NCArIGogKiA0ICsgMl0gPDwgOCkgfFxuICAgICAgICAgICAgICAgICAgICBieXRlc1tpICogNjQgKyBqICogNCArIDNdO1xuICAgICAgICB9XG4gICAgICAgIE1baV0gPSBhcnI7XG4gICAgfVxuICAgIE1bTiAtIDFdWzE0XSA9ICgoYnl0ZXMubGVuZ3RoIC0gMSkgKiA4KSAvIE1hdGgucG93KDIsIDMyKTtcbiAgICBNW04gLSAxXVsxNF0gPSBNYXRoLmZsb29yKE1bTiAtIDFdWzE0XSk7XG4gICAgTVtOIC0gMV1bMTVdID0gKChieXRlcy5sZW5ndGggLSAxKSAqIDgpICYgMHhmZmZmZmZmZjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IE47ICsraSkge1xuICAgICAgICBjb25zdCBXID0gbmV3IFVpbnQzMkFycmF5KDgwKTtcbiAgICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCAxNjsgKyt0KSB7XG4gICAgICAgICAgICBXW3RdID0gTVtpXVt0XTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCB0ID0gMTY7IHQgPCA4MDsgKyt0KSB7XG4gICAgICAgICAgICBXW3RdID0gUk9UTChXW3QgLSAzXSBeIFdbdCAtIDhdIF4gV1t0IC0gMTRdIF4gV1t0IC0gMTZdLCAxKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgYSA9IEhbMF07XG4gICAgICAgIGxldCBiID0gSFsxXTtcbiAgICAgICAgbGV0IGMgPSBIWzJdO1xuICAgICAgICBsZXQgZCA9IEhbM107XG4gICAgICAgIGxldCBlID0gSFs0XTtcbiAgICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCA4MDsgKyt0KSB7XG4gICAgICAgICAgICBjb25zdCBzID0gTWF0aC5mbG9vcih0IC8gMjApO1xuICAgICAgICAgICAgY29uc3QgVCA9IChST1RMKGEsIDUpICsgZihzLCBiLCBjLCBkKSArIGUgKyBLW3NdICsgV1t0XSkgPj4+IDA7XG4gICAgICAgICAgICBlID0gZDtcbiAgICAgICAgICAgIGQgPSBjO1xuICAgICAgICAgICAgYyA9IFJPVEwoYiwgMzApID4+PiAwO1xuICAgICAgICAgICAgYiA9IGE7XG4gICAgICAgICAgICBhID0gVDtcbiAgICAgICAgfVxuICAgICAgICBIWzBdID0gKEhbMF0gKyBhKSA+Pj4gMDtcbiAgICAgICAgSFsxXSA9IChIWzFdICsgYikgPj4+IDA7XG4gICAgICAgIEhbMl0gPSAoSFsyXSArIGMpID4+PiAwO1xuICAgICAgICBIWzNdID0gKEhbM10gKyBkKSA+Pj4gMDtcbiAgICAgICAgSFs0XSA9IChIWzRdICsgZSkgPj4+IDA7XG4gICAgfVxuICAgIHJldHVybiBVaW50OEFycmF5Lm9mKEhbMF0gPj4gMjQsIEhbMF0gPj4gMTYsIEhbMF0gPj4gOCwgSFswXSwgSFsxXSA+PiAyNCwgSFsxXSA+PiAxNiwgSFsxXSA+PiA4LCBIWzFdLCBIWzJdID4+IDI0LCBIWzJdID4+IDE2LCBIWzJdID4+IDgsIEhbMl0sIEhbM10gPj4gMjQsIEhbM10gPj4gMTYsIEhbM10gPj4gOCwgSFszXSwgSFs0XSA+PiAyNCwgSFs0XSA+PiAxNiwgSFs0XSA+PiA4LCBIWzRdKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHNoYTE7XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7XG5cdFByb3BlcnR5VHJlZSxcbn0gZnJvbSAnQGluZHVjdGl2ZWF1dG9tYXRpb24vcGVyc3BlY3RpdmUtY2xpZW50JztcbmltcG9ydCB0eXBlIHtcblx0Q29tcG9uZW50UHJvcHNcblx0LENvbXBvbmVudE1ldGFcblx0LFBDb21wb25lbnRcblx0LFNpemVPYmplY3Rcbn0gZnJvbSAnQGluZHVjdGl2ZWF1dG9tYXRpb24vcGVyc3BlY3RpdmUtY2xpZW50JztcblxuLy8gaW1wb3J0IHsgdXNlQ3JlYXRlQ29udGV4dCB9IGZyb20gXCJzcmMvdXRpbHMvY3JlYXRlQ29udGV4dFwiO1xuaW1wb3J0IHsgUGFyYW1ldGVyc0xpc3RTdGF0ZSwgUGFyYW1JdGVtIH0gZnJvbSBcIi4uL2FwaS90eXBlc1wiO1xuaW1wb3J0IHsgcGFyYW1ldGVySW5pdGlhbFN0YXRlIH0gZnJvbSBcIi4uL2FwaS9pbml0aWFsU3RhdGVcIjtcblxuLy8gVHlwZXNcblxuLy8gdHlwZSBFZGl0UGFyYW1JbnB1dENvbnRleHRUeXBlID0ge1xuLy8gXHRwYXJhbUl0ZW06IFBhcmFtSXRlbTtcbi8vIFx0c2V0UGFyYW1JdGVtOiAocGFyYW1JdGVtOiBQYXJhbUl0ZW0pID0+IHZvaWQ7XG4vLyB9XG4vLyB0eXBlIEVkaXRQYXJhbUlucHV0Q29udGV4dFR5cGUgPSB7XG4vLyBcdHN0YXRlOiBQYXJhbUl0ZW1bXTtcbi8vIFx0cmVkdWNlcjogVXNlUGFyYW1ldGVyUmVkdWNlcjtcbi8vIH1cblxudHlwZSBQYXJhbWV0ZXJzTGlzdENvbXBvbmVudFByb3BzID0ge1xuXHRwYXJhbWV0ZXJzOiBQYXJhbUl0ZW1bXVxufVxuY29uc3QgaW5pdFBhcmFtZXRlcnMgPSBbe1xuXHRsYWJlbDp7XG5cdFx0dGV4dDogXCJ0ZXh0XCJcblx0fSxcblx0aW5wdXQ6IHtcblx0XHR2YWx1ZTogbnVsbCxcblx0XHRwbGFjZWhvbGRlcjogXCJFbnRlciBhIE51bWJlclwiXG5cdH1cbn1dXG5cbi8vIGNvbnN0IFtFZGl0UGFyYW1JbnB1dENvbnRleHRQcm92aWRlciwgdXNlRWRpdFBhcmFtSW5wdXRDb250ZXh0XSA9XG4vLyB1c2VDcmVhdGVDb250ZXh0PEVkaXRQYXJhbUlucHV0Q29udGV4dFR5cGU+KFwiRWRpdFBhcmFtSW5wdXRDb250ZXh0XCIpO1xuXG5leHBvcnQgY29uc3QgQ09NUE9ORU5UX1RZUEUgPSBcImhtaS5pbnB1dC5QYXJhbWV0ZXJMaXN0XCI7XG5cbmV4cG9ydCBjb25zdCBQYXJhbWV0ZXJMaXN0Q29tcG9uZW50ID0gKHByb3BzOiBDb21wb25lbnRQcm9wczxQYXJhbWV0ZXJzTGlzdENvbXBvbmVudFByb3BzPikgPT4ge1xuY29uc3QgdHJhbnNmb3JtZWRQcm9wcyA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuXHRjb25zdCB7IHBhcmFtZXRlcnN9ID0gcHJvcHMucHJvcHMgfHwgaW5pdFBhcmFtZXRlcnNcblx0cmV0dXJuIHBhcmFtZXRlcnNcbn0sIFtwcm9wcy5wcm9wcy5wYXJhbWV0ZXJzXSlcblxuXG5cdFx0Y29uc29sZS5sb2coYHRyYW5zZm9ybWVkUHJvcHM6IGxhYmVsICR7dHJhbnNmb3JtZWRQcm9wc1swXS5sYWJlbC50ZXh0fWApO1xuXHRcdHJldHVybihcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiZGlzcGxheS1mbGV4LWNvbHVtblwiXG5cdFx0XHQ+XG5cdFx0e3RyYW5zZm9ybWVkUHJvcHMubWFwKChwYXJhbTogUGFyYW1JdGVtLCBpbmRleDogbnVtYmVyKT0+e1xuXHRcdFx0Y29uc3QgeyBsYWJlbCxpbnB1dH0gPSBwYXJhbTtcblx0XHRcdGNvbnNvbGUubG9nKGlucHV0LnZhbHVlKTtcblxuXHRcdFx0cmV0dXJuIChcblx0XHRcdFx0PGxhYmVsIGtleT17YCR7bGFiZWwudGV4dH0tcGFyYW1ldGVyJHtpbmRleH1gfWNsYXNzTmFtZT1cImZpZWxkIHNtYWxsXCI+XG5cdFx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPVwibGFiZWxcIj57bGFiZWwudGV4dH08L3NwYW4+XG5cdFx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPVwiZXVcIj57aW5wdXQuZXV9PC9zcGFuPlxuXHRcdFx0XHRcdDxpbnB1dCB0eXBlPVwidGV4dFwiXG5cdFx0XHRcdFx0aWQ9e2Ake2xhYmVsLnRleHR9LXBhcmFtZXRlciR7aW5kZXh9YH1cblx0XHRcdFx0XHRpbnB1dE1vZGU9e2lucHV0LmlucHV0bW9kZX1cblx0XHRcdFx0XHRwYXR0ZXJuPXtpbnB1dC5wYXR0ZXJuIHx8IFwiWzAtOV0qXCJ9XG5cdFx0XHRcdFx0cGxhY2Vob2xkZXI9e2lucHV0LnBsYWNlaG9sZGVyfVxuXHRcdFx0XHRcdGRpc2FibGVkPXshaW5wdXQuZWRpdGFibGV9XG5cdFx0XHRcdFx0dmFsdWU9e2lucHV0LnZhbHVlfVxuXHRcdFx0XHRcdG9uQ2hhbmdlPXtcblx0XHRcdFx0XHRcdChlKSA9PiB7XG5cdFx0XHRcdFx0XHRcdC8vIGNvbnNvbGUubG9nKGBPbiBjaGFuZ2UgZXZlbnQgJHtlLmN1cnJlbnRUYXJnZXQudmFsdWV9YCk7XG5cdFx0XHRcdFx0XHRcdHByb3BzLnN0b3JlLnByb3BzLndyaXRlKFxuXHRcdFx0XHRcdFx0XHRcdGBwYXJhbWV0ZXJzWyR7aW5kZXh9XS5pbnB1dC52YWx1ZWAsXG5cdFx0XHRcdFx0XHRcdFx0ZS5jdXJyZW50VGFyZ2V0LnZhbHVlXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdC8vIHVwZGF0ZVZhbHVlKHBhcnNlRmxvYXQocGFyc2VGbG9hdChlLnRhcmdldC52YWx1ZSkudG9GaXhlZCgyKSksIGluZGV4KTtcblx0XHRcdFx0XHR9fVxuXHRcdFx0XHRcdC8+XG5cdFx0XHRcdDwvbGFiZWw+XG5cdFx0XHRcdFx0KVxuXG5cdFx0fSlcblx0fTwvZGl2PlxuXHRcdClcblxufTtcblxuZXhwb3J0IGNsYXNzIFBhcmFtZXRlckxpc3RDb21wb25lbnRNZXRhIGltcGxlbWVudHMgQ29tcG9uZW50TWV0YSB7XG5cdGdldENvbXBvbmVudFR5cGUoKTpzdHJpbmd7XG5yZXR1cm4gQ09NUE9ORU5UX1RZUEVcblx0fVxuXG5cdGdldERlZmF1bHRTaXplKCk6IFNpemVPYmplY3R7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHdpZHRoOiAxMjAsXG5cdFx0XHRoZWlnaHQ6IDI0MCxcblx0XHR9XG5cdH1cblxuXHRnZXRQcm9wc1JlZHVjZXIodHJlZTogUHJvcGVydHlUcmVlKTogUGFyYW1ldGVyc0xpc3RTdGF0ZSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHBhcmFtZXRlcnM6dHJlZS5yZWFkICgncGFyYW1ldGVycycsIHBhcmFtZXRlckluaXRpYWxTdGF0ZSlcblx0XHR9XG5cdH1cblxuXHRnZXRWaWV3Q29tcG9uZW50KCk6IFBDb21wb25lbnQge1xuXHRcdHJldHVybiBQYXJhbWV0ZXJMaXN0Q29tcG9uZW50IGFzIFBDb21wb25lbnRcblx0fVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX184ODNfXzsiLCIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7XG5cdEl0ZW1JZFBvc2l0aW9uVHlwZSxcblx0UHJvY2Vzc09iamVjdCxcblx0dHlwZSBWYWx2ZVByb3BzLFxuXHR0eXBlIFZhbHZlU3RhdGUsXG59IGZyb20gXCIuLi9hcGkvdHlwZXNcIjtcblxuaW1wb3J0IHtcblx0Q29tcG9uZW50LFxuXHRQcm9wZXJ0eVRyZWUsXG59IGZyb20gXCJAaW5kdWN0aXZlYXV0b21hdGlvbi9wZXJzcGVjdGl2ZS1jbGllbnRcIjtcbmltcG9ydCB0eXBlIHtcblx0Q29tcG9uZW50UHJvcHMsXG5cdENvbXBvbmVudE1ldGEsXG5cdFBDb21wb25lbnQsXG5cdFNpemVPYmplY3QsXG59IGZyb20gXCJAaW5kdWN0aXZlYXV0b21hdGlvbi9wZXJzcGVjdGl2ZS1jbGllbnRcIjsgLy8nQGluZHVjdGl2ZWF1dG9tYXRpb24vcGVyc3BlY3RpdmUtY2xpZW50JztcbmltcG9ydCB7IFZhbHZlTXBDb21wb3VuZCB9IGZyb20gXCIuL3Byb2Nlc3Mtb2JqZWN0cy92YWx2ZS1tcC9WYWx2ZU1wXCI7XG5pbXBvcnQgeyBwcm9jZXNzT2JqZWN0UHJvcHMgfSBmcm9tIFwiLi4vYXBpL2luaXRpYWxTdGF0ZVwiO1xuLy8gaW1wb3J0IHsgdmFsdmVQcm9wcyB9IGZyb20gXCIuL3Byb2Nlc3Mtb2JqZWN0cy92YWx2ZS9pbml0aWFsU3RhdGVcIjtcbi8vIGltcG9ydCB7IFZhbHZlRkNDb21wb3VuZCB9IGZyb20gXCIuL3Byb2Nlc3Mtb2JqZWN0cy92YWx2ZS9WYWx2ZUZDXCI7XG5cbmV4cG9ydCBjb25zdCBDT01QT05FTlRfVFlQRSA9IFwiaG1pLnByb2Nlc3Nfb2JqZWN0cy5WYWx2ZV9tcFwiO1xuXG4vKipcbiAqIFZhbHZlIGNvbXBvbmVudCBjbGFzcy5cbiAqIEV4dGVuZHMgdGhlIGJhc2UgQ29tcG9uZW50IGNsYXNzIGZyb20gUGVyc3BlY3RpdmUsIHR5cGVkIHdpdGggVmFsdmVQcm9wcy5cbiAqIFByb3ZpZGVzIGEgY3VzdG9taXphYmxlIHZhbHZlIHdpdGggcHJvcGVyIGhhbmRsaW5nIG9mIGRlc2lnbmVyL3ByZXZpZXcgbW9kZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBWYWx2ZSBleHRlbmRzIENvbXBvbmVudDxDb21wb25lbnRQcm9wczxWYWx2ZVByb3BzPiwgYW55PiB7XG5cdHZhbHZlUmVmOiBSZWFjdC5SZWZPYmplY3Q8SFRNTERpdkVsZW1lbnQ+O1xuXG5cdGNvbnN0cnVjdG9yKHByb3BzOiBDb21wb25lbnRQcm9wczxWYWx2ZVByb3BzPikge1xuXHRcdHN1cGVyKHByb3BzKTtcblx0XHR0aGlzLnZhbHZlUmVmID0gUmVhY3QuY3JlYXRlUmVmPEhUTUxEaXZFbGVtZW50PigpO1xuXHR9XG5cblx0Ly8gVGhpcyBpcyBhIGxpZmVjeWNsZSBtZXRob2QgdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGZpcnN0IG1vdW50ZWQgdG8gdGhlIERPTS5cblx0Y29tcG9uZW50RGlkTW91bnQoKTogdm9pZCB7XG5cdFx0Ly8gTm8gbmVlZCB0byBpbml0aWFsaXplIHZhbHZlUmVmIGhlcmVcblx0fVxuXHRwcm9jZXNzT2JqZWN0OiBQcm9jZXNzT2JqZWN0ID1cblx0XHR0aGlzLnByb3BzLnByb3BzLnByb2Nlc3NPYmplY3QgfHwgcHJvY2Vzc09iamVjdFByb3BzO1xuXHRzdGF0dXM6IFZhbHZlU3RhdGUgPSB0aGlzLnByb2Nlc3NPYmplY3Quc3RhdHVzO1xuXHRzaG93TGFiZWw6IGJvb2xlYW4gPSB0aGlzLnByb3BzLnByb3BzLnNob3dMYWJlbCB8fCBmYWxzZTtcblx0bGFiZWxQb3NpdGlvbjogSXRlbUlkUG9zaXRpb25UeXBlID0gdGhpcy5wcm9wcy5wcm9wcy5sYWJlbFBvc2l0aW9uIHx8IFwibGVmdFwiO1xuXG5cdC8qKlxuXHQgKiBIYW5kbGVyIGZvciB0aGUgY29tcG9uZW50J3MgYWN0aW9uIGV2ZW50LlxuXHQgKi9cblx0b25BY3Rpb25QZXJmb3JtZWQgPSAoKSA9PiB7XG5cdFx0Ly8gSWYgdGhlIGRlc2lnbmVyIGlzIGluIFwiZGVzaWduXCIgbW9kZSwgZG9uJ3QgZG8gYW55dGhpbmdcblx0XHRpZiAoIXRoaXMucHJvcHMuZXZlbnRzRW5hYmxlZCkge1xuXHRcdFx0Y29uc29sZS5sb2coXCJWYWx2ZSBpcyBkaXNhYmxlZCBpbiB0aGUgZGVzaWduLXNjb3BlXCIpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRjb25zb2xlLmxvZyhcIlZhbHZlIGNsaWNrZWQhXCIpO1xuXHRcdHRoaXMucHJvcHMuY29tcG9uZW50RXZlbnRzLmZpcmVDb21wb25lbnRFdmVudChcIm9uQWN0aW9uUGVyZm9ybWVkXCIsIHt9KTtcblx0fTtcblxuXHRyZW5kZXIoKSB7XG5cdFx0cmV0dXJuIChcblx0XHRcdC8vIDxkaXY+VGhpcyBpcyBWYWx2ZTwvZGl2PlxuXHRcdFx0PFZhbHZlTXBDb21wb3VuZC5Sb290XG5cdFx0XHRcdGNvbXBvbmVudFByb3BzPXt0aGlzLnByb3BzfVxuXHRcdFx0XHR2YWx2ZVByb3BzPXt0aGlzLnByb3BzLnByb3BzfVxuXHRcdFx0XHRvbkFjdGlvblBlcmZvcm1lZD17dGhpcy5vbkFjdGlvblBlcmZvcm1lZH1cblx0XHRcdD5cblx0XHRcdFx0PFZhbHZlTXBDb21wb3VuZC52YWx2ZSAvPlxuXHRcdFx0XHQ8VmFsdmVNcENvbXBvdW5kLnBvcG92ZXIgYW5jaG9yRWw9e3RoaXMudmFsdmVSZWYuY3VycmVudH0gLz5cblx0XHRcdDwvVmFsdmVNcENvbXBvdW5kLlJvb3Q+XG5cdFx0KTtcblx0fVxufVxuLy8gVGhpcyBpcyB0aGUgYWN0dWFsIHRoaW5nIHRoYXQgZ2V0cyByZWdpc3RlcmVkIHdpdGggdGhlIGNvbXBvbmVudCByZWdpc3RyeS5cbmV4cG9ydCBjbGFzcyBWYWx2ZU1ldGEgaW1wbGVtZW50cyBDb21wb25lbnRNZXRhIHtcblx0Z2V0Q29tcG9uZW50VHlwZSgpOiBzdHJpbmcge1xuXHRcdHJldHVybiBDT01QT05FTlRfVFlQRTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcmV0dXJucyBUaGUgUmVhY3QgY29tcG9uZW50IGNsYXNzLlxuXHQgKi9cblx0Z2V0Vmlld0NvbXBvbmVudCgpOiBQQ29tcG9uZW50IHtcblx0XHRyZXR1cm4gVmFsdmU7XG5cdH1cblxuXHRnZXREZWZhdWx0U2l6ZSgpOiBTaXplT2JqZWN0IHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0d2lkdGg6IDI0LFxuXHRcdFx0aGVpZ2h0OiA0OCxcblx0XHR9O1xuXHR9XG5cblx0Ly8gSW52b2tlZCB3aGVuIGFuIHVwZGF0ZSB0byB0aGUgUHJvcGVydHlUcmVlIGhhcyBvY2N1cnJlZCxcblx0Ly8gZWZmZWN0aXZlbHkgbWFwcGluZyB0aGUgdmFsdmVTdGF0dXMgb2YgdGhlIHRyZWUgdG8gY29tcG9uZW50IHByb3BzLlxuXHRnZXRQcm9wc1JlZHVjZXIodHJlZTogUHJvcGVydHlUcmVlKTogVmFsdmVQcm9wcyB7XG5cdFx0Y29uc29sZS5sb2coXG5cdFx0XHRgaXRlbU5hbWU6ICR7dHJlZS5yZWFkU3RyaW5nKFxuXHRcdFx0XHRcInByb2Nlc3NPYmplY3Quc3RhdHVzLml0ZW1OYW1lXCJcblx0XHRcdCl9IHNob3dMYWJlbCAke3RyZWUucmVhZEJvb2xlYW4oXCJzaG93TGFiZWxcIil9YFxuXHRcdCk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0cHJvY2Vzc09iamVjdDoge1xuXHRcdFx0XHRzdGF0dXM6IHtcblx0XHRcdFx0XHRhbGFybTogdHJlZS5yZWFkQm9vbGVhbihcInByb2Nlc3NPYmplY3Quc3RhdHVzLmFsYXJtXCIsIGZhbHNlKSxcblx0XHRcdFx0XHRhY3RGQjogdHJlZS5yZWFkQm9vbGVhbihcInByb2Nlc3NPYmplY3Quc3RhdHVzLmFjdEZCXCIsIGZhbHNlKSxcblx0XHRcdFx0XHRkZUFjdEZCOiB0cmVlLnJlYWRCb29sZWFuKFwicHJvY2Vzc09iamVjdC5zdGF0dXMuZGVBY3RGQlwiLCBmYWxzZSksXG5cdFx0XHRcdFx0YWN0aXZhdGVkQ29uZmlnOiB0cmVlLnJlYWROdW1iZXIoXG5cdFx0XHRcdFx0XHRcInByb2Nlc3NPYmplY3Quc3RhdHVzLmFjdGl2YXRlZENvbmZpZ1wiLFxuXHRcdFx0XHRcdFx0NTExXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRkZWFjdGl2YXRlZENvbmZpZzogdHJlZS5yZWFkTnVtYmVyKFxuXHRcdFx0XHRcdFx0XCJwcm9jZXNzT2JqZWN0LnN0YXR1cy5kZWFjdGl2YXRlZENvbmZpZ1wiLFxuXHRcdFx0XHRcdFx0NDA5NVxuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0aXRlbU5hbWU6IHRyZWUucmVhZFN0cmluZyhcInByb2Nlc3NPYmplY3Quc3RhdHVzLml0ZW1OYW1lXCIsIFwiXCIpLFxuXHRcdFx0XHRcdG1hbnVhbDogdHJlZS5yZWFkQm9vbGVhbihcInByb2Nlc3NPYmplY3Quc3RhdHVzLm1hbnVhbFwiLCBmYWxzZSksXG5cdFx0XHRcdFx0bWFza2VkOiB0cmVlLnJlYWRCb29sZWFuKFwicHJvY2Vzc09iamVjdC5zdGF0dXMubWFza2VkXCIsIGZhbHNlKSxcblx0XHRcdFx0XHRjaGFuZ2luZzogdHJlZS5yZWFkQm9vbGVhbihcInByb2Nlc3NPYmplY3Quc3RhdHVzLmNoYW5naW5nXCIsIGZhbHNlKSxcblx0XHRcdFx0XHRsb2NhdGU6IHRyZWUucmVhZEJvb2xlYW4oXCJwcm9jZXNzT2JqZWN0LnN0YXR1cy5sb2NhdGVcIiwgZmFsc2UpLFxuXHRcdFx0XHRcdHVzbDogdHJlZS5yZWFkQm9vbGVhbihcInByb2Nlc3NPYmplY3Quc3RhdHVzLnVzbFwiLCBmYWxzZSksXG5cdFx0XHRcdFx0bHNsOiB0cmVlLnJlYWRCb29sZWFuKFwicHJvY2Vzc09iamVjdC5zdGF0dXMubHNsXCIsIGZhbHNlKSxcblx0XHRcdFx0fSxcblx0XHRcdH0sXG5cdFx0XHRzaG93TGFiZWw6IHRyZWUucmVhZEJvb2xlYW4oXCJzaG93TGFiZWxcIiwgZmFsc2UpLFxuXHRcdFx0bGFiZWxQb3NpdGlvbjogdHJlZS5yZWFkU3RyaW5nKFwibGFiZWxQb3NpdGlvblwiLCBcInRvcC1sZWZ0XCIpLFxuXHRcdH07XG5cdH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5VUkwgPSBleHBvcnRzLkROUyA9IGV4cG9ydHMuc3RyaW5nVG9CeXRlcyA9IHZvaWQgMDtcbmNvbnN0IHBhcnNlX2pzXzEgPSByZXF1aXJlKFwiLi9wYXJzZS5qc1wiKTtcbmNvbnN0IHN0cmluZ2lmeV9qc18xID0gcmVxdWlyZShcIi4vc3RyaW5naWZ5LmpzXCIpO1xuZnVuY3Rpb24gc3RyaW5nVG9CeXRlcyhzdHIpIHtcbiAgICBzdHIgPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyKSk7XG4gICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShzdHIubGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgICAgICBieXRlc1tpXSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgIH1cbiAgICByZXR1cm4gYnl0ZXM7XG59XG5leHBvcnRzLnN0cmluZ1RvQnl0ZXMgPSBzdHJpbmdUb0J5dGVzO1xuZXhwb3J0cy5ETlMgPSAnNmJhN2I4MTAtOWRhZC0xMWQxLTgwYjQtMDBjMDRmZDQzMGM4JztcbmV4cG9ydHMuVVJMID0gJzZiYTdiODExLTlkYWQtMTFkMS04MGI0LTAwYzA0ZmQ0MzBjOCc7XG5mdW5jdGlvbiB2MzUodmVyc2lvbiwgaGFzaCwgdmFsdWUsIG5hbWVzcGFjZSwgYnVmLCBvZmZzZXQpIHtcbiAgICBjb25zdCB2YWx1ZUJ5dGVzID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHN0cmluZ1RvQnl0ZXModmFsdWUpIDogdmFsdWU7XG4gICAgY29uc3QgbmFtZXNwYWNlQnl0ZXMgPSB0eXBlb2YgbmFtZXNwYWNlID09PSAnc3RyaW5nJyA/ICgwLCBwYXJzZV9qc18xLmRlZmF1bHQpKG5hbWVzcGFjZSkgOiBuYW1lc3BhY2U7XG4gICAgaWYgKHR5cGVvZiBuYW1lc3BhY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG5hbWVzcGFjZSA9ICgwLCBwYXJzZV9qc18xLmRlZmF1bHQpKG5hbWVzcGFjZSk7XG4gICAgfVxuICAgIGlmIChuYW1lc3BhY2U/Lmxlbmd0aCAhPT0gMTYpIHtcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdOYW1lc3BhY2UgbXVzdCBiZSBhcnJheS1saWtlICgxNiBpdGVyYWJsZSBpbnRlZ2VyIHZhbHVlcywgMC0yNTUpJyk7XG4gICAgfVxuICAgIGxldCBieXRlcyA9IG5ldyBVaW50OEFycmF5KDE2ICsgdmFsdWVCeXRlcy5sZW5ndGgpO1xuICAgIGJ5dGVzLnNldChuYW1lc3BhY2VCeXRlcyk7XG4gICAgYnl0ZXMuc2V0KHZhbHVlQnl0ZXMsIG5hbWVzcGFjZUJ5dGVzLmxlbmd0aCk7XG4gICAgYnl0ZXMgPSBoYXNoKGJ5dGVzKTtcbiAgICBieXRlc1s2XSA9IChieXRlc1s2XSAmIDB4MGYpIHwgdmVyc2lvbjtcbiAgICBieXRlc1s4XSA9IChieXRlc1s4XSAmIDB4M2YpIHwgMHg4MDtcbiAgICBpZiAoYnVmKSB7XG4gICAgICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgICAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9IGJ5dGVzW2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidWY7XG4gICAgfVxuICAgIHJldHVybiAoMCwgc3RyaW5naWZ5X2pzXzEudW5zYWZlU3RyaW5naWZ5KShieXRlcyk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSB2MzU7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiaW1wb3J0IHsgQ29tcG9uZW50TWV0YSwgQ29tcG9uZW50UmVnaXN0cnkgfSBmcm9tICdAaW5kdWN0aXZlYXV0b21hdGlvbi9wZXJzcGVjdGl2ZS1jbGllbnQnO1xuLy9pbXBvcnQgeyBCdXR0b24sIEJ1dHRvbk1ldGEgfSBmcm9tICcuL2NvbXBvbmVudHMvQnV0dG9uJztcbi8vaW1wb3J0IHsgVmFsdmUsIFZhbHZlTWV0YSB9IGZyb20gXCIuL2NvbXBvbmVudHMvVmFsdmVcIjtcbmltcG9ydCB7IFZhbHZlLCBWYWx2ZU1ldGEgfSBmcm9tICcuL2NvbXBvbmVudHMvVmFsdmUnO1xuaW1wb3J0IHsgUGFyYW1ldGVyTGlzdENvbXBvbmVudCwgUGFyYW1ldGVyTGlzdENvbXBvbmVudE1ldGF9IGZyb20gJy4vY29tcG9uZW50cy9QYXJhbWV0ZXJMaXN0J1xuXG4vLyBFeHBvcnQgY29tcG9uZW50cyBmb3IgZXh0ZXJuYWwgcmVmZXJlbmNlXG5leHBvcnQge1xuXHRWYWx2ZSAsXG5cdFBhcmFtZXRlckxpc3RDb21wb25lbnQsXG5cdH07XG5cbi8vIEltcG9ydCBjb21wb25lbnQgc3R5bGVzXG5pbXBvcnQgJy4vaW5kZXguY3NzJztcblxuLy8gQXJyYXkgb2YgY29tcG9uZW50IG1ldGFkYXRhXG5jb25zdCBjb21wb25lbnRzOiBBcnJheTxDb21wb25lbnRNZXRhPiA9IFtcblx0bmV3IFZhbHZlTWV0YSgpLFxuXHRuZXcgUGFyYW1ldGVyTGlzdENvbXBvbmVudE1ldGEoKSxcbl07XG5cbi8vIFJlZ2lzdGVyIGVhY2ggY29tcG9uZW50IHdpdGggdGhlIFBlcnNwZWN0aXZlIENvbXBvbmVudFJlZ2lzdHJ5XG5jb21wb25lbnRzLmZvckVhY2goKGM6IENvbXBvbmVudE1ldGEpID0+IENvbXBvbmVudFJlZ2lzdHJ5LnJlZ2lzdGVyKGMpKTtcbiJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJyZXF1aXJlIiwiZGVmaW5lIiwiYW1kIiwic2VsZiIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzM3N19fIiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fODgzX18iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwidW5zYWZlU3RyaW5naWZ5IiwidmFsaWRhdGVfanNfMSIsImJ5dGVUb0hleCIsImkiLCJwdXNoIiwidG9TdHJpbmciLCJzbGljZSIsImFyciIsIm9mZnNldCIsInRvTG93ZXJDYXNlIiwidXVpZCIsImRlZmF1bHQiLCJUeXBlRXJyb3IiLCJlIiwibmUiLCJnZSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImJlIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIlRlIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJCZSIsInQiLCJyIiwiZ2V0IiwiZW51bWVyYWJsZSIsIkFlIiwiSW1tZXIiLCJKIiwiYXBwbHlQYXRjaGVzIiwiQ2UiLCJjYXN0RHJhZnQiLCJrZSIsImNhc3RJbW11dGFibGUiLCJLZSIsImNyZWF0ZURyYWZ0IiwiUmUiLCJjdXJyZW50IiwicmUiLCJlbmFibGVNYXBTZXQiLCJ4ZSIsImVuYWJsZVBhdGNoZXMiLCJQZSIsImZpbmlzaERyYWZ0IiwidmUiLCJmcmVlemUiLCJLIiwiaW1tZXJhYmxlIiwiTiIsImlzRHJhZnQiLCJPIiwiaXNEcmFmdGFibGUiLCJBIiwibm90aGluZyIsImoiLCJvcmlnaW5hbCIsImxlIiwicHJvZHVjZSIsIkZlIiwicHJvZHVjZVdpdGhQYXRjaGVzIiwiTmUiLCJzZXRBdXRvRnJlZXplIiwiemUiLCJzZXRVc2VTdHJpY3RTaGFsbG93Q29weSIsImplIiwibiIsImNhbGwiLCJJZSIsIlN5bWJvbCIsImZvciIsInUiLCJoIiwiRXJyb3IiLCJ6IiwiZ2V0UHJvdG90eXBlT2YiLCJ5ZSIsIkFycmF5IiwiaXNBcnJheSIsImNvbnN0cnVjdG9yIiwidiIsImsiLCJPZSIsIkZ1bmN0aW9uIiwiXyIsIkMiLCJSZWZsZWN0Iiwib3duS2V5cyIsImZvckVhY2giLCJvIiwiUiIsImhhcyIsIlgiLCJRIiwic2V0IiwiYWRkIiwiTWFwIiwiU2V0IiwiVCIsIkwiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZiIsImxlbmd0aCIsImwiLCJjIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJjcmVhdGUiLCJhc3NpZ24iLCIkIiwiY2xlYXIiLCJkZWxldGUiLCJNZSIsImVudHJpZXMiLCJpc0Zyb3plbiIsIlUiLCJhZSIsInciLCJZIiwiQiIsIm9lIiwiYiIsIlYiLCJaIiwiYSIsIndlIiwiaWUiLCJwIiwiUCIsImQiLCJfZSIsIngiLCJtIiwic2UiLCJzIiwiZWUiLCJ0ZSIsImRlIiwiZyIsImNvbmNhdCIsInkiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInVlIiwibWUiLCJFZSIsImNlIiwiZmUiLCJXIiwicGUiLCJFIiwiTnVtYmVyIiwiaXNOYU4iLCJkZWxldGVQcm9wZXJ0eSIsInNldFByb3RvdHlwZU9mIiwicSIsIlMiLCJhcmd1bWVudHMiLCJhcHBseSIsInRoaXMiLCJhdXRvRnJlZXplIiwidXNlU3RyaWN0U2hhbGxvd0NvcHkiLCJwYXRoIiwib3AiLCJJIiwiRCIsInJldm9rZSIsInByb3h5IiwiUHJveHkiLCJyZXZvY2FibGUiLCJoZSIsIlNlIiwibWFwIiwiZnJvbSIsIkgiLCJGIiwiam9pbiIsInNwbGljZSIsInVuc2hpZnQiLCJzdXBlciIsInNpemUiLCJrZXlzIiwidmFsdWVzIiwiaXRlcmF0b3IiLCJuZXh0IiwiZG9uZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJNIiwiYmluZCIsIkl0ZW0iLCJpdGVtQ2xhc3NOYW1lIiwiaGFuZGxlQ2xpY2siLCJjbGFzc05hbWUiLCJvbkNsaWNrIiwiZGlzcGxheU5hbWUiLCJ2ZXJzaW9uIiwidmFsaWRhdGUiLCJ2NyIsInY2VG9WMSIsInY2IiwidjUiLCJ2NCIsInYzIiwidjFUb1Y2IiwidjEiLCJwYXJzZSIsIk5JTCIsIk1BWCIsIm1heF9qc18xIiwibmlsX2pzXzEiLCJwYXJzZV9qc18xIiwic3RyaW5naWZ5X2pzXzEiLCJ2MV9qc18xIiwidjFUb1Y2X2pzXzEiLCJ2M19qc18xIiwidjRfanNfMSIsInY1X2pzXzEiLCJ2Nl9qc18xIiwidjZUb1YxX2pzXzEiLCJ2N19qc18xIiwidmVyc2lvbl9qc18xIiwidjFCeXRlcyIsInY2Qnl0ZXMiLCJVaW50OEFycmF5Iiwib2YiLCJuYXRpdmVfanNfMSIsInJuZ19qc18xIiwib3B0aW9ucyIsImJ1ZiIsInJhbmRvbVVVSUQiLCJybmRzIiwicmFuZG9tIiwicm5nIiwiUmFuZ2VFcnJvciIsImdldFJhbmRvbVZhbHVlcyIsInJuZHM4IiwiY3J5cHRvIiwidXBkYXRlVjdTdGF0ZSIsIl9zdGF0ZSIsInN0YXRlIiwibm93IiwibXNlY3MiLCJzZXEiLCJ2N0J5dGVzIiwiRGF0ZSIsImJ5dGVzIiwiZ2V0T3V0cHV0TGVuZ3RoIiwiaW5wdXRMZW5ndGg4Iiwic2FmZUFkZCIsImxzdyIsIm1kNWNtbiIsIm51bSIsImNudCIsIm1kNWZmIiwibWQ1Z2ciLCJtZDVoaCIsIm1kNWlpIiwiaW5wdXQiLCJ1aW50MzJUb1VpbnQ4IiwibGVuIiwieHBhZCIsIlVpbnQzMkFycmF5IiwiZmlsbCIsIm9sZGEiLCJvbGRiIiwib2xkYyIsIm9sZGQiLCJ3b3Jkc1RvTWQ1Iiwib3V0cHV0IiwidWludDhUb1VpbnQzMiIsInVzZUltbWVyIiwidXNlU3RhdGUiLCJ1c2VDYWxsYmFjayIsInVzZUltbWVyUmVkdWNlciIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwiX3Y2IiwidmFsdmVTdGF0dXMiLCJhbGFybSIsImFjdEZCIiwiZGVBY3RGQiIsImFjdGl2YXRlZENvbmZpZyIsImRlYWN0aXZhdGVkQ29uZmlnIiwiaXRlbU5hbWUiLCJtYW51YWwiLCJtYXNrZWQiLCJjaGFuZ2luZyIsImxvY2F0ZSIsInByb2Nlc3NPYmplY3RQcm9wcyIsInN0YXR1cyIsInZhbHZlUHJvcHMiLCJwcm9jZXNzT2JqZWN0IiwiY29uc29sZSIsImxvZyIsImxhYmVsUG9zaXRpb24iLCJzaG93TGFiZWwiLCJwYXJhbWV0ZXJJbml0aWFsU3RhdGUiLCJsYWJlbCIsInRleHQiLCJ0b29sdGlwVGV4dCIsInRvb2x0aXBQb3NpdGlvbiIsInRvb2x0aXBDbGFzc05hbWUiLCJ0b29sdGlwSWQiLCJ0eXBlIiwiaW5wdXRtb2RlIiwicGxhY2Vob2xkZXIiLCJlZGl0YWJsZSIsInBhdHRlcm4iLCJtaW4iLCJtYXgiLCJkZWNpbWFsUGxhY2VzIiwiZXUiLCJpbml0aWFsQXV0b01hblN0YXRlIiwiYXV0byIsImluaXRpYWxPZmZPblN0YXRlIiwib2ZmIiwib24iLCJpbml0aWFsQ29udHJvbFN0YXRlIiwibWFpbiIsInVwcGVyU2VhdCIsImxvd2VyU2VhdCIsInVwZGF0ZVYxU3RhdGUiLCJuc2VjcyIsIm5vZGUiLCJ1bmRlZmluZWQiLCJjbG9ja3NlcSIsInRsIiwidG1oIiwiaXNWNiIsIm9wdGlvbnNLZXlzIiwiZ2V0Qm9vbEF0SW5kZXgiLCJCb29sZWFuIiwiZ2V0SXRlbUNsYXNzTmFtZSIsImluZGV4IiwiQWN0aXZhdGVkQ29uZmlnVmFsdWUiLCJEZWFjdGl2YXRlZENvbmZpZ1ZhbHVlIiwiaW5jbHVkZXMiLCJyZXBsYWNlIiwiZ2V0VmFsdmVNcEl0ZW1DbGFzc05hbWUiLCJ1c2wiLCJsc2wiLCJpdGVtTmFtZXMiLCJJdGVtTmFtZUVudW0iLCJrZXkiLCJuYW1lIiwidmFsdmVNcEl0ZW1OYW1lcyIsInZhbHZlTXBJdGVtTmFtZUVudW0iLCJnZXRJdGVtSWRQb3NpdGlvbkNsYXNzTmFtZSIsIml0ZW1JZFBvc2l0aW9uIiwid2FybiIsImRpc3BhdGNoIiwidmFsdmVSZWR1Y2VyIiwicmVkdWNlciIsInVwZGF0ZUFjdENvbmZpZyIsInVwZGF0ZURlQWN0Q29uZmlnIiwidXBkYXRlQWxhcm0iLCJ1cGRhdGVBY3RGQiIsInVwZGF0ZURlQWN0RkIiLCJ1cGRhdGVVc2wiLCJ1cGRhdGVMc2wiLCJ1cGRhdGVNYW51YWwiLCJ1cGRhdGVNYXNrZWQiLCJ1cGRhdGVDaGFuZ2luZyIsInVwZGF0ZUxvY2F0ZSIsIlBhcmFtZXRlclJlZHVjZXIiLCJ1cGRhdGVWYWx1ZSIsInZhbHZlTXBSZWR1Y2VyIiwidXBkYXRlQXV0b01hblNlbGVjdGlvbiIsIm1vZGUiLCJ1cGRhdGVNYWluTWFudWFsT24iLCJ1cGRhdGVNYWluTWFudWFsT2ZmIiwidXBkYXRlVXNsTWFudWFsT24iLCJ1cGRhdGVVc2xNYW51YWxPZmYiLCJ1cGRhdGVMc2xNYW51YWxPbiIsInVwZGF0ZUxzbE1hbnVhbE9mZiIsImRyYWZ0IiwiYWN0aW9uIiwicm9vdENvbXBvbmVudE5hbWUiLCJkZWZhdWx0Q29udGV4dCIsIkNvbnRleHQiLCJSZWFjdCIsImNyZWF0ZUNvbnRleHQiLCJQcm92aWRlciIsInByb3BzIiwiY2hpbGRyZW4iLCJjb250ZXh0IiwiY29uc3VtZXJOYW1lIiwidXNlQ29udGV4dCIsIlZBTFZFX0NPTVBPTkVOVF9UWVBFIiwiVmFsdmVDbGFzc05hbWVFbnVtIiwiQWxhcm1TdGF0ZSIsIkFjdGl2YXRlZCIsIkRlYWN0aXZhdGVkIiwiTWFudWFsIiwiTWFza2VkIiwiQ2hhbmdpbmciLCJOb0FsYXJtTWFzayIsIkxvY2F0ZSIsIlYxYjEiLCJWMWIyIiwiVjFiMyIsIlYxYjQiLCJWMmIxIiwiVjJiMiIsIlYyYjMiLCJWMmI0IiwiVjNiMSIsIlYzYjIiLCJWM2IzIiwiVjNiNCIsIlYyIiwiVjMiLCJWMSIsIlYyZjEiLCJWMmYyIiwiVjNmMSIsIlYzZjIiLCJJdGVtQ2xpY2thYmxlTmFtZUVudW0iLCJ2YWx2ZU1wSXRlbUNsaWNrYWJsZU5hbWVFbnVtIiwiSXRlbVBvc2l0aW9uRW51bSIsInYxYjEiLCJ2MWIyIiwidjFiMyIsInYxYjQiLCJ2MmIxIiwidjJiMyIsInYyYjQiLCJ2M2IxIiwidjNiMiIsInYzYjMiLCJ2M2I0IiwidjIiLCJVUkwiLCJETlMiLCJzaGExX2pzXzEiLCJ2MzVfanNfMSIsInYzNV9qc18yIiwibmFtZXNwYWNlIiwibWQ1X2pzXzEiLCJDT01QT05FTlRfVFlQRSIsInVzZUNyZWF0ZUNvbnRleHQiLCJWYWx2ZUNvbnRleHRQcm92aWRlciIsInVzZVZhbHZlQ29udGV4dCIsIlZhbHZlTXBDb21wb3VuZCIsIlJvb3QiLCJjb21wb25lbnRQcm9wcyIsIm9uQWN0aW9uUGVyZm9ybWVkIiwidXNlVmFsdmVSZWR1Y2VyIiwidmFsdmUiLCJ2YWx2ZVJlZiIsInVzZVJlZiIsInBvc2l0aW9uIiwiZW1pdCIsImluQ29vcmQiLCJjb21wb25lbnRJdGVtTmFtZXMiLCJyZWYiLCJjbGFzc2VzIiwicG9wb3ZlciIsImFuY2hvckVsIiwic3R5bGUiLCJ0b3AiLCJsZWZ0IiwicGFkZGluZyIsInJlZ2V4X2pzXzEiLCJ0ZXN0IiwicGFyc2VJbnQiLCJST1RMIiwibmV3Qnl0ZXMiLCJNYXRoIiwiY2VpbCIsInBvdyIsImZsb29yIiwiaW5pdFBhcmFtZXRlcnMiLCJQYXJhbWV0ZXJMaXN0Q29tcG9uZW50IiwidHJhbnNmb3JtZWRQcm9wcyIsInBhcmFtZXRlcnMiLCJwYXJhbSIsImlkIiwiaW5wdXRNb2RlIiwiZGlzYWJsZWQiLCJvbkNoYW5nZSIsInN0b3JlIiwid3JpdGUiLCJjdXJyZW50VGFyZ2V0IiwiZ2V0Q29tcG9uZW50VHlwZSIsImdldERlZmF1bHRTaXplIiwid2lkdGgiLCJoZWlnaHQiLCJnZXRQcm9wc1JlZHVjZXIiLCJ0cmVlIiwicmVhZCIsImdldFZpZXdDb21wb25lbnQiLCJWYWx2ZSIsIkNvbXBvbmVudCIsImV2ZW50c0VuYWJsZWQiLCJjb21wb25lbnRFdmVudHMiLCJmaXJlQ29tcG9uZW50RXZlbnQiLCJjcmVhdGVSZWYiLCJjb21wb25lbnREaWRNb3VudCIsInJlbmRlciIsInJlYWRTdHJpbmciLCJyZWFkQm9vbGVhbiIsInJlYWROdW1iZXIiLCJzdHJpbmdUb0J5dGVzIiwic3RyIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJjaGFyQ29kZUF0IiwiaGFzaCIsInZhbHVlQnl0ZXMiLCJuYW1lc3BhY2VCeXRlcyIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJ0b1N0cmluZ1RhZyIsIlZhbHZlTWV0YSIsIlBhcmFtZXRlckxpc3RDb21wb25lbnRNZXRhIiwiQ29tcG9uZW50UmVnaXN0cnkiLCJyZWdpc3RlciJdLCJzb3VyY2VSb290IjoiIn0=