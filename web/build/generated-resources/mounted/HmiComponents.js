!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("PerspectiveClient"),require("React")):"function"==typeof define&&define.amd?define("HmiComponents",["PerspectiveClient","React"],t):"object"==typeof exports?exports.HmiComponents=t(require("PerspectiveClient"),require("React")):e.HmiComponents=t(e.PerspectiveClient,e.React)}(self,((e,t)=>(()=>{var a={11:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.unsafeStringify=void 0;const n=a(746),o=[];for(let e=0;e<256;++e)o.push((e+256).toString(16).slice(1));function r(e,t=0){return(o[e[t+0]]+o[e[t+1]]+o[e[t+2]]+o[e[t+3]]+"-"+o[e[t+4]]+o[e[t+5]]+"-"+o[e[t+6]]+o[e[t+7]]+"-"+o[e[t+8]]+o[e[t+9]]+"-"+o[e[t+10]]+o[e[t+11]]+o[e[t+12]]+o[e[t+13]]+o[e[t+14]]+o[e[t+15]]).toLowerCase()}t.unsafeStringify=r,t.default=function(e,t=0){const a=r(e,t);if(!(0,n.default)(a))throw TypeError("Stringified UUID is invalid");return a}},76:(e,t,a)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.HeatExchangerCompound=t.useHxContext=t.HxContextProvider=t.COMPONENT_TYPE=void 0;const o=a(883),r=a(535),l=a(152),i=a(506),s=a(445),u=a(921),c=e=>{switch(console.log(`mode: ${e}`),e){case"alarm":return"var(--_error)";case"heating":return"var(--_heating)";case"cooling":return"var(--_cooling)";default:return"lime"}};t.COMPONENT_TYPE=u.HX_COMPONENT_TYPE,n=(0,r.useCreateContext)("HxCompound"),t.HxContextProvider=n[0],t.useHxContext=n[1],t.HeatExchangerCompound={Root:({componentProps:e,itemProps:a,onActionPerformed:n,children:r})=>o.createElement(t.HxContextProvider,{itemProps:a,componentProps:e,onActionPerformed:n},r),plate:()=>{const{itemProps:e,onActionPerformed:a,componentProps:n}=(0,t.useHxContext)("Plate"),r=o.useRef(null),{emit:p}=n,{type:d,locate:m,mode:f}=e,v=(e=>{switch(e){case"plate":return 18;case"tubular":return 15;default:return 0}})(null!=d?d:0);let h=(0,s.buildComponentElements)(v,0);m||(console.log(`locate is: ${m}`),h=h.slice(0,-1)),console.log(`componentItemNames: ${JSON.stringify(h,null,2)}`);const b=`heat-exchanger ${null!=d?d:""}`;return o.createElement("div",Object.assign({ref:r},p({classes:[`${u.IA_SYMBOL_COMPONENT_COLUMN}`]}),{"data-component":t.COMPONENT_TYPE,onClick:a}),o.createElement("div",{className:`${u.IA_SYMBOL_COMPONENT_ROW}`},o.createElement("div",{className:`${u.IA_SYMBOL_COMPONENT_WRAPPER}`},o.createElement("div",{className:`${u.HMI_COMPONENT_CLASS} ${b}`,style:{"--hmi-plate-color":c(null!=f?f:"")}},h.map((({name:e,index:t,key:a})=>o.createElement(l.default,{itemClassName:e+" "+(0,i.getClassNameWithStatus)(t,void 0,u.hxElements,"",v,524287,0,0),key:a})))))))},popover:({anchorEl:e})=>{const{itemProps:a,componentProps:n}=(0,t.useHxContext)("Popover"),{showLabel:r,labelPosition:l,itemName:s}=a;if(!r)return null;const{position:u}=n;let c="itemId popover position-left";return l&&(c=(0,i.getItemIdPositionClassName)(c,l)),o.createElement("div",{className:c,style:{top:u.y,left:u.x}},o.createElement("div",{style:{padding:8}},s))}}},124:e=>{"use strict";var t,a=Object.defineProperty,n=Object.getOwnPropertyDescriptor,o=Object.getOwnPropertyNames,r=Object.prototype.hasOwnProperty,l={};((e,t)=>{for(var n in t)a(e,n,{get:t[n],enumerable:!0})})(l,{Immer:()=>K,applyPatches:()=>le,castDraft:()=>ue,castImmutable:()=>ce,createDraft:()=>ie,current:()=>G,enableMapSet:()=>ee,enablePatches:()=>Z,finishDraft:()=>se,freeze:()=>C,immerable:()=>s,isDraft:()=>d,isDraftable:()=>m,nothing:()=>i,original:()=>h,produce:()=>ae,produceWithPatches:()=>ne,setAutoFreeze:()=>oe,setUseStrictShallowCopy:()=>re}),e.exports=(t=l,((e,t,l,i)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let l of o(t))!r.call(e,l)&&undefined!==l&&a(e,l,{get:()=>t[l],enumerable:!(i=n(t,l))||i.enumerable});return e})(a({},"__esModule",{value:!0}),t));var i=Symbol.for("immer-nothing"),s=Symbol.for("immer-draftable"),u=Symbol.for("immer-state");function c(e,...t){throw new Error(`[Immer] minified error nr: ${e}. Full error at: https://bit.ly/3cXEKWf`)}var p=Object.getPrototypeOf;function d(e){return!!e&&!!e[u]}function m(e){return!!e&&(v(e)||Array.isArray(e)||!!e[s]||!!e.constructor?.[s]||N(e)||_(e))}var f=Object.prototype.constructor.toString();function v(e){if(!e||"object"!=typeof e)return!1;let t=p(e);if(null===t)return!0;let a=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return a===Object||"function"==typeof a&&Function.toString.call(a)===f}function h(e){return d(e)||c(15),e[u].t}function b(e,t){0===P(e)?Reflect.ownKeys(e).forEach((a=>{t(a,e[a],e)})):e.forEach(((a,n)=>t(n,a,e)))}function P(e){let t=e[u];return t?t.o:Array.isArray(e)?1:N(e)?2:_(e)?3:0}function O(e,t){return 2===P(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function g(e,t){return 2===P(e)?e.get(t):e[t]}function M(e,t,a){let n=P(e);2===n?e.set(t,a):3===n?e.add(a):e[t]=a}function N(e){return e instanceof Map}function _(e){return e instanceof Set}function E(e){return e.e||e.t}function y(e,t){if(N(e))return new Map(e);if(_(e))return new Set(e);if(Array.isArray(e))return Array.prototype.slice.call(e);let a=v(e);if(!0===t||"class_only"===t&&!a){let t=Object.getOwnPropertyDescriptors(e);delete t[u];let a=Reflect.ownKeys(t);for(let n=0;n<a.length;n++){let o=a[n],r=t[o];!1===r.writable&&(r.writable=!0,r.configurable=!0),(r.get||r.set)&&(t[o]={configurable:!0,writable:!0,enumerable:r.enumerable,value:e[o]})}return Object.create(p(e),t)}{let t=p(e);if(null!==t&&a)return{...e};let n=Object.create(t);return Object.assign(n,e)}}function C(e,t=!1){return A(e)||d(e)||!m(e)||(P(e)>1&&(e.set=e.add=e.clear=e.delete=S),Object.freeze(e),t&&Object.entries(e).forEach((([e,t])=>C(t,!0)))),e}function S(){c(2)}function A(e){return Object.isFrozen(e)}var T,w={};function I(e){let t=w[e];return t||c(0),t}function j(e,t){w[e]||(w[e]=t)}function x(){return T}function L(e,t){t&&(I("Patches"),e.f=[],e.h=[],e.b=t)}function V(e){U(e),e.a.forEach(B),e.a=null}function U(e){e===T&&(T=e.i)}function R(e){return T=function(e,t){return{a:[],i:e,p:t,P:!0,d:0}}(T,e)}function B(e){let t=e[u];0===t.o||1===t.o?t.x():t.m=!0}function k(e,t){t.d=t.a.length;let a=t.a[0];return void 0!==e&&e!==a?(a[u].s&&(V(t),c(4)),m(e)&&(e=D(t,e),t.i||$(t,e)),t.f&&I("Patches").T(a[u].t,e,t.f,t.h)):e=D(t,a,[]),V(t),t.f&&t.b(t.f,t.h),e!==i?e:void 0}function D(e,t,a){if(A(t))return t;let n=t[u];if(!n)return b(t,((o,r)=>Y(e,n,t,o,r,a))),t;if(n.n!==e)return t;if(!n.s)return $(e,n.t,!0),n.t;if(!n.c){n.c=!0,n.n.d--;let t=n.e,o=t,r=!1;3===n.o&&(o=new Set(t),t.clear(),r=!0),b(o,((o,l)=>Y(e,n,t,o,l,a,r))),$(e,t,!1),a&&e.f&&I("Patches").g(n,a,e.f,e.h)}return n.e}function Y(e,t,a,n,o,r,l){if(d(o)){let l=D(e,o,r&&t&&3!==t.o&&!O(t.r,n)?r.concat(n):void 0);if(M(a,n,l),!d(l))return;e.P=!1}else l&&a.add(o);if(m(o)&&!A(o)){if(!e.p.y&&e.d<1)return;D(e,o),(!t||!t.n.i)&&"symbol"!=typeof n&&Object.prototype.propertyIsEnumerable.call(a,n)&&$(e,o)}}function $(e,t,a=!1){!e.i&&e.p.y&&e.P&&C(t,a)}var H={get(e,t){if(t===u)return e;let a=E(e);if(!O(a,t))return function(e,t,a){let n=z(t,a);return n?"value"in n?n.value:n.get?.call(e.u):void 0}(e,a,t);let n=a[t];return e.c||!m(n)?n:n===W(e.t,t)?(X(e),e.e[t]=J(n,e)):n},has:(e,t)=>t in E(e),ownKeys:e=>Reflect.ownKeys(E(e)),set(e,t,a){let n=z(E(e),t);if(n?.set)return n.set.call(e.u,a),!0;if(!e.s){let n=W(E(e),t),o=n?.[u];if(o&&o.t===a)return e.e[t]=a,e.r[t]=!1,!0;if(function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}(a,n)&&(void 0!==a||O(e.t,t)))return!0;X(e),q(e)}return e.e[t]===a&&(void 0!==a||t in e.e)||Number.isNaN(a)&&Number.isNaN(e.e[t])||(e.e[t]=a,e.r[t]=!0),!0},deleteProperty:(e,t)=>(void 0!==W(e.t,t)||t in e.t?(e.r[t]=!1,X(e),q(e)):delete e.r[t],e.e&&delete e.e[t],!0),getOwnPropertyDescriptor(e,t){let a=E(e),n=Reflect.getOwnPropertyDescriptor(a,t);return n&&{writable:!0,configurable:1!==e.o||"length"!==t,enumerable:n.enumerable,value:a[t]}},defineProperty(){c(11)},getPrototypeOf:e=>p(e.t),setPrototypeOf(){c(12)}},F={};function W(e,t){let a=e[u];return(a?E(a):e)[t]}function z(e,t){if(!(t in e))return;let a=p(e);for(;a;){let e=Object.getOwnPropertyDescriptor(a,t);if(e)return e;a=p(a)}}function q(e){e.s||(e.s=!0,e.i&&q(e.i))}function X(e){e.e||(e.e=y(e.t,e.n.p.S))}b(H,((e,t)=>{F[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),F.deleteProperty=function(e,t){return F.set.call(this,e,t,void 0)},F.set=function(e,t,a){return H.set.call(this,e[0],t,a,e[0])};var K=class{constructor(e){this.y=!0,this.S=!1,this.produce=(e,t,a)=>{if("function"==typeof e&&"function"!=typeof t){let a=t;t=e;let n=this;return function(e=a,...o){return n.produce(e,(e=>t.call(this,e,...o)))}}let n;if("function"!=typeof t&&c(6),void 0!==a&&"function"!=typeof a&&c(7),m(e)){let o=R(this),r=J(e,void 0),l=!0;try{n=t(r),l=!1}finally{l?V(o):U(o)}return L(o,a),k(n,o)}if(!e||"object"!=typeof e){if(n=t(e),void 0===n&&(n=e),n===i&&(n=void 0),this.y&&C(n,!0),a){let t=[],o=[];I("Patches").T(e,n,t,o),a(t,o)}return n}c(1)},this.produceWithPatches=(e,t)=>{if("function"==typeof e)return(t,...a)=>this.produceWithPatches(t,(t=>e(t,...a)));let a,n;return[this.produce(e,t,((e,t)=>{a=e,n=t})),a,n]},"boolean"==typeof e?.autoFreeze&&this.setAutoFreeze(e.autoFreeze),"boolean"==typeof e?.useStrictShallowCopy&&this.setUseStrictShallowCopy(e.useStrictShallowCopy)}createDraft(e){m(e)||c(8),d(e)&&(e=G(e));let t=R(this),a=J(e,void 0);return a[u].l=!0,U(t),a}finishDraft(e,t){let a=e&&e[u];(!a||!a.l)&&c(9);let{n}=a;return L(n,t),k(void 0,n)}setAutoFreeze(e){this.y=e}setUseStrictShallowCopy(e){this.S=e}applyPatches(e,t){let a;for(a=t.length-1;a>=0;a--){let n=t[a];if(0===n.path.length&&"replace"===n.op){e=n.value;break}}a>-1&&(t=t.slice(a+1));let n=I("Patches").A;return d(e)?n(e,t):this.produce(e,(e=>n(e,t)))}};function J(e,t){let a=N(e)?I("MapSet").I(e,t):_(e)?I("MapSet").D(e,t):function(e,t){let a=Array.isArray(e),n={o:a?1:0,n:t?t.n:x(),s:!1,c:!1,r:{},i:t,t:e,u:null,e:null,x:null,l:!1},o=n,r=H;a&&(o=[n],r=F);let{revoke:l,proxy:i}=Proxy.revocable(o,r);return n.u=i,n.x=l,i}(e,t);return(t?t.n:x()).a.push(a),a}function G(e){return d(e)||c(10),Q(e)}function Q(e){if(!m(e)||A(e))return e;let t,a=e[u];if(a){if(!a.s)return a.t;a.c=!0,t=y(e,a.n.p.S)}else t=y(e,!0);return b(t,((e,a)=>{M(t,e,Q(a))})),a&&(a.c=!1),t}function Z(){let e="replace",t="add",a="remove";function n(e){if(!m(e))return e;if(Array.isArray(e))return e.map(n);if(N(e))return new Map(Array.from(e.entries()).map((([e,t])=>[e,n(t)])));if(_(e))return new Set(Array.from(e).map(n));let t=Object.create(p(e));for(let a in e)t[a]=n(e[a]);return O(e,s)&&(t[s]=e[s]),t}function o(e){return d(e)?n(e):e}j("Patches",{A:function(o,r){return r.forEach((r=>{let{path:l,op:i}=r,s=o;for(let e=0;e<l.length-1;e++){let t=P(s),a=l[e];"string"!=typeof a&&"number"!=typeof a&&(a=""+a),(0===t||1===t)&&("__proto__"===a||"constructor"===a)&&c(19),"function"==typeof s&&"prototype"===a&&c(19),s=g(s,a),"object"!=typeof s&&c(18,l.join("/"))}let u=P(s),p=n(r.value),d=l[l.length-1];switch(i){case e:switch(u){case 2:return s.set(d,p);case 3:c(16);default:return s[d]=p}case t:switch(u){case 1:return"-"===d?s.push(p):s.splice(d,0,p);case 2:return s.set(d,p);case 3:return s.add(p);default:return s[d]=p}case a:switch(u){case 1:return s.splice(d,1);case 2:return s.delete(d);case 3:return s.delete(r.value);default:return delete s[d]}default:c(17)}})),o},g:function(n,r,l,i){switch(n.o){case 0:case 2:return function(n,r,l,i){let{t:s,e:u}=n;b(n.r,((n,c)=>{let p=g(s,n),d=g(u,n),m=c?O(s,n)?e:t:a;if(p===d&&m===e)return;let f=r.concat(n);l.push(m===a?{op:m,path:f}:{op:m,path:f,value:d}),i.push(m===t?{op:a,path:f}:m===a?{op:t,path:f,value:o(p)}:{op:e,path:f,value:o(p)})}))}(n,r,l,i);case 1:return function(n,r,l,i){let{t:s,r:u}=n,c=n.e;c.length<s.length&&([s,c]=[c,s],[l,i]=[i,l]);for(let t=0;t<s.length;t++)if(u[t]&&c[t]!==s[t]){let a=r.concat([t]);l.push({op:e,path:a,value:o(c[t])}),i.push({op:e,path:a,value:o(s[t])})}for(let e=s.length;e<c.length;e++){let a=r.concat([e]);l.push({op:t,path:a,value:o(c[e])})}for(let e=c.length-1;s.length<=e;--e){let t=r.concat([e]);i.push({op:a,path:t})}}(n,r,l,i);case 3:return function(e,n,o,r){let{t:l,e:i}=e,s=0;l.forEach((e=>{if(!i.has(e)){let l=n.concat([s]);o.push({op:a,path:l,value:e}),r.unshift({op:t,path:l,value:e})}s++})),s=0,i.forEach((e=>{if(!l.has(e)){let l=n.concat([s]);o.push({op:t,path:l,value:e}),r.unshift({op:a,path:l,value:e})}s++}))}(n,r,l,i)}},T:function(t,a,n,o){n.push({op:e,path:[],value:a===i?void 0:a}),o.push({op:e,path:[],value:t})}})}function ee(){class e extends Map{constructor(e,t){super(),this[u]={o:2,i:t,n:t?t.n:x(),s:!1,c:!1,e:void 0,r:void 0,t:e,u:this,l:!1,m:!1}}get size(){return E(this[u]).size}has(e){return E(this[u]).has(e)}set(e,a){let n=this[u];return o(n),(!E(n).has(e)||E(n).get(e)!==a)&&(t(n),q(n),n.r.set(e,!0),n.e.set(e,a),n.r.set(e,!0)),this}delete(e){if(!this.has(e))return!1;let a=this[u];return o(a),t(a),q(a),a.t.has(e)?a.r.set(e,!1):a.r.delete(e),a.e.delete(e),!0}clear(){let e=this[u];o(e),E(e).size&&(t(e),q(e),e.r=new Map,b(e.t,(t=>{e.r.set(t,!1)})),e.e.clear())}forEach(e,t){E(this[u]).forEach(((a,n,o)=>{e.call(t,this.get(n),n,this)}))}get(e){let a=this[u];o(a);let n=E(a).get(e);if(a.c||!m(n)||n!==a.t.get(e))return n;let r=J(n,a);return t(a),a.e.set(e,r),r}keys(){return E(this[u]).keys()}values(){let e=this.keys();return{[Symbol.iterator]:()=>this.values(),next:()=>{let t=e.next();return t.done?t:{done:!1,value:this.get(t.value)}}}}entries(){let e=this.keys();return{[Symbol.iterator]:()=>this.entries(),next:()=>{let t=e.next();if(t.done)return t;let a=this.get(t.value);return{done:!1,value:[t.value,a]}}}}[Symbol.iterator](){return this.entries()}}function t(e){e.e||(e.r=new Map,e.e=new Map(e.t))}class a extends Set{constructor(e,t){super(),this[u]={o:3,i:t,n:t?t.n:x(),s:!1,c:!1,e:void 0,t:e,u:this,a:new Map,m:!1,l:!1}}get size(){return E(this[u]).size}has(e){let t=this[u];return o(t),t.e?!!(t.e.has(e)||t.a.has(e)&&t.e.has(t.a.get(e))):t.t.has(e)}add(e){let t=this[u];return o(t),this.has(e)||(n(t),q(t),t.e.add(e)),this}delete(e){if(!this.has(e))return!1;let t=this[u];return o(t),n(t),q(t),t.e.delete(e)||!!t.a.has(e)&&t.e.delete(t.a.get(e))}clear(){let e=this[u];o(e),E(e).size&&(n(e),q(e),e.e.clear())}values(){let e=this[u];return o(e),n(e),e.e.values()}entries(){let e=this[u];return o(e),n(e),e.e.entries()}keys(){return this.values()}[Symbol.iterator](){return this.values()}forEach(e,t){let a=this.values(),n=a.next();for(;!n.done;)e.call(t,n.value,n.value,this),n=a.next()}}function n(e){e.e||(e.e=new Set,e.t.forEach((t=>{if(m(t)){let a=J(t,e);e.a.set(t,a),e.e.add(a)}else e.e.add(t)})))}function o(e){e.m&&c(3,JSON.stringify(E(e)))}j("MapSet",{I:function(t,a){return new e(t,a)},D:function(e,t){return new a(e,t)}})}var te=new K,ae=te.produce,ne=te.produceWithPatches.bind(te),oe=te.setAutoFreeze.bind(te),re=te.setUseStrictShallowCopy.bind(te),le=te.applyPatches.bind(te),ie=te.createDraft.bind(te),se=te.finishDraft.bind(te);function ue(e){return e}function ce(e){return e}},152:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=a(883),o=({itemClassName:e,handleClick:t})=>n.createElement("div",{className:e,onClick:t});o.displayName="Item",t.default=o},182:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.version=t.validate=t.v7=t.v6ToV1=t.v6=t.v5=t.v4=t.v3=t.v1ToV6=t.v1=t.stringify=t.parse=t.NIL=t.MAX=void 0;var n=a(196);Object.defineProperty(t,"MAX",{enumerable:!0,get:function(){return n.default}});var o=a(465);Object.defineProperty(t,"NIL",{enumerable:!0,get:function(){return o.default}});var r=a(797);Object.defineProperty(t,"parse",{enumerable:!0,get:function(){return r.default}});var l=a(11);Object.defineProperty(t,"stringify",{enumerable:!0,get:function(){return l.default}});var i=a(425);Object.defineProperty(t,"v1",{enumerable:!0,get:function(){return i.default}});var s=a(568);Object.defineProperty(t,"v1ToV6",{enumerable:!0,get:function(){return s.default}});var u=a(591);Object.defineProperty(t,"v3",{enumerable:!0,get:function(){return u.default}});var c=a(286);Object.defineProperty(t,"v4",{enumerable:!0,get:function(){return c.default}});var p=a(557);Object.defineProperty(t,"v5",{enumerable:!0,get:function(){return p.default}});var d=a(356);Object.defineProperty(t,"v6",{enumerable:!0,get:function(){return d.default}});var m=a(268);Object.defineProperty(t,"v6ToV1",{enumerable:!0,get:function(){return m.default}});var f=a(299);Object.defineProperty(t,"v7",{enumerable:!0,get:function(){return f.default}});var v=a(746);Object.defineProperty(t,"validate",{enumerable:!0,get:function(){return v.default}});var h=a(770);Object.defineProperty(t,"version",{enumerable:!0,get:function(){return h.default}})},196:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="ffffffff-ffff-ffff-ffff-ffffffffffff"},268:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=a(797),o=a(11);t.default=function(e){const t=(a="string"==typeof e?(0,n.default)(e):e,Uint8Array.of((15&a[3])<<4|a[4]>>4&15,(15&a[4])<<4|(240&a[5])>>4,(15&a[5])<<4|15&a[6],a[7],(15&a[1])<<4|(240&a[2])>>4,(15&a[2])<<4|(240&a[3])>>4,16|(240&a[0])>>4,(15&a[0])<<4|(240&a[1])>>4,a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15]));var a;return"string"==typeof e?(0,o.unsafeStringify)(t):t}},286:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=a(779),o=a(291),r=a(11);t.default=function(e,t,a){if(n.default.randomUUID&&!t&&!e)return n.default.randomUUID();const l=(e=e||{}).random??e.rng?.()??(0,o.default)();if(l.length<16)throw new Error("Random bytes length must be >= 16");if(l[6]=15&l[6]|64,l[8]=63&l[8]|128,t){if((a=a||0)<0||a+16>t.length)throw new RangeError(`UUID byte range ${a}:${a+15} is out of buffer bounds`);for(let e=0;e<16;++e)t[a+e]=l[e];return t}return(0,r.unsafeStringify)(l)}},291:(e,t)=>{"use strict";let a;Object.defineProperty(t,"__esModule",{value:!0});const n=new Uint8Array(16);t.default=function(){if(!a){if("undefined"==typeof crypto||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");a=crypto.getRandomValues.bind(crypto)}return a(n)}},299:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateV7State=void 0;const n=a(291),o=a(11),r={};function l(e,t,a){return e.msecs??=-1/0,e.seq??=0,t>e.msecs?(e.seq=a[6]<<23|a[7]<<16|a[8]<<8|a[9],e.msecs=t):(e.seq=e.seq+1|0,0===e.seq&&e.msecs++),e}function i(e,t,a,n,o=0){if(e.length<16)throw new Error("Random bytes length must be >= 16");if(n){if(o<0||o+16>n.length)throw new RangeError(`UUID byte range ${o}:${o+15} is out of buffer bounds`)}else n=new Uint8Array(16),o=0;return t??=Date.now(),a??=127*e[6]<<24|e[7]<<16|e[8]<<8|e[9],n[o++]=t/1099511627776&255,n[o++]=t/4294967296&255,n[o++]=t/16777216&255,n[o++]=t/65536&255,n[o++]=t/256&255,n[o++]=255&t,n[o++]=112|a>>>28&15,n[o++]=a>>>20&255,n[o++]=128|a>>>14&63,n[o++]=a>>>6&255,n[o++]=a<<2&255|3&e[10],n[o++]=e[11],n[o++]=e[12],n[o++]=e[13],n[o++]=e[14],n[o++]=e[15],n}t.updateV7State=l,t.default=function(e,t,a){let s;if(e)s=i(e.random??e.rng?.()??(0,n.default)(),e.msecs,e.seq,t,a);else{const e=Date.now(),o=(0,n.default)();l(r,e,o),s=i(o,r.msecs,r.seq,t,a)}return t??(0,o.unsafeStringify)(s)}},338:(e,t)=>{"use strict";function a(e){return 14+(e+64>>>9<<4)+1}function n(e,t){const a=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(a>>16)<<16|65535&a}function o(e,t,a,o,r,l){return n((i=n(n(t,e),n(o,l)))<<(s=r)|i>>>32-s,a);var i,s}function r(e,t,a,n,r,l,i){return o(t&a|~t&n,e,t,r,l,i)}function l(e,t,a,n,r,l,i){return o(t&n|a&~n,e,t,r,l,i)}function i(e,t,a,n,r,l,i){return o(t^a^n,e,t,r,l,i)}function s(e,t,a,n,r,l,i){return o(a^(t|~n),e,t,r,l,i)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return function(e){const t=new Uint8Array(4*e.length);for(let a=0;a<4*e.length;a++)t[a]=e[a>>2]>>>a%4*8&255;return t}(function(e,t){const o=new Uint32Array(a(t)).fill(0);o.set(e),o[t>>5]|=128<<t%32,o[o.length-1]=t,e=o;let u=1732584193,c=-271733879,p=-1732584194,d=271733878;for(let t=0;t<e.length;t+=16){const a=u,o=c,m=p,f=d;u=r(u,c,p,d,e[t],7,-680876936),d=r(d,u,c,p,e[t+1],12,-389564586),p=r(p,d,u,c,e[t+2],17,606105819),c=r(c,p,d,u,e[t+3],22,-1044525330),u=r(u,c,p,d,e[t+4],7,-176418897),d=r(d,u,c,p,e[t+5],12,1200080426),p=r(p,d,u,c,e[t+6],17,-1473231341),c=r(c,p,d,u,e[t+7],22,-45705983),u=r(u,c,p,d,e[t+8],7,1770035416),d=r(d,u,c,p,e[t+9],12,-1958414417),p=r(p,d,u,c,e[t+10],17,-42063),c=r(c,p,d,u,e[t+11],22,-1990404162),u=r(u,c,p,d,e[t+12],7,1804603682),d=r(d,u,c,p,e[t+13],12,-40341101),p=r(p,d,u,c,e[t+14],17,-1502002290),c=r(c,p,d,u,e[t+15],22,1236535329),u=l(u,c,p,d,e[t+1],5,-165796510),d=l(d,u,c,p,e[t+6],9,-1069501632),p=l(p,d,u,c,e[t+11],14,643717713),c=l(c,p,d,u,e[t],20,-373897302),u=l(u,c,p,d,e[t+5],5,-701558691),d=l(d,u,c,p,e[t+10],9,38016083),p=l(p,d,u,c,e[t+15],14,-660478335),c=l(c,p,d,u,e[t+4],20,-405537848),u=l(u,c,p,d,e[t+9],5,568446438),d=l(d,u,c,p,e[t+14],9,-1019803690),p=l(p,d,u,c,e[t+3],14,-187363961),c=l(c,p,d,u,e[t+8],20,1163531501),u=l(u,c,p,d,e[t+13],5,-1444681467),d=l(d,u,c,p,e[t+2],9,-51403784),p=l(p,d,u,c,e[t+7],14,1735328473),c=l(c,p,d,u,e[t+12],20,-1926607734),u=i(u,c,p,d,e[t+5],4,-378558),d=i(d,u,c,p,e[t+8],11,-2022574463),p=i(p,d,u,c,e[t+11],16,1839030562),c=i(c,p,d,u,e[t+14],23,-35309556),u=i(u,c,p,d,e[t+1],4,-1530992060),d=i(d,u,c,p,e[t+4],11,1272893353),p=i(p,d,u,c,e[t+7],16,-155497632),c=i(c,p,d,u,e[t+10],23,-1094730640),u=i(u,c,p,d,e[t+13],4,681279174),d=i(d,u,c,p,e[t],11,-358537222),p=i(p,d,u,c,e[t+3],16,-722521979),c=i(c,p,d,u,e[t+6],23,76029189),u=i(u,c,p,d,e[t+9],4,-640364487),d=i(d,u,c,p,e[t+12],11,-421815835),p=i(p,d,u,c,e[t+15],16,530742520),c=i(c,p,d,u,e[t+2],23,-995338651),u=s(u,c,p,d,e[t],6,-198630844),d=s(d,u,c,p,e[t+7],10,1126891415),p=s(p,d,u,c,e[t+14],15,-1416354905),c=s(c,p,d,u,e[t+5],21,-57434055),u=s(u,c,p,d,e[t+12],6,1700485571),d=s(d,u,c,p,e[t+3],10,-1894986606),p=s(p,d,u,c,e[t+10],15,-1051523),c=s(c,p,d,u,e[t+1],21,-2054922799),u=s(u,c,p,d,e[t+8],6,1873313359),d=s(d,u,c,p,e[t+15],10,-30611744),p=s(p,d,u,c,e[t+6],15,-1560198380),c=s(c,p,d,u,e[t+13],21,1309151649),u=s(u,c,p,d,e[t+4],6,-145523070),d=s(d,u,c,p,e[t+11],10,-1120210379),p=s(p,d,u,c,e[t+2],15,718787259),c=s(c,p,d,u,e[t+9],21,-343485551),u=n(u,a),c=n(c,o),p=n(p,m),d=n(d,f)}return Uint32Array.of(u,c,p,d)}(function(e){if(0===e.length)return new Uint32Array;const t=new Uint32Array(a(8*e.length)).fill(0);for(let a=0;a<e.length;a++)t[a>>2]|=(255&e[a])<<a%4*8;return t}(e),8*e.length))}},348:(e,t,a)=>{var n=a(407),o=a(883);t.useImmer=function(e){var t=o.useState((function(){return n.freeze("function"==typeof e?e():e,!0)})),a=t[1];return[t[0],o.useCallback((function(e){a("function"==typeof e?n.produce(e):n.freeze(e))}),[])]},t.useImmerReducer=function(e,t,a){var r=o.useMemo((function(){return n.produce(e)}),[e]);return o.useReducer(r,t,a)}},356:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=a(11),o=a(425),r=a(568);t.default=function(e,t,a){e??={},a??=0;let l=(0,o.default)({...e,_v6:!0},new Uint8Array(16));if(l=(0,r.default)(l),t){for(let e=0;e<16;e++)t[a+e]=l[e];return t}return(0,n.unsafeStringify)(l)}},377:t=>{"use strict";t.exports=e},390:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.initialControlState=t.initialOffOnState=t.initialAutoManState=t.parameterInitialState=t.pumpInitialProps=t.pumpInitialStatus=t.valveProps=t.processObjectProps=t.valveStatus=void 0,t.valveStatus={alarm:!1,actFB:!1,deActFB:!0,activatedConfig:7,deactivatedConfig:5,itemName:"VXXX",manual:!1,masked:!1,changing:!1,locate:!1},t.processObjectProps={status:t.valveStatus},t.valveProps={processObject:t.processObjectProps,handleClick:()=>{console.log("Valve clicked")},labelPosition:"left",showLabel:!1},t.pumpInitialStatus={alarm:!1,actFB:!1,deActFB:!1,configuration:7,itemName:"itemName",manual:!1,masked:!1,changing:!1,locate:!1},t.pumpInitialProps={status:t.pumpInitialStatus},t.parameterInitialState=[{label:{text:"label",className:"",tooltipText:"",tooltipPosition:"",tooltipClassName:"",tooltipId:""},input:{type:"text",inputmode:"numeric",placeholder:"Enter a number",editable:!0,pattern:"^[0-9]*[.,]?[0-9]*$",min:0,max:100,decimalPlaces:2,eu:"µC",value:0}}],t.initialAutoManState={auto:!0,manual:!1},t.initialOffOnState={off:!1,on:!1},t.initialControlState={command:{available:{main:!1,upperSeat:!1,lowerSeat:!1},main:{label:"Main",autoManual:!1,activation:!1},upperSeat:{label:"Upper Seat",activation:!1},lowerSeat:{label:"Lower Seat",activation:!1}}}},405:(e,t)=>{"use strict";var a;Object.defineProperty(t,"__esModule",{value:!0}),t.HxItemList=t.HxModes=t.HX_COMPONENT_TYPE=void 0,t.HX_COMPONENT_TYPE="hmi.process_objects.HeatExchanger",function(e){e.alarm="alarm",e.heating="heating",e.cooling="cooling"}(a||(t.HxModes=a={})),t.HxItemList=["item-1","item-2","item-3","item-4","item-5","item-6","item-7","base-1","locate"]},407:(e,t,a)=>{"use strict";e.exports=a(124)},425:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateV1State=void 0;const n=a(291),o=a(11),r={};function l(e,t,a){return e.msecs??=-1/0,e.nsecs??=0,t===e.msecs?(e.nsecs++,e.nsecs>=1e4&&(e.node=void 0,e.nsecs=0)):t>e.msecs?e.nsecs=0:t<e.msecs&&(e.node=void 0),e.node||(e.node=a.slice(10,16),e.node[0]|=1,e.clockseq=16383&(a[8]<<8|a[9])),e.msecs=t,e}function i(e,t,a,n,o,r,l=0){if(e.length<16)throw new Error("Random bytes length must be >= 16");if(r){if(l<0||l+16>r.length)throw new RangeError(`UUID byte range ${l}:${l+15} is out of buffer bounds`)}else r=new Uint8Array(16),l=0;t??=Date.now(),a??=0,n??=16383&(e[8]<<8|e[9]),o??=e.slice(10,16);const i=(1e4*(268435455&(t+=122192928e5))+a)%4294967296;r[l++]=i>>>24&255,r[l++]=i>>>16&255,r[l++]=i>>>8&255,r[l++]=255&i;const s=t/4294967296*1e4&268435455;r[l++]=s>>>8&255,r[l++]=255&s,r[l++]=s>>>24&15|16,r[l++]=s>>>16&255,r[l++]=n>>>8|128,r[l++]=255&n;for(let e=0;e<6;++e)r[l++]=o[e];return r}t.updateV1State=l,t.default=function(e,t,a){let s;const u=e?._v6??!1;if(e){const t=Object.keys(e);1===t.length&&"_v6"===t[0]&&(e=void 0)}if(e)s=i(e.random??e.rng?.()??(0,n.default)(),e.msecs,e.nsecs,e.clockseq,e.node,t,a);else{const e=Date.now(),o=(0,n.default)();l(r,e,o),s=i(o,r.msecs,r.nsecs,u?void 0:r.clockseq,u?void 0:r.node,t,a)}return t??(0,o.unsafeStringify)(s)}},429:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getBoolAtIndex=void 0,t.convertTPValveConfigToHmiValveConfig=function(e){let t,a,n=0;return e>>9&1?(t=9,a=9,n=n&~(1<<a)|(e>>t&1)<<a,t=0,a=0,n=n&~(1<<a)|(e>>t&1)<<a,t=4,a=2,n=n&~(1<<a)|(e>>t&1)<<a,t=6,a=3,n=n&~(1<<a)|(e>>t&1)<<a,t=2,a=1,n=n&~(1<<a)|(e>>t&1)<<a):(t=7,a=3,n=n&~(1<<a)|(e>>t&1)<<a,t=5,a=7,n=n&~(1<<a)|(e>>t&1)<<a,t=3,a=5,n=n&~(1<<a)|(e>>t&1)<<a,t=4,a=6,n=n&~(1<<a)|(e>>t&1)<<a),e>>8&1&&(n|=276),1&e&&(n|=1),e>>1&1&&(n|=2),n>>7&1|n>>6&1|n>>5&1&&(n|=256),n},t.getBoolAtIndex=(e,t)=>Boolean(e>>t&1)},441:(e,t,a)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.PumpCompound=t.usePumpContext=t.PumpContextProvider=t.COMPONENT_TYPE=void 0;const o=a(883),r=a(535),l=a(152),i=a(506),s=a(390),u=a(921);t.COMPONENT_TYPE=u.PUMP_COMPONENT_TYPE,n=(0,r.useCreateContext)("PumpCompound"),t.PumpContextProvider=n[0],t.usePumpContext=n[1],t.PumpCompound={Root:({componentProps:e,pumpProps:a,onActionPerformed:n,children:r})=>o.createElement(t.PumpContextProvider,{pumpProps:a,componentProps:e,onActionPerformed:n},r),pump:()=>{const{pumpProps:e,onActionPerformed:a,componentProps:n}=(0,t.usePumpContext)("Valve"),r=o.useRef(null),{emit:c}=n,{processObject:p,pumpType:d}=e,{status:m}=p||s.pumpInitialProps,f=o.useMemo((()=>(null==m?void 0:m.locate)?i.pumpItemNames:i.pumpItemNames.slice(0,-1)),[null==m?void 0:m.locate]);return o.createElement("div",Object.assign({ref:r},c({classes:[`${u.IA_SYMBOL_COMPONENT_COLUMN}`]}),{"data-component":t.COMPONENT_TYPE,onClick:a}),o.createElement("div",{className:`${u.IA_SYMBOL_COMPONENT_ROW}`},o.createElement("div",{className:`${u.IA_SYMBOL_COMPONENT_WRAPPER}`},o.createElement("div",{className:`${u.HMI_COMPONENT_CLASS} pump`},o.createElement(l.default,{itemClassName:`${(0,i.getPumpStatusClassNames)("base-1 show",m)}`}),o.createElement(l.default,{itemClassName:"base-2 show item"}),o.createElement(l.default,{itemClassName:"base-3 show item"}),f.map((({name:e,index:t,key:a})=>o.createElement(l.default,{itemClassName:e+" "+(0,i.getPumpItemClassName)(t,d||"centrifugal",m),key:a})))))))},popover:({anchorEl:e})=>{const{pumpProps:a,componentProps:n}=(0,t.usePumpContext)("Popover"),{showLabel:r,labelPosition:l,processObject:s}=a,{status:u}=s||{};if(!r)return null;const{position:c}=n;let p="itemId popover position-left";return l&&(p=(0,i.getItemIdPositionClassName)(p,l)),o.createElement("div",{className:p,style:{top:c.y,left:c.x}},o.createElement("div",{style:{padding:8}},null==u?void 0:u.itemName))}}},445:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.buildComponentElements=t.getHxModeClassNames=t.getHxItemClassName=t.hxItemNames=void 0;const n=a(182),o=a(405),r=a(429);t.hxItemNames=o.HxItemList.map(((e,t)=>({key:(0,n.v4)(),name:e,index:t}))),t.getHxItemClassName=(e,t,a)=>{const n=(e=>{switch(e){case"plate":case"tubelar":return 1;default:throw Error(`In getPumpConfiguration() pump type: ${e} not found`)}})(t);let o="";return e<2&&(o=(0,r.getBoolAtIndex)(n,e)?`show item ${t}`:"hide item"),o},t.getHxModeClassNames=(e,t)=>{if(e.includes("show")&&!e.includes("item"))switch(t){case"alarm":e=e.replace("AlarmState","")+" AlarmState";break;case"heating":e=e.replace("heating","")+" heating";break;case"cooling":e=e.replace("cooling","")+" cooling"}return e},t.buildComponentElements=(e,t)=>{let a=[];for(let o=0;o<e+t;o++){let r={key:(0,n.v4)(),name:o<e?`base-${o+1}`:`dynamic-${o+(1-t)}`,index:o};a.push(r)}let o={key:(0,n.v4)(),name:"locate",index:e+t};return a.push(o),a}},465:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="00000000-0000-0000-0000-000000000000"},506:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getPumpStatusClassNames=t.getPumpItemClassName=t.pumpItemNames=t.getItemIdPositionClassName=t.valveMpItemNames=t.getClassNameWithStatus=t.getValveMpItemClassName=void 0;const n=a(429),o=a(542),r=a(182);t.getValveMpItemClassName=(e,t)=>{var a,o;let r="";const l=(0,n.convertTPValveConfigToHmiValveConfig)(null!==(a=null==t?void 0:t.activatedConfig)&&void 0!==a?a:0),i=(0,n.convertTPValveConfigToHmiValveConfig)(null!==(o=null==t?void 0:t.deactivatedConfig)&&void 0!==o?o:0);return console.log(`DeactivatedConfigValue: ${i}`),e<8?r=(0,n.getBoolAtIndex)(l,e)&&(null==t?void 0:t.actFB)||(0,n.getBoolAtIndex)(i,e)&&(null==t?void 0:t.deActFB)?"show item":"hide item":9===e?r="show":8===e?r=(0,n.getBoolAtIndex)(l,e)||(0,n.getBoolAtIndex)(i,e)?"show":"hide":10===e?(0,n.getBoolAtIndex)(l,10)||(0,n.getBoolAtIndex)(i,10)?(r="show item",r=(null==t?void 0:t.usl)?r.replace("activated","")+" activated":r.replace("deactivated","")+" deactivated"):r="hide item":11===e?(0,n.getBoolAtIndex)(l,11)||(0,n.getBoolAtIndex)(i,11)?(r="show item",r=(null==t?void 0:t.lsl)?r.replace("activated","")+" activated":r.replace("deactivated","")+" deactivated"):r="hide item":12===e&&((null==t?void 0:t.locate)?(r=r.replace("small","")+" small",((0,n.getBoolAtIndex)(l,8)||(0,n.getBoolAtIndex)(i,8))&&(r=r.replace("large","")+" large")):r=r.replace("hide item","")+" hide item"),r.includes("show")&&!r.includes("item")&&((null==t?void 0:t.alarm)&&(r=r.replace("alarm","")+" alarm"),(null==t?void 0:t.changing)&&(r=r.replace("changing","")+" changing"),(null==t?void 0:t.manual)&&(r=r.replace("manual","")+" manual"),(null==t?void 0:t.masked)&&!t.alarm&&(r=r.replace("no-alarm-mask","")+" no-alarm-mask"),(null==t?void 0:t.masked)&&(r=r.replace("masked","")+" masked"),(null==t?void 0:t.actFB)&&(r=r.replace("activated","")+" activated"),(null==t?void 0:t.deActFB)&&(r=r.replace("deactivated","")+" deactivated")),r},t.getClassNameWithStatus=(e,t,a,o,r,l,i,s)=>{var u;let c="",p="";if(a&&(null===(u=a[e])||void 0===u?void 0:u.statusKey)&&t){const n=a[e].statusKey,o=Object.keys(n).filter((e=>e in t));for(const e of o){const a=n[e];p+=t[e]?` ${(null==a?void 0:a.trueString)?a.trueString:""}`:` ${(null==a?void 0:a.falseString)?a.falseString:""}`}}if(r&&l){if(e<r){let t=e>0?"item":`${o}`;c=(0,n.getBoolAtIndex)(l,e)?`show ${t} ${p}`:`hide ${t}`}if(i&&s){let t=e-r;e>=r&&e<r+i&&(c=(0,n.getBoolAtIndex)(s,t)?"show item":"hide item")}}return c},t.valveMpItemNames=Object.entries(o.valveMpItemNameEnum).map(((e,t)=>({key:(0,r.v4)(),name:e,value:e[1],index:t}))),t.getItemIdPositionClassName=(e,t)=>{if(!e.includes("itemId popover"))return console.warn("Function getItemIdPositionClassName called when 'itemId popover' not in given className"),e;switch(e="itemId popover",t){case"left":e=e.replace("position-left","")+" position-left";break;case"right":e=e.replace("position-right","")+" position-right";break;case"top-left":e=e.replace("position-top-left","")+" position-top-left";break;case"top-right":e=e.replace("position-top-right","")+" position-top-right";break;case"bottom-left":e=e.replace("position-bottom-left","")+" position-bottom-left";break;case"bottom-right":e=e.replace("position-bottom-right","")+" position-bottom-right"}return e},t.pumpItemNames=o.pumpItemList.map(((e,t)=>({key:(0,r.v4)(),name:e,index:t}))),t.getPumpItemClassName=(e,t,a)=>{const o=(e=>{switch(e){case"centrifugal":case"diaphragm":case"positive-displacement":case"progressive-cavity":return 1;case"gear":case"liquid-ring":case"positive-screw":return 3;default:throw Error(`In getPumpConfiguration() pump type: ${e} not found`)}})(t);let r="";return e<2&&(r=(0,n.getBoolAtIndex)(o,e)?`show item ${t}`:"hide item"),r},t.getPumpStatusClassNames=(e,t)=>(e.includes("show")&&!e.includes("item")&&((null==t?void 0:t.alarm)&&(e=e.replace("alarm","")+" alarm"),(null==t?void 0:t.changing)&&(e=e.replace("changing","")+" changing"),(null==t?void 0:t.manual)&&(e=e.replace("manual","")+" manual"),(null==t?void 0:t.masked)&&!t.alarm&&(e=e.replace("no-alarm-mask","")+" no-alarm-mask"),(null==t?void 0:t.masked)&&(e=e.replace("masked","")+" masked"),(null==t?void 0:t.actFB)&&(e=e.replace("activated","")+" activated"),(null==t?void 0:t.deActFB)&&(e=e.replace("deactivated","")+" deactivated")),e)},511:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ParameterReducer=r,t.paramItemsReducer=function(){const[e,t]=(0,n.useImmerReducer)(r,o.parameterInitialState);return{state:e,reducer:{updateValue:function(e,a){t({type:"UPDATE_VALUE",index:e,value:a})}}}},t.useValveMpCommandReducer=function(){const[e,t]=(0,n.useImmerReducer)(l,o.initialControlState);return{state:e,reducer:{updateAutoManSelection:function(e){t({type:"UPDATE_AUTO_MANUAL",mode:e})},updateMainAvailable:function(e){t({type:"UPDATE_MAIN_AVAIL",value:e})},updateUpperSeatAvailable:function(e){t({type:"UPDATE_UPPERSEAT_AVAIL",value:e})},updateLowerSeatAvailable:function(e){t({type:"UPDATE_LOWERSEAT_AVAIL",value:e})},updateMainManualOn:function(){t({type:"UPDATE_MAIN_MAN_ON"})},updateMainManualOff:function(){t({type:"UPDATE_MAIN_MAN_OFF"})},updateUslManualOn:function(){t({type:"UPDATE_USL_MAN_ON"})},updateUslManualOff:function(){t({type:"UPDATE_USL_MAN_OFF"})},updateLslManualOn:function(){t({type:"UPDATE_LSL_MAN_ON"})},updateLslManualOff:function(){t({type:"UPDATE_LSL_MAN_OFF"})}}}};const n=a(348),o=a(390);function r(e,t){return"UPDATE_VALUE"===t.type?(e[t.index].input.value=t.value,e):e}function l(e,t){var a,n,o,r,l,i,s,u;switch(t.type){case"UPDATE_AUTO_MANUAL":if(null===(a=e.command)||void 0===a?void 0:a.main)if("auto"===t.mode)e.command.main.autoManual=!1,console.log("In Auto");else if("manual"===t.mode)return e.command.main.autoManual=!0,console.log("In Manual"),e;return e;case"UPDATE_MAIN_MAN_ON":return(null===(n=e.command)||void 0===n?void 0:n.main)&&(e.command.main.activation=!0),e;case"UPDATE_MAIN_MAN_OFF":return(null===(o=e.command)||void 0===o?void 0:o.main)&&(e.command.main.activation=!1),e;case"UPDATE_USL_MAN_ON":return(null===(r=e.command)||void 0===r?void 0:r.upperSeat)&&(e.command.upperSeat.activation=!0),e;case"UPDATE_USL_MAN_OFF":return(null===(l=e.command)||void 0===l?void 0:l.upperSeat)&&(e.command.upperSeat.activation=!1),e;case"UPDATE_LSL_MAN_ON":return(null===(i=e.command)||void 0===i?void 0:i.lowerSeat)&&(e.command.lowerSeat.activation=!0),e;case"UPDATE_LSL_MAN_OFF":return(null===(s=e.command)||void 0===s?void 0:s.lowerSeat)&&(e.command.lowerSeat.activation=!1),e;case"UPDATE_MAIN_AVAIL":return(null===(u=e.command)||void 0===u?void 0:u.available)&&t.value&&(e.command.available.main=t.value),e;default:return e}}},535:function(e,t,a){"use strict";var n=this&&this.__rest||function(e,t){var a={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(a[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(a[n[o]]=e[n[o]])}return a};Object.defineProperty(t,"__esModule",{value:!0}),t.useCreateContext=function(e,t){const a=o.createContext(t),r=e=>{const{children:t}=e,r=n(e,["children"]),l=o.useMemo((()=>r),Object.values(r));return o.createElement(a.Provider,{value:l},t)};return r.displayName=e+"Provider",[r,function(n){const r=o.useContext(a);if(r)return r;if(void 0!==t)return t;throw new Error(`\`${n}\` must be used within \`${e}\``)}]};const o=a(883)},542:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hxItemNameEnum=t.pumpItemList=t.valveMpItemNameEnum=t.ValveClassNameEnum=void 0,t.ValveClassNameEnum={AlarmState:"AlarmState",Activated:"Activated",Deactivated:"Deactivated",Manual:"Manual",Masked:"Masked",Changing:"Changing",NoAlarmMask:"NoAlarmMask",Locate:"Locate"},t.valveMpItemNameEnum={V1b1:"v1b1",V1b2:"v1b2",V1b3:"v1b3",V1b4:"v1b4",V2b1:"v2b1",V2b2:"v2b2",V2b3:"v2b3",V2b4:"v2b4",V2:"v2",v1:"v1",usl:"usl",lsl:"lsl",locate:"locate"},t.pumpItemList=["symbol-1","symbol-2","locate"],t.hxItemNameEnum={b1:"base-1",b2:"base-2",b3:"base-3",b4:"base-4",V2b1:"v2b1",V2b2:"v2b2",V2b3:"v2b3",V2b4:"v2b4",V2:"v2",v1:"v1",usl:"usl",lsl:"lsl",locate:"locate"}},557:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=void 0;const n=a(829),o=a(988);var r=a(988);function l(e,t,a,r){return(0,o.default)(80,n.default,e,t,a,r)}Object.defineProperty(t,"DNS",{enumerable:!0,get:function(){return r.DNS}}),Object.defineProperty(t,"URL",{enumerable:!0,get:function(){return r.URL}}),l.DNS=o.DNS,l.URL=o.URL,t.default=l},568:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=a(797),o=a(11);t.default=function(e){const t=(a="string"==typeof e?(0,n.default)(e):e,Uint8Array.of((15&a[6])<<4|a[7]>>4&15,(15&a[7])<<4|(240&a[4])>>4,(15&a[4])<<4|(240&a[5])>>4,(15&a[5])<<4|(240&a[0])>>4,(15&a[0])<<4|(240&a[1])>>4,(15&a[1])<<4|(240&a[2])>>4,96|15&a[2],a[3],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15]));var a;return"string"==typeof e?(0,o.unsafeStringify)(t):t}},570:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HeatExchangerMeta=t.HeatExchanger=t.COMPONENT_TYPE=void 0;const n=a(883),o=a(377),r=a(76);t.COMPONENT_TYPE="hmi.process_objects.HeatExchanger";class l extends o.Component{constructor(e){super(e),this.type=this.props.props.type,this.itemName=this.props.props.itemName,this.mode=this.props.props.mode,this.locate=this.props.props.locate,this.showLabel=this.props.props.showLabel||!1,this.labelPosition=this.props.props.labelPosition||"left",this.onActionPerformed=()=>{this.props.eventsEnabled?(console.log("Valve clicked!"),this.props.componentEvents.fireComponentEvent("onActionPerformed",{})):console.log("Valve is disabled in the design-scope")},this.valveRef=n.createRef()}componentDidMount(){}render(){return n.createElement(r.HeatExchangerCompound.Root,{componentProps:this.props,itemProps:this.props.props,onActionPerformed:this.onActionPerformed},n.createElement(r.HeatExchangerCompound.plate,null),n.createElement(r.HeatExchangerCompound.popover,{anchorEl:this.valveRef.current}))}}t.HeatExchanger=l,t.HeatExchangerMeta=class{getComponentType(){return t.COMPONENT_TYPE}getViewComponent(){return l}getDefaultSize(){return{width:40,height:70}}getPropsReducer(e){return{type:e.readString("type","plate"),mode:e.readString("mode","heating"),itemName:e.readString("itemName",""),locate:e.readBoolean("locate",!1),showLabel:e.readBoolean("showLabel",!1),labelPosition:e.readString("labelPosition","top-left")}}}},591:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=void 0;const n=a(338),o=a(988);var r=a(988);function l(e,t,a,r){return(0,o.default)(48,n.default,e,t,a,r)}Object.defineProperty(t,"DNS",{enumerable:!0,get:function(){return r.DNS}}),Object.defineProperty(t,"URL",{enumerable:!0,get:function(){return r.URL}}),l.DNS=o.DNS,l.URL=o.URL,t.default=l},697:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i},702:(e,t,a)=>{"use strict";a.r(t)},740:(e,t,a)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.ValveMpCompound=t.useValveContext=t.ValveContextProvider=void 0;const o=a(883),r=a(506),l=a(152),i=a(535),s=a(390),u=a(921),c=u.VALVE_COMPONENT_TYPE;n=(0,i.useCreateContext)("ValveMpCompound"),t.ValveContextProvider=n[0],t.useValveContext=n[1],t.ValveMpCompound={Root:({componentProps:e,valveProps:a,onActionPerformed:n,children:r})=>o.createElement(t.ValveContextProvider,{valveProps:a,componentProps:e,onActionPerformed:n},r),valve:()=>{const{valveProps:e,onActionPerformed:a,componentProps:n}=(0,t.useValveContext)("Valve"),i=o.useRef(null),{emit:p}=n,{processObject:d}=e,{status:m}=d||s.processObjectProps;let f=r.valveMpItemNames;return(null==m?void 0:m.locate)||(f=f.slice(0,-1)),o.createElement("div",Object.assign({ref:i},p({classes:[`${u.IA_SYMBOL_COMPONENT_COLUMN}`]}),{"data-component":c,onClick:a}),o.createElement("div",{className:`${u.IA_SYMBOL_COMPONENT_ROW}`},o.createElement("div",{className:`${u.IA_SYMBOL_COMPONENT_WRAPPER}`},o.createElement("div",{className:`${u.HMI_COMPONENT_CLASS} valve__mp`},f.map((({value:e,index:t,key:a})=>o.createElement(l.default,{itemClassName:e+" "+(0,r.getValveMpItemClassName)(t,m),key:a})))))))},popover:({anchorEl:e})=>{const{valveProps:a,componentProps:n}=(0,t.useValveContext)("Popover"),{showLabel:l,labelPosition:i,processObject:u}=a,{status:c}=u||s.processObjectProps;if(!l)return null;const{position:p}=n;let d="itemId popover position-left";return i&&(d=(0,r.getItemIdPositionClassName)(d,i)),o.createElement("div",{className:d,style:{top:p.y,left:p.x}},o.createElement("div",{style:{padding:8}},null==c?void 0:c.itemName))}}},746:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=a(697);t.default=function(e){return"string"==typeof e&&n.default.test(e)}},770:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=a(746);t.default=function(e){if(!(0,n.default)(e))throw TypeError("Invalid UUID");return parseInt(e.slice(14,15),16)}},779:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const a="undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto);t.default={randomUUID:a}},797:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=a(746);t.default=function(e){if(!(0,n.default)(e))throw TypeError("Invalid UUID");let t;return Uint8Array.of((t=parseInt(e.slice(0,8),16))>>>24,t>>>16&255,t>>>8&255,255&t,(t=parseInt(e.slice(9,13),16))>>>8,255&t,(t=parseInt(e.slice(14,18),16))>>>8,255&t,(t=parseInt(e.slice(19,23),16))>>>8,255&t,(t=parseInt(e.slice(24,36),16))/1099511627776&255,t/4294967296&255,t>>>24&255,t>>>16&255,t>>>8&255,255&t)}},829:(e,t)=>{"use strict";function a(e,t,a,n){switch(e){case 0:return t&a^~t&n;case 1:case 3:return t^a^n;case 2:return t&a^t&n^a&n}}function n(e,t){return e<<t|e>>>32-t}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){const t=[1518500249,1859775393,2400959708,3395469782],o=[1732584193,4023233417,2562383102,271733878,3285377520],r=new Uint8Array(e.length+1);r.set(e),r[e.length]=128;const l=(e=r).length/4+2,i=Math.ceil(l/16),s=new Array(i);for(let t=0;t<i;++t){const a=new Uint32Array(16);for(let n=0;n<16;++n)a[n]=e[64*t+4*n]<<24|e[64*t+4*n+1]<<16|e[64*t+4*n+2]<<8|e[64*t+4*n+3];s[t]=a}s[i-1][14]=8*(e.length-1)/Math.pow(2,32),s[i-1][14]=Math.floor(s[i-1][14]),s[i-1][15]=8*(e.length-1)&4294967295;for(let e=0;e<i;++e){const r=new Uint32Array(80);for(let t=0;t<16;++t)r[t]=s[e][t];for(let e=16;e<80;++e)r[e]=n(r[e-3]^r[e-8]^r[e-14]^r[e-16],1);let l=o[0],i=o[1],u=o[2],c=o[3],p=o[4];for(let e=0;e<80;++e){const o=Math.floor(e/20),s=n(l,5)+a(o,i,u,c)+p+t[o]+r[e]>>>0;p=c,c=u,u=n(i,30)>>>0,i=l,l=s}o[0]=o[0]+l>>>0,o[1]=o[1]+i>>>0,o[2]=o[2]+u>>>0,o[3]=o[3]+c>>>0,o[4]=o[4]+p>>>0}return Uint8Array.of(o[0]>>24,o[0]>>16,o[0]>>8,o[0],o[1]>>24,o[1]>>16,o[1]>>8,o[1],o[2]>>24,o[2]>>16,o[2]>>8,o[2],o[3]>>24,o[3]>>16,o[3]>>8,o[3],o[4]>>24,o[4]>>16,o[4]>>8,o[4])}},838:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ParameterListComponentMeta=t.ParameterListComponent=t.COMPONENT_TYPE=void 0;const n=a(883),o=a(921),r=[{label:{text:"text"},input:{value:null,placeholder:"Enter a Number"}}];t.COMPONENT_TYPE=o.PARAMETER_LIST_COMPONENT_TYPE,t.ParameterListComponent=e=>{const a=n.useMemo((()=>{const{parameters:t}=e.props||r;return t}),[e.props.parameters]),{emit:l}=e;return n.createElement("div",Object.assign({},l({classes:[`${o.IA_SYMBOL_COMPONENT_COLUMN}`]}),{"data-component":t.COMPONENT_TYPE}),n.createElement("div",{className:`${o.IA_SYMBOL_COMPONENT_ROW}`},n.createElement("div",{className:`${o.IA_SYMBOL_COMPONENT_WRAPPER}`},n.createElement("div",{className:`${o.HMI_COMPONENT_CLASS} parameter-list`},a.map(((t,a)=>{const{label:o,input:r}=t;return n.createElement("label",{key:`${o.text}-parameter${a}`,className:"field small"},n.createElement("span",{className:"label"},o.text),n.createElement("span",{className:"eu"},r.eu),n.createElement("input",{type:"text",id:`${o.text}-parameter${a}`,inputMode:r.inputmode,pattern:r.pattern||"[0-9]*",placeholder:r.placeholder,disabled:!r.editable,min:r.min,max:r.max,value:r.value,onChange:t=>{e.store.props.write(`parameters[${a}].input.value`,t.currentTarget.value)}}))}))))))},t.ParameterListComponentMeta=class{getComponentType(){return t.COMPONENT_TYPE}getDefaultSize(){return{width:240,height:240}}getPropsReducer(e){return{parameters:e.read("parameters",[{label:{text:"label",className:"",tooltipText:"",tooltipPosition:"",tooltipClassName:"",tooltipId:""},input:{type:"text",inputmode:"numeric",placeholder:"Enter a number",editable:!0,pattern:"^[0-9]*[.,]?[0-9]*$",min:0,max:100,decimalPlaces:2,eu:"µC",value:0}}])}}getViewComponent(){return t.ParameterListComponent}}},863:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CommandValveMpMeta=t.CommandValveMp=t.COMPONENT_TYPE=void 0;const n=a(883),o=a(883),r=a(511),l=a(921);t.COMPONENT_TYPE=l.COMMAND_VALVE_MP_COMPONENT_TYPE,t.CommandValveMp=e=>{var a;const{state:i,reducer:s}=(0,r.useValveMpCommandReducer)(),{emit:u}=e;(0,o.useEffect)((()=>{const t=e.store.props.subscribe((e=>{var t,a,n,o;const r=e.read("command"),{main:l,upperSeat:u,lowerSeat:c,available:p}=r;(null===(t=i.command)||void 0===t?void 0:t.available)&&p&&(p.main!==i.command.available.main&&s.updateMainAvailable(!!p.main),p.upperSeat!==i.command.available.upperSeat&&s.updateUpperSeatAvailable(!!p.upperSeat),p.lowerSeat!==i.command.available.lowerSeat&&s.updateLowerSeatAvailable(!!p.lowerSeat)),(null===(a=i.command)||void 0===a?void 0:a.main)&&l&&(l.autoManual!==i.command.main.autoManual&&s.updateAutoManSelection(l.autoManual?"manual":"auto"),l.activation!==i.command.main.activation&&(l.activation?l.activation&&s.updateMainManualOn():s.updateMainManualOff())),(null===(n=i.command)||void 0===n?void 0:n.lowerSeat)&&c&&c.activation!==i.command.lowerSeat.activation&&(c.activation?c.activation&&s.updateLslManualOn():s.updateLslManualOff()),(null===(o=i.command)||void 0===o?void 0:o.upperSeat)&&u&&u.activation!==i.command.upperSeat.activation&&(u.activation?u.activation&&s.updateUslManualOn():s.updateUslManualOff())}));return()=>{"function"==typeof t&&t()}}),[e.store.props]);const{main:c,upperSeat:p,lowerSeat:d,available:m}=null!==(a=i.command)&&void 0!==a?a:{};console.log(`Command Props: ${JSON.stringify(i.command,null,2)}`),console.log(`Main Avail: ${JSON.stringify(null==m?void 0:m.main,null,2)}`),console.log(`Command Props: ${JSON.stringify(null==m?void 0:m.upperSeat,null,2)}`),console.log(`Command Props: ${JSON.stringify(null==m?void 0:m.lowerSeat,null,2)}`);const f=t=>{var a,n;s.updateAutoManSelection(t),"auto"===t?null===(a=e.store.props)||void 0===a||a.write("command.main.autoManual",!1):"manual"===t&&(null===(n=e.store.props)||void 0===n||n.write("command.main.autoManual",!0))};return n.createElement("div",Object.assign({},u({classes:[`${l.IA_SYMBOL_COMPONENT_COLUMN}`]}),{"data-component":t.COMPONENT_TYPE}),n.createElement("div",{className:`${l.IA_SYMBOL_COMPONENT_ROW}`},n.createElement("div",{className:`${l.IA_SYMBOL_COMPONENT_WRAPPER}`},n.createElement("div",{className:`${l.HMI_COMPONENT_CLASS} command-valve-mp`},n.createElement("label",{className:"main-label"},null==c?void 0:c.label),n.createElement("div",{role:"group",className:"button-group outlined main-auto-manual"},n.createElement("button",{className:"button outlined "+((null==c?void 0:c.autoManual)?"":"selected"),disabled:!(null==m?void 0:m.main),onClick:()=>f("auto")},"Auto "),n.createElement("button",{className:"button outlined "+((null==c?void 0:c.autoManual)?"selected":""),disabled:!(null==m?void 0:m.main),onClick:()=>f("manual")},"Manual")),n.createElement("div",{role:"group",className:"button-group outlined main-on-off"},n.createElement("button",{className:"button outlined "+((null==c?void 0:c.activation)?"selected":""),disabled:!(null==m?void 0:m.main)||!(null==c?void 0:c.autoManual),onClick:()=>{var t;s.updateMainManualOn(),null===(t=e.store.props)||void 0===t||t.write("command.main.activation",!0)}},"On "),n.createElement("button",{className:"button outlined "+((null==c?void 0:c.activation)?"":"selected"),disabled:!(null==m?void 0:m.main)||!(null==c?void 0:c.autoManual),onClick:()=>{var t;s.updateMainManualOff(),null===(t=e.store.props)||void 0===t||t.write("command.main.activation",!1)}},"Off")),n.createElement("label",{className:"upper-seat-label"},null==p?void 0:p.label),n.createElement("div",{role:"group",className:"button-group outlined upper-seat-on-off"},n.createElement("button",{className:"button outlined "+((null==p?void 0:p.activation)?"selected":""),disabled:!(null==m?void 0:m.upperSeat)||!(null==c?void 0:c.autoManual),onClick:()=>{var t;s.updateUslManualOn(),null===(t=e.store.props)||void 0===t||t.write("command.upperSeat.activation",!0)}},"On "),n.createElement("button",{className:"button outlined "+((null==p?void 0:p.activation)?"":"selected"),disabled:!(null==m?void 0:m.upperSeat)||!(null==c?void 0:c.autoManual),onClick:()=>{var t;s.updateUslManualOff(),null===(t=e.store.props)||void 0===t||t.write("command.upperSeat.activation",!1)}},"Off")),n.createElement("label",{className:"lower-seat-label"},null==d?void 0:d.label),n.createElement("div",{role:"group",className:"button-group outlined lower-seat-on-off"},n.createElement("button",{className:"button outlined "+((null==d?void 0:d.activation)?"selected":""),disabled:!(null==m?void 0:m.lowerSeat)||!(null==c?void 0:c.autoManual),onClick:()=>{var t;s.updateLslManualOn(),null===(t=e.store.props)||void 0===t||t.write("command.lowerSeat.activation",!0)}},"On "),n.createElement("button",{className:"button outlined "+((null==d?void 0:d.activation)?"":"selected"),disabled:!(null==m?void 0:m.lowerSeat)||!(null==c?void 0:c.autoManual),onClick:()=>{var t;s.updateLslManualOff(),null===(t=e.store.props)||void 0===t||t.write("command.lowerSeat.activation",!1)},value:"true"},"Off"))))))},t.CommandValveMpMeta=class{getComponentType(){return t.COMPONENT_TYPE}getViewComponent(){return t.CommandValveMp}getDefaultSize(){return{width:280,height:140}}getPropsReducer(e){return{command:{available:{main:e.readBoolean("command.available.main"),upperSeat:e.readBoolean("command.available.upperSeat"),lowerSeat:e.readBoolean("command.available.lowerSeat")},main:{label:e.readString("commands.main.label",""),autoManual:e.readBoolean("command.main.autoManual",!1),activation:e.readBoolean("command.main.activation",!1)},upperSeat:{label:e.readString("commands.upperSeat.label",""),activation:e.readBoolean("command.upperSeat.activation",!1)},lowerSeat:{label:e.readString("commands.lowerSeat.label",""),activation:e.readBoolean("command.lowerSeat.activation",!1)}}}}}},869:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PumpMeta=t.Pump=t.COMPONENT_TYPE=void 0;const n=a(883),o=a(377),r=a(441),l=a(390);t.COMPONENT_TYPE="hmi.process_objects.Pump";class i extends o.Component{constructor(e){var t;super(e),this.processObject=(null===(t=this.props.props.processObject)||void 0===t?void 0:t.status)||l.pumpInitialStatus,this.status=this.processObject,this.showLabel=this.props.props.showLabel||!1,this.labelPosition=this.props.props.labelPosition||"left",this.onActionPerformed=()=>{this.props.eventsEnabled?(console.log("Valve clicked!"),this.props.componentEvents.fireComponentEvent("onActionPerformed",{})):console.log("Valve is disabled in the design-scope")},this.valveRef=n.createRef()}componentDidMount(){}render(){return n.createElement(r.PumpCompound.Root,{componentProps:this.props,pumpProps:this.props.props,onActionPerformed:this.onActionPerformed},n.createElement(r.PumpCompound.pump,null),n.createElement(r.PumpCompound.popover,{anchorEl:this.valveRef.current}))}}t.Pump=i,t.PumpMeta=class{getComponentType(){return t.COMPONENT_TYPE}getViewComponent(){return i}getDefaultSize(){return{width:36,height:36}}getPropsReducer(e){return{pumpType:e.readString("pumpType","centrifugal"),processObject:{status:{alarm:e.readBoolean("processObject.status.alarm",!1),actFB:e.readBoolean("processObject.status.actFB",!1),deActFB:e.readBoolean("processObject.status.deActFB",!1),itemName:e.readString("processObject.status.itemName",""),manual:e.readBoolean("processObject.status.manual",!1),masked:e.readBoolean("processObject.status.masked",!1),changing:e.readBoolean("processObject.status.changing",!1),locate:e.readBoolean("processObject.status.locate",!1)}},showLabel:e.readBoolean("showLabel",!1),labelPosition:e.readString("labelPosition","top-left")}}}},872:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.StatusValveMpMeta=t.StatusValveMp=t.COMPONENT_TYPE=void 0;const n=a(883),o=a(921);t.COMPONENT_TYPE=o.STATUS_COMPONENT_TYPE,t.StatusValveMp=e=>{const{emit:a}=e,{statusItems:r}=e.props;return n.createElement("div",Object.assign({},a({classes:[`${o.IA_SYMBOL_COMPONENT_COLUMN}`]}),{"data-component":t.COMPONENT_TYPE}),n.createElement("div",{className:`${o.IA_SYMBOL_COMPONENT_ROW}`},n.createElement("div",{className:`${o.IA_SYMBOL_COMPONENT_WRAPPER}`},n.createElement("div",{className:`${o.HMI_COMPONENT_CLASS} status`},n.createElement("ul",{className:"list bordered dense"},r.map(((e,t)=>n.createElement("li",{key:t},n.createElement("label",{className:"checkbox"},n.createElement("div",{className:"text"},n.createElement("p",{className:"x-small "+(e.lowlight?"low-light":"")},e.label)),n.createElement("div",{className:"end"},n.createElement("input",{name:"checkbox",id:`checkbox-${t}`,type:"checkbox",checked:e.status,readOnly:!0})))))))))))},t.StatusValveMpMeta=class{getComponentType(){return t.COMPONENT_TYPE}getViewComponent(){return t.StatusValveMp}getDefaultSize(){return{width:240,height:32}}getPropsReducer(e){return console.log(`status ${e.read("status")}`),{statusItems:e.readArray("status",[])}}}},883:e=>{"use strict";e.exports=t},921:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hxElements=t.HX_COMPONENT_TYPE=t.COMMAND_VALVE_MP_COMPONENT_TYPE=t.PARAMETER_LIST_COMPONENT_TYPE=t.STATUS_COMPONENT_TYPE=t.PUMP_COMPONENT_TYPE=t.VALVE_COMPONENT_TYPE=t.HMI_COMPONENT_CLASS=t.IA_SYMBOL_COMPONENT_WRAPPER=t.IA_SYMBOL_COMPONENT_ROW=t.IA_SYMBOL_COMPONENT_COLUMN=void 0;const n=a(405),o=a(445);t.IA_SYMBOL_COMPONENT_COLUMN="ia_symbolComponent ia_symbolComponent__column",t.IA_SYMBOL_COMPONENT_ROW="ia_symbolComponent__row",t.IA_SYMBOL_COMPONENT_WRAPPER="ia_symbolComponent__wrapper",t.HMI_COMPONENT_CLASS="hmi-component",t.VALVE_COMPONENT_TYPE="hmi.process_objects.Valve",t.PUMP_COMPONENT_TYPE="hmi.process_objects.Pump",t.STATUS_COMPONENT_TYPE="hmi.display.StatusValveMp",t.PARAMETER_LIST_COMPONENT_TYPE="hmi.input.ParameterList",t.COMMAND_VALVE_MP_COMPONENT_TYPE="hmi.input.CommandValveMp",t.HX_COMPONENT_TYPE="hmi.process_objects.HeatExchanger",t.hxElements=[{baseClass:(0,o.getHxModeClassNames)("plate",n.HxModes.heating)},{statusKey:{actFB:{trueString:"activated"}}},{statusKey:{deActFB:{trueString:"deactivated"}}},{statusKey:{alarm:{trueString:"alarm"}}}]},973:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ValveMeta=t.Valve=t.COMPONENT_TYPE=void 0;const n=a(883),o=a(377),r=a(740),l=a(390);t.COMPONENT_TYPE="hmi.process_objects.Valve_mp";class i extends o.Component{constructor(e){super(e),this.processObject=this.props.props.processObject||l.processObjectProps,this.status=this.processObject.status,this.showLabel=this.props.props.showLabel||!1,this.labelPosition=this.props.props.labelPosition||"left",this.onActionPerformed=()=>{this.props.eventsEnabled?(console.log("Valve clicked!"),this.props.componentEvents.fireComponentEvent("onActionPerformed",{})):console.log("Valve is disabled in the design-scope")},this.valveRef=n.createRef()}componentDidMount(){}render(){return n.createElement(r.ValveMpCompound.Root,{componentProps:this.props,valveProps:this.props.props,onActionPerformed:this.onActionPerformed},n.createElement(r.ValveMpCompound.valve,null),n.createElement(r.ValveMpCompound.popover,{anchorEl:this.valveRef.current}))}}t.Valve=i,t.ValveMeta=class{getComponentType(){return t.COMPONENT_TYPE}getViewComponent(){return i}getDefaultSize(){return{width:20,height:40}}getPropsReducer(e){return console.log(`itemName: ${e.readString("processObject.status.itemName")} showLabel ${e.readBoolean("showLabel")}`),{processObject:{status:{alarm:e.readBoolean("processObject.status.alarm",!1),actFB:e.readBoolean("processObject.status.actFB",!1),deActFB:e.readBoolean("processObject.status.deActFB",!1),activatedConfig:e.readNumber("processObject.status.activatedConfig",511),deactivatedConfig:e.readNumber("processObject.status.deactivatedConfig",4095),itemName:e.readString("processObject.status.itemName",""),manual:e.readBoolean("processObject.status.manual",!1),masked:e.readBoolean("processObject.status.masked",!1),changing:e.readBoolean("processObject.status.changing",!1),locate:e.readBoolean("processObject.status.locate",!1),usl:e.readBoolean("processObject.status.usl",!1),lsl:e.readBoolean("processObject.status.lsl",!1)}},showLabel:e.readBoolean("showLabel",!1),labelPosition:e.readString("labelPosition","top-left")}}}},988:(e,t,a)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=t.stringToBytes=void 0;const n=a(797),o=a(11);function r(e){e=unescape(encodeURIComponent(e));const t=new Uint8Array(e.length);for(let a=0;a<e.length;++a)t[a]=e.charCodeAt(a);return t}t.stringToBytes=r,t.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",t.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",t.default=function(e,t,a,l,i,s){const u="string"==typeof a?r(a):a,c="string"==typeof l?(0,n.default)(l):l;if("string"==typeof l&&(l=(0,n.default)(l)),16!==l?.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");let p=new Uint8Array(16+u.length);if(p.set(c),p.set(u,c.length),p=t(p),p[6]=15&p[6]|e,p[8]=63&p[8]|128,i){s=s||0;for(let e=0;e<16;++e)i[s+e]=p[e];return i}return(0,o.unsafeStringify)(p)}}},n={};function o(e){var t=n[e];if(void 0!==t)return t.exports;var r=n[e]={exports:{}};return a[e].call(r.exports,r,r.exports,o),r.exports}o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};return(()=>{"use strict";var e=r;Object.defineProperty(e,"__esModule",{value:!0}),e.StatusValveMp=e.CommandValveMp=e.ParameterListComponent=e.HeatExchanger=e.Pump=e.Valve=void 0;const t=o(377),a=o(973);Object.defineProperty(e,"Valve",{enumerable:!0,get:function(){return a.Valve}});const n=o(869);Object.defineProperty(e,"Pump",{enumerable:!0,get:function(){return n.Pump}});const l=o(570);Object.defineProperty(e,"HeatExchanger",{enumerable:!0,get:function(){return l.HeatExchanger}});const i=o(838);Object.defineProperty(e,"ParameterListComponent",{enumerable:!0,get:function(){return i.ParameterListComponent}});const s=o(863);Object.defineProperty(e,"CommandValveMp",{enumerable:!0,get:function(){return s.CommandValveMp}});const u=o(872);Object.defineProperty(e,"StatusValveMp",{enumerable:!0,get:function(){return u.StatusValveMp}}),o(702),[new a.ValveMeta,new n.PumpMeta,new l.HeatExchangerMeta,new i.ParameterListComponentMeta,new s.CommandValveMpMeta,new u.StatusValveMpMeta].forEach((e=>t.ComponentRegistry.register(e)))})(),r})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,